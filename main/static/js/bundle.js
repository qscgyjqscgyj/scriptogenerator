/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/static/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _react = __webpack_require__(1);var React = _interopRequireWildcard(_react);
	var _reactDom = __webpack_require__(158);var ReactDOM = _interopRequireWildcard(_reactDom);
	var _reactRouter = __webpack_require__(159);
	var _history = __webpack_require__(208);

	var _scripts = __webpack_require__(213);
	var _projects = __webpack_require__(258);
	var _tables = __webpack_require__(260);
	var _table = __webpack_require__(264);
	var _app = __webpack_require__(433);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}

	ReactDOM.render(
	React.createElement(_reactRouter.Router, { history: (0, _history.createHashHistory)({ queryKey: false }) },
	    React.createElement(_reactRouter.Route, { path: '/', component: _app.AppWrapper },
	        React.createElement(_reactRouter.IndexRoute, { component: _scripts.Scripts }),
	        React.createElement(_reactRouter.Route, { path: '/projects', component: _projects.Projects }),

	        React.createElement(_reactRouter.Route, { path: '/scripts/user', component: _scripts.Scripts }),
	        React.createElement(_reactRouter.Route, { path: '/scripts/available', component: _scripts.AvailableScripts }),

	        React.createElement(_reactRouter.Route, { path: '/tables/:script', component: _tables.Tables }),
	        React.createElement(_reactRouter.Route, { path: '/tables/:script/available', component: _tables.AvailableTables }),

	        React.createElement(_reactRouter.Route, { path: '/tables/:script/table/:table/edit', component: _table.TableEdit }),
	        React.createElement(_reactRouter.Route, { path: '/tables/:script/table/:table/link/:link/edit', component: _table.TableEdit }),

	        React.createElement(_reactRouter.Route, { path: '/tables/:script/table/:table/share', component: _table.TableShare }),
	        React.createElement(_reactRouter.Route, { path: '/tables/:script/table/:table/link/:link/share', component: _table.TableShare }))),


	document.getElementById('content'));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(2);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(3);
	var ReactDOMServer = __webpack_require__(148);
	var ReactIsomorphic = __webpack_require__(152);

	var assign = __webpack_require__(39);
	var deprecated = __webpack_require__(157);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup) });


	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactDefaultInjection = __webpack_require__(71);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(54);
	var ReactVersion = __webpack_require__(146);

	var findDOMNode = __webpack_require__(91);
	var renderSubtreeIntoContainer = __webpack_require__(147);
	var warning = __webpack_require__(25);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer };


	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent });

	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(9);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict'; // shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout() {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	})();
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while (len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () {return '/';};
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function () {return 0;};

/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	               * Keeps track of the current owner.
	               *
	               * The current owner is the component who should own any components that are
	               * currently being constructed.
	               */
	var ReactCurrentOwner = {

	  /**
	                           * @internal
	                           * @type {ReactComponent}
	                           */
	  current: null };



	module.exports = ReactCurrentOwner;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactMount = __webpack_require__(28);

	var assign = __webpack_require__(39);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setTextContent = __webpack_require__(20);
	var validateDOMNesting = __webpack_require__(70);

	/**
	                                                           * Text nodes violate a couple assumptions that React makes about components:
	                                                           *
	                                                           *  - When mounting text into the DOM, adjacent text nodes are merged.
	                                                           *  - Text nodes cannot be assigned a React root ID.
	                                                           *
	                                                           * This component is used to wrap strings in elements so that they can undergo
	                                                           * the same reconciliation that is applied to elements.
	                                                           *
	                                                           * TODO: Investigate representing React components in the DOM with text nodes.
	                                                           *
	                                                           * @class ReactDOMTextComponent
	                                                           * @extends ReactComponent
	                                                           * @internal
	                                                           */
	var ReactDOMTextComponent = function ReactDOMTextComponent(props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	                                           * @param {ReactText} text
	                                           * @internal
	                                           */
	  construct: function construct(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	      * Creates the markup for this text node. This node is not intended to have
	      * any features besides containing text content.
	      *
	      * @param {string} rootID DOM ID of the root node.
	      * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	      * @return {string} Markup for this text node.
	      * @internal
	      */
	  mountComponent: function mountComponent(rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	      * Updates this component by updating the text content.
	      *
	      * @param {ReactText} nextText The next text content
	      * @param {ReactReconcileTransaction} transaction
	      * @internal
	      */
	  receiveComponent: function receiveComponent(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function unmountComponent() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  } });



	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(8);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);
	var ReactPerf = __webpack_require__(18);

	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var invariant = __webpack_require__(13);

	/**
	                                                * Inserts `childNode` as a child of `parentNode` at the `index`.
	                                                *
	                                                * @param {DOMElement} parentNode Parent node in which to insert.
	                                                * @param {DOMElement} childNode Child node to insert.
	                                                * @param {number} index Index at which to insert the child.
	                                                * @internal
	                                                */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	   * Operations for updating with DOM children.
	   */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	                                      * Updates a component's children by processing a series of updates. The
	                                      * update configurations are each expected to have a `parentNode` property.
	                                      *
	                                      * @param {array<object>} updates List of update configurations.
	                                      * @param {array<string>} markupList List of markup strings.
	                                      * @internal
	                                      */
	  processUpdates: function processUpdates(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;}

	    }
	  } };



	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent' });


	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var createNodesFromMarkup = __webpack_require__(10);
	var emptyFunction = __webpack_require__(15);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	                                              * Extracts the `nodeName` from a string of markup.
	                                              *
	                                              * NOTE: Extracting the `nodeName` does not require a regular expression match
	                                              * because we make assumptions about React-generated markup (i.e. there are no
	                                              * spaces surrounding the opening tag and there is at least one attribute).
	                                              *
	                                              * @param {string} markup String of markup.
	                                              * @return {string} Node name of the supplied markup.
	                                              * @see http://jsperf.com/extract-nodename
	                                              */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	                * Renders markup into an array of nodes. The markup is expected to render
	                * into a list of root nodes. Also, the length of `resultList` and
	                * `markupList` should be the same.
	                *
	                * @param {array<string>} markupList List of markup strings to render.
	                * @return {array<DOMElement>} List of rendered nodes.
	                * @internal
	                */
	  dangerouslyRenderMarkup: function dangerouslyRenderMarkup(markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	      * Replaces a node with a string of markup at its current position within its
	      * parent. The markup must render into a single root node.
	      *
	      * @param {DOMElement} oldChild Child node to replace.
	      * @param {string} markup Markup to render in place of the child node.
	      * @internal
	      */
	  dangerouslyReplaceNodeWithMarkup: function dangerouslyReplaceNodeWithMarkup(oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  } };



	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	                                                                                                        * Simple, lightweight module assisting with the detection and context of
	                                                                                                        * Worker. Helps avoid circular dependencies and allows code to reason about
	                                                                                                        * whether or not they are in a Worker, even if they never include the main
	                                                                                                        * `ReactWorker` dependency.
	                                                                                                        */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	};


	module.exports = ExecutionEnvironment;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var createArrayFromMixed = __webpack_require__(11);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);

	/**
	                                         * Dummy container used to render all markup.
	                                         */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	                                                                                        * Pattern used by `getNodeName`.
	                                                                                        */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	                                     * Extracts the `nodeName` of the first element in a string of markup.
	                                     *
	                                     * @param {string} markup String of markup.
	                                     * @return {?string} Node name of the supplied markup.
	                                     */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	   * Creates an array containing the nodes rendered from the supplied markup. The
	   * optionally supplied `handleScript` function will be invoked once for each
	   * <script> element that is rendered. If no `handleScript` function is supplied,
	   * an exception is thrown if any <script> elements are rendered.
	   *
	   * @param {string} markup A string of valid HTML markup.
	   * @param {?function} handleScript Invoked once for each rendered <script>.
	   * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	   */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var toArray = __webpack_require__(12);

	/**
	                                     * Perform a heuristic test to determine if an object is "array-like".
	                                     *
	                                     *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	                                     *   Joshu replied: "Mu."
	                                     *
	                                     * This function determines if its argument has "array nature": it returns
	                                     * true if the argument is an actual array, an `arguments' object, or an
	                                     * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	                                     *
	                                     * It will return false for other array-like objects like Filelist.
	                                     *
	                                     * @param {*} obj
	                                     * @return {boolean}
	                                     */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj));

	}

	/**
	   * Ensure that the argument is an array by wrapping it in an array if it is not.
	   * Creates a copy of the argument if it is already an array.
	   *
	   * This is mostly useful idiomatically:
	   *
	   *   var createArrayFromMixed = require('createArrayFromMixed');
	   *
	   *   function takesOneOrMoreThings(things) {
	   *     things = createArrayFromMixed(things);
	   *     ...
	   *   }
	   *
	   * This allows you to treat `things' as an array, but accept scalars in the API.
	   *
	   * If you need to convert an array-like object, like `arguments`, into an array
	   * use toArray instead.
	   *
	   * @param {*} obj
	   * @return {array}
	   */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var invariant = __webpack_require__(13);

	/**
	                                         * Convert array-like objects to arrays.
	                                         *
	                                         * This API assumes the caller knows the contents of the data type. For less
	                                         * well defined inputs use createArrayFromMixed.
	                                         *
	                                         * @param {object|function|filelist} obj
	                                         * @return {array}
	                                         */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	               * Use invariant() to assert state which your program assumes to be true.
	               *
	               * Provide sprintf-style format (only %s is supported) and arguments
	               * to provide information about what broke and what you were
	               * expecting.
	               *
	               * The invariant message will be stripped in production, but the invariant
	               * will remain to ensure logic does not differ in production.
	               */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var invariant = __webpack_require__(13);

	/**
	                                         * Dummy container used to detect which wraps are necessary.
	                                         */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	                                                                                        * Some browsers cannot use `innerHTML` to render certain elements standalone,
	                                                                                        * so we wrap them, render the wrapped nodes, then extract the desired node.
	                                                                                        *
	                                                                                        * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	                                                                                        */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap };


	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	     * Gets the markup wrap configuration for the supplied `nodeName`.
	     *
	     * NOTE: This lazily detects which wraps are necessary for the current browser.
	     *
	     * @param {string} nodeName Lowercase `nodeName`.
	     * @return {?array} Markup wrap configuration, if applicable.
	     */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	   * This function accepts and discards inputs; it has no side effects. This is
	   * primarily useful idiomatically for overridable function endpoints which
	   * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	   */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	/**
	                                                * When a component's children are updated, a series of update configuration
	                                                * objects are created in order to batch and serialize the required changes.
	                                                *
	                                                * Enumerates all the possible types of update configurations.
	                                                *
	                                                * @internal
	                                                */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null });


	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	                                         * Constructs an enumeration with keys equal to their value.
	                                         *
	                                         * For example:
	                                         *
	                                         *   var COLORS = keyMirror({blue: null, red: null});
	                                         *   var myColor = COLORS.blue;
	                                         *   var isColorValid = !!COLORS[myColor];
	                                         *
	                                         * The last line could not be performed if the values of the generated enum were
	                                         * not equal to their keys.
	                                         *
	                                         *   Input:  {key1: val1, key2: val2}
	                                         *   Output: {key1: key1, key2: key2}
	                                         *
	                                         * @param {object} obj
	                                         * @return {object}
	                                         */
	var keyMirror = function keyMirror(obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	               * ReactPerf is a general AOP system designed to measure performance. This
	               * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	               */
	var ReactPerf = {
	  /**
	                   * Boolean to enable/disable measurement. Set to false by default to prevent
	                   * accidental logging and perf loss.
	                   */
	  enableMeasure: false,

	  /**
	                         * Holds onto the measure function in use. By default, don't measure
	                         * anything, but we'll override this if we inject a measure function.
	                         */
	  storedMeasure: _noMeasure,

	  /**
	                              * @param {object} object
	                              * @param {string} objectName
	                              * @param {object<string>} methodNames
	                              */
	  measureMethods: function measureMethods(object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	      * Use this to wrap methods you want to measure. Zero overhead in production.
	      *
	      * @param {string} objName
	      * @param {string} fnName
	      * @param {function} func
	      * @return {function}
	      */
	  measure: function measure(objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function wrapper() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	                * @param {function} measure
	                */
	    injectMeasure: function injectMeasure(measure) {
	      ReactPerf.storedMeasure = measure;
	    } } };



	/**
	            * Simply passes through the measured function, without measuring it.
	            *
	            * @param {string} objName
	            * @param {string} fnName
	            * @param {function} func
	            * @return {function}
	            */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	                                                                               * Set the innerHTML property of a node, ensuring that whitespace is preserved
	                                                                               * even in IE8.
	                                                                               *
	                                                                               * @param {DOMElement} node
	                                                                               * @param {string} html
	                                                                               * @internal
	                                                                               */
	var setInnerHTML = function setInnerHTML(node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function setInnerHTML(node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function setInnerHTML(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setInnerHTML = __webpack_require__(19);

	/**
	                                               * Set the textContent property of a node, ensuring that whitespace is preserved
	                                               * even in IE8. innerText is a poor substitute for textContent and, among many
	                                               * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	                                               * as it should.
	                                               *
	                                               * @param {DOMElement} node
	                                               * @param {string} text
	                                               * @internal
	                                               */
	var setTextContent = function setTextContent(node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function setTextContent(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;' };


	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	   * Escapes text to prevent scripting attacks.
	   *
	   * @param {*} text Text value to escape.
	   * @return {string} An escaped string.
	   */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactPerf = __webpack_require__(18);

	var quoteAttributeValueForBrowser = __webpack_require__(24);
	var warning = __webpack_require__(25);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true };

	  var warnedProperties = {};

	  var warnUnknownProperty = function warnUnknownProperty(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	   * Operations for dealing with DOM properties.
	   */
	var DOMPropertyOperations = {

	  /**
	                               * Creates markup for the ID property.
	                               *
	                               * @param {string} id Unescaped ID.
	                               * @return {string} Markup string.
	                               */
	  createMarkupForID: function createMarkupForID(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function setAttributeForID(node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	      * Creates markup for a property.
	      *
	      * @param {string} name
	      * @param {*} value
	      * @return {?string} Markup string, or null if the property was invalid.
	      */
	  createMarkupForProperty: function createMarkupForProperty(name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	      * Creates markup for a custom property.
	      *
	      * @param {string} name
	      * @param {*} value
	      * @return {string} Markup string, or empty string if the property was invalid.
	      */
	  createMarkupForCustomAttribute: function createMarkupForCustomAttribute(name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	      * Sets the value for a property on a node.
	      *
	      * @param {DOMElement} node
	      * @param {string} name
	      * @param {*} value
	      */
	  setValueForProperty: function setValueForProperty(node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function setValueForAttribute(node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	      * Deletes the value for a property on a node.
	      *
	      * @param {DOMElement} node
	      * @param {string} name
	      */
	  deleteValueForProperty: function deleteValueForProperty(node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  } };



	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty' });


	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	                              * Mapping from normalized, camelcased property names to a configuration that
	                              * specifies how the associated DOM property should be accessed or rendered.
	                              */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	                                       * Inject some specialized knowledge about the DOM. This takes a config object
	                                       * with the following properties:
	                                       *
	                                       * isCustomAttribute: function that given an attribute name will return true
	                                       * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	                                       * attributes where it's impossible to enumerate all of the possible
	                                       * attribute names,
	                                       *
	                                       * Properties: object mapping DOM property name to one of the
	                                       * DOMPropertyInjection constants or null. If your attribute isn't in here,
	                                       * it won't get written to the DOM.
	                                       *
	                                       * DOMAttributeNames: object mapping React attribute name to the DOM
	                                       * attribute name. Attribute names not specified use the **lowercase**
	                                       * normalized name.
	                                       *
	                                       * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	                                       * attribute namespace URL. (Attribute names not specified use no namespace.)
	                                       *
	                                       * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	                                       * Property names not specified use the normalized name.
	                                       *
	                                       * DOMMutationMethods: Properties that require special mutation methods. If
	                                       * `value` is undefined, the mutation method should unset the property.
	                                       *
	                                       * @param {object} domPropertyConfig the config as described above.
	                                       */
	  injectDOMPropertyConfig: function injectDOMPropertyConfig(domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE) };


	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  } };

	var defaultValueCache = {};

	/**
	                             * DOMProperty exports lookup objects that can be used like functions:
	                             *
	                             *   > DOMProperty.isValid['id']
	                             *   true
	                             *   > DOMProperty.isValid['foobar']
	                             *   undefined
	                             *
	                             * Although this may be confusing, it performs better in general.
	                             *
	                             * @see http://jsperf.com/key-exists
	                             * @see http://jsperf.com/key-missing
	                             */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	                                      * Map from property "standard name" to an object with info about how to set
	                                      * the property in the DOM. Each object contains:
	                                      *
	                                      * attributeName:
	                                      *   Used when rendering markup or with `*Attribute()`.
	                                      * attributeNamespace
	                                      * propertyName:
	                                      *   Used on DOM node instances. (This includes properties that mutate due to
	                                      *   external factors.)
	                                      * mutationMethod:
	                                      *   If non-null, used instead of the property or `setAttribute()` after
	                                      *   initial render.
	                                      * mustUseAttribute:
	                                      *   Whether the property must be accessed and mutated using `*Attribute()`.
	                                      *   (This includes anything that fails `<propName> in <element>`.)
	                                      * mustUseProperty:
	                                      *   Whether the property must be accessed and mutated as an object property.
	                                      * hasSideEffects:
	                                      *   Whether or not setting a value causes side effects such as triggering
	                                      *   resources to be loaded or text selection changes. If true, we read from
	                                      *   the DOM before updating to ensure that the value is only set if it has
	                                      *   changed.
	                                      * hasBooleanValue:
	                                      *   Whether the property should be removed when set to a falsey value.
	                                      * hasNumericValue:
	                                      *   Whether the property must be numeric or parse as a numeric and should be
	                                      *   removed when set to a falsey value.
	                                      * hasPositiveNumericValue:
	                                      *   Whether the property must be positive numeric or parse as a positive
	                                      *   numeric and should be removed when set to a falsey value.
	                                      * hasOverloadedBooleanValue:
	                                      *   Whether the property can be used as a flag as well as with a value.
	                                      *   Removed when strictly equal to false; present without a value when
	                                      *   strictly equal to true; present with a value otherwise.
	                                      */
	  properties: {},

	  /**
	                   * Mapping from lowercase property names to the properly cased version, used
	                   * to warn in the case of missing properties. Available only in __DEV__.
	                   * @type {Object}
	                   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	                                                                               * All of the isCustomAttribute() functions that have been injected.
	                                                                               */
	  _isCustomAttributeFunctions: [],

	  /**
	                                    * Checks whether a property name is a custom attribute.
	                                    * @method
	                                    */
	  isCustomAttribute: function isCustomAttribute(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	      * Returns the default property value for a DOM property (i.e., not an
	      * attribute). Most default values are '' or false, but not all. Worse yet,
	      * some (in particular, `type`) vary depending on the type of element.
	      *
	      * TODO: Is it better to grab all the possible properties when creating an
	      * element to avoid having to create the same element twice?
	      */
	  getDefaultValueForProperty: function getDefaultValueForProperty(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection };


	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(21);

	/**
	                                                                             * Escapes attribute value to prevent scripting attacks.
	                                                                             *
	                                                                             * @param {*} value Value to escape.
	                                                                             * @return {string} An escaped string.
	                                                                             */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(15);

	/**
	                                                 * Similar to invariant but only logs a warning if the condition is not met.
	                                                 * This can be used to log issues in development environments in critical
	                                                 * paths. Removing the logging code for production environments will keep the
	                                                 * same logic and follow the same code paths.
	                                                 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function warning(condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactMount = __webpack_require__(28);

	/**
	                                           * Abstracts away all functionality of the reconciler that requires knowledge of
	                                           * the browser context. TODO: These callers should be refactored to avoid the
	                                           * need for this injection.
	                                           */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	                                                                                         * If a particular environment requires that some resources be cleaned up,
	                                                                                         * specify this in the injected Mixin. In the DOM, we would likely want to
	                                                                                         * purge any cached node ID lookups.
	                                                                                         *
	                                                                                         * @private
	                                                                                         */
	  unmountIDFromEnvironment: function unmountIDFromEnvironment(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  } };



	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);

	var invariant = __webpack_require__(13);

	/**
	                                                * Errors for properties that should not be updated with `updatePropertyByID()`.
	                                                *
	                                                * @type {object}
	                                                * @private
	                                                */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.' };


	/**
	                                                               * Operations used to process updates to DOM nodes.
	                                                               */
	var ReactDOMIDOperations = {

	  /**
	                              * Updates a DOM node with new property values. This should only be used to
	                              * update DOM properties in `DOMProperty`.
	                              *
	                              * @param {string} id ID of the node to update.
	                              * @param {string} name A valid property name, see `DOMProperty`.
	                              * @param {*} value New value of the property.
	                              * @internal
	                              */
	  updatePropertyByID: function updatePropertyByID(id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	      * Replaces a DOM node that exists in the document with markup.
	      *
	      * @param {string} id ID of child to be replaced.
	      * @param {string} markup Dangerous markup to inject in place of child.
	      * @internal
	      * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	      */
	  dangerouslyReplaceNodeWithMarkupByID: function dangerouslyReplaceNodeWithMarkupByID(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	      * Updates a component's children by processing a series of updates.
	      *
	      * @param {array<object>} updates List of update configurations.
	      * @param {array<string>} markup List of markup strings.
	      * @internal
	      */
	  dangerouslyProcessChildrenUpdates: function dangerouslyProcessChildrenUpdates(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  } };


	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates' });


	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var containsNode = __webpack_require__(59);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);
	var setInnerHTML = __webpack_require__(19);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	                                          * Finds the index of the first character
	                                          * that's not common between the two given strings.
	                                          *
	                                          * @return {number} the index of the character where the strings diverge
	                                          */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	   * @param {DOMElement|DOMDocument} container DOM element that may contain
	   * a React component
	   * @return {?*} DOM element that may have the reactRoot ID, or null.
	   */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	   * @param {DOMElement} container DOM element that may contain a React component.
	   * @return {?string} A "reactRoot" ID, if a React component is rendered.
	   */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	   * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	   * element can return its control whose name or ID equals ATTR_NAME. All
	   * DOM nodes support `getAttributeNode` but this can also get called on
	   * other objects so just return '' if we're given something other than a
	   * DOM node (such as window).
	   *
	   * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	   * @return {string} ID of the supplied `domNode`.
	   */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	   * Sets the React-specific ID of the given node.
	   *
	   * @param {DOMElement} node The DOM node whose ID will be set.
	   * @param {string} id The value of the ID attribute.
	   */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	   * Finds the node with the supplied React-generated DOM ID.
	   *
	   * @param {string} id A React-generated DOM ID.
	   * @return {DOMElement} DOM node with the suppled `id`.
	   * @internal
	   */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	   * Finds the node with the supplied public React instance.
	   *
	   * @param {*} instance A public React instance.
	   * @return {?DOMElement} DOM node with the suppled `id`.
	   * @internal
	   */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	   * A node is "valid" if it is contained by a currently mounted container.
	   *
	   * This means that the node does not have to be contained by a document in
	   * order to be considered valid.
	   *
	   * @param {?DOMElement} node The candidate DOM node.
	   * @param {string} id The expected ID of the node.
	   * @return {boolean} Whether the node is contained by a mounted container.
	   */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	   * Causes the cache to forget about one React-specific ID.
	   *
	   * @param {string} id The ID to forget.
	   */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	   * Return the deepest cached node whose ID is a prefix of `targetID`.
	   */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	   * Mounts this component and inserts it into the DOM.
	   *
	   * @param {ReactComponent} componentInstance The instance to mount.
	   * @param {string} rootID DOM ID of the root node.
	   * @param {DOMElement} container DOM element to mount into.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {boolean} shouldReuseMarkup If true, do not insert markup
	   */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	   * Batched mount.
	   *
	   * @param {ReactComponent} componentInstance The instance to mount.
	   * @param {string} rootID DOM ID of the root node.
	   * @param {DOMElement} container DOM element to mount into.
	   * @param {boolean} shouldReuseMarkup If true, do not insert markup
	   */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	   * True if the supplied DOM node has a direct React-rendered child that is
	   * not a React root element. Useful for warning in `render`,
	   * `unmountComponentAtNode`, etc.
	   *
	   * @param {?DOMElement} node The candidate DOM node.
	   * @return {boolean} True if the DOM element contains a direct child that was
	   * rendered by React but is not a root element.
	   * @internal
	   */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	   * Returns the first (deepest) ancestor of a node which is rendered by this copy
	   * of React.
	   */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	   * Temporary (?) hack so that we can store all top-level pending updates on
	   * composites instead of having to worry about different types of components
	   * here.
	   */
	var TopLevelWrapper = function TopLevelWrapper() {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	    * Mounting is the process of initializing a React component by creating its
	    * representative DOM elements and inserting them into a supplied `container`.
	    * Any prior content inside `container` is destroyed in the process.
	    *
	    *   ReactMount.render(
	    *     component,
	    *     document.getElementById('container')
	    *   );
	    *
	    *   <div id="container">                   <-- Supplied `container`.
	    *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	    *       // ...                                 component.
	    *     </div>
	    *   </div>
	    *
	    * Inside of `container`, the first element rendered is the "reactRoot".
	    */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	                                                    * This is a hook provided to support rendering React components while
	                                                    * ensuring that the apparent scroll position of its `container` does not
	                                                    * change.
	                                                    *
	                                                    * @param {DOMElement} container The `container` being rendered into.
	                                                    * @param {function} renderCallback This must be called once to do the render.
	                                                    */
	  scrollMonitor: function scrollMonitor(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	      * Take a component that's already mounted into the DOM and replace its props
	      * @param {ReactComponent} prevComponent component instance already in the DOM
	      * @param {ReactElement} nextElement component instance to render
	      * @param {DOMElement} container container to render into
	      * @param {?function} callback function triggered on completion
	      */
	  _updateRootComponent: function _updateRootComponent(prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	      * Register a component into the instance map and starts scroll value
	      * monitoring
	      * @param {ReactComponent} nextComponent component instance to render
	      * @param {DOMElement} container container to render into
	      * @return {string} reactRoot ID prefix
	      */
	  _registerComponent: function _registerComponent(nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	      * Render a new component into the DOM.
	      * @param {ReactElement} nextElement element to render
	      * @param {DOMElement} container container to render into
	      * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	      * @return {ReactComponent} nextComponent
	      */
	  _renderNewRootComponent: function _renderNewRootComponent(nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	      * Renders a React component into the DOM in the supplied `container`.
	      *
	      * If the React component was previously rendered into `container`, this will
	      * perform an update on it and only mutate the DOM as necessary to reflect the
	      * latest React component.
	      *
	      * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	      * @param {ReactElement} nextElement Component element to render.
	      * @param {DOMElement} container DOM element to render into.
	      * @param {?function} callback function triggered on completion
	      * @return {ReactComponent} Component instance rendered in `container`.
	      */
	  renderSubtreeIntoContainer: function renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function _renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	      * Renders a React component into the DOM in the supplied `container`.
	      *
	      * If the React component was previously rendered into `container`, this will
	      * perform an update on it and only mutate the DOM as necessary to reflect the
	      * latest React component.
	      *
	      * @param {ReactElement} nextElement Component element to render.
	      * @param {DOMElement} container DOM element to render into.
	      * @param {?function} callback function triggered on completion
	      * @return {ReactComponent} Component instance rendered in `container`.
	      */
	  render: function render(nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	      * Registers a container node into which React components will be rendered.
	      * This also creates the "reactRoot" ID that will be assigned to the element
	      * rendered within.
	      *
	      * @param {DOMElement} container DOM element to register as a container.
	      * @return {string} The "reactRoot" ID of elements rendered within.
	      */
	  registerContainer: function registerContainer(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	      * Unmounts and destroys the React component rendered in the `container`.
	      *
	      * @param {DOMElement} container DOM element containing a React component.
	      * @return {boolean} True if a component was found in and unmounted from
	      *                   `container`
	      */
	  unmountComponentAtNode: function unmountComponentAtNode(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	      * Finds the container DOM element that contains React component to which the
	      * supplied DOM `id` belongs.
	      *
	      * @param {string} id The ID of an element rendered by a React component.
	      * @return {?DOMElement} DOM element that contains the `id`.
	      */
	  findReactContainerForID: function findReactContainerForID(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	      * Finds an element rendered by React with the supplied ID.
	      *
	      * @param {string} id ID of a DOM node in the React component.
	      * @return {DOMElement} Root DOM node of the React component.
	      */
	  findReactNodeByID: function findReactNodeByID(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	      * Traverses up the ancestors of the supplied node to find a node that is a
	      * DOM representation of a React component rendered by this copy of React.
	      *
	      * @param {*} node
	      * @return {?DOMEventTarget}
	      * @internal
	      */
	  getFirstReactDOM: function getFirstReactDOM(node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	      * Finds a node with the supplied `targetID` inside of the supplied
	      * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	      * quickly.
	      *
	      * @param {DOMEventTarget} ancestorNode Search from this root.
	      * @pararm {string} targetID ID of the DOM representation of the component.
	      * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	      * @internal
	      */
	  findComponentRoot: function findComponentRoot(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function _mountImageIntoNode(markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	                                                     * React ID utilities.
	                                                     */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID };


	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode' });


	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPluginRegistry = __webpack_require__(32);
	var ReactEventEmitterMixin = __webpack_require__(37);
	var ReactPerf = __webpack_require__(18);
	var ViewportMetrics = __webpack_require__(38);

	var assign = __webpack_require__(39);
	var isEventSupported = __webpack_require__(40);

	/**
	                                                       * Summary of `ReactBrowserEventEmitter` event handling:
	                                                       *
	                                                       *  - Top-level delegation is used to trap most native browser events. This
	                                                       *    may only occur in the main thread and is the responsibility of
	                                                       *    ReactEventListener, which is injected and can therefore support pluggable
	                                                       *    event sources. This is the only work that occurs in the main thread.
	                                                       *
	                                                       *  - We normalize and de-duplicate events to account for browser quirks. This
	                                                       *    may be done in the worker thread.
	                                                       *
	                                                       *  - Forward these native events (with the associated top-level type used to
	                                                       *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	                                                       *    to extract any synthetic events.
	                                                       *
	                                                       *  - The `EventPluginHub` will then process each event by annotating them with
	                                                       *    "dispatches", a sequence of listeners and IDs that care about that event.
	                                                       *
	                                                       *  - The `EventPluginHub` then dispatches the events.
	                                                       *
	                                                       * Overview of React and the event system:
	                                                       *
	                                                       * +------------+    .
	                                                       * |    DOM     |    .
	                                                       * +------------+    .
	                                                       *       |           .
	                                                       *       v           .
	                                                       * +------------+    .
	                                                       * | ReactEvent |    .
	                                                       * |  Listener  |    .
	                                                       * +------------+    .                         +-----------+
	                                                       *       |           .               +--------+|SimpleEvent|
	                                                       *       |           .               |         |Plugin     |
	                                                       * +-----|------+    .               v         +-----------+
	                                                       * |     |      |    .    +--------------+                    +------------+
	                                                       * |     +-----------.--->|EventPluginHub|                    |    Event   |
	                                                       * |            |    .    |              |     +-----------+  | Propagators|
	                                                       * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	                                                       * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	                                                       * |            |    .    |              |     +-----------+  |  utilities |
	                                                       * |     +-----------.--->|              |                    +------------+
	                                                       * |     |      |    .    +--------------+
	                                                       * +-----|------+    .                ^        +-----------+
	                                                       *       |           .                |        |Enter/Leave|
	                                                       *       +           .                +-------+|Plugin     |
	                                                       * +-------------+   .                         +-----------+
	                                                       * | application |   .
	                                                       * |-------------|   .
	                                                       * |             |   .
	                                                       * |             |   .
	                                                       * +-------------+   .
	                                                       *                   .
	                                                       *    React Core     .  General Purpose Event Plugin System
	                                                       */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel' };


	/**
	                        * To ensure no conflicts with other potential React instances on the page
	                        */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	   * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	   * example:
	   *
	   *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	   *
	   * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	   *
	   * @internal
	   */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	                                                                     * Injectable event backend
	                                                                     */
	  ReactEventListener: null,

	  injection: {
	    /**
	                * @param {object} ReactEventListener
	                */
	    injectReactEventListener: function injectReactEventListener(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    } },


	  /**
	          * Sets whether or not any created callbacks should be enabled.
	          *
	          * @param {boolean} enabled True if callbacks should be enabled.
	          */
	  setEnabled: function setEnabled(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	      * @return {boolean} True if callbacks are enabled.
	      */
	  isEnabled: function isEnabled() {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	      * We listen for bubbled touch events on the document object.
	      *
	      * Firefox v8.01 (and possibly others) exhibited strange behavior when
	      * mounting `onmousemove` events at some node that was not the document
	      * element. The symptoms were that if your mouse is not moving over something
	      * contained within that mount point (for example on the background) the
	      * top-level listeners for `onmousemove` won't be called. However, if you
	      * register the `mousemove` on the document object, then it will of course
	      * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	      * top-level listeners to the document object only, at least for these
	      * movement types of events and possibly all events.
	      *
	      * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	      *
	      * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	      * they bubble to document.
	      *
	      * @param {string} registrationName Name of listener (e.g. `onClick`).
	      * @param {object} contentDocumentHandle Document which owns the container
	      */
	  listenTo: function listenTo(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	      * Listens to window scroll and resize events. We cache scroll values so that
	      * application code can access them without triggering reflows.
	      *
	      * NOTE: Scroll events do not bubble.
	      *
	      * @see http://www.quirksmode.org/dom/events/scroll.html
	      */
	  ensureScrollValueMonitoring: function ensureScrollValueMonitoring() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners });



	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener' });


	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	                                                                       * Types of raw signals from the browser caught at the top level.
	                                                                       */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null });


	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases };


	module.exports = EventConstants;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var EventPluginRegistry = __webpack_require__(32);
	var EventPluginUtils = __webpack_require__(33);
	var ReactErrorUtils = __webpack_require__(34);

	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	                                            * Internal store for event listeners
	                                            */
	var listenerBank = {};

	/**
	                        * Internal queue of events that have accumulated their dispatches and are
	                        * waiting to have their dispatches executed.
	                        */
	var eventQueue = null;

	/**
	                        * Dispatches an event and releases it back into the pool, unless persistent.
	                        *
	                        * @param {?object} event Synthetic event to be dispatched.
	                        * @param {boolean} simulated If the event is simulated (changes exn behavior)
	                        * @private
	                        */
	var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	    * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	    *   hierarchy given ids of the logical DOM elements involved.
	    */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	   * This is a unified interface for event plugins to be installed and configured.
	   *
	   * Event plugins can implement the following properties:
	   *
	   *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	   *     Required. When a top-level event is fired, this method is expected to
	   *     extract synthetic events that will in turn be queued and dispatched.
	   *
	   *   `eventTypes` {object}
	   *     Optional, plugins that fire events must publish a mapping of registration
	   *     names that are used to register listeners. Values of this mapping must
	   *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	   *
	   *   `executeDispatch` {function(object, function, string)}
	   *     Optional, allows plugins to override how an event gets dispatched. By
	   *     default, the listener is simply invoked.
	   *
	   * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	   *
	   * @public
	   */
	var EventPluginHub = {

	  /**
	                        * Methods for injecting dependencies.
	                        */
	  injection: {

	    /**
	                * @param {object} InjectedMount
	                * @public
	                */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	                                                          * @param {object} InjectedInstanceHandle
	                                                          * @public
	                                                          */
	    injectInstanceHandle: function injectInstanceHandle(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function getInstanceHandle() {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	        * @param {array} InjectedEventPluginOrder
	        * @public
	        */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	                                                                         * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	                                                                         */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName },



	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	                                                                         * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	                                                                         *
	                                                                         * @param {string} id ID of the DOM element.
	                                                                         * @param {string} registrationName Name of listener (e.g. `onClick`).
	                                                                         * @param {?function} listener The callback to store.
	                                                                         */
	  putListener: function putListener(id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	      * @param {string} id ID of the DOM element.
	      * @param {string} registrationName Name of listener (e.g. `onClick`).
	      * @return {?function} The stored callback.
	      */
	  getListener: function getListener(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	      * Deletes a listener from the registration bank.
	      *
	      * @param {string} id ID of the DOM element.
	      * @param {string} registrationName Name of listener (e.g. `onClick`).
	      */
	  deleteListener: function deleteListener(id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	      * Deletes all listeners for the DOM element with the supplied ID.
	      *
	      * @param {string} id ID of the DOM element.
	      */
	  deleteAllListeners: function deleteAllListeners(id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	      * Allows registered plugins an opportunity to extract events from top-level
	      * native browser events.
	      *
	      * @param {string} topLevelType Record from `EventConstants`.
	      * @param {DOMEventTarget} topLevelTarget The listening component root node.
	      * @param {string} topLevelTargetID ID of `topLevelTarget`.
	      * @param {object} nativeEvent Native browser event.
	      * @return {*} An accumulation of synthetic events.
	      * @internal
	      */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	      * Enqueues a synthetic event that should be dispatched when
	      * `processEventQueue` is invoked.
	      *
	      * @param {*} events An accumulation of synthetic events.
	      * @internal
	      */
	  enqueueEvents: function enqueueEvents(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	      * Dispatches all synthetic events on the event queue.
	      *
	      * @internal
	      */
	  processEventQueue: function processEventQueue(simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	      * These are needed for tests only. Do not use!
	      */
	  __purge: function __purge() {
	    listenerBank = {};
	  },

	  __getListenerBank: function __getListenerBank() {
	    return listenerBank;
	  } };



	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	                                                * Injectable ordering of event plugins.
	                                                */
	var EventPluginOrder = null;

	/**
	                              * Injectable mapping from names to event plugin modules.
	                              */
	var namesToPlugins = {};

	/**
	                          * Recomputes the plugin list using the injected plugins and plugin ordering.
	                          *
	                          * @private
	                          */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	   * Publishes an event so that it can be dispatched by the supplied plugin.
	   *
	   * @param {object} dispatchConfig Dispatch configuration for the event.
	   * @param {object} PluginModule Plugin publishing the event.
	   * @return {boolean} True if the event was successfully published.
	   * @private
	   */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	   * Publishes a registration name that is used to identify dispatched events and
	   * can be used with `EventPluginHub.putListener` to register listeners.
	   *
	   * @param {string} registrationName Registration name to add.
	   * @param {object} PluginModule Plugin publishing the event.
	   * @private
	   */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	   * Registers plugins so that they can extract and dispatch events.
	   *
	   * @see {EventPluginHub}
	   */
	var EventPluginRegistry = {

	  /**
	                             * Ordered list of injected plugins.
	                             */
	  plugins: [],

	  /**
	                * Mapping from event name to dispatch config
	                */
	  eventNameDispatchConfigs: {},

	  /**
	                                 * Mapping from registration name to plugin module
	                                 */
	  registrationNameModules: {},

	  /**
	                                * Mapping from registration name to event name
	                                */
	  registrationNameDependencies: {},

	  /**
	                                     * Injects an ordering of plugins (by plugin name). This allows the ordering
	                                     * to be decoupled from injection of the actual plugins so that ordering is
	                                     * always deterministic regardless of packaging, on-the-fly injection, etc.
	                                     *
	                                     * @param {array} InjectedEventPluginOrder
	                                     * @internal
	                                     * @see {EventPluginHub.injection.injectEventPluginOrder}
	                                     */
	  injectEventPluginOrder: function injectEventPluginOrder(InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	      * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	      * in the ordering injected by `injectEventPluginOrder`.
	      *
	      * Plugins can be injected as part of page initialization or on-the-fly.
	      *
	      * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	      * @internal
	      * @see {EventPluginHub.injection.injectEventPluginsByName}
	      */
	  injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	      * Looks up the plugin for the supplied event.
	      *
	      * @param {object} event A synthetic event.
	      * @return {?object} The plugin that created the supplied event.
	      * @internal
	      */
	  getPluginModuleForEvent: function getPluginModuleForEvent(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	      * Exposed for unit testing.
	      * @private
	      */
	  _resetEventPlugins: function _resetEventPlugins() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  } };



	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var ReactErrorUtils = __webpack_require__(34);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	                                            * Injected dependencies:
	                                            */

	/**
	                                                * - `Mount`: [required] Module that can convert between React dom IDs and
	                                                *   actual node references.
	                                                */
	var injection = {
	  Mount: null,
	  injectMount: function injectMount(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  } };


	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function validateEventDispatches(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	   * Dispatch the event to the listener.
	   * @param {SyntheticEvent} event SyntheticEvent to handle
	   * @param {boolean} simulated If the event is simulated (changes exn behavior)
	   * @param {function} listener Application-level callback
	   * @param {string} domID DOM id to pass to the callback.
	   */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	   * Standard/simple iteration through an event's collected dispatches.
	   */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	   * Standard/simple iteration through an event's collected dispatches, but stops
	   * at the first dispatch execution returning true, and returns that id.
	   *
	   * @return {?string} id of the first dispatch execution who's listener returns
	   * true, or null if no listener returned true.
	   */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	   * @see executeDispatchesInOrderStopAtTrueImpl
	   */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	   * Execution of a "direct" dispatch - there must be at most one dispatch
	   * accumulated on the event or it is considered an error. It doesn't really make
	   * sense for an event with multiple dispatches (bubbled) to keep track of the
	   * return values at each dispatch execution, but it does tend to make sense when
	   * dealing with "direct" dispatches.
	   *
	   * @return {*} The return value of executing the single dispatch.
	   */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	   * @param {SyntheticEvent} event
	   * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	   */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	   * General utilities that are useful in creating custom Event Plugins.
	   */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function getNode(id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function getID(node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection };


	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	                         * Call a function while guarding against errors that happens within it.
	                         *
	                         * @param {?String} name of the guard to use for logging or debugging
	                         * @param {Function} func The function to invoke
	                         * @param {*} a First argument
	                         * @param {*} b Second argument
	                         */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	                                                 * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	                                                 * handler are sure to be rethrown by rethrowCaughtError.
	                                                 */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	                                                          * During execution of guarded functions we will capture the first error which
	                                                          * we will rethrow to be handled by the top level error handler.
	                                                          */
	  rethrowCaughtError: function rethrowCaughtError() {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  } };


	if (process.env.NODE_ENV !== 'production') {
	  /**
	                                             * To help development we can get better devtools integration by simulating a
	                                             * real browser event.
	                                             */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	                                                *
	                                                * Accumulates items that must not be null or undefined into the first one. This
	                                                * is used to conserve memory by avoiding array allocations, and thus sacrifices
	                                                * API cleanness. Since `current` can be null before being passed in and not
	                                                * null after this function, make sure to assign it back to `current`:
	                                                *
	                                                * `a = accumulateInto(a, b);`
	                                                *
	                                                * This API should be sparingly used. Try `accumulate` for something cleaner.
	                                                *
	                                                * @return {*|array<*>} An accumulation of items.
	                                                */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	               * @param {array} arr an "accumulation" of items which is either an Array or
	               * a single item. Useful when paired with the `accumulate` module. This is a
	               * simple utility that allows us to reason about a collection of items, but
	               * handling the case when there is exactly one item (and we do not need to
	               * allocate an array).
	               */
	var forEachAccumulated = function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(31);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	                                * Streams a fired top-level event to `EventPluginHub` where plugins have the
	                                * opportunity to create `ReactEvent`s to be dispatched.
	                                *
	                                * @param {string} topLevelType Record from `EventConstants`.
	                                * @param {object} topLevelTarget The listening component root node.
	                                * @param {string} topLevelTargetID ID of `topLevelTarget`.
	                                * @param {object} nativeEvent Native environment event.
	                                */
	  handleTopLevel: function handleTopLevel(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  } };


	module.exports = ReactEventEmitterMixin;

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function refreshScrollValues(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  } };



	module.exports = ViewportMetrics;

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	   * Checks if an event is supported in the current execution environment.
	   *
	   * NOTE: This will not work correctly for non-generic events such as `change`,
	   * `reset`, `load`, `error`, and `select`.
	   *
	   * Borrows from Modernizr.
	   *
	   * @param {string} eventNameSuffix Event name, e.g. "click".
	   * @param {?boolean} capture Check if the capture phase is supported.
	   * @return {boolean} True if the event is supported.
	   * @internal
	   * @license Modernizr 3.0.0pre (Custom Build) | MIT
	   */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false };


	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var ReactCurrentOwner = __webpack_require__(5);

	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true };


	/**
	                     * Base constructor for all React elements. This is only used to make this
	                     * work with a dynamic instanceof check. Nothing should live on this prototype.
	                     *
	                     * @param {*} type
	                     * @param {*} key
	                     * @param {string|object} ref
	                     * @param {*} self A *temporary* helper to detect places where `this` is
	                     * different from the `owner` when React.createElement is called, so that we
	                     * can warn. We want to get rid of owner and replace string `ref`s with arrow
	                     * functions, and as long as `this` and owner are the same, there will be no
	                     * change in behavior.
	                     * @param {*} source An annotation object (added by a transpiler or otherwise)
	                     * indicating filename, line number, and/or other information.
	                     * @param {*} owner
	                     * @param {*} props
	                     * @internal
	                     */
	var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner };


	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false });

	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self });

	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source });

	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	    * @param {?object} object
	    * @return {boolean} True if `object` is a valid component.
	    * @final
	    */
	ReactElement.isValidElement = function (object) {
	  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function get() {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	                                    * @param {string} id Component's `_rootNodeID`.
	                                    * @return {boolean} True if the component is rendered to null.
	                                    */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	   * Mark the component as having rendered to null.
	   * @param {string} id Component's `_rootNodeID`.
	   */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	   * Unmark the component as having rendered to null: it renders to something now.
	   * @param {string} id Component's `_rootNodeID`.
	   */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID };


	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(46);

	var invariant = __webpack_require__(13);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	                                          * Maximum depth of traversals before we consider the possibility of a bad ID.
	                                          */
	var MAX_TREE_DEPTH = 10000;

	/**
	                             * Creates a DOM ID prefix to use when mounting React components.
	                             *
	                             * @param {number} index A unique integer
	                             * @return {string} React root ID.
	                             * @internal
	                             */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	   * Checks if a character in the supplied ID is a separator or the end.
	   *
	   * @param {string} id A React DOM ID.
	   * @param {number} index Index of the character to check.
	   * @return {boolean} True if the character is a separator or end of the ID.
	   * @private
	   */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	   * Checks if the supplied string is a valid React DOM ID.
	   *
	   * @param {string} id A React DOM ID, maybe.
	   * @return {boolean} True if the string is a valid React DOM ID.
	   * @private
	   */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	   * Checks if the first ID is an ancestor of or equal to the second ID.
	   *
	   * @param {string} ancestorID
	   * @param {string} descendantID
	   * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	   * @internal
	   */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	   * Gets the parent ID of the supplied React DOM ID, `id`.
	   *
	   * @param {string} id ID of a component.
	   * @return {string} ID of the parent, or an empty string.
	   * @private
	   */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	   * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	   * supplied `destinationID`. If they are equal, the ID is returned.
	   *
	   * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	   * @param {string} destinationID ID of the destination node.
	   * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	   * @private
	   */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	   * Gets the nearest common ancestor ID of two IDs.
	   *
	   * Using this ID scheme, the nearest common ancestor ID is the longest common
	   * prefix of the two IDs that immediately preceded a "marker" in both strings.
	   *
	   * @param {string} oneID
	   * @param {string} twoID
	   * @return {string} Nearest common ancestor ID, or the empty string if none.
	   * @private
	   */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	   * Traverses the parent path between two IDs (either up or down). The IDs must
	   * not be the same, and there must exist a parent path between them. If the
	   * callback returns `false`, traversal is stopped.
	   *
	   * @param {?string} start ID at which to start traversal.
	   * @param {?string} stop ID at which to end traversal.
	   * @param {function} cb Callback to invoke each ID with.
	   * @param {*} arg Argument to invoke the callback with.
	   * @param {?boolean} skipFirst Whether or not to skip the first node.
	   * @param {?boolean} skipLast Whether or not to skip the last node.
	   * @private
	   */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	   * Manages the IDs assigned to DOM representations of React components. This
	   * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	   * order to simulate events).
	   *
	   * @internal
	   */
	var ReactInstanceHandles = {

	  /**
	                              * Constructs a React root ID
	                              * @return {string} A React root ID.
	                              */
	  createReactRootID: function createReactRootID() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	      * Constructs a React ID by joining a root ID with a name.
	      *
	      * @param {string} rootID Root ID of a parent component.
	      * @param {string} name A component's name (as flattened children).
	      * @return {string} A React ID.
	      * @internal
	      */
	  createReactID: function createReactID(rootID, name) {
	    return rootID + name;
	  },

	  /**
	      * Gets the DOM ID of the React component that is the root of the tree that
	      * contains the React component with the supplied DOM ID.
	      *
	      * @param {string} id DOM ID of a React component.
	      * @return {?string} DOM ID of the React component that is the root.
	      * @internal
	      */
	  getReactRootIDFromNodeID: function getReactRootIDFromNodeID(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	      * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	      * should would receive a `mouseEnter` or `mouseLeave` event.
	      *
	      * NOTE: Does not invoke the callback on the nearest common ancestor because
	      * nothing "entered" or "left" that element.
	      *
	      * @param {string} leaveID ID being left.
	      * @param {string} enterID ID being entered.
	      * @param {function} cb Callback to invoke on each entered/left ID.
	      * @param {*} upArg Argument to invoke the callback with on left IDs.
	      * @param {*} downArg Argument to invoke the callback with on entered IDs.
	      * @internal
	      */
	  traverseEnterLeave: function traverseEnterLeave(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	      * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	      *
	      * NOTE: This traversal happens on IDs without touching the DOM.
	      *
	      * @param {string} targetID ID of the target node.
	      * @param {function} cb Callback to invoke.
	      * @param {*} arg Argument to invoke the callback with.
	      * @internal
	      */
	  traverseTwoPhase: function traverseTwoPhase(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	      * Same as `traverseTwoPhase` but skips the `targetID`.
	      */
	  traverseTwoPhaseSkipTarget: function traverseTwoPhaseSkipTarget(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	      * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	      * example, passing `.0.$row-0.1` would result in `cb` getting called
	      * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	      *
	      * NOTE: This traversal happens on IDs without touching the DOM.
	      *
	      * @param {string} targetID ID of the target node.
	      * @param {function} cb Callback to invoke.
	      * @param {*} arg Argument to invoke the callback with.
	      * @internal
	      */
	  traverseAncestors: function traverseAncestors(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	                                                       * Exposed for unit testing.
	                                                       * @private
	                                                       */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR };



	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	                                 * @param {function} _createReactRootIndex
	                                 */
	  injectCreateReactRootIndex: function injectCreateReactRootIndex(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  } };


	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection };


	module.exports = ReactRootIndex;

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	               * `ReactInstanceMap` maintains a mapping from a public facing stateful
	               * instance (key) and the internal representation (value). This allows public
	               * methods to accept the user facing instance as an argument and map them back
	               * to internal methods.
	               */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	                          * This API should be called `delete` but we'd have to make sure to always
	                          * transform these to strings for IE support. When this transform is fully
	                          * supported we can rename it.
	                          */
	  remove: function remove(key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function get(key) {
	    return key._reactInternalInstance;
	  },

	  has: function has(key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function set(key, value) {
	    key._reactInternalInstance = value;
	  } };



	module.exports = ReactInstanceMap;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(49);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	                                              * @param {string} markup Markup string
	                                              * @return {string} Markup string with checksum attribute attached
	                                              */
	  addChecksumToMarkup: function addChecksumToMarkup(markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	      * @param {string} markup to use
	      * @param {DOMElement} element root React element
	      * @returns {boolean} whether or not the markup is the same
	      */
	  canReuseMarkup: function canReuseMarkup(markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  } };


	module.exports = ReactMarkupChecksum;

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(51);

	/**
	                                       * Helper to call ReactRef.attachRefs with this composite component, split out
	                                       * to avoid allocations in the transaction mount-ready queue.
	                                       */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	                         * Initializes the component, renders markup, and registers event listeners.
	                         *
	                         * @param {ReactComponent} internalInstance
	                         * @param {string} rootID DOM ID of the root node.
	                         * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	                         * @return {?string} Rendered markup to be inserted into the DOM.
	                         * @final
	                         * @internal
	                         */
	  mountComponent: function mountComponent(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	      * Releases any resources allocated by `mountComponent`.
	      *
	      * @final
	      * @internal
	      */
	  unmountComponent: function unmountComponent(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	      * Update a component using a new element.
	      *
	      * @param {ReactComponent} internalInstance
	      * @param {ReactElement} nextElement
	      * @param {ReactReconcileTransaction} transaction
	      * @param {object} context
	      * @internal
	      */
	  receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	      * Flush any dirty changes in a component.
	      *
	      * @param {ReactComponent} internalInstance
	      * @param {ReactReconcileTransaction} transaction
	      * @internal
	      */
	  performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  } };



	module.exports = ReactReconciler;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(52);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return (
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref);

	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	                                                * ReactOwners are capable of storing references to owned components.
	                                                *
	                                                * All components are capable of //being// referenced by owner components, but
	                                                * only ReactOwner components are capable of //referencing// owned components.
	                                                * The named reference is known as a "ref".
	                                                *
	                                                * Refs are available when mounted and updated during reconciliation.
	                                                *
	                                                *   var MyComponent = React.createClass({
	                                                *     render: function() {
	                                                *       return (
	                                                *         <div onClick={this.handleClick}>
	                                                *           <CustomComponent ref="custom" />
	                                                *         </div>
	                                                *       );
	                                                *     },
	                                                *     handleClick: function() {
	                                                *       this.refs.custom.handleClick();
	                                                *     },
	                                                *     componentDidMount: function() {
	                                                *       this.refs.custom.initialize();
	                                                *     }
	                                                *   });
	                                                *
	                                                * Refs should rarely be used. When refs are used, they should only be done to
	                                                * control data that is not handled by React's data flow.
	                                                *
	                                                * @class ReactOwner
	                                                */
	var ReactOwner = {

	  /**
	                    * @param {?object} object
	                    * @return {boolean} True if `object` is a valid owner.
	                    * @final
	                    */
	  isValidOwner: function isValidOwner(object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	      * Adds a component by ref to an owner component.
	      *
	      * @param {ReactComponent} component Component to reference.
	      * @param {string} ref Name by which to refer to the component.
	      * @param {ReactOwner} owner Component on which to record the ref.
	      * @final
	      * @internal
	      */
	  addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	      * Removes a component by ref from an owner component.
	      *
	      * @param {ReactComponent} component Component to dereference.
	      * @param {string} ref Name of the ref to remove.
	      * @param {ReactOwner} owner Component on which the ref is recorded.
	      * @final
	      * @internal
	      */
	  removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  } };



	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	   * ReactUpdateQueue allows for state updates to be scheduled into a later
	   * reconciliation step.
	   */
	var ReactUpdateQueue = {

	  /**
	                          * Checks whether or not this composite component is mounted.
	                          * @param {ReactClass} publicInstance The instance we want to test.
	                          * @return {boolean} True if mounted, false otherwise.
	                          * @protected
	                          * @final
	                          */
	  isMounted: function isMounted(publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	      * Enqueue a callback that will be executed after all the pending updates
	      * have processed.
	      *
	      * @param {ReactClass} publicInstance The instance to use as `this` context.
	      * @param {?function} callback Called after state is updated.
	      * @internal
	      */
	  enqueueCallback: function enqueueCallback(publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	      * Forces an update. This should only be invoked when it is known with
	      * certainty that we are **not** in a DOM transaction.
	      *
	      * You may want to call this when you know that some deeper aspect of the
	      * component's state has changed but `setState` was not called.
	      *
	      * This will not invoke `shouldComponentUpdate`, but it will invoke
	      * `componentWillUpdate` and `componentDidUpdate`.
	      *
	      * @param {ReactClass} publicInstance The instance that should rerender.
	      * @internal
	      */
	  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	      * Replaces all of the state. Always use this or `setState` to mutate state.
	      * You should treat `this.state` as immutable.
	      *
	      * There is no guarantee that `this.state` will be immediately updated, so
	      * accessing `this.state` after calling this method may return the old value.
	      *
	      * @param {ReactClass} publicInstance The instance that should rerender.
	      * @param {object} completeState Next state.
	      * @internal
	      */
	  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	      * Sets a subset of the state. This only exists because _pendingState is
	      * internal. This provides a merging strategy that is not available to deep
	      * properties which is confusing. TODO: Expose pendingState or don't use it
	      * during the merge.
	      *
	      * @param {ReactClass} publicInstance The instance that should rerender.
	      * @param {object} partialState Next partial state to be merged with state.
	      * @internal
	      */
	  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	      * Sets a subset of the props.
	      *
	      * @param {ReactClass} publicInstance The instance that should rerender.
	      * @param {object} partialProps Subset of the next props.
	      * @internal
	      */
	  enqueueSetProps: function enqueueSetProps(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function enqueueSetPropsInternal(internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	      * Replaces all of the props.
	      *
	      * @param {ReactClass} publicInstance The instance that should rerender.
	      * @param {object} props New props.
	      * @internal
	      */
	  enqueueReplaceProps: function enqueueReplaceProps(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function enqueueReplacePropsInternal(internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function enqueueElementInternal(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  } };



	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function initialize() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function close() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  } };


	var UPDATE_QUEUEING = {
	  initialize: function initialize() {
	    this.callbackQueue.reset();
	  },
	  close: function close() {
	    this.callbackQueue.notifyAll();
	  } };


	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function destructor() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function perform(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  } });


	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	   * Array comparator for ReactComponents by mount ordering.
	   *
	   * @param {ReactComponent} c1 first component you're comparing
	   * @param {ReactComponent} c2 second component you're comparing
	   * @return {number} Return value usable by Array.prototype.sort().
	   */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function flushBatchedUpdates() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	                                                                                                      * Mark a component as needing a rerender, adding an optional callback to a
	                                                                                                      * list of functions which will be executed once the rerender occurs.
	                                                                                                      */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	   * Enqueue a callback to be run at the end of the current batching cycle. Throws
	   * if no updates are currently being performed.
	   */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  } };


	var ReactUpdates = {
	  /**
	                      * React references `ReactReconcileTransaction` using this property in order
	                      * to allow dependency injection.
	                      *
	                      * @internal
	                      */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap };


	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	/**
	                                                * A specialized pseudo-event module to help keep track of components waiting to
	                                                * be notified when their DOM representations are available for use.
	                                                *
	                                                * This implements `PooledClass`, so you should never need to instantiate this.
	                                                * Instead, use `CallbackQueue.getPooled()`.
	                                                *
	                                                * @class ReactMountReady
	                                                * @implements PooledClass
	                                                * @internal
	                                                */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	                                   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	                                   *
	                                   * @param {function} callback Invoked when `notifyAll` is invoked.
	                                   * @param {?object} context Context to call `callback` with.
	                                   * @internal
	                                   */
	  enqueue: function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	      * Invokes all enqueued callbacks and clears the queue. This is invoked after
	      * the DOM representation of a component has been created or updated.
	      *
	      * @internal
	      */
	  notifyAll: function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	      * Resets the internal queue.
	      *
	      * @internal
	      */
	  reset: function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	      * `PooledClass` looks for this.
	      */
	  destructor: function destructor() {
	    this.reset();
	  } });



	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	                                                * Static poolers. Several custom versions for each potential number of
	                                                * arguments. A completely generic pooler is easy to implement, but would
	                                                * require accessing the `arguments` object. In each of these, `this` refers to
	                                                * the Class itself, not an instance. If any others are needed, simply add them
	                                                * here, or in their own files.
	                                                */
	var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function fiveArgumentPooler(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function standardReleaser(instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	                                         * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	                                         * itself (statically) not adding any prototypical fields. Any CopyConstructor
	                                         * you give this may have a `poolSize` property, and will look for a
	                                         * prototypical `destructor` on instances (optional).
	                                         *
	                                         * @param {Function} CopyConstructor Constructor that can be used to reset.
	                                         * @param {Function} pooler Customizable pooler.
	                                         */
	var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler };


	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	/**
	                                                * `Transaction` creates a black box that is able to wrap any method such that
	                                                * certain invariants are maintained before and after the method is invoked
	                                                * (Even if an exception is thrown while invoking the wrapped method). Whoever
	                                                * instantiates a transaction can provide enforcers of the invariants at
	                                                * creation time. The `Transaction` class itself will supply one additional
	                                                * automatic invariant for you - the invariant that any transaction instance
	                                                * should not be run while it is already being run. You would typically create a
	                                                * single instance of a `Transaction` for reuse multiple times, that potentially
	                                                * is used to wrap several different methods. Wrappers are extremely simple -
	                                                * they only require implementing two methods.
	                                                *
	                                                * <pre>
	                                                *                       wrappers (injected at creation time)
	                                                *                                      +        +
	                                                *                                      |        |
	                                                *                    +-----------------|--------|--------------+
	                                                *                    |                 v        |              |
	                                                *                    |      +---------------+   |              |
	                                                *                    |   +--|    wrapper1   |---|----+         |
	                                                *                    |   |  +---------------+   v    |         |
	                                                *                    |   |          +-------------+  |         |
	                                                *                    |   |     +----|   wrapper2  |--------+   |
	                                                *                    |   |     |    +-------------+  |     |   |
	                                                *                    |   |     |                     |     |   |
	                                                *                    |   v     v                     v     v   | wrapper
	                                                *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	                                                * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	                                                * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	                                                *                    | |   | |   |   |         |   |   | |   | |
	                                                *                    | |   | |   |   |         |   |   | |   | |
	                                                *                    | |   | |   |   |         |   |   | |   | |
	                                                *                    | +---+ +---+   +---------+   +---+ +---+ |
	                                                *                    |  initialize                    close    |
	                                                *                    +-----------------------------------------+
	                                                * </pre>
	                                                *
	                                                * Use cases:
	                                                * - Preserving the input selection ranges before/after reconciliation.
	                                                *   Restoring selection even in the event of an unexpected error.
	                                                * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	                                                *   while guaranteeing that afterwards, the event system is reactivated.
	                                                * - Flushing a queue of collected DOM mutations to the main UI thread after a
	                                                *   reconciliation takes place in a worker thread.
	                                                * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	                                                *   content.
	                                                * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	                                                *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	                                                * - (Future use case): Layout calculations before and after DOM updates.
	                                                *
	                                                * Transactional plugin API:
	                                                * - A module that has an `initialize` method that returns any precomputation.
	                                                * - and a `close` method that accepts the precomputation. `close` is invoked
	                                                *   when the wrapped process is completed, or has failed.
	                                                *
	                                                * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	                                                * that implement `initialize` and `close`.
	                                                * @return {Transaction} Single transaction for reuse in thread.
	                                                *
	                                                * @class Transaction
	                                                */
	var Mixin = {
	  /**
	               * Sets up this instance so that it is prepared for collecting metrics. Does
	               * so such that this setup method may be used on an instance that is already
	               * initialized, in a way that does not consume additional memory upon reuse.
	               * That can be useful if you decide to make your subclass of this mixin a
	               * "PooledClass".
	               */
	  reinitializeTransaction: function reinitializeTransaction() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	                            * @abstract
	                            * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	                            */
	  getTransactionWrappers: null,

	  isInTransaction: function isInTransaction() {
	    return !!this._isInTransaction;
	  },

	  /**
	      * Executes the function within a safety window. Use this for the top level
	      * methods that result in large amounts of computation/mutations that would
	      * need to be safety checked. The optional arguments helps prevent the need
	      * to bind in many cases.
	      *
	      * @param {function} method Member of scope to call.
	      * @param {Object} scope Scope to invoke from.
	      * @param {Object?=} a Argument to pass to the method.
	      * @param {Object?=} b Argument to pass to the method.
	      * @param {Object?=} c Argument to pass to the method.
	      * @param {Object?=} d Argument to pass to the method.
	      * @param {Object?=} e Argument to pass to the method.
	      * @param {Object?=} f Argument to pass to the method.
	      *
	      * @return {*} Return value from `method`.
	      */
	  perform: function perform(method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function initializeAll(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	      * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	      * them the respective return values of `this.transactionWrappers.init[i]`
	      * (`close`rs that correspond to initializers that failed will not be
	      * invoked).
	      */
	  closeAll: function closeAll(startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  } };


	var Transaction = {

	  Mixin: Mixin,

	  /**
	                 * Token to look for to determine if an error occurred.
	                 */
	  OBSERVED_ERROR: {} };



	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(60);

	/*eslint-disable no-bitwise */

	/**
	                                * Checks if a given DOM node contains or is another DOM node.
	                                *
	                                * @param {?DOMNode} outerNode Outer DOM node.
	                                * @param {?DOMNode} innerNode Inner DOM node.
	                                * @return {boolean} True if `outerNode` contains or is `innerNode`.
	                                */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	    innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(61);

	/**
	                                   * @param {*} object The object to check.
	                                   * @return {boolean} Whether or not the object is a DOM text node.
	                                   */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 61 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	     * @param {*} object The object to check.
	     * @return {boolean} Whether or not the object is a DOM node.
	     */
	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var ReactCompositeComponent = __webpack_require__(63);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactNativeComponent = __webpack_require__(69);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper() {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent });


	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	   * Check if the type reference is a known internal type. I.e. not a user
	   * provided composite type.
	   *
	   * @param {function} type
	   * @return {boolean} Returns true if this is a valid internal type.
	   */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	   * Given a ReactNode, create an instance that will actually be mounted.
	   *
	   * @param {ReactNode} node
	   * @return {object} A new instance of the element's constructor.
	   * @protected
	   */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : _typeof(element.type), getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node === 'undefined' ? 'undefined' : _typeof(node)) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactPerf = __webpack_require__(18);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var warning = __webpack_require__(25);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	    * ------------------ The Life-Cycle of a Composite Component ------------------
	    *
	    * - constructor: Initialization of state. The instance is now retained.
	    *   - componentWillMount
	    *   - render
	    *   - [children's constructors]
	    *     - [children's componentWillMount and render]
	    *     - [children's componentDidMount]
	    *     - componentDidMount
	    *
	    *       Update Phases:
	    *       - componentWillReceiveProps (only called if parent updated)
	    *       - shouldComponentUpdate
	    *         - componentWillUpdate
	    *           - render
	    *           - [children's constructors or receive props phases]
	    *         - componentDidUpdate
	    *
	    *     - componentWillUnmount
	    *     - [children's componentWillUnmount]
	    *   - [children destroyed]
	    * - (destroyed): The instance is now blank, released by React and ready for GC.
	    *
	    * -----------------------------------------------------------------------------
	    */

	/**
	        * An incrementing ID assigned to each component when it is mounted. This is
	        * used to enforce the order in which `ReactUpdates` updates dirty components.
	        *
	        * @private
	        */
	var nextMountID = 1;

	/**
	                      * @lends {ReactCompositeComponent.prototype}
	                      */
	var ReactCompositeComponentMixin = {

	  /**
	                                      * Base constructor for all composite component.
	                                      *
	                                      * @param {ReactElement} element
	                                      * @final
	                                      * @internal
	                                      */
	  construct: function construct(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	      * Initializes the component, renders markup, and registers event listeners.
	      *
	      * @param {string} rootID DOM ID of the root node.
	      * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	      * @return {?string} Rendered markup to be inserted into the DOM.
	      * @final
	      * @internal
	      */
	  mountComponent: function mountComponent(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = 'prototype' in Component;

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	      * Releases any resources allocated by `mountComponent`.
	      *
	      * @final
	      * @internal
	      */
	  unmountComponent: function unmountComponent() {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	      * Filters the context object to only contain keys specified in
	      * `contextTypes`
	      *
	      * @param {object} context
	      * @return {?object}
	      * @private
	      */
	  _maskContext: function _maskContext(context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	      * Filters the context object to only contain keys specified in
	      * `contextTypes`, and asserts that they are valid.
	      *
	      * @param {object} context
	      * @return {?object}
	      * @private
	      */
	  _processContext: function _processContext(context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	      * @param {object} currentContext
	      * @return {object}
	      * @private
	      */
	  _processChildContext: function _processChildContext(currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(_typeof(Component.childContextTypes) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	      * Processes props by setting default values for unspecified props and
	      * asserting that the props are valid. Does not mutate its argument; returns
	      * a new props object with defaults merged in.
	      *
	      * @param {object} newProps
	      * @return {object}
	      * @private
	      */
	  _processProps: function _processProps(newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	      * Assert that the props are valid
	      *
	      * @param {object} propTypes Map of prop name to a ReactPropType
	      * @param {object} props
	      * @param {string} location e.g. "prop", "context", "child context"
	      * @private
	      */
	  _checkPropTypes: function _checkPropTypes(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	      * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	      * is set, update the component.
	      *
	      * @param {ReactReconcileTransaction} transaction
	      * @internal
	      */
	  performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	      * Perform an update to a mounted component. The componentWillReceiveProps and
	      * shouldComponentUpdate methods are called, then (assuming the update isn't
	      * skipped) the remaining update lifecycle methods are called and the DOM
	      * representation is updated.
	      *
	      * By default, this implements React's rendering and reconciliation algorithm.
	      * Sophisticated clients may wish to override this.
	      *
	      * @param {ReactReconcileTransaction} transaction
	      * @param {ReactElement} prevParentElement
	      * @param {ReactElement} nextParentElement
	      * @internal
	      * @overridable
	      */
	  updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function _processPendingState(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	      * Merges new props and state, notifies delegate methods of update and
	      * performs update.
	      *
	      * @param {ReactElement} nextElement Next element
	      * @param {object} nextProps Next public object to set as properties.
	      * @param {?object} nextState Next object to set as state.
	      * @param {?object} nextContext Next public object to set as context.
	      * @param {ReactReconcileTransaction} transaction
	      * @param {?object} unmaskedContext
	      * @private
	      */
	  _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	      * Call the component's `render` method and update the DOM accordingly.
	      *
	      * @param {ReactReconcileTransaction} transaction
	      * @internal
	      */
	  _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	      * @protected
	      */
	  _replaceNodeWithMarkupByID: function _replaceNodeWithMarkupByID(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	      * @protected
	      */
	  _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	      * @private
	      */
	  _renderValidatedComponent: function _renderValidatedComponent() {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	      * Lazily allocates the refs object and stores `component` as `ref`.
	      *
	      * @param {string} ref Reference name.
	      * @param {component} component Component to store as `ref`.
	      * @final
	      * @private
	      */
	  attachRef: function attachRef(ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	      * Detaches a reference name.
	      *
	      * @param {string} ref Name to dereference.
	      * @final
	      * @private
	      */
	  detachRef: function detachRef(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	      * Get a text description of the component that can be used to identify it
	      * in error messages.
	      * @return {string} The name or null.
	      * @internal
	      */
	  getName: function getName() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	      * Get the publicly accessible representation of this component - i.e. what
	      * is exposed by refs and returned by render. Can be null for stateless
	      * components.
	      *
	      * @return {ReactComponent} the public component instance.
	      * @internal
	      */
	  getPublicInstance: function getPublicInstance() {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null };



	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent' });


	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin };



	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(13);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	                                   * Optionally injectable environment dependent cleanup hook. (server vs.
	                                   * browser etc). Example: A browser system caches DOM nodes based on component
	                                   * ID and must remove that cache entry when this instance is unmounted.
	                                   */
	  unmountIDFromEnvironment: null,

	  /**
	                                   * Optionally injectable hook for swapping out mount images in the middle of
	                                   * the tree.
	                                   */
	  replaceNodeWithMarkupByID: null,

	  /**
	                                    * Optionally injectable hook for processing a queue of child updates. Will
	                                    * later move into MultiChildComponents.
	                                    */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function injectEnvironment(environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    } } };




	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(17);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null });


	module.exports = ReactPropTypeLocations;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context' };

	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 67 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	               * Given a `prevElement` and `nextElement`, determines if the existing
	               * instance should be updated as opposed to being destroyed or replaced by a new
	               * instance. Both arguments are elements. This ensures that this logic can
	               * operate on stateless trees without any backing instance.
	               *
	               * @param {?object} prevElement
	               * @param {?object} nextElement
	               * @return {boolean} True if the existing instance should be updated.
	               * @protected
	               */var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement === 'undefined' ? 'undefined' : _typeof(prevElement);
	  var nextType = typeof nextElement === 'undefined' ? 'undefined' : _typeof(nextElement);
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactReconciler = __webpack_require__(50);

	var assign = __webpack_require__(39);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function injectEmptyComponent(component) {
	    placeholderElement = ReactElement.createElement(component);
	  } };


	function registerNullComponentID() {
	  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
	}

	var ReactEmptyComponent = function ReactEmptyComponent(instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function construct(element) {},
	  mountComponent: function mountComponent(rootID, transaction, context) {
	    transaction.getReactMountReady().enqueue(registerNullComponentID, this);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function receiveComponent() {},
	  unmountComponent: function unmountComponent(rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  } });


	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function injectTextComponentClass(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function injectComponentClasses(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  } };


	/**
	        * Get a composite component wrapper class for a specific tag.
	        *
	        * @param {ReactElement} element The tag for which to get the class.
	        * @return {function} The React class constructor function.
	        */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	   * Get a native internal component class for a specific tag.
	   *
	   * @param {ReactElement} element The element to create.
	   * @return {function} The internal class constructor function.
	   */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	   * @param {ReactText} text
	   * @return {ReactComponent}
	   */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	   * @param {ReactComponent} component
	   * @return {boolean}
	   */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection };


	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null };


	  var updatedAncestorInfo = function updatedAncestorInfo(oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	      * Returns whether
	      */
	  var isTagValidWithParent = function isTagValidWithParent(tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';}


	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;}


	    return true;
	  };

	  /**
	      * Returns whether
	      */
	  var findInvalidAncestorForTag = function findInvalidAncestorForTag(tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;}


	    return null;
	  };

	  /**
	      * Given a ReactCompositeComponent instance, return a list of its recursive
	      * owners, starting at the root and ending with the instance itself.
	      */
	  var findOwnerStack = function findOwnerStack(instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function validateDOMNesting(childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(72);
	var ChangeEventPlugin = __webpack_require__(80);
	var ClientReactRootIndex = __webpack_require__(83);
	var DefaultEventPluginOrder = __webpack_require__(84);
	var EnterLeaveEventPlugin = __webpack_require__(85);
	var ExecutionEnvironment = __webpack_require__(9);
	var HTMLDOMPropertyConfig = __webpack_require__(89);
	var ReactBrowserComponentMixin = __webpack_require__(90);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactDOMComponent = __webpack_require__(93);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactEventListener = __webpack_require__(118);
	var ReactInjection = __webpack_require__(121);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactReconcileTransaction = __webpack_require__(125);
	var SelectEventPlugin = __webpack_require__(130);
	var ServerReactRootIndex = __webpack_require__(131);
	var SimpleEventPlugin = __webpack_require__(132);
	var SVGDOMPropertyConfig = __webpack_require__(141);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	                                                                             * Inject modules for resolving DOM hierarchy and plugin ordering.
	                                                                             */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	                                                          * Some important event plugins included by default (without having to require
	                                                          * them).
	                                                          */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin });


	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(142);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var FallbackCompositionState = __webpack_require__(74);
	var SyntheticCompositionEvent = __webpack_require__(76);
	var SyntheticInputEvent = __webpack_require__(78);

	var keyOf = __webpack_require__(79);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	                                                                                                                                                         * Opera <= 12 includes TextEvent in window, but does not fire
	                                                                                                                                                         * text input events. Rely on keypress instead.
	                                                                                                                                                         */
	function isPresto() {
	  var opera = window.opera;
	  return (typeof opera === 'undefined' ? 'undefined' : _typeof(opera)) === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null }) },

	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste] },

	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null }) },

	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown] },

	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null }) },

	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown] },

	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null }) },

	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown] } };



	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	                               * Return whether a native keypress event is assumed to be a command.
	                               * This is required because Firefox fires `keypress` events for key commands
	                               * (cut, copy, select-all, etc.) even though no character is inserted.
	                               */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	   * Translate native top level events into event types.
	   *
	   * @param {string} topLevelType
	   * @return {object}
	   */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;}

	}

	/**
	   * Does our fallback best-guess model think this event signifies that
	   * composition has begun?
	   *
	   * @param {string} topLevelType
	   * @param {object} nativeEvent
	   * @return {boolean}
	   */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	   * Does our fallback mode think that this event is the end of composition?
	   *
	   * @param {string} topLevelType
	   * @param {object} nativeEvent
	   * @return {boolean}
	   */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;}

	}

	/**
	   * Google Input Tools provides composition data via a CustomEvent,
	   * with the `data` property populated in the `detail` object. If this
	   * is available on the event object, use it. If not, this is a plain
	   * composition event and we have nothing special to extract.
	   *
	   * @param {object} nativeEvent
	   * @return {?string}
	   */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if ((typeof detail === 'undefined' ? 'undefined' : _typeof(detail)) === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	                                * @param {string} topLevelType Record from `EventConstants`.
	                                * @param {DOMEventTarget} topLevelTarget The listening component root node.
	                                * @param {string} topLevelTargetID ID of `topLevelTarget`.
	                                * @param {object} nativeEvent Native browser event.
	                                * @return {?object} A SyntheticCompositionEvent.
	                                */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {?string} The string corresponding to this `beforeInput` event.
	   */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	                                     * If native `textInput` events are available, our goal is to make
	                                     * use of them. However, there is a special case: the spacebar key.
	                                     * In Webkit, preventing default on a spacebar `textInput` event
	                                     * cancels character insertion, but it *also* causes the browser
	                                     * to fall back to its default spacebar behavior of scrolling the
	                                     * page.
	                                     *
	                                     * Tracking at:
	                                     * https://code.google.com/p/chromium/issues/detail?id=355103
	                                     *
	                                     * To avoid this issue, use the keypress event as if no `textInput`
	                                     * event is available.
	                                     */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;}

	}

	/**
	   * For browsers that do not provide the `textInput` event, extract the
	   * appropriate string to use for SyntheticInputEvent.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {?string} The fallback string for this `beforeInput` event.
	   */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	                                     * As of v27, Firefox may fire keypress events even when no character
	                                     * will be inserted. A few possibilities:
	                                     *
	                                     * - `which` is `0`. Arrow keys, Esc key, etc.
	                                     *
	                                     * - `which` is the pressed key code, but no char is available.
	                                     *   Ex: 'AltGr + d` in Polish. There is no modified character for
	                                     *   this key combination and no character is inserted into the
	                                     *   document, but FF fires the keypress for char code `100` anyway.
	                                     *   No `input` event will occur.
	                                     *
	                                     * - `which` is the pressed key code, but a command combination is
	                                     *   being used. Ex: `Cmd+C`. No character is inserted, and no
	                                     *   `input` event will occur.
	                                     */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;}

	}

	/**
	   * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	   * `textInput` or fallback behavior.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {?object} A SyntheticInputEvent.
	   */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	   * Create an `onBeforeInput` event to match
	   * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	   *
	   * This event plugin is based on the native `textInput` event
	   * available in Chrome, Safari, Opera, and IE. This event fires after
	   * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	   *
	   * `beforeInput` is spec'd but not implemented in any browsers, and
	   * the `input` event does not provide any useful information about what has
	   * actually been added, contrary to the spec. Thus, `textInput` is the best
	   * available event to identify the characters that have actually been inserted
	   * into the target node.
	   *
	   * This plugin is also responsible for emitting `composition` events, thus
	   * allowing us to share composition fallback code for both `beforeInput` and
	   * `composition` event types.
	   */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	                           * @param {string} topLevelType Record from `EventConstants`.
	                           * @param {DOMEventTarget} topLevelTarget The listening component root node.
	                           * @param {string} topLevelTargetID ID of `topLevelTarget`.
	                           * @param {object} nativeEvent Native browser event.
	                           * @return {*} An accumulation of synthetic events.
	                           * @see {EventPluginHub.extractEvents}
	                           */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  } };


	module.exports = BeforeInputEventPlugin;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);

	var warning = __webpack_require__(25);

	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	                                               * Some event types have a notion of different registration names for different
	                                               * "phases" of propagation. This finds listeners by a given phase.
	                                               */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	   * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	   * here, allows us to not have to bind or create functions for each event.
	   * Mutating the event's members allows us to not have to create a wrapping
	   * "dispatch" object that pairs the event with the listener.
	   */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	   * Collect dispatches (must be entirely collected before dispatching - see unit
	   * tests). Lazily allocate the array to conserve memory.  We must loop through
	   * each event and perform the traversal for each one. We cannot perform a
	   * single traversal for the entire collection of events because each event may
	   * have a different target.
	   */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	   * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	   */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	   * Accumulates without regard to direction, does not look for phased
	   * registration names. Same as `accumulateDirectDispatchesSingle` but without
	   * requiring that the `dispatchMarker` be the same as the dispatched ID.
	   */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	   * Accumulates dispatches on an `SyntheticEvent`, but only for the
	   * `dispatchMarker`.
	   * @param {SyntheticEvent} event
	   */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	   * A small set of propagation patterns, each of which will accept a small amount
	   * of information, and generate a set of "dispatch ready event objects" - which
	   * are sets of events that have already been annotated with a set of dispatched
	   * listener functions/ids. The API is designed this way to discourage these
	   * propagation strategies from actually executing the dispatches, since we
	   * always want to collect the entire set of dispatches before executing event a
	   * single one.
	   *
	   * @constructor EventPropagators
	   */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches };


	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var getTextContentAccessor = __webpack_require__(75);

	/**
	                                                                   * This helper class stores information about text content of a target node,
	                                                                   * allowing comparison of content before and after a given event.
	                                                                   *
	                                                                   * Identify the node where selection currently begins, then observe
	                                                                   * both its text content and its current position in the DOM. Since the
	                                                                   * browser may natively replace the target node during composition, we can
	                                                                   * use its position to find its replacement.
	                                                                   *
	                                                                   * @param {DOMEventTarget} root
	                                                                   */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function destructor() {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	      * Get current text of input.
	      *
	      * @return {string}
	      */
	  getText: function getText() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	      * Determine the differing substring between the initially stored
	      * text content and the current content.
	      *
	      * @return {string}
	      */
	  getData: function getData() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  } });


	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var contentKey = null;

	/**
	                        * Gets the key used to access text content on a DOM node.
	                        *
	                        * @return {?string} Key used to access text content.
	                        * @internal
	                        */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	                                                   * @interface Event
	                                                   * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	                                                   */
	var CompositionEventInterface = {
	  data: null };


	/**
	                 * @param {object} dispatchConfig Configuration used to dispatch this event.
	                 * @param {string} dispatchMarker Marker identifying the event target.
	                 * @param {object} nativeEvent Native browser event.
	                 * @extends {SyntheticUIEvent}
	                 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);

	/**
	                                            * @interface Event
	                                            * @see http://www.w3.org/TR/DOM-Level-3-Events/
	                                            */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function timeStamp(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null };


	/**
	                      * Synthetic events are dispatched by event plugins, typically in response to a
	                      * top-level event delegation handler.
	                      *
	                      * These systems should generally use pooling to reduce the frequency of garbage
	                      * collection. The system should check `isPersistent` to determine whether the
	                      * event should be released into the pool after being dispatched. Users that
	                      * need a persisted event should invoke `persist`.
	                      *
	                      * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	                      * normalizing browser quirks. Subclasses do not necessarily have to implement a
	                      * DOM interface; custom application-specific events can also subclass this.
	                      *
	                      * @param {object} dispatchConfig Configuration used to dispatch this event.
	                      * @param {string} dispatchMarker Marker identifying the event target.
	                      * @param {object} nativeEvent Native browser event.
	                      */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function preventDefault() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function stopPropagation() {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	      * We release all dispatched `SyntheticEvent`s after each event loop, adding
	      * them back into the pool. This allows a way to hold onto a reference that
	      * won't be added back into the pool.
	      */
	  persist: function persist() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	      * Checks if this event should be released back into the pool.
	      *
	      * @return {boolean} True if this should not be released, false otherwise.
	      */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	                                                 * `PooledClass` looks for `destructor` on each instance it releases.
	                                                 */
	  destructor: function destructor() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  } });



	SyntheticEvent.Interface = EventInterface;

	/**
	                                            * Helper to reduce boilerplate when creating subclasses.
	                                            *
	                                            * @param {function} Class
	                                            * @param {?object} Interface
	                                            */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	                                                   * @interface Event
	                                                   * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	                                                   *      /#events-inputevents
	                                                   */
	var InputEventInterface = {
	  data: null };


	/**
	                 * @param {object} dispatchConfig Configuration used to dispatch this event.
	                 * @param {string} dispatchMarker Marker identifying the event target.
	                 * @param {object} nativeEvent Native browser event.
	                 * @extends {SyntheticUIEvent}
	                 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 79 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	     * Allows extraction of a minified key. Let's the build system minify keys
	     * without losing the ability to dynamically use key strings as values
	     * themselves. Pass in an object with a single key/val pair and it will return
	     * you the string key of that single record. Suppose you want to grab the
	     * value for a key 'className' inside of an object. Key/val minification may
	     * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	     * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	     * reuse those resolutions.
	     */
	"use strict";

	var keyOf = function keyOf(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(54);
	var SyntheticEvent = __webpack_require__(77);

	var getEventTarget = __webpack_require__(81);
	var isEventSupported = __webpack_require__(40);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null }) },

	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange] } };



	/**
	                                                                                                                                                                                                                                     * For IE shims
	                                                                                                                                                                                                                                     */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	                                    * SECTION: handle `change` event
	                                    */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	   * SECTION: handle `input` event
	   */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	   * (For old IE.) Replacement getter/setter for the `value` property that gets
	   * set on the active element.
	   */
	var newValueProp = {
	  get: function get() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function set(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  } };


	/**
	        * (For old IE.) Starts tracking propertychange events on the passed-in element
	        * and override the value property so that we can distinguish user events from
	        * value changes in JS.
	        */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	   * (For old IE.) Removes the event listeners from the currently-tracked element,
	   * if any exists.
	   */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	   * (For old IE.) Handles a propertychange event, sending a `change` event if
	   * the value of the active element has changed.
	   */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	   * If a `change` event should be fired, returns the target's ID.
	   */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	   * SECTION: handle `click` event
	   */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	   * This plugin creates an `onChange` event that normalizes change events
	   * across form elements. This event fires at a time when it's possible to
	   * change the element's value without seeing a flicker.
	   *
	   * Supported elements are:
	   * - input (see `isTextInputElement`)
	   * - textarea
	   * - select
	   */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	                           * @param {string} topLevelType Record from `EventConstants`.
	                           * @param {DOMEventTarget} topLevelTarget The listening component root node.
	                           * @param {string} topLevelTargetID ID of `topLevelTarget`.
	                           * @param {object} nativeEvent Native browser event.
	                           * @return {*} An accumulation of synthetic events.
	                           * @see {EventPluginHub.extractEvents}
	                           */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  } };



	module.exports = ChangeEventPlugin;

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	               * Gets the target node from a native browser event by accounting for
	               * inconsistencies in browser DOM APIs.
	               *
	               * @param {object} nativeEvent Native browser event.
	               * @return {DOMEventTarget} Target node.
	               */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	               * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	               */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true };


	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function createReactRootIndex() {
	    return nextReactRootIndex++;
	  } };


	module.exports = ClientReactRootIndex;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(79);

	/**
	                                        * Module that is injectable into `EventPluginHub`, that specifies a
	                                        * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	                                        * plugins, without having to package every one of them. This is better than
	                                        * having plugins be ordered in the same order that they are injected because
	                                        * that ordering would be influenced by the packaging order.
	                                        * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	                                        * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	                                        */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var SyntheticMouseEvent = __webpack_require__(86);

	var ReactMount = __webpack_require__(28);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver] },

	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver] } };



	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	                           * For almost every interaction we care about, there will be both a top-level
	                           * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	                           * we do not extract duplicate events. However, moving the mouse into the
	                           * browser from outside will not fire a `mouseout` event. In this case, we use
	                           * the `mouseover` top-level event.
	                           *
	                           * @param {string} topLevelType Record from `EventConstants`.
	                           * @param {DOMEventTarget} topLevelTarget The listening component root node.
	                           * @param {string} topLevelTargetID ID of `topLevelTarget`.
	                           * @param {object} nativeEvent Native browser event.
	                           * @return {*} An accumulation of synthetic events.
	                           * @see {EventPluginHub.extractEvents}
	                           */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  } };



	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);
	var ViewportMetrics = __webpack_require__(38);

	var getEventModifierState = __webpack_require__(88);

	/**
	                                                                 * @interface MouseEvent
	                                                                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	                                                                 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function button(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function relatedTarget(event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function pageX(event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function pageY(event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  } };


	/**
	        * @param {object} dispatchConfig Configuration used to dispatch this event.
	        * @param {string} dispatchMarker Marker identifying the event target.
	        * @param {object} nativeEvent Native browser event.
	        * @extends {SyntheticUIEvent}
	        */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	var getEventTarget = __webpack_require__(81);

	/**
	                                                   * @interface UIEvent
	                                                   * @see http://www.w3.org/TR/DOM-Level-3-Events/
	                                                   */
	var UIEventInterface = {
	  view: function view(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function detail(event) {
	    return event.detail || 0;
	  } };


	/**
	        * @param {object} dispatchConfig Configuration used to dispatch this event.
	        * @param {string} dispatchMarker Marker identifying the event target.
	        * @param {object} nativeEvent Native browser event.
	        * @extends {SyntheticEvent}
	        */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	               * Translation from modifier key to the associated property in the event.
	               * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	               */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey' };


	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var ExecutionEnvironment = __webpack_require__(9);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	                 * Standard Properties
	                 */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	                 * RDFa Properties
	                 */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	                                * Non-standard Properties
	                                */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE },

	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv' },

	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset' } };



	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(47);

	var findDOMNode = __webpack_require__(91);
	var warning = __webpack_require__(25);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	                                    * Returns the DOM node rendered by this component.
	                                    *
	                                    * @return {DOMElement} The root node of this component.
	                                    * @final
	                                    * @protected
	                                    */
	  getDOMNode: function getDOMNode() {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  } };


	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMount = __webpack_require__(28);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	                                            * Returns the DOM node rendered by this element.
	                                            *
	                                            * @param {ReactComponent|DOMElement} componentOrElement
	                                            * @return {?DOMElement} The root node of this element.
	                                            */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(54);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function close() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  } };


	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates) };


	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  } });


	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	                             * Call the provided function in a context within which calls to `setState`
	                             * and friends are batched such that components aren't updated unnecessarily.
	                             */
	  batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  } };


	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var AutoFocusUtils = __webpack_require__(94);
	var CSSPropertyOperations = __webpack_require__(96);
	var DOMProperty = __webpack_require__(23);
	var DOMPropertyOperations = __webpack_require__(22);
	var EventConstants = __webpack_require__(30);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDOMButton = __webpack_require__(104);
	var ReactDOMInput = __webpack_require__(105);
	var ReactDOMOption = __webpack_require__(109);
	var ReactDOMSelect = __webpack_require__(112);
	var ReactDOMTextarea = __webpack_require__(113);
	var ReactMount = __webpack_require__(28);
	var ReactMultiChild = __webpack_require__(114);
	var ReactPerf = __webpack_require__(18);
	var ReactUpdateQueue = __webpack_require__(53);

	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var invariant = __webpack_require__(13);
	var isEventSupported = __webpack_require__(40);
	var keyOf = __webpack_require__(79);
	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var shallowEqual = __webpack_require__(117);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function get() {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      } } };


	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	   * @param {object} component
	   * @param {?object} props
	   */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(_typeof(props.dangerouslySetInnerHTML) === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || _typeof(props.style) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener });

	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting' };


	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;}

	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true };


	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true };


	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true },
	omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	   * Creates a new React class that is idempotent and capable of containing other
	   * React components. It accepts event listeners and DOM properties that are
	   * valid according to `DOMProperty`.
	   *
	   *  - Event listeners: `onClick`, `onMouseDown`, etc.
	   *  - DOM properties: `className`, `name`, `title`, etc.
	   *
	   * The `style` property functions differently from the DOM API. It accepts an
	   * object mapping of style properties to values.
	   *
	   * @constructor ReactDOMComponent
	   * @extends ReactMultiChild
	   */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function construct(element) {
	    this._currentElement = element;
	  },

	  /**
	      * Generates root tag markup then recurses. This method has side effects and
	      * is not idempotent.
	      *
	      * @internal
	      * @param {string} rootID The root DOM ID for this node.
	      * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	      * @param {object} context
	      * @return {string} The computed markup.
	      */
	  mountComponent: function mountComponent(rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null };

	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;}


	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;}


	    return mountImage;
	  },

	  /**
	      * Creates markup for the open tag and all attributes.
	      *
	      * This method has side effects because events get registered.
	      *
	      * Iterating over object properties is faster than iterating over arrays.
	      * @see http://jsperf.com/obj-vs-arr-iteration
	      *
	      * @private
	      * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	      * @param {object} props
	      * @return {string} Markup of opening tag.
	      */
	  _createOpenTagMarkupAndPutListeners: function _createOpenTagMarkupAndPutListeners(transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	      * Creates markup for the content between the tags.
	      *
	      * @private
	      * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	      * @param {object} props
	      * @param {object} context
	      * @return {string} Content markup.
	      */
	  _createContentMarkup: function _createContentMarkup(transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function _createInitialChildren(transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	      * Receives a next element and updates the component.
	      *
	      * @internal
	      * @param {ReactElement} nextElement
	      * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	      * @param {object} context
	      */
	  receiveComponent: function receiveComponent(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	      * Updates a native DOM component after it has already been allocated and
	      * attached to the DOM. Reconciles the root DOM node, then recurses.
	      *
	      * @param {ReactReconcileTransaction} transaction
	      * @param {ReactElement} prevElement
	      * @param {ReactElement} nextElement
	      * @internal
	      * @overridable
	      */
	  updateComponent: function updateComponent(transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;}


	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	      * Reconciles the properties by detecting differences in property values and
	      * updating the DOM as necessary. This function is probably the single most
	      * critical path for performance optimization.
	      *
	      * TODO: Benchmark whether checking for changed values in memory actually
	      *       improves performance (especially statically positioned elements).
	      * TODO: Benchmark the effects of putting this at the top since 99% of props
	      *       do not change for a given reconciliation.
	      * TODO: Benchmark areas that can be improved with caching.
	      *
	      * @private
	      * @param {object} lastProps
	      * @param {object} nextProps
	      * @param {ReactReconcileTransaction} transaction
	      * @param {?DOMElement} node
	      */
	  _updateDOMProperties: function _updateDOMProperties(lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	      * Reconciles the children with the various properties that affect the
	      * children content.
	      *
	      * @param {object} lastProps
	      * @param {object} nextProps
	      * @param {ReactReconcileTransaction} transaction
	      * @param {object} context
	      */
	  _updateDOMChildren: function _updateDOMChildren(lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[_typeof(lastProps.children)] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[_typeof(nextProps.children)] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	      * Destroys all event registrations for this instance. Does not remove from
	      * the DOM. That must be done by the parent.
	      *
	      * @internal
	      */
	  unmountComponent: function unmountComponent() {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	                    * Components like <html> <head> and <body> can't be removed or added
	                    * easily in a cross-browser way, however it's valuable to be able to
	                    * take advantage of React's reconciliation for styling and <title>
	                    * management. So we just document it and throw in dangerous cases.
	                    */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;}


	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function getPublicInstance() {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  } };



	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent' });


	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(28);

	var findDOMNode = __webpack_require__(91);
	var focusNode = __webpack_require__(95);

	var Mixin = {
	  componentDidMount: function componentDidMount() {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  } };


	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function focusDOMComponent() {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  } };


	module.exports = AutoFocusUtils;

/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	               * @param {DOMElement} node input/textarea to focus
	               */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(97);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactPerf = __webpack_require__(18);

	var camelizeStyleName = __webpack_require__(98);
	var dangerousStyleValue = __webpack_require__(100);
	var hyphenateStyleName = __webpack_require__(101);
	var memoizeStringOnly = __webpack_require__(103);
	var warning = __webpack_require__(25);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function warnHyphenatedStyleName(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function warnBadVendoredStyleName(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	      * @param {string} name
	      * @param {*} value
	      */
	  var warnValidStyle = function warnValidStyle(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	   * Operations for dealing with CSS properties.
	   */
	var CSSPropertyOperations = {

	  /**
	                               * Serializes a mapping of style properties for use as inline styles:
	                               *
	                               *   > createMarkupForStyles({width: '200px', height: 0})
	                               *   "width:200px;height:0;"
	                               *
	                               * Undefined values are ignored so that declarative programming is easier.
	                               * The result should be HTML-escaped before insertion into the DOM.
	                               *
	                               * @param {object} styles
	                               * @return {?string}
	                               */
	  createMarkupForStyles: function createMarkupForStyles(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	      * Sets the value for multiple styles on a node.  If a value is specified as
	      * '' (empty string), the corresponding style property will be unset.
	      *
	      * @param {DOMElement} node
	      * @param {object} styles
	      */
	  setValueForStyles: function setValueForStyles(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  } };



	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles' });


	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	               * CSS properties which accept numbers but are not in units of "px".
	               */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true };


	/**
	                        * @param {string} prefix vendor-specific prefix, eg: Webkit
	                        * @param {string} key style name, eg: transitionDuration
	                        * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	                        * WebkitTransitionDuration
	                        */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	   * Support style names that may come passed in prefixed by adding permutations
	   * of vendor prefixes.
	   */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	     * Most style properties can be unset by doing .style[prop] = '' but IE8
	     * doesn't like doing that with shorthand properties so for the properties that
	     * IE8 breaks on, which are listed here, we instead unset each of the
	     * individual properties. See http://bugs.jquery.com/ticket/12385.
	     * The 4-value 'clock' properties like margin, padding, border-width seem to
	     * behave without any problems. Curiously, list-style works too without any
	     * special prodding.
	     */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true },

	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true },

	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true },

	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true },

	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true },

	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true },

	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true },

	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true },

	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true } };



	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions };


	module.exports = CSSProperty;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(99);

	var msPattern = /^-ms-/;

	/**
	                          * Camelcases a hyphenated CSS property name, for example:
	                          *
	                          *   > camelizeStyleName('background-color')
	                          *   < "backgroundColor"
	                          *   > camelizeStyleName('-moz-transition')
	                          *   < "MozTransition"
	                          *   > camelizeStyleName('-ms-transition')
	                          *   < "msTransition"
	                          *
	                          * As Andi Smith suggests
	                          * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	                          * is converted to lowercase `ms`.
	                          *
	                          * @param {string} string
	                          * @return {string}
	                          */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 99 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	                               * Camelcases a hyphenated string, for example:
	                               *
	                               *   > camelize('background-color')
	                               *   < "backgroundColor"
	                               *
	                               * @param {string} string
	                               * @return {string}
	                               */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(97);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	                                                      * Convert a value into the proper css writable value. The style name `name`
	                                                      * should be logical (no hyphens), as specified
	                                                      * in `CSSProperty.isUnitlessNumber`.
	                                                      *
	                                                      * @param {string} name CSS property name such as `topMargin`.
	                                                      * @param {*} value CSS property value such as `10px`.
	                                                      * @return {string} Normalized style value with dimensions applied.
	                                                      */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(102);

	var msPattern = /^ms-/;

	/**
	                         * Hyphenates a camelcased CSS property name, for example:
	                         *
	                         *   > hyphenateStyleName('backgroundColor')
	                         *   < "background-color"
	                         *   > hyphenateStyleName('MozTransition')
	                         *   < "-moz-transition"
	                         *   > hyphenateStyleName('msTransition')
	                         *   < "-ms-transition"
	                         *
	                         * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	                         * is converted to `-ms-`.
	                         *
	                         * @param {string} string
	                         * @return {string}
	                         */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	                                     * Hyphenates a camelcased string, for example:
	                                     *
	                                     *   > hyphenate('backgroundColor')
	                                     *   < "background-color"
	                                     *
	                                     * For CSS style names, use `hyphenateStyleName` instead which works properly
	                                     * with all vendor prefixes, including `ms`.
	                                     *
	                                     * @param {string} string
	                                     * @return {string}
	                                     */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	               * Memoizes the return value of a function that accepts one string argument.
	               *
	               * @param {function} callback
	               * @return {function}
	               */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 104 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true };


	/**
	                             * Implements a <button> native component that does not receive mouse events
	                             * when `disabled` is set.
	                             */
	var ReactDOMButton = {
	  getNativeProps: function getNativeProps(inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  } };


	module.exports = ReactDOMButton;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(27);
	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	   * Implements an <input> native component that allows setting these optional
	   * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	   *
	   * If `checked` or `value` are not supplied (or null/undefined), user actions
	   * that affect the checked state or value will trigger updates to the element.
	   *
	   * If they are supplied (and not null/undefined), the rendered element will not
	   * trigger updates to the element. Instead, the props must change in order for
	   * the rendered element to be updated.
	   *
	   * The rendered element will be initialized as unchecked (or `defaultChecked`)
	   * with an empty value (or `defaultValue`).
	   *
	   * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	   */
	var ReactDOMInput = {
	  getNativeProps: function getNativeProps(inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange });


	    return nativeProps;
	  },

	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst) };

	  },

	  mountReadyWrapper: function mountReadyWrapper(inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function unmountWrapper(inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function updateWrapper(inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  } };


	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(107);
	var ReactPropTypeLocations = __webpack_require__(65);

	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true };


	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function value(props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function checked(props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func };


	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	   * Provide a linked `value` attribute for controlled forms. You should not use
	   * this outside of the ReactDOM controlled form components.
	   */
	var LinkedValueUtils = {
	  checkPropTypes: function checkPropTypes(tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	      * @param {object} inputProps Props for form component
	      * @return {*} current value of the input either from value prop or link.
	      */
	  getValue: function getValue(inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	      * @param {object} inputProps Props for form component
	      * @return {*} current checked status of the input either from checked prop
	      *             or link.
	      */
	  getChecked: function getChecked(inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	      * @param {object} inputProps Props for form component
	      * @param {SyntheticEvent} event change event to handle
	      */
	  executeOnChange: function executeOnChange(inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  } };


	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocationNames = __webpack_require__(66);

	var emptyFunction = __webpack_require__(15);
	var getIteratorFn = __webpack_require__(108);

	/**
	                                                 * Collection of methods that allow declaration and validation of props that are
	                                                 * supplied to React components. Example usage:
	                                                 *
	                                                 *   var Props = require('ReactPropTypes');
	                                                 *   var MyArticle = React.createClass({
	                                                 *     propTypes: {
	                                                 *       // An optional string prop named "description".
	                                                 *       description: Props.string,
	                                                 *
	                                                 *       // A required enum prop named "category".
	                                                 *       category: Props.oneOf(['News','Photos']).isRequired,
	                                                 *
	                                                 *       // A prop named "dialog" that requires an instance of Dialog.
	                                                 *       dialog: Props.instanceOf(Dialog).isRequired
	                                                 *     },
	                                                 *     render: function() { ... }
	                                                 *   });
	                                                 *
	                                                 * A more formal specification of how these methods are used:
	                                                 *
	                                                 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	                                                 *   decl := ReactPropTypes.{type}(.isRequired)?
	                                                 *
	                                                 * Each and every declaration produces a function with the same signature. This
	                                                 * allows the creation of custom validation functions. For example:
	                                                 *
	                                                 *  var MyLink = React.createClass({
	                                                 *    propTypes: {
	                                                 *      // An optional string or URI prop named "href".
	                                                 *      href: function(props, propName, componentName) {
	                                                 *        var propValue = props[propName];
	                                                 *        if (propValue != null && typeof propValue !== 'string' &&
	                                                 *            !(propValue instanceof URI)) {
	                                                 *          return new Error(
	                                                 *            'Expected a string or an URI for ' + propName + ' in ' +
	                                                 *            componentName
	                                                 *          );
	                                                 *        }
	                                                 *      }
	                                                 *    },
	                                                 *    render: function() {...}
	                                                 *  });
	                                                 *
	                                                 * @internal
	                                                 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker };


	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;}

	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 108 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(110);
	var ReactDOMSelect = __webpack_require__(112);

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	                                                       * Implements an <option> native component that warns when `selected` is set.
	                                                       */
	var ReactDOMOption = {
	  mountWrapper: function mountWrapper(inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function getNativeProps(inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    if (content) {
	      nativeProps.children = content;
	    }

	    return nativeProps;
	  } };



	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);
	var ReactElement = __webpack_require__(42);

	var emptyFunction = __webpack_require__(15);
	var traverseAllChildren = __webpack_require__(111);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	   * PooledClass representing the bookkeeping associated with performing a child
	   * traversal. Allows avoiding binding callbacks.
	   *
	   * @constructor ForEachBookKeeping
	   * @param {!function} forEachFunction Function to perform traversal with.
	   * @param {?*} forEachContext Context to perform context with.
	   */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	   * Iterates through children that are typically specified as `props.children`.
	   *
	   * The provided forEachFunc(child, index) will be called for each
	   * leaf child.
	   *
	   * @param {?*} children Children tree container.
	   * @param {function(*, int)} forEachFunc
	   * @param {*} forEachContext Context for forEachContext.
	   */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	   * PooledClass representing the bookkeeping associated with performing a child
	   * mapping. Allows avoiding binding callbacks.
	   *
	   * @constructor MapBookKeeping
	   * @param {!*} mapResult Object containing the ordered map of results.
	   * @param {!function} mapFunction Function to perform mapping with.
	   * @param {?*} mapContext Context to perform mapping with.
	   */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	   * Maps children that are typically specified as `props.children`.
	   *
	   * The provided mapFunction(child, key, index) will be called for each
	   * leaf child.
	   *
	   * @param {?*} children Children tree container.
	   * @param {function(*, int)} func The map function.
	   * @param {*} context Context for mapFunction.
	   * @return {object} Object containing the ordered map of results.
	   */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	   * Count the number of children that are typically specified as
	   * `props.children`.
	   *
	   * @param {?*} children Children tree container.
	   * @return {number} The number of children.
	   */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	   * Flatten a children object (typically specified as `props.children`) and
	   * return an array with appropriately re-keyed children.
	   */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray };


	module.exports = ReactChildren;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);

	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	                         * TODO: Test that a single child and an array with one item have the same key
	                         * pattern.
	                         */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2' };


	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	   * Generate a key string that identifies a component within a set.
	   *
	   * @param {*} component A component that could contain a manual key.
	   * @param {number} index Index that is used if a manual key is not provided.
	   * @return {string}
	   */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	   * Escape a component key so that it is safe to use in a reactid.
	   *
	   * @param {*} text Component key to be escaped.
	   * @return {string} An escaped string.
	   */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	   * Wrap a `key` value explicitly provided by the user to distinguish it from
	   * implicitly-generated keys generated by a component's index in its parent.
	   *
	   * @param {string} key Value of a user-provided `key` attribute
	   * @return {string}
	   */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	   * @param {?*} children Children tree container.
	   * @param {!string} nameSoFar Name of the key path so far.
	   * @param {!function} callback Callback to invoke with each child found.
	   * @param {?*} traverseContext Used to pass information throughout the traversal
	   * process.
	   * @return {!number} The number of children in this subtree.
	   */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	   * Traverses children that are typically specified as `props.children`, but
	   * might also be specified through attributes:
	   *
	   * - `traverseAllChildren(this.props.children, ...)`
	   * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	   *
	   * The `traverseContext` is an optional argument that is passed through the
	   * entire traversal. It can be used to store accumulations or anything else that
	   * the callback might find relevant.
	   *
	   * @param {?*} children Children tree object.
	   * @param {!function} callback To invoke upon traversing each child.
	   * @param {?*} traverseContext Context for traversal.
	   * @return {!number} The number of children in this subtree.
	   */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	                                                 * Validation function for `value` and `defaultValue`.
	                                                 * @private
	                                                 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	   * @param {ReactDOMComponent} inst
	   * @param {boolean} multiple
	   * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	   * @private
	   */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	   * Implements a <select> native component that allows optionally setting the
	   * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	   * stringable. If `multiple` is true, the prop must be an array of stringables.
	   *
	   * If `value` is not supplied (or null/undefined), user actions that change the
	   * selected option will trigger updates to the rendered options.
	   *
	   * If it is supplied (and not null/undefined), the rendered options will not
	   * update in response to user actions. Instead, the `value` prop must change in
	   * order for the rendered options to update.
	   *
	   * If `defaultValue` is provided, any options with the supplied values will be
	   * selected.
	   */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function getNativeProps(inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined });

	  },

	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple) };

	  },

	  processChildContext: function processChildContext(inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function postUpdateWrapper(inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  } };


	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(106);
	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	   * Implements a <textarea> native component that allows setting `value`, and
	   * `defaultValue`. This differs from the traditional DOM API because value is
	   * usually set as PCDATA children.
	   *
	   * If `value` is not supplied (or null/undefined), user actions that affect the
	   * value will trigger updates to the element.
	   *
	   * If `value` is supplied (and not null/undefined), the rendered element will
	   * not trigger updates to the element. Instead, the `value` prop must change in
	   * order for the rendered element to be updated.
	   *
	   * The rendered element will be initialized with an empty value, the prop
	   * `defaultValue` if specified, or the children content (deprecated).
	   */
	var ReactDOMTextarea = {
	  getNativeProps: function getNativeProps(inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange });


	    return nativeProps;
	  },

	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst) };

	  },

	  updateWrapper: function updateWrapper(inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  } };


	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);

	var ReactCurrentOwner = __webpack_require__(5);
	var ReactReconciler = __webpack_require__(50);
	var ReactChildReconciler = __webpack_require__(115);

	var flattenChildren = __webpack_require__(116);

	/**
	                                                     * Updating children of a component may trigger recursive updates. The depth is
	                                                     * used to batch recursive updates to render markup more efficiently.
	                                                     *
	                                                     * @type {number}
	                                                     * @private
	                                                     */
	var updateDepth = 0;

	/**
	                      * Queue of update configuration objects.
	                      *
	                      * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	                      *
	                      * @type {array<object>}
	                      * @private
	                      */
	var updateQueue = [];

	/**
	                       * Queue of markup to be rendered.
	                       *
	                       * @type {array<string>}
	                       * @private
	                       */
	var markupQueue = [];

	/**
	                       * Enqueues markup to be rendered and inserted at a supplied index.
	                       *
	                       * @param {string} parentID ID of the parent component.
	                       * @param {string} markup Markup that renders into an element.
	                       * @param {number} toIndex Destination index.
	                       * @private
	                       */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex });

	}

	/**
	   * Enqueues moving an existing element to another index.
	   *
	   * @param {string} parentID ID of the parent component.
	   * @param {number} fromIndex Source index of the existing element.
	   * @param {number} toIndex Destination index of the element.
	   * @private
	   */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex });

	}

	/**
	   * Enqueues removing an element at an index.
	   *
	   * @param {string} parentID ID of the parent component.
	   * @param {number} fromIndex Index of the element to remove.
	   * @private
	   */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null });

	}

	/**
	   * Enqueues setting the markup of a node.
	   *
	   * @param {string} parentID ID of the parent component.
	   * @param {string} markup Markup that renders into an element.
	   * @private
	   */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null });

	}

	/**
	   * Enqueues setting the text content.
	   *
	   * @param {string} parentID ID of the parent component.
	   * @param {string} textContent Text content to set.
	   * @private
	   */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null });

	}

	/**
	   * Processes any enqueued updates.
	   *
	   * @private
	   */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	   * Clears any enqueued updates.
	   *
	   * @private
	   */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	   * ReactMultiChild are capable of reconciling multiple children.
	   *
	   * @class ReactMultiChild
	   * @internal
	   */
	var ReactMultiChild = {

	  /**
	                         * Provides common functionality for components that must reconcile multiple
	                         * children. This is used by `ReactDOMComponent` to mount, update, and
	                         * unmount child components.
	                         *
	                         * @lends {ReactMultiChild.prototype}
	                         */
	  Mixin: {

	    _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	        * Generates a "mount image" for each of the supplied children. In the case
	        * of `ReactDOMComponent`, a mount image is a string of markup.
	        *
	        * @param {?object} nestedChildren Nested child maps.
	        * @return {array} An array of mounted representations.
	        * @internal
	        */
	    mountChildren: function mountChildren(nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	        * Replaces any rendered children with a text content string.
	        *
	        * @param {string} nextContent String of content.
	        * @internal
	        */
	    updateTextContent: function updateTextContent(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	        * Replaces any rendered children with a markup string.
	        *
	        * @param {string} nextMarkup String of markup.
	        * @internal
	        */
	    updateMarkup: function updateMarkup(nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	        * Updates the rendered children with new children.
	        *
	        * @param {?object} nextNestedChildrenElements Nested child element maps.
	        * @param {ReactReconcileTransaction} transaction
	        * @internal
	        */
	    updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	        * Improve performance by isolating this hot code path from the try/catch
	        * block in `updateChildren`.
	        *
	        * @param {?object} nextNestedChildrenElements Nested child element maps.
	        * @param {ReactReconcileTransaction} transaction
	        * @final
	        * @protected
	        */
	    _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	        * Unmounts all rendered children. This should be used to clean up children
	        * when this component is unmounted.
	        *
	        * @internal
	        */
	    unmountChildren: function unmountChildren() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	        * Moves a child component to the supplied index.
	        *
	        * @param {ReactComponent} child Component to move.
	        * @param {number} toIndex Destination index of the element.
	        * @param {number} lastIndex Last index visited of the siblings of `child`.
	        * @protected
	        */
	    moveChild: function moveChild(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	        * Creates a child component.
	        *
	        * @param {ReactComponent} child Component to create.
	        * @param {string} mountImage Markup to insert.
	        * @protected
	        */
	    createChild: function createChild(child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	        * Removes a child component.
	        *
	        * @param {ReactComponent} child Child to remove.
	        * @protected
	        */
	    removeChild: function removeChild(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	        * Sets this text content string.
	        *
	        * @param {string} textContent Text content to set.
	        * @protected
	        */
	    setTextContent: function setTextContent(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	        * Sets this markup string.
	        *
	        * @param {string} markup Markup to set.
	        * @protected
	        */
	    setMarkup: function setMarkup(markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	        * Mounts a child with the supplied name.
	        *
	        * NOTE: This is part of `updateChildren` and is here for readability.
	        *
	        * @param {ReactComponent} child Component to mount.
	        * @param {string} name Name of the child.
	        * @param {number} index Index at which to insert the child.
	        * @param {ReactReconcileTransaction} transaction
	        * @private
	        */
	    _mountChildByNameAtIndex: function _mountChildByNameAtIndex(child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	        * Unmounts a rendered child.
	        *
	        * NOTE: This is part of `updateChildren` and is here for readability.
	        *
	        * @param {ReactComponent} child Component to unmount.
	        * @private
	        */
	    _unmountChild: function _unmountChild(child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    } } };





	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(50);

	var instantiateReactComponent = __webpack_require__(62);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	   * ReactChildReconciler provides helpers for initializing or updating a set of
	   * children. Its output is suitable for passing it onto ReactMultiChild which
	   * does diffed reordering and insertion.
	   */
	var ReactChildReconciler = {
	  /**
	                              * Generates a "mount image" for each of the supplied children. In the case
	                              * of `ReactDOMComponent`, a mount image is a string of markup.
	                              *
	                              * @param {?object} nestedChildNodes Nested child maps.
	                              * @return {?object} A set of child instances.
	                              * @internal
	                              */
	  instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	      * Updates the rendered children and returns a new set of children.
	      *
	      * @param {?object} prevChildren Previously initialized set of children.
	      * @param {?object} nextChildren Flat child element maps.
	      * @param {ReactReconcileTransaction} transaction
	      * @param {object} context
	      * @return {?object} A new set of child instances.
	      * @internal
	      */
	  updateChildren: function updateChildren(prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	      * Unmounts all rendered children. This should be used to clean up children
	      * when this component is unmounted.
	      *
	      * @param {?object} renderedChildren Previously initialized set of children.
	      * @internal
	      */
	  unmountChildren: function unmountChildren(renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  } };



	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);

	/**
	                                            * @param {function} traverseContext Context passed through traversal.
	                                            * @param {?ReactComponent} child React child component.
	                                            * @param {!string} name String name of key path to child.
	                                            */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	   * Flattens children that are typically specified as `props.children`. Any null
	   * children will not be included in the resulting object.
	   * @return {!object} flattened children keyed by name.
	   */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 117 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	                                                       * Performs equality by iterating through keys on an object and returning false
	                                                       * when any key has values which are not strictly equal between the arguments.
	                                                       * Returns true when the values of all keys are strictly equal.
	                                                       */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(119);
	var ExecutionEnvironment = __webpack_require__(9);
	var PooledClass = __webpack_require__(56);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);

	var assign = __webpack_require__(39);
	var getEventTarget = __webpack_require__(81);
	var getUnboundedScrollPosition = __webpack_require__(120);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	                                       * Finds the parent React component of `node`.
	                                       *
	                                       * @param {*} node
	                                       * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	                                       *                           is not nested.
	                                       */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function destructor() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  } });

	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function setHandleTopLevel(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function setEnabled(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function isEnabled() {
	    return ReactEventListener._enabled;
	  },

	  /**
	      * Traps top-level events by using event bubbling.
	      *
	      * @param {string} topLevelType Record from `EventConstants`.
	      * @param {string} handlerBaseName Event name (e.g. "click").
	      * @param {object} handle Element on which to attach listener.
	      * @return {?object} An object with a remove function which will forcefully
	      *                  remove the listener.
	      * @internal
	      */
	  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	      * Traps a top-level event by using event capturing.
	      *
	      * @param {string} topLevelType Record from `EventConstants`.
	      * @param {string} handlerBaseName Event name (e.g. "click").
	      * @param {object} handle Element on which to attach listener.
	      * @return {?object} An object with a remove function which will forcefully
	      *                  remove the listener.
	      * @internal
	      */
	  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function monitorScrollValue(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function dispatchEvent(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  } };


	module.exports = ReactEventListener;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(15);

	/**
	                                                 * Upstream version of event listener. Does not take into account specific
	                                                 * nature of platform.
	                                                 */
	var EventListener = {
	  /**
	                       * Listen to DOM events during the bubble phase.
	                       *
	                       * @param {DOMEventTarget} target DOM element to register listener on.
	                       * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	                       * @param {function} callback Callback function.
	                       * @return {object} Object with a `remove` method.
	                       */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        } };

	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        } };

	    }
	  },

	  /**
	      * Listen to DOM events during the capture phase.
	      *
	      * @param {DOMEventTarget} target DOM element to register listener on.
	      * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	      * @param {function} callback Callback function.
	      * @return {object} Object with a `remove` method.
	      */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        } };

	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction };

	    }
	  },

	  registerDefault: function registerDefault() {} };


	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	               * Gets the scroll position of the supplied element or window.
	               *
	               * The return values are unbounded, unlike `getScrollPosition`. This means they
	               * may be negative or exceed the element boundaries (which is possible using
	               * inertial scrolling).
	               *
	               * @param {DOMWindow|DOMElement} scrollable
	               * @return {object} Map with `x` and `y` keys.
	               */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop };

	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop };

	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);
	var EventPluginHub = __webpack_require__(31);
	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactClass = __webpack_require__(122);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactNativeComponent = __webpack_require__(69);
	var ReactPerf = __webpack_require__(18);
	var ReactRootIndex = __webpack_require__(46);
	var ReactUpdates = __webpack_require__(54);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection };


	module.exports = ReactInjection;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var ReactComponent = __webpack_require__(123);
	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactNoopUpdateQueue = __webpack_require__(124);

	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var keyMirror = __webpack_require__(17);
	var keyOf = __webpack_require__(79);
	var warning = __webpack_require__(25);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	                                           * Policies that describe methods in `ReactClassInterface`.
	                                           */
	var SpecPolicy = keyMirror({
	  /**
	                              * These methods may be defined only once by the class specification or mixin.
	                              */
	  DEFINE_ONCE: null,
	  /**
	                      * These methods may be defined by both the class specification and mixins.
	                      * Subsequent definitions will be chained. These methods must return void.
	                      */
	  DEFINE_MANY: null,
	  /**
	                      * These methods are overriding the base class.
	                      */
	  OVERRIDE_BASE: null,
	  /**
	                        * These methods are similar to DEFINE_MANY, except we assume they return
	                        * objects. We try to merge the keys of the return values of all the mixed in
	                        * functions. If there is a key conflict we throw.
	                        */
	  DEFINE_MANY_MERGED: null });


	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	   * Composite components are higher-level components that compose other composite
	   * or native components.
	   *
	   * To create a new type of `ReactClass`, pass a specification of
	   * your new class to `React.createClass`. The only requirement of your class
	   * specification is that you implement a `render` method.
	   *
	   *   var MyComponent = React.createClass({
	   *     render: function() {
	   *       return <div>Hello World</div>;
	   *     }
	   *   });
	   *
	   * The class specification supports a specific protocol of methods that have
	   * special meaning (e.g. `render`). See `ReactClassInterface` for
	   * more the comprehensive protocol. Any other properties and methods in the
	   * class specification will be available on the prototype.
	   *
	   * @interface ReactClassInterface
	   * @internal
	   */
	var ReactClassInterface = {

	  /**
	                             * An array of Mixin objects to include when defining your component.
	                             *
	                             * @type {array}
	                             * @optional
	                             */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	                                   * An object containing properties and methods that should be defined on
	                                   * the component's constructor instead of its prototype (static methods).
	                                   *
	                                   * @type {object}
	                                   * @optional
	                                   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	                                    * Definition of prop types for this component.
	                                    *
	                                    * @type {object}
	                                    * @optional
	                                    */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	                                      * Definition of context types for this component.
	                                      *
	                                      * @type {object}
	                                      * @optional
	                                      */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	                                         * Definition of context types this component sets for its children.
	                                         *
	                                         * @type {object}
	                                         * @optional
	                                         */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	                                                   * Invoked once before the component is mounted. The return value will be used
	                                                   * as the initial value of `this.state`.
	                                                   *
	                                                   *   getInitialState: function() {
	                                                   *     return {
	                                                   *       isOn: false,
	                                                   *       fooBaz: new BazFoo()
	                                                   *     }
	                                                   *   }
	                                                   *
	                                                   * @return {object}
	                                                   * @optional
	                                                   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	                                                   * @return {object}
	                                                   * @optional
	                                                   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	                                                   * Uses props from `this.props` and state from `this.state` to render the
	                                                   * structure of the component.
	                                                   *
	                                                   * No guarantees are made about when or how often this method is invoked, so
	                                                   * it must not have side effects.
	                                                   *
	                                                   *   render: function() {
	                                                   *     var name = this.props.name;
	                                                   *     return <div>Hello, {name}!</div>;
	                                                   *   }
	                                                   *
	                                                   * @return {ReactComponent}
	                                                   * @nosideeffects
	                                                   * @required
	                                                   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	                                               * Invoked when the component has been mounted and has a DOM representation.
	                                               * However, there is no guarantee that the DOM node is in the document.
	                                               *
	                                               * Use this as an opportunity to operate on the DOM when the component has
	                                               * been mounted (initialized and rendered) for the first time.
	                                               *
	                                               * @param {DOMElement} rootNode DOM element representing the component.
	                                               * @optional
	                                               */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	                                              * Invoked before the component receives new props.
	                                              *
	                                              * Use this as an opportunity to react to a prop transition by updating the
	                                              * state using `this.setState`. Current props are accessed via `this.props`.
	                                              *
	                                              *   componentWillReceiveProps: function(nextProps, nextContext) {
	                                              *     this.setState({
	                                              *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	                                              *     });
	                                              *   }
	                                              *
	                                              * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	                                              * transition may cause a state change, but the opposite is not true. If you
	                                              * need it, you are probably looking for `componentWillUpdate`.
	                                              *
	                                              * @param {object} nextProps
	                                              * @optional
	                                              */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	                                                      * Invoked while deciding if the component should be updated as a result of
	                                                      * receiving new props, state and/or context.
	                                                      *
	                                                      * Use this as an opportunity to `return false` when you're certain that the
	                                                      * transition to the new props/state/context will not require a component
	                                                      * update.
	                                                      *
	                                                      *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	                                                      *     return !equal(nextProps, this.props) ||
	                                                      *       !equal(nextState, this.state) ||
	                                                      *       !equal(nextContext, this.context);
	                                                      *   }
	                                                      *
	                                                      * @param {object} nextProps
	                                                      * @param {?object} nextState
	                                                      * @param {?object} nextContext
	                                                      * @return {boolean} True if the component should update.
	                                                      * @optional
	                                                      */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	                                                  * Invoked when the component is about to update due to a transition from
	                                                  * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	                                                  * and `nextContext`.
	                                                  *
	                                                  * Use this as an opportunity to perform preparation before an update occurs.
	                                                  *
	                                                  * NOTE: You **cannot** use `this.setState()` in this method.
	                                                  *
	                                                  * @param {object} nextProps
	                                                  * @param {?object} nextState
	                                                  * @param {?object} nextContext
	                                                  * @param {ReactReconcileTransaction} transaction
	                                                  * @optional
	                                                  */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	                                                * Invoked when the component's DOM representation has been updated.
	                                                *
	                                                * Use this as an opportunity to operate on the DOM when the component has
	                                                * been updated.
	                                                *
	                                                * @param {object} prevProps
	                                                * @param {?object} prevState
	                                                * @param {?object} prevContext
	                                                * @param {DOMElement} rootNode DOM element representing the component.
	                                                * @optional
	                                                */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	                                               * Invoked when the component is about to be removed from its parent and have
	                                               * its DOM representation destroyed.
	                                               *
	                                               * Use this as an opportunity to deallocate any external resources.
	                                               *
	                                               * NOTE: There is no `componentDidUnmount` since your component will have been
	                                               * destroyed by that point.
	                                               *
	                                               * @optional
	                                               */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE };



	/**
	                                                * Mapping from class specification keys to special processing functions.
	                                                *
	                                                * Although these are declared like instance properties in the specification
	                                                * when defining classes using `React.createClass`, they are actually static
	                                                * and are accessible on the constructor instead of the prototype. Despite
	                                                * being static, they must be defined outside of the "statics" key under
	                                                * which all other static methods are defined.
	                                                */
	var RESERVED_SPEC_KEYS = {
	  displayName: function displayName(Constructor, _displayName) {
	    Constructor.displayName = _displayName;
	  },
	  mixins: function mixins(Constructor, _mixins) {
	    if (_mixins) {
	      for (var i = 0; i < _mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, _mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, _childContextTypes);
	  },
	  contextTypes: function contextTypes(Constructor, _contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, _contextTypes);
	  },
	  /**
	      * Special case getDefaultProps which should move into statics but requires
	      * automatic merging.
	      */
	  getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = _getDefaultProps;
	    }
	  },
	  propTypes: function propTypes(Constructor, _propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, _propTypes);
	  },
	  statics: function statics(Constructor, _statics) {
	    mixStaticSpecIntoComponent(Constructor, _statics);
	  },
	  autobind: function autobind() {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	   * Mixin helper which handles policy validation and reserved
	   * specification keys when building React classses.
	   */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	   * Merge two objects, but throw if both contain the same key.
	   *
	   * @param {object} one The first object, which is mutated.
	   * @param {object} two The second object
	   * @return {object} one after it has been mutated to contain everything in two.
	   */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && (typeof one === 'undefined' ? 'undefined' : _typeof(one)) === 'object' && (typeof two === 'undefined' ? 'undefined' : _typeof(two)) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	   * Creates a function that invokes two functions and merges their return values.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	   * Creates a function that invokes two functions and ignores their return vales.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	   * Binds a method to the component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   * @param {function} method Method to be bound.
	   * @return {function} The bound method.
	   */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	   * Binds all auto-bound methods in a component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	   * Add more to the ReactClass base class. These are all legacy features and
	   * therefore not already part of the modern ReactComponent.
	   */
	var ReactClassMixin = {

	  /**
	                         * TODO: This will be deprecated because state should always keep a consistent
	                         * type signature and the only use case for this, is to avoid that.
	                         */
	  replaceState: function replaceState(newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	      * Checks whether or not this composite component is mounted.
	      * @return {boolean} True if mounted, false otherwise.
	      * @protected
	      * @final
	      */
	  isMounted: function isMounted() {
	    return this.updater.isMounted(this);
	  },

	  /**
	      * Sets a subset of the props.
	      *
	      * @param {object} partialProps Subset of the next props.
	      * @param {?function} callback Called after props are updated.
	      * @final
	      * @public
	      * @deprecated
	      */
	  setProps: function setProps(partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	      * Replace all the props.
	      *
	      * @param {object} newProps Subset of the next props.
	      * @param {?function} callback Called after props are updated.
	      * @final
	      * @public
	      * @deprecated
	      */
	  replaceProps: function replaceProps(newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  } };


	var ReactClassComponent = function ReactClassComponent() {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	                                                                                   * Module for creating composite components.
	                                                                                   *
	                                                                                   * @class ReactClass
	                                                                                   */
	var ReactClass = {

	  /**
	                    * Creates a composite component class given a class specification.
	                    *
	                    * @param {object} spec Class specification (which must define `render`).
	                    * @return {function} Component constructor function.
	                    * @public
	                    */
	  createClass: function createClass(spec) {
	    var Constructor = function Constructor(props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function injectMixin(mixin) {
	      injectedMixins.push(mixin);
	    } } };




	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var ReactNoopUpdateQueue = __webpack_require__(124);

	var canDefineProperty = __webpack_require__(43);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	/**
	                                            * Base class helpers for the updating state of a component.
	                                            */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	                                                 * Sets a subset of the state. Always use this to mutate
	                                                 * state. You should treat `this.state` as immutable.
	                                                 *
	                                                 * There is no guarantee that `this.state` will be immediately updated, so
	                                                 * accessing `this.state` after calling this method may return the old value.
	                                                 *
	                                                 * There is no guarantee that calls to `setState` will run synchronously,
	                                                 * as they may eventually be batched together.  You can provide an optional
	                                                 * callback that will be executed when the call to setState is actually
	                                                 * completed.
	                                                 *
	                                                 * When a function is provided to setState, it will be called at some point in
	                                                 * the future (not synchronously). It will be called with the up to date
	                                                 * component arguments (state, props, context). These values can be different
	                                                 * from this.* because your function may be called after receiveProps but before
	                                                 * shouldComponentUpdate, and this new state, props, and context will not yet be
	                                                 * assigned to this.
	                                                 *
	                                                 * @param {object|function} partialState Next partial state or function to
	                                                 *        produce next partial state to be merged with current state.
	                                                 * @param {?function} callback Called after state is updated.
	                                                 * @final
	                                                 * @protected
	                                                 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !((typeof partialState === 'undefined' ? 'undefined' : _typeof(partialState)) === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	    * Forces an update. This should only be invoked when it is known with
	    * certainty that we are **not** in a DOM transaction.
	    *
	    * You may want to call this when you know that some deeper aspect of the
	    * component's state has changed but `setState` was not called.
	    *
	    * This will not invoke `shouldComponentUpdate`, but it will invoke
	    * `componentWillUpdate` and `componentDidUpdate`.
	    *
	    * @param {?function} callback Called after update is complete.
	    * @final
	    * @protected
	    */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	    * Deprecated APIs. These APIs used to exist on classic React classes but since
	    * we would like to deprecate them, we're not going to move them over to this
	    * modern base class. Instead, we define a getter that warns if it's accessed.
	    */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.'] };

	  var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function get() {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        } });

	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(25);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	   * This is the abstract API for an update queue.
	   */
	var ReactNoopUpdateQueue = {

	  /**
	                              * Checks whether or not this composite component is mounted.
	                              * @param {ReactClass} publicInstance The instance we want to test.
	                              * @return {boolean} True if mounted, false otherwise.
	                              * @protected
	                              * @final
	                              */
	  isMounted: function isMounted(publicInstance) {
	    return false;
	  },

	  /**
	      * Enqueue a callback that will be executed after all the pending updates
	      * have processed.
	      *
	      * @param {ReactClass} publicInstance The instance to use as `this` context.
	      * @param {?function} callback Called after state is updated.
	      * @internal
	      */
	  enqueueCallback: function enqueueCallback(publicInstance, callback) {},

	  /**
	                                                                           * Forces an update. This should only be invoked when it is known with
	                                                                           * certainty that we are **not** in a DOM transaction.
	                                                                           *
	                                                                           * You may want to call this when you know that some deeper aspect of the
	                                                                           * component's state has changed but `setState` was not called.
	                                                                           *
	                                                                           * This will not invoke `shouldComponentUpdate`, but it will invoke
	                                                                           * `componentWillUpdate` and `componentDidUpdate`.
	                                                                           *
	                                                                           * @param {ReactClass} publicInstance The instance that should rerender.
	                                                                           * @internal
	                                                                           */
	  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	      * Replaces all of the state. Always use this or `setState` to mutate state.
	      * You should treat `this.state` as immutable.
	      *
	      * There is no guarantee that `this.state` will be immediately updated, so
	      * accessing `this.state` after calling this method may return the old value.
	      *
	      * @param {ReactClass} publicInstance The instance that should rerender.
	      * @param {object} completeState Next state.
	      * @internal
	      */
	  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	      * Sets a subset of the state. This only exists because _pendingState is
	      * internal. This provides a merging strategy that is not available to deep
	      * properties which is confusing. TODO: Expose pendingState or don't use it
	      * during the merge.
	      *
	      * @param {ReactClass} publicInstance The instance that should rerender.
	      * @param {object} partialState Next partial state to be merged with state.
	      * @internal
	      */
	  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	      * Sets a subset of the props.
	      *
	      * @param {ReactClass} publicInstance The instance that should rerender.
	      * @param {object} partialProps Subset of the next props.
	      * @internal
	      */
	  enqueueSetProps: function enqueueSetProps(publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	      * Replaces all of the props.
	      *
	      * @param {ReactClass} publicInstance The instance that should rerender.
	      * @param {object} props New props.
	      * @internal
	      */
	  enqueueReplaceProps: function enqueueReplaceProps(publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  } };



	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactInputSelection = __webpack_require__(126);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);

	/**
	                                          * Ensures that, when possible, the selection range (currently selected text
	                                          * input) is not disturbed by performing the transaction.
	                                          */
	var SELECTION_RESTORATION = {
	  /**
	                               * @return {Selection} Selection information.
	                               */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	                                                            * @param {Selection} sel Selection information returned from `initialize`.
	                                                            */
	  close: ReactInputSelection.restoreSelection };


	/**
	                                                  * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	                                                  * high level DOM manipulations (like temporarily removing a text input from the
	                                                  * DOM).
	                                                  */
	var EVENT_SUPPRESSION = {
	  /**
	                           * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	                           * the reconciliation.
	                           */
	  initialize: function initialize() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	      * @param {boolean} previouslyEnabled Enabled status of
	      *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	      *   restores the previous value.
	      */
	  close: function close(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  } };


	/**
	        * Provides a queue for collecting `componentDidMount` and
	        * `componentDidUpdate` callbacks during the the transaction.
	        */
	var ON_DOM_READY_QUEUEING = {
	  /**
	                               * Initializes the internal `onDOMReady` queue.
	                               */
	  initialize: function initialize() {
	    this.reactMountReady.reset();
	  },

	  /**
	      * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	      */
	  close: function close() {
	    this.reactMountReady.notifyAll();
	  } };


	/**
	        * Executed within the scope of the `Transaction` instance. Consider these as
	        * being member methods, but with an implied ordering while being isolated from
	        * each other.
	        */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	                                                                                               * Currently:
	                                                                                               * - The order that these are listed in the transaction is critical:
	                                                                                               * - Suppresses events.
	                                                                                               * - Restores selection range.
	                                                                                               *
	                                                                                               * Future:
	                                                                                               * - Restore document/overflow scroll positions that were unintentionally
	                                                                                               *   modified via DOM insertions above the top viewport boundary.
	                                                                                               * - Implement/integrate with customized constraint based layout system and keep
	                                                                                               *   track of which dimensions must be remeasured.
	                                                                                               *
	                                                                                               * @class ReactReconcileTransaction
	                                                                                               */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	               * @see Transaction
	               * @abstract
	               * @final
	               * @return {array<object>} List of operation wrap procedures.
	               *   TODO: convert to array<TransactionWrapper>
	               */
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	      * @return {object} The queue to collect `onDOMReady` callbacks with.
	      */
	  getReactMountReady: function getReactMountReady() {
	    return this.reactMountReady;
	  },

	  /**
	      * `PooledClass` looks for this, and will invoke this before allowing this
	      * instance to be reused.
	      */
	  destructor: function destructor() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  } };


	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(127);

	var containsNode = __webpack_require__(59);
	var focusNode = __webpack_require__(95);
	var getActiveElement = __webpack_require__(129);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	   * @ReactInputSelection: React input selection module. Based on Selection.js,
	   * but modified to be suitable for react and has a couple of bug fixes (doesn't
	   * assume buttons have range selections allowed).
	   * Input selection module for React.
	   */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function hasSelectionCapabilities(elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function getSelectionInformation() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null };

	  },

	  /**
	      * @restoreSelection: If any selection information was potentially lost,
	      * restore it. This is useful when performing operations that could remove dom
	      * nodes and place them back in, resulting in focus being lost.
	      */
	  restoreSelection: function restoreSelection(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	      * @getSelection: Gets the selection bounds of a focused textarea, input or
	      * contentEditable node.
	      * -@input: Look up selection bounds of this input
	      * -@return {start: selectionStart, end: selectionEnd}
	      */
	  getSelection: function getSelection(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd };

	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length) };

	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	      * @setSelection: Sets the selection bounds of a textarea or input and focuses
	      * the input.
	      * -@input     Set selection bounds of this input or textarea
	      * -@offsets   Object of same form that is returned from get*
	      */
	  setSelection: function setSelection(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  } };


	module.exports = ReactInputSelection;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var getNodeForCharacterOffset = __webpack_require__(128);
	var getTextContentAccessor = __webpack_require__(75);

	/**
	                                                                   * While `isCollapsed` is available on the Selection object and `collapsed`
	                                                                   * is available on the Range object, IE11 sometimes gets them wrong.
	                                                                   * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	                                                                   */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	   * Get the appropriate anchor and focus node/offset pairs for IE.
	   *
	   * The catch here is that IE's selection API doesn't provide information
	   * about whether the selection is forward or backward, so we have to
	   * behave as though it's always forward.
	   *
	   * IE text differs from modern selection in that it behaves as though
	   * block elements end with a new line. This means character offsets will
	   * differ between the two APIs.
	   *
	   * @param {DOMElement} node
	   * @return {object}
	   */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset };

	}

	/**
	   * @param {DOMElement} node
	   * @return {?object}
	   */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end };

	}

	/**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	   * In modern non-IE browsers, we can support both forward and backward
	   * selections.
	   *
	   * Note: IE10+ supports the Selection object, but it does not support
	   * the `extend` method, which means that even in modern IE, it's not possible
	   * to programatically create a backward selection. Thus, for all IE
	   * versions, we use the old IE API to create our selections.
	   *
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	                           * @param {DOMElement} node
	                           */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	                                                               * @param {DOMElement|DOMTextNode} node
	                                                               * @param {object} offsets
	                                                               */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets };


	module.exports = ReactDOMSelection;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	               * Given any node return the first leaf node without children.
	               *
	               * @param {DOMElement|DOMTextNode} node
	               * @return {DOMElement|DOMTextNode}
	               */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	   * Get the next sibling within a container. This will walk up the
	   * DOM if a node's siblings have been exhausted.
	   *
	   * @param {DOMElement|DOMTextNode} node
	   * @return {?DOMElement|DOMTextNode}
	   */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	   * Get object describing the nodes which contain characters at offset.
	   *
	   * @param {DOMElement|DOMTextNode} root
	   * @param {number} offset
	   * @return {?object}
	   */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart };

	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	                                              * Same as document.activeElement but wraps in a try-catch block. In IE it is
	                                              * not safe to call document.activeElement if there is nothing focused.
	                                              *
	                                              * The activeElement will be null only if the document or document body is not
	                                              * yet defined.
	                                              */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactInputSelection = __webpack_require__(126);
	var SyntheticEvent = __webpack_require__(77);

	var getActiveElement = __webpack_require__(129);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);
	var shallowEqual = __webpack_require__(117);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null }) },

	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange] } };



	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	                                                * Get an object which is a unique representation of the current selection.
	                                                *
	                                                * The return value will not be consistent across nodes or browsers, but
	                                                * two identical selections on the same node will return identical objects.
	                                                *
	                                                * @param {DOMElement} node
	                                                * @return {object}
	                                                */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd };

	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset };

	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft };

	  }
	}

	/**
	   * Poll selection to see whether it's changed.
	   *
	   * @param {object} nativeEvent
	   * @return {?SyntheticEvent}
	   */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	   * This plugin creates an `onSelect` event that normalizes select events
	   * across form elements.
	   *
	   * Supported elements are:
	   * - input (see `isTextInputElement`)
	   * - textarea
	   * - contentEditable
	   *
	   * This differs from native browser implementations in the following ways:
	   * - Fires on contentEditable fields as well as inputs.
	   * - Fires for collapsed selection.
	   * - Fires after user input.
	   */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	                           * @param {string} topLevelType Record from `EventConstants`.
	                           * @param {DOMEventTarget} topLevelTarget The listening component root node.
	                           * @param {string} topLevelTargetID ID of `topLevelTarget`.
	                           * @param {object} nativeEvent Native browser event.
	                           * @return {*} An accumulation of synthetic events.
	                           * @see {EventPluginHub.extractEvents}
	                           */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);}


	    return null;
	  },

	  didPutListener: function didPutListener(id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  } };


	module.exports = SelectEventPlugin;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	               * Size of the reactRoot ID space. We generate random numbers for React root
	               * IDs and if there's a collision the events and DOM update system will
	               * get confused. In the future we need a way to generate GUIDs but for
	               * now this will work on a smaller scale.
	               */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function createReactRootIndex() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  } };


	module.exports = ServerReactRootIndex;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(30);
	var EventListener = __webpack_require__(119);
	var EventPropagators = __webpack_require__(73);
	var ReactMount = __webpack_require__(28);
	var SyntheticClipboardEvent = __webpack_require__(133);
	var SyntheticEvent = __webpack_require__(77);
	var SyntheticFocusEvent = __webpack_require__(134);
	var SyntheticKeyboardEvent = __webpack_require__(135);
	var SyntheticMouseEvent = __webpack_require__(86);
	var SyntheticDragEvent = __webpack_require__(138);
	var SyntheticTouchEvent = __webpack_require__(139);
	var SyntheticUIEvent = __webpack_require__(87);
	var SyntheticWheelEvent = __webpack_require__(140);

	var emptyFunction = __webpack_require__(15);
	var getEventCharCode = __webpack_require__(136);
	var invariant = __webpack_require__(13);
	var keyOf = __webpack_require__(79);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true }) } },


	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true }) } },


	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true }) } },


	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true }) } },


	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true }) } },


	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true }) } },


	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true }) } },


	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true }) } },


	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true }) } },


	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true }) } },


	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true }) } },


	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true }) } },


	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true }) } },


	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true }) } },


	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true }) } },


	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true }) } },


	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true }) } },


	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true }) } },


	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true }) } },


	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true }) } },


	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true }) } },


	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true }) } },


	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true }) } },


	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true }) } },


	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true }) } },


	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true }) } },


	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true }) } },


	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true }) } },


	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true }) } },


	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true }) } },


	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true }) } },


	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true }) } },


	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true }) } },


	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true }) } },


	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true }) } },


	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true }) } },


	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true }) } },


	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true }) } },


	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true }) } },


	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true }) } },


	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true }) } },


	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true }) } },


	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true }) } },


	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true }) } },


	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true }) } },


	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true }) } },


	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true }) } },


	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true }) } },


	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true }) } },


	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true }) } },


	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true }) } },


	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true }) } },


	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true }) } },


	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true }) } },


	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true }) } },


	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true }) } },


	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true }) } } };




	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel };


	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	                           * @param {string} topLevelType Record from `EventConstants`.
	                           * @param {DOMEventTarget} topLevelTarget The listening component root node.
	                           * @param {string} topLevelTargetID ID of `topLevelTarget`.
	                           * @param {object} nativeEvent Native browser event.
	                           * @return {*} An accumulation of synthetic events.
	                           * @see {EventPluginHub.extractEvents}
	                           */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;}

	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function didPutListener(id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function willDeleteListener(id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  } };



	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(77);

	/**
	                                                   * @interface Event
	                                                   * @see http://www.w3.org/TR/clipboard-apis/
	                                                   */
	var ClipboardEventInterface = {
	  clipboardData: function clipboardData(event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  } };


	/**
	        * @param {object} dispatchConfig Configuration used to dispatch this event.
	        * @param {string} dispatchMarker Marker identifying the event target.
	        * @param {object} nativeEvent Native browser event.
	        * @extends {SyntheticUIEvent}
	        */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	/**
	                                                       * @interface FocusEvent
	                                                       * @see http://www.w3.org/TR/DOM-Level-3-Events/
	                                                       */
	var FocusEventInterface = {
	  relatedTarget: null };


	/**
	                          * @param {object} dispatchConfig Configuration used to dispatch this event.
	                          * @param {string} dispatchMarker Marker identifying the event target.
	                          * @param {object} nativeEvent Native browser event.
	                          * @extends {SyntheticUIEvent}
	                          */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	var getEventCharCode = __webpack_require__(136);
	var getEventKey = __webpack_require__(137);
	var getEventModifierState = __webpack_require__(88);

	/**
	                                                                 * @interface KeyboardEvent
	                                                                 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	                                                                 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function charCode(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function keyCode(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function which(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  } };


	/**
	        * @param {object} dispatchConfig Configuration used to dispatch this event.
	        * @param {string} dispatchMarker Marker identifying the event target.
	        * @param {object} nativeEvent Native browser event.
	        * @extends {SyntheticUIEvent}
	        */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 136 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	               * `charCode` represents the actual "character code" and is safe to use with
	               * `String.fromCharCode`. As such, only keys that correspond to printable
	               * characters produce a valid `charCode`, the only exception to this is Enter.
	               * The Tab-key is considered non-printable and does not have a `charCode`,
	               * presumably because it does not produce a tab-character in browsers.
	               *
	               * @param {object} nativeEvent Native browser event.
	               * @return {number} Normalized `charCode` property.
	               */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(136);

	/**
	                                                       * Normalization of deprecated HTML5 `key` values
	                                                       * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	                                                       */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified' };


	/**
	                                        * Translation from legacy `keyCode` to HTML5 `key`
	                                        * Only special keys supported, all others depend on keyboard layout or browser
	                                        * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	                                        */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta' };


	/**
	                  * @param {object} nativeEvent Native browser event.
	                  * @return {string} Normalized `key` property.
	                  */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(86);

	/**
	                                                             * @interface DragEvent
	                                                             * @see http://www.w3.org/TR/DOM-Level-3-Events/
	                                                             */
	var DragEventInterface = {
	  dataTransfer: null };


	/**
	                         * @param {object} dispatchConfig Configuration used to dispatch this event.
	                         * @param {string} dispatchMarker Marker identifying the event target.
	                         * @param {object} nativeEvent Native browser event.
	                         * @extends {SyntheticUIEvent}
	                         */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(87);

	var getEventModifierState = __webpack_require__(88);

	/**
	                                                                 * @interface TouchEvent
	                                                                 * @see http://www.w3.org/TR/touch-events/
	                                                                 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState };


	/**
	                                              * @param {object} dispatchConfig Configuration used to dispatch this event.
	                                              * @param {string} dispatchMarker Marker identifying the event target.
	                                              * @param {object} nativeEvent Native browser event.
	                                              * @extends {SyntheticUIEvent}
	                                              */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(86);

	/**
	                                                             * @interface WheelEvent
	                                                             * @see http://www.w3.org/TR/DOM-Level-3-Events/
	                                                             */
	var WheelEventInterface = {
	  deltaX: function deltaX(event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function deltaY(event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null };


	/**
	                      * @param {object} dispatchConfig Configuration used to dispatch this event.
	                      * @param {string} dispatchMarker Marker identifying the event target.
	                      * @param {object} nativeEvent Native browser event.
	                      * @extends {SyntheticMouseEvent}
	                      */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(23);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace' };


	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE },

	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml },

	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space' } };



	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var DOMProperty = __webpack_require__(23);
	var ReactDefaultPerfAnalysis = __webpack_require__(143);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);

	var performanceNow = __webpack_require__(144);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function start() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function stop() {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function getLastMeasurements() {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function printExclusive(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count };

	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function printInclusive(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count };

	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function getMeasurementsSummaryMap(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count };

	    });
	  },

	  printWasted: function printWasted(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function printDOM(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function _recordWrite(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args });

	  },

	  measure: function measure(moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {} });

	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>' };


	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  } };


	module.exports = ReactDefaultPerf;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(39);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent' };


	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args });

	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0 };

	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0 };


	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime };


	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(145);

	var performanceNow;

	/**
	                     * Detect if we can use `window.performance.now()` and gracefully fallback to
	                     * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	                     * because of Facebook's testing infrastructure.
	                     */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(9);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 146 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.8';

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(28);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(71);
	var ReactServerRendering = __webpack_require__(149);
	var ReactVersion = __webpack_require__(146);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion };


	module.exports = ReactDOMServer;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactServerBatchingStrategy = __webpack_require__(150);
	var ReactServerRenderingTransaction = __webpack_require__(151);
	var ReactUpdates = __webpack_require__(54);

	var emptyObject = __webpack_require__(58);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);

	/**
	                                                * @param {ReactElement} element
	                                                * @return {string} the HTML markup
	                                                */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	   * @param {ReactElement} element
	   * @return {string} the HTML markup, without the extra React ID and checksum
	   * (for generating static pages)
	   */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 150 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function batchedUpdates(callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  } };


	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(56);
	var CallbackQueue = __webpack_require__(55);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);

	/**
	                                                        * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	                                                        * during the performing of the transaction.
	                                                        */
	var ON_DOM_READY_QUEUEING = {
	  /**
	                               * Initializes the internal `onDOMReady` queue.
	                               */
	  initialize: function initialize() {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction };


	/**
	                           * Executed within the scope of the `Transaction` instance. Consider these as
	                           * being member methods, but with an implied ordering while being isolated from
	                           * each other.
	                           */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	                                                     * @class ReactServerRenderingTransaction
	                                                     * @param {boolean} renderToStaticMarkup
	                                                     */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	               * @see Transaction
	               * @abstract
	               * @final
	               * @return {array} Empty list of operation wrap procedures.
	               */
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	      * @return {object} The queue to collect `onDOMReady` callbacks with.
	      */
	  getReactMountReady: function getReactMountReady() {
	    return this.reactMountReady;
	  },

	  /**
	      * `PooledClass` looks for this, and will invoke this before allowing this
	      * instance to be reused.
	      */
	  destructor: function destructor() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  } };


	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(110);
	var ReactComponent = __webpack_require__(123);
	var ReactClass = __webpack_require__(122);
	var ReactDOMFactories = __webpack_require__(153);
	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);
	var ReactPropTypes = __webpack_require__(107);
	var ReactVersion = __webpack_require__(146);

	var assign = __webpack_require__(39);
	var onlyChild = __webpack_require__(156);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild },


	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function createMixin(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign };


	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);

	var mapObject = __webpack_require__(155);

	/**
	                                                * Create a factory that creates HTML tag elements.
	                                                *
	                                                * @param {string} tag Tag name (e.g. `div`).
	                                                * @private
	                                                */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	   * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	   * This is also accessible via `React.DOM`.
	   *
	   * @public
	   */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan' },

	createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	     * ReactElementValidator provides a wrapper around a element factory
	     * which validates the props passed to the element. This is intended to be
	     * used only in DEV and could be replaced by a static type checker for languages
	     * that support it.
	     */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactCurrentOwner = __webpack_require__(5);

	var canDefineProperty = __webpack_require__(43);
	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	                              * Warn if the element doesn't have an explicit key assigned to it.
	                              * This element is in an array. The array could grow and shrink or be
	                              * reordered. All children that haven't already been validated are required to
	                              * have a "key" property assigned to it.
	                              *
	                              * @internal
	                              * @param {ReactElement} element Element that requires a key.
	                              * @param {*} parentType element's parent's type.
	                              */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	   * Shared warning and monitoring code for the key warnings.
	   *
	   * @internal
	   * @param {string} messageType A key used for de-duping warnings.
	   * @param {ReactElement} element Component that requires a key.
	   * @param {*} parentType element's parent's type.
	   * @returns {?object} A set of addenda to use in the warning message, or null
	   * if the warning has already been shown before (and shouldn't be shown again).
	   */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null };


	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	   * Ensure that every element either is passed in a static location, in an
	   * array with an explicit keys property defined, or in an object literal
	   * with valid key property.
	   *
	   * @internal
	   * @param {ReactNode} node Statically passed child of any type.
	   * @param {*} parentType node's parent's type.
	   */
	function validateChildKeys(node, parentType) {
	  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	   * Assert that the props are valid
	   *
	   * @param {string} componentName Name of the component for error messages.
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error === 'undefined' ? 'undefined' : _typeof(error)) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	   * Given an element, validate that its props follow the propTypes definition,
	   * provided by the type.
	   *
	   * @param {ReactElement} element
	   */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function createElement(type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function createFactory(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function get() {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type });

	            return type;
	          } });

	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function cloneElement(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  } };



	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 155 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	                                                       * Executes the provided `callback` once for each enumerable own property in the
	                                                       * object and constructs a new object from the results. The `callback` is
	                                                       * invoked with three arguments:
	                                                       *
	                                                       *  - the property value
	                                                       *  - the property name
	                                                       *  - the object being traversed
	                                                       *
	                                                       * Properties that are added after the call to `mapObject` will not be visited
	                                                       * by `callback`. If the values of existing properties are changed, the value
	                                                       * passed to `callback` will be the value at the time `mapObject` visits them.
	                                                       * Properties that are deleted before being visited are not visited.
	                                                       *
	                                                       * @grep function objectMap()
	                                                       * @grep function objMap()
	                                                       *
	                                                       * @param {?object} object
	                                                       * @param {function} callback
	                                                       * @param {*} context
	                                                       * @return {?object}
	                                                       */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(42);

	var invariant = __webpack_require__(13);

	/**
	                                                * Returns the first child in a collection of children and verifies that there
	                                                * is only one child in the collection. The current implementation of this
	                                                * function assumes that a single child gets passed without a wrapper, but the
	                                                * purpose of this helper function is to abstract away the particular structure
	                                                * of children.
	                                                *
	                                                * @param {?object} children Child collection structure.
	                                                * @return {ReactComponent} The first and only `ReactComponent` contained in the
	                                                * structure.
	                                                */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);

	/**
	                                            * This will log a single deprecation notice per function and forward the call
	                                            * on to the new API.
	                                            *
	                                            * @param {string} fnName The name of the function
	                                            * @param {string} newModule The module that fn will exist in
	                                            * @param {string} newPackage The module that fn will exist in
	                                            * @param {*} ctx The context this forwarded call should run in
	                                            * @param {function} fn The function to forward on to
	                                            * @return {function} The function that will warn once and then call fn
	                                            */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function newFn() {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(3);

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* components */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _Router2 = __webpack_require__(160);

	var _Router3 = _interopRequireDefault(_Router2);

	exports.Router = _Router3['default'];

	var _Link2 = __webpack_require__(196);

	var _Link3 = _interopRequireDefault(_Link2);

	exports.Link = _Link3['default'];

	var _IndexLink2 = __webpack_require__(197);

	var _IndexLink3 = _interopRequireDefault(_IndexLink2);

	exports.IndexLink = _IndexLink3['default'];

	/* components (configuration) */

	var _IndexRedirect2 = __webpack_require__(198);

	var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);

	exports.IndexRedirect = _IndexRedirect3['default'];

	var _IndexRoute2 = __webpack_require__(200);

	var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);

	exports.IndexRoute = _IndexRoute3['default'];

	var _Redirect2 = __webpack_require__(199);

	var _Redirect3 = _interopRequireDefault(_Redirect2);

	exports.Redirect = _Redirect3['default'];

	var _Route2 = __webpack_require__(201);

	var _Route3 = _interopRequireDefault(_Route2);

	exports.Route = _Route3['default'];

	/* mixins */

	var _History2 = __webpack_require__(202);

	var _History3 = _interopRequireDefault(_History2);

	exports.History = _History3['default'];

	var _Lifecycle2 = __webpack_require__(203);

	var _Lifecycle3 = _interopRequireDefault(_Lifecycle2);

	exports.Lifecycle = _Lifecycle3['default'];

	var _RouteContext2 = __webpack_require__(204);

	var _RouteContext3 = _interopRequireDefault(_RouteContext2);

	exports.RouteContext = _RouteContext3['default'];

	/* utils */

	var _useRoutes2 = __webpack_require__(185);

	var _useRoutes3 = _interopRequireDefault(_useRoutes2);

	exports.useRoutes = _useRoutes3['default'];

	var _RouteUtils = __webpack_require__(180);

	exports.createRoutes = _RouteUtils.createRoutes;

	var _RoutingContext2 = __webpack_require__(181);

	var _RoutingContext3 = _interopRequireDefault(_RoutingContext2);

	exports.RoutingContext = _RoutingContext3['default'];

	var _PropTypes2 = __webpack_require__(195);

	var _PropTypes3 = _interopRequireDefault(_PropTypes2);

	exports.PropTypes = _PropTypes3['default'];

	var _match2 = __webpack_require__(205);

	var _match3 = _interopRequireDefault(_match2);

	exports.match = _match3['default'];

	var _Router4 = _interopRequireDefault(_Router2);

	exports['default'] = _Router4['default'];

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}

	function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var _warning = __webpack_require__(161);

	var _warning2 = _interopRequireDefault(_warning);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _historyLibCreateHashHistory = __webpack_require__(162);

	var _historyLibCreateHashHistory2 = _interopRequireDefault(_historyLibCreateHashHistory);

	var _RouteUtils = __webpack_require__(180);

	var _RoutingContext = __webpack_require__(181);

	var _RoutingContext2 = _interopRequireDefault(_RoutingContext);

	var _useRoutes = __webpack_require__(185);

	var _useRoutes2 = _interopRequireDefault(_useRoutes);

	var _PropTypes = __webpack_require__(195);

	var _React$PropTypes = _react2['default'].PropTypes;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;

	/**
	                                       * A <Router> is a high-level API for automatically setting up
	                                       * a router that renders a <RoutingContext> with all the props
	                                       * it needs each time the URL changes.
	                                       */

	var Router = function (_Component) {
	  _inherits(Router, _Component);

	  function Router(props, context) {
	    _classCallCheck(this, Router);

	    _Component.call(this, props, context);

	    this.state = {
	      location: null,
	      routes: null,
	      params: null,
	      components: null };

	  }

	  Router.prototype.handleError = function handleError(error) {
	    if (this.props.onError) {
	      this.props.onError.call(this, error);
	    } else {
	      // Throw errors by default so we don't silently swallow them!
	      throw error; // This error probably occurred in getChildRoutes or getComponents.
	    }
	  };

	  Router.prototype.componentWillMount = function componentWillMount() {
	    var _this = this;

	    var _props = this.props;
	    var history = _props.history;
	    var children = _props.children;
	    var routes = _props.routes;
	    var parseQueryString = _props.parseQueryString;
	    var stringifyQuery = _props.stringifyQuery;

	    var createHistory = history ? function () {
	      return history;
	    } : _historyLibCreateHashHistory2['default'];

	    this.history = _useRoutes2['default'](createHistory)({
	      routes: _RouteUtils.createRoutes(routes || children),
	      parseQueryString: parseQueryString,
	      stringifyQuery: stringifyQuery });


	    this._unlisten = this.history.listen(function (error, state) {
	      if (error) {
	        _this.handleError(error);
	      } else {
	        _this.setState(state, _this.props.onUpdate);
	      }
	    });
	  };

	  /* istanbul ignore next: sanity check */

	  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : undefined;

	    process.env.NODE_ENV !== 'production' ? _warning2['default']((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : undefined;
	  };

	  Router.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this._unlisten) this._unlisten();
	  };

	  Router.prototype.render = function render() {
	    var _state = this.state;
	    var location = _state.location;
	    var routes = _state.routes;
	    var params = _state.params;
	    var components = _state.components;
	    var _props2 = this.props;
	    var RoutingContext = _props2.RoutingContext;
	    var createElement = _props2.createElement;

	    var props = _objectWithoutProperties(_props2, ['RoutingContext', 'createElement']);

	    if (location == null) return null; // Async match

	    // Only forward non-Router-specific props to routing context, as those are
	    // the only ones that might be custom routing context props.
	    Object.keys(Router.propTypes).forEach(function (propType) {
	      return delete props[propType];
	    });

	    return _react2['default'].createElement(RoutingContext, _extends({}, props, {
	      history: this.history,
	      createElement: createElement,
	      location: location,
	      routes: routes,
	      params: params,
	      components: components }));

	  };

	  return Router;
	}(_react.Component);

	Router.propTypes = {
	  history: object,
	  children: _PropTypes.routes,
	  routes: _PropTypes.routes, // alias for children
	  RoutingContext: func.isRequired,
	  createElement: func,
	  onError: func,
	  onUpdate: func,
	  parseQueryString: func,
	  stringifyQuery: func };


	Router.defaultProps = {
	  RoutingContext: _RoutingContext2['default'] };


	exports['default'] = Router;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	               * Similar to invariant but only logs a warning if the condition is not met.
	               * This can be used to log issues in development environments in critical
	               * paths. Removing the logging code for production environments will keep the
	               * same logic and follow the same code paths.
	               */

	var warning = function warning() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function warning(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	      '`warning(condition, format, ...args)` requires a warning ' +
	      'message argument');

	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	      'The warning format should be able to uniquely identify this ' +
	      'warning. Please, use a more descriptive format than: ' + format);

	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	      format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _warning = __webpack_require__(163);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(164);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(165);

	var _ExecutionEnvironment = __webpack_require__(166);

	var _DOMUtils = __webpack_require__(167);

	var _DOMStateStorage = __webpack_require__(168);

	var _createDOMHistory = __webpack_require__(169);

	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

	var _parsePath = __webpack_require__(176);

	var _parsePath2 = _interopRequireDefault(_parsePath);

	function isAbsolutePath(path) {
	  return typeof path === 'string' && path.charAt(0) === '/';
	}

	function ensureSlash() {
	  var path = _DOMUtils.getHashPath();

	  if (isAbsolutePath(path)) return true;

	  _DOMUtils.replaceHashPath('/' + path);

	  return false;
	}

	function addQueryStringValueToPath(path, key, value) {
	  return path + (path.indexOf('?') === -1 ? '?' : '&') + (key + '=' + value);
	}

	function stripQueryStringValueFromPath(path, key) {
	  return path.replace(new RegExp('[?&]?' + key + '=[a-zA-Z0-9]+'), '');
	}

	function getQueryStringValueFromPath(path, key) {
	  var match = path.match(new RegExp('\\?.*?\\b' + key + '=(.+?)\\b'));
	  return match && match[1];
	}

	var DefaultQueryKey = '_k';

	function createHashHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Hash history needs a DOM') : _invariant2['default'](false) : undefined;

	  var queryKey = options.queryKey;

	  if (queryKey === undefined || !!queryKey) queryKey = typeof queryKey === 'string' ? queryKey : DefaultQueryKey;

	  function getCurrentLocation() {
	    var path = _DOMUtils.getHashPath();

	    var key = undefined,
	    state = undefined;
	    if (queryKey) {
	      key = getQueryStringValueFromPath(path, queryKey);
	      path = stripQueryStringValueFromPath(path, queryKey);

	      if (key) {
	        state = _DOMStateStorage.readState(key);
	      } else {
	        state = null;
	        key = history.createKey();
	        _DOMUtils.replaceHashPath(addQueryStringValueToPath(path, queryKey, key));
	      }
	    } else {
	      key = state = null;
	    }

	    var location = _parsePath2['default'](path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function startHashChangeListener(_ref) {
	    var transitionTo = _ref.transitionTo;

	    function hashChangeListener() {
	      if (!ensureSlash()) return; // Always make sure hashes are preceeded with a /.

	      transitionTo(getCurrentLocation());
	    }

	    ensureSlash();
	    _DOMUtils.addEventListener(window, 'hashchange', hashChangeListener);

	    return function () {
	      _DOMUtils.removeEventListener(window, 'hashchange', hashChangeListener);
	    };
	  }

	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;

	    if (action === _Actions.POP) return; // Nothing to do.

	    var path = (basename || '') + pathname + search;

	    if (queryKey) {
	      path = addQueryStringValueToPath(path, queryKey, key);
	      _DOMStateStorage.saveState(key, state);
	    } else {
	      // Drop key and state.
	      location.key = location.state = null;
	    }

	    var currentHash = _DOMUtils.getHashPath();

	    if (action === _Actions.PUSH) {
	      if (currentHash !== path) {
	        window.location.hash = path;
	      } else {
	        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'You cannot PUSH the same path using hash history') : undefined;
	      }
	    } else if (currentHash !== path) {
	      // REPLACE
	      _DOMUtils.replaceHashPath(path);
	    }
	  }

	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState }));


	  var listenerCount = 0,
	  stopHashChangeListener = undefined;

	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    var unlisten = history.listenBefore(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }

	  function listen(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    var unlisten = history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }

	  function push(location) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.push(location);
	  }

	  function replace(location) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.replace(location);
	  }

	  var goIsSupportedWithoutReload = _DOMUtils.supportsGoWithoutReloadUsingHash();

	  function go(n) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;

	    history.go(n);
	  }

	  function createHref(path) {
	    return '#' + history.createHref(path);
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);

	    history.registerTransitionHook(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);

	    if (--listenerCount === 0) stopHashChangeListener();
	  }

	  // deprecated
	  function pushState(state, path) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.pushState(state, path);
	  }

	  // deprecated
	  function replaceState(state, path) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;

	    history.replaceState(state, path);
	  }

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    push: push,
	    replace: replace,
	    go: go,
	    createHref: createHref,

	    registerTransitionHook: registerTransitionHook, // deprecated - warning is in createHistory
	    unregisterTransitionHook: unregisterTransitionHook, // deprecated - warning is in createHistory
	    pushState: pushState, // deprecated - warning is in createHistory
	    replaceState: replaceState // deprecated - warning is in createHistory
	  });
	}

	exports['default'] = createHashHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	               * Similar to invariant but only logs a warning if the condition is not met.
	               * This can be used to log issues in development environments in critical
	               * paths. Removing the logging code for production environments will keep the
	               * same logic and follow the same code paths.
	               */

	var warning = function warning() {};

	if (process.env.NODE_ENV !== 'production') {
	  warning = function warning(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	      '`warning(condition, format, ...args)` requires a warning ' +
	      'message argument');

	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	      'The warning format should be able to uniquely identify this ' +
	      'warning. Please, use a more descriptive format than: ' + format);

	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	      format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	               * Use invariant() to assert state which your program assumes to be true.
	               *
	               * Provide sprintf-style format (only %s is supported) and arguments
	               * to provide information about what broke and what you were
	               * expecting.
	               *
	               * The invariant message will be stripped in production, but the invariant
	               * will remain to ensure logic does not differ in production.
	               */

	var invariant = function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	      'Minified exception occurred; use the non-minified dev environment ' +
	      'for the full error message and additional helpful warnings.');

	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	      format.replace(/%s/g, function () {return args[argIndex++];}));

	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 165 */
/***/ function(module, exports) {

	/**
	 * Indicates that navigation was caused by a call to history.push.
	 */
	'use strict';

	exports.__esModule = true;
	var PUSH = 'PUSH';

	exports.PUSH = PUSH;
	/**
	                      * Indicates that navigation was caused by a call to history.replace.
	                      */
	var REPLACE = 'REPLACE';

	exports.REPLACE = REPLACE;
	/**
	                            * Indicates that navigation was caused by some other action such
	                            * as using a browser's back/forward buttons and/or manually manipulating
	                            * the URL in a browser's location bar. This is the default.
	                            *
	                            * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	                            * for more information.
	                            */
	var POP = 'POP';

	exports.POP = POP;
	exports['default'] = {
	  PUSH: PUSH,
	  REPLACE: REPLACE,
	  POP: POP };

/***/ },
/* 166 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	exports.canUseDOM = canUseDOM;

/***/ },
/* 167 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	exports.addEventListener = addEventListener;
	exports.removeEventListener = removeEventListener;
	exports.getHashPath = getHashPath;
	exports.replaceHashPath = replaceHashPath;
	exports.getWindowPath = getWindowPath;
	exports.go = go;
	exports.getUserConfirmation = getUserConfirmation;
	exports.supportsHistory = supportsHistory;
	exports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;

	function addEventListener(node, event, listener) {
	  if (node.addEventListener) {
	    node.addEventListener(event, listener, false);
	  } else {
	    node.attachEvent('on' + event, listener);
	  }
	}

	function removeEventListener(node, event, listener) {
	  if (node.removeEventListener) {
	    node.removeEventListener(event, listener, false);
	  } else {
	    node.detachEvent('on' + event, listener);
	  }
	}

	function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  return window.location.href.split('#')[1] || '';
	}

	function replaceHashPath(path) {
	  window.location.replace(window.location.pathname + window.location.search + '#' + path);
	}

	function getWindowPath() {
	  return window.location.pathname + window.location.search + window.location.hash;
	}

	function go(n) {
	  if (n) window.history.go(n);
	}

	function getUserConfirmation(message, callback) {
	  callback(window.confirm(message));
	}

	/**
	   * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	   *
	   * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	   * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	   * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	   */

	function supportsHistory() {
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  // FIXME: Work around our browser history not working correctly on Chrome
	  // iOS: https://github.com/rackt/react-router/issues/2565
	  if (ua.indexOf('CriOS') !== -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}

	/**
	   * Returns false if using go(n) with hash history causes a full page reload.
	   */

	function supportsGoWithoutReloadUsingHash() {
	  var ua = navigator.userAgent;
	  return ua.indexOf('Firefox') === -1;
	}

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*eslint-disable no-empty */
	'use strict';

	exports.__esModule = true;
	exports.saveState = saveState;
	exports.readState = readState;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _warning = __webpack_require__(163);

	var _warning2 = _interopRequireDefault(_warning);

	var KeyPrefix = '@@History/';
	var QuotaExceededError = 'QuotaExceededError';
	var SecurityError = 'SecurityError';

	function createKey(key) {
	  return KeyPrefix + key;
	}

	function saveState(key, state) {
	  try {
	    window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;

	      return;
	    }

	    if (error.name === QuotaExceededError && window.sessionStorage.length === 0) {
	      // Safari "private mode" throws QuotaExceededError.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;

	      return;
	    }

	    throw error;
	  }
	}

	function readState(key) {
	  var json = undefined;
	  try {
	    json = window.sessionStorage.getItem(createKey(key));
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;

	      return null;
	    }
	  }

	  if (json) {
	    try {
	      return JSON.parse(json);
	    } catch (error) {
	      // Ignore invalid JSON.
	    }
	  }

	  return null;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _invariant = __webpack_require__(164);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _ExecutionEnvironment = __webpack_require__(166);

	var _DOMUtils = __webpack_require__(167);

	var _createHistory = __webpack_require__(170);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	function createDOMHistory(options) {
	  var history = _createHistory2['default'](_extends({
	    getUserConfirmation: _DOMUtils.getUserConfirmation },
	  options, {
	    go: _DOMUtils.go }));


	  function listen(listener) {
	    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;

	    return history.listen(listener);
	  }

	  return _extends({}, history, {
	    listen: listen });

	}

	exports['default'] = createDOMHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	//import warning from 'warning'
	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _deepEqual = __webpack_require__(171);

	var _deepEqual2 = _interopRequireDefault(_deepEqual);

	var _AsyncUtils = __webpack_require__(174);

	var _Actions = __webpack_require__(165);

	var _createLocation2 = __webpack_require__(175);

	var _createLocation3 = _interopRequireDefault(_createLocation2);

	var _runTransitionHook = __webpack_require__(178);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _parsePath = __webpack_require__(176);

	var _parsePath2 = _interopRequireDefault(_parsePath);

	var _deprecate = __webpack_require__(179);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function createRandomKey(length) {
	  return Math.random().toString(36).substr(2, length);
	}

	function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search &&
	  //a.action === b.action && // Different action !== location change.
	  a.key === b.key && _deepEqual2['default'](a.state, b.state);
	}

	var DefaultKeyLength = 6;

	function createHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var getCurrentLocation = options.getCurrentLocation;
	  var finishTransition = options.finishTransition;
	  var saveState = options.saveState;
	  var go = options.go;
	  var keyLength = options.keyLength;
	  var getUserConfirmation = options.getUserConfirmation;

	  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;

	  var transitionHooks = [];

	  function listenBefore(hook) {
	    transitionHooks.push(hook);

	    return function () {
	      transitionHooks = transitionHooks.filter(function (item) {
	        return item !== hook;
	      });
	    };
	  }

	  var allKeys = [];
	  var changeListeners = [];
	  var location = undefined;

	  function getCurrent() {
	    if (pendingLocation && pendingLocation.action === _Actions.POP) {
	      return allKeys.indexOf(pendingLocation.key);
	    } else if (location) {
	      return allKeys.indexOf(location.key);
	    } else {
	      return -1;
	    }
	  }

	  function updateLocation(newLocation) {
	    var current = getCurrent();

	    location = newLocation;

	    if (location.action === _Actions.PUSH) {
	      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);
	    } else if (location.action === _Actions.REPLACE) {
	      allKeys[current] = location.key;
	    }

	    changeListeners.forEach(function (listener) {
	      listener(location);
	    });
	  }

	  function listen(listener) {
	    changeListeners.push(listener);

	    if (location) {
	      listener(location);
	    } else {
	      var _location = getCurrentLocation();
	      allKeys = [_location.key];
	      updateLocation(_location);
	    }

	    return function () {
	      changeListeners = changeListeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }

	  function confirmTransitionTo(location, callback) {
	    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {
	      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {
	        if (result != null) {
	          done(result);
	        } else {
	          next();
	        }
	      });
	    }, function (message) {
	      if (getUserConfirmation && typeof message === 'string') {
	        getUserConfirmation(message, function (ok) {
	          callback(ok !== false);
	        });
	      } else {
	        callback(message !== false);
	      }
	    });
	  }

	  var pendingLocation = undefined;

	  function transitionTo(nextLocation) {
	    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.

	    pendingLocation = nextLocation;

	    confirmTransitionTo(nextLocation, function (ok) {
	      if (pendingLocation !== nextLocation) return; // Transition was interrupted.

	      if (ok) {
	        // treat PUSH to current path like REPLACE to be consistent with browsers
	        if (nextLocation.action === _Actions.PUSH) {
	          var prevPath = createPath(location);
	          var nextPath = createPath(nextLocation);

	          if (nextPath === prevPath) nextLocation.action = _Actions.REPLACE;
	        }

	        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);
	      } else if (location && nextLocation.action === _Actions.POP) {
	        var prevIndex = allKeys.indexOf(location.key);
	        var nextIndex = allKeys.indexOf(nextLocation.key);

	        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.
	      }
	    });
	  }

	  function push(location) {
	    transitionTo(createLocation(location, _Actions.PUSH, createKey()));
	  }

	  function replace(location) {
	    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));
	  }

	  function goBack() {
	    go(-1);
	  }

	  function goForward() {
	    go(1);
	  }

	  function createKey() {
	    return createRandomKey(keyLength);
	  }

	  function createPath(location) {
	    if (location == null || typeof location === 'string') return location;

	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;

	    var result = pathname;

	    if (search) result += search;

	    if (hash) result += hash;

	    return result;
	  }

	  function createHref(location) {
	    return createPath(location);
	  }

	  function createLocation(location, action) {
	    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];

	    if ((typeof action === 'undefined' ? 'undefined' : _typeof(action)) === 'object') {
	      //warning(
	      //  false,
	      //  'The state (2nd) argument to history.createLocation is deprecated; use a ' +
	      //  'location descriptor instead'
	      //)

	      if (typeof location === 'string') location = _parsePath2['default'](location);

	      location = _extends({}, location, { state: action });

	      action = key;
	      key = arguments[3] || createKey();
	    }

	    return _createLocation3['default'](location, action, key);
	  }

	  // deprecated
	  function setState(state) {
	    if (location) {
	      updateLocationState(location, state);
	      updateLocation(location);
	    } else {
	      updateLocationState(getCurrentLocation(), state);
	    }
	  }

	  function updateLocationState(location, state) {
	    location.state = _extends({}, location.state, state);
	    saveState(location.key, location.state);
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    transitionHooks = transitionHooks.filter(function (item) {
	      return item !== hook;
	    });
	  }

	  // deprecated
	  function pushState(state, path) {
	    if (typeof path === 'string') path = _parsePath2['default'](path);

	    push(_extends({ state: state }, path));
	  }

	  // deprecated
	  function replaceState(state, path) {
	    if (typeof path === 'string') path = _parsePath2['default'](path);

	    replace(_extends({ state: state }, path));
	  }

	  return {
	    listenBefore: listenBefore,
	    listen: listen,
	    transitionTo: transitionTo,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    createKey: createKey,
	    createPath: createPath,
	    createHref: createHref,
	    createLocation: createLocation,

	    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),
	    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),
	    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),
	    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead') };

	}

	exports['default'] = createHistory;
	module.exports = exports['default'];

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var pSlice = Array.prototype.slice;
	var objectKeys = __webpack_require__(172);
	var isArguments = __webpack_require__(173);

	var deepEqual = module.exports = function (actual, expected, opts) {
	  if (!opts) opts = {};
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (actual instanceof Date && expected instanceof Date) {
	    return actual.getTime() === expected.getTime();

	    // 7.3. Other pairs that do not both pass typeof value == 'object',
	    // equivalence is determined by ==.
	  } else if (!actual || !expected || (typeof actual === 'undefined' ? 'undefined' : _typeof(actual)) != 'object' && (typeof expected === 'undefined' ? 'undefined' : _typeof(expected)) != 'object') {
	    return opts.strict ? actual === expected : actual == expected;

	    // 7.4. For all other Object pairs, including Array objects, equivalence is
	    // determined by having the same number of owned properties (as verified
	    // with Object.prototype.hasOwnProperty.call), the same set of keys
	    // (although not necessarily the same order), equivalent values for every
	    // corresponding key, and an identical 'prototype' property. Note: this
	    // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected, opts);
	  }
	};

	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}

	function isBuffer(x) {
	  if (!x || (typeof x === 'undefined' ? 'undefined' : _typeof(x)) !== 'object' || typeof x.length !== 'number') return false;
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') return false;
	  return true;
	}

	function objEquiv(a, b, opts) {
	  var i, key;
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
	  return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return deepEqual(a, b, opts);
	  }
	  if (isBuffer(a)) {
	    if (!isBuffer(b)) {
	      return false;
	    }
	    if (a.length !== b.length) return false;
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) return false;
	    }
	    return true;
	  }
	  try {
	    var ka = objectKeys(a),
	    kb = objectKeys(b);
	  } catch (e) {//happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	  return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	    return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], opts)) return false;
	  }
	  return (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === (typeof b === 'undefined' ? 'undefined' : _typeof(b));
	}

/***/ },
/* 172 */
/***/ function(module, exports) {

	'use strict';exports = module.exports = typeof Object.keys === 'function' ?
	Object.keys : shim;

	exports.shim = shim;
	function shim(obj) {
	  var keys = [];
	  for (var key in obj) {keys.push(key);}
	  return keys;
	}

/***/ },
/* 173 */
/***/ function(module, exports) {

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var supportsArgumentsClass = function () {
	  return Object.prototype.toString.call(arguments);
	}() == '[object Arguments]';

	exports = module.exports = supportsArgumentsClass ? supported : unsupported;

	exports.supported = supported;
	function supported(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	};

	exports.unsupported = unsupported;
	function unsupported(object) {
	  return object &&
	  (typeof object === 'undefined' ? 'undefined' : _typeof(object)) == 'object' &&
	  typeof object.length == 'number' &&
	  Object.prototype.hasOwnProperty.call(object, 'callee') &&
	  !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
	  false;
	};

/***/ },
/* 174 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.loopAsync = loopAsync;

	function loopAsync(turns, work, callback) {
	  var currentTurn = 0;
	  var isDone = false;

	  function done() {
	    isDone = true;
	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) return;

	    if (currentTurn < turns) {
	      work.call(this, currentTurn++, next, done);
	    } else {
	      done.apply(this, arguments);
	    }
	  }

	  next();
	}

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	//import warning from 'warning'
	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _Actions = __webpack_require__(165);

	var _parsePath = __webpack_require__(176);

	var _parsePath2 = _interopRequireDefault(_parsePath);

	function createLocation() {
	  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
	  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
	  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

	  if (typeof location === 'string') location = _parsePath2['default'](location);

	  if ((typeof action === 'undefined' ? 'undefined' : _typeof(action)) === 'object') {
	    //warning(
	    //  false,
	    //  'The state (2nd) argument to createLocation is deprecated; use a ' +
	    //  'location descriptor instead'
	    //)

	    location = _extends({}, location, { state: action });

	    action = key || _Actions.POP;
	    key = _fourthArg;
	  }

	  var pathname = location.pathname || '/';
	  var search = location.search || '';
	  var hash = location.hash || '';
	  var state = location.state || null;

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash,
	    state: state,
	    action: action,
	    key: key };

	}

	exports['default'] = createLocation;
	module.exports = exports['default'];

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _warning = __webpack_require__(163);

	var _warning2 = _interopRequireDefault(_warning);

	var _extractPath = __webpack_require__(177);

	var _extractPath2 = _interopRequireDefault(_extractPath);

	function parsePath(path) {
	  var pathname = _extractPath2['default'](path);
	  var search = '';
	  var hash = '';

	  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like "%s"', path) : undefined;

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substring(hashIndex);
	    pathname = pathname.substring(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substring(searchIndex);
	    pathname = pathname.substring(0, searchIndex);
	  }

	  if (pathname === '') pathname = '/';

	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash };

	}

	exports['default'] = parsePath;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 177 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	function extractPath(string) {
	  var match = string.match(/^https?:\/\/[^\/]*/);

	  if (match == null) return string;

	  return string.substring(match[0].length);
	}

	exports["default"] = extractPath;
	module.exports = exports["default"];

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _warning = __webpack_require__(163);

	var _warning2 = _interopRequireDefault(_warning);

	function runTransitionHook(hook, location, callback) {
	  var result = hook(location, callback);

	  if (hook.length < 2) {
	    // Assume the hook runs synchronously and automatically
	    // call the callback with the return value.
	    callback(result);
	  } else {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not "return" in a transition hook with a callback argument; call the callback instead') : undefined;
	  }
	}

	exports['default'] = runTransitionHook;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 179 */
/***/ function(module, exports) {

	//import warning from 'warning'

	"use strict";

	exports.__esModule = true;
	function deprecate(fn) {
	  return fn;
	  //return function () {
	  //  warning(false, '[history] ' + message)
	  //  return fn.apply(this, arguments)
	  //}
	}

	exports["default"] = deprecate;
	module.exports = exports["default"];

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	exports.isReactChildren = isReactChildren;
	exports.createRouteFromReactElement = createRouteFromReactElement;
	exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
	exports.createRoutes = createRoutes;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _warning = __webpack_require__(161);

	var _warning2 = _interopRequireDefault(_warning);

	function isValidChild(object) {
	  return object == null || _react2['default'].isValidElement(object);
	}

	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}

	function checkPropTypes(componentName, propTypes, props) {
	  componentName = componentName || 'UnknownComponent';

	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error = propTypes[propName](props, propName, componentName);

	      /* istanbul ignore if: error logging */
	      if (error instanceof Error) process.env.NODE_ENV !== 'production' ? _warning2['default'](false, error.message) : undefined;
	    }
	  }
	}

	function createRoute(defaultProps, props) {
	  return _extends({}, defaultProps, props);
	}

	function createRouteFromReactElement(element) {
	  var type = element.type;
	  var route = createRoute(type.defaultProps, element.props);

	  if (type.propTypes) checkPropTypes(type.displayName || type.name, type.propTypes, route);

	  if (route.children) {
	    var childRoutes = createRoutesFromReactChildren(route.children, route);

	    if (childRoutes.length) route.childRoutes = childRoutes;

	    delete route.children;
	  }

	  return route;
	}

	/**
	   * Creates and returns a routes object from the given ReactChildren. JSX
	   * provides a convenient way to visualize how routes in the hierarchy are
	   * nested.
	   *
	   *   import { Route, createRoutesFromReactChildren } from 'react-router'
	   *   
	   *   const routes = createRoutesFromReactChildren(
	   *     <Route component={App}>
	   *       <Route path="home" component={Dashboard}/>
	   *       <Route path="news" component={NewsFeed}/>
	   *     </Route>
	   *   )
	   *
	   * Note: This method is automatically used when you provide <Route> children
	   * to a <Router> component.
	   */

	function createRoutesFromReactChildren(children, parentRoute) {
	  var routes = [];

	  _react2['default'].Children.forEach(children, function (element) {
	    if (_react2['default'].isValidElement(element)) {
	      // Component classes may have a static create* method.
	      if (element.type.createRouteFromReactElement) {
	        var route = element.type.createRouteFromReactElement(element, parentRoute);

	        if (route) routes.push(route);
	      } else {
	        routes.push(createRouteFromReactElement(element));
	      }
	    }
	  });

	  return routes;
	}

	/**
	   * Creates and returns an array of routes from the given object which
	   * may be a JSX route, a plain object route, or an array of either.
	   */

	function createRoutes(routes) {
	  if (isReactChildren(routes)) {
	    routes = createRoutesFromReactChildren(routes);
	  } else if (routes && !Array.isArray(routes)) {
	    routes = [routes];
	  }

	  return routes;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}

	function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _RouteUtils = __webpack_require__(180);

	var _getRouteParams = __webpack_require__(183);

	var _getRouteParams2 = _interopRequireDefault(_getRouteParams);

	var _React$PropTypes = _react2['default'].PropTypes;
	var array = _React$PropTypes.array;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;

	/**
	                                       * A <RoutingContext> renders the component tree for a given router state
	                                       * and sets the history object and the current location in context.
	                                       */

	var RoutingContext = function (_Component) {
	  _inherits(RoutingContext, _Component);

	  function RoutingContext() {
	    _classCallCheck(this, RoutingContext);

	    _Component.apply(this, arguments);
	  }

	  RoutingContext.prototype.getChildContext = function getChildContext() {
	    var _props = this.props;
	    var history = _props.history;
	    var location = _props.location;

	    return { history: history, location: location };
	  };

	  RoutingContext.prototype.createElement = function createElement(component, props) {
	    return component == null ? null : this.props.createElement(component, props);
	  };

	  RoutingContext.prototype.render = function render() {
	    var _this = this;

	    var _props2 = this.props;
	    var history = _props2.history;
	    var location = _props2.location;
	    var routes = _props2.routes;
	    var params = _props2.params;
	    var components = _props2.components;

	    var element = null;

	    if (components) {
	      element = components.reduceRight(function (element, components, index) {
	        if (components == null) return element; // Don't create new children; use the grandchildren.

	        var route = routes[index];
	        var routeParams = _getRouteParams2['default'](route, params);
	        var props = {
	          history: history,
	          location: location,
	          params: params,
	          route: route,
	          routeParams: routeParams,
	          routes: routes };


	        if (_RouteUtils.isReactChildren(element)) {
	          props.children = element;
	        } else if (element) {
	          for (var prop in element) {
	            if (element.hasOwnProperty(prop)) props[prop] = element[prop];
	          }
	        }

	        if ((typeof components === 'undefined' ? 'undefined' : _typeof(components)) === 'object') {
	          var elements = {};

	          for (var key in components) {
	            if (components.hasOwnProperty(key)) {
	              // Pass through the key as a prop to createElement to allow
	              // custom createElement functions to know which named component
	              // they're rendering, for e.g. matching up to fetched data.
	              elements[key] = _this.createElement(components[key], _extends({
	                key: key }, props));
	            }
	          }

	          return elements;
	        }

	        return _this.createElement(components, props);
	      }, element);
	    }

	    !(element === null || element === false || _react2['default'].isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The root route must render a single element') : _invariant2['default'](false) : undefined;

	    return element;
	  };

	  return RoutingContext;
	}(_react.Component);

	RoutingContext.propTypes = {
	  history: object.isRequired,
	  createElement: func.isRequired,
	  location: object.isRequired,
	  routes: array.isRequired,
	  params: object.isRequired,
	  components: array.isRequired };


	RoutingContext.defaultProps = {
	  createElement: _react2['default'].createElement };


	RoutingContext.childContextTypes = {
	  history: object.isRequired,
	  location: object.isRequired };


	exports['default'] = RoutingContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	               * Use invariant() to assert state which your program assumes to be true.
	               *
	               * Provide sprintf-style format (only %s is supported) and arguments
	               * to provide information about what broke and what you were
	               * expecting.
	               *
	               * The invariant message will be stripped in production, but the invariant
	               * will remain to ensure logic does not differ in production.
	               */

	var invariant = function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	      'Minified exception occurred; use the non-minified dev environment ' +
	      'for the full error message and additional helpful warnings.');

	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	      format.replace(/%s/g, function () {return args[argIndex++];}));

	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(184);

	/**
	                                                * Extracts an object of params the given route cares about from
	                                                * the given params object.
	                                                */
	function getRouteParams(route, params) {
	  var routeParams = {};

	  if (!route.path) return routeParams;

	  var paramNames = _PatternUtils.getParamNames(route.path);

	  for (var p in params) {
	    if (params.hasOwnProperty(p) && paramNames.indexOf(p) !== -1) routeParams[p] = params[p];
	  }return routeParams;
	}

	exports['default'] = getRouteParams;
	module.exports = exports['default'];

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;
	exports.compilePattern = compilePattern;
	exports.matchPattern = matchPattern;
	exports.getParamNames = getParamNames;
	exports.getParams = getParams;
	exports.formatPattern = formatPattern;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	function escapeRegExp(string) {
	  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}

	function escapeSource(string) {
	  return escapeRegExp(string).replace(/\/+/g, '/+');
	}

	function _compilePattern(pattern) {
	  var regexpSource = '';
	  var paramNames = [];
	  var tokens = [];

	  var match = undefined,
	  lastIndex = 0,
	  matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
	  while (match = matcher.exec(pattern)) {
	    if (match.index !== lastIndex) {
	      tokens.push(pattern.slice(lastIndex, match.index));
	      regexpSource += escapeSource(pattern.slice(lastIndex, match.index));
	    }

	    if (match[1]) {
	      regexpSource += '([^/?#]+)';
	      paramNames.push(match[1]);
	    } else if (match[0] === '**') {
	      regexpSource += '([\\s\\S]*)';
	      paramNames.push('splat');
	    } else if (match[0] === '*') {
	      regexpSource += '([\\s\\S]*?)';
	      paramNames.push('splat');
	    } else if (match[0] === '(') {
	      regexpSource += '(?:';
	    } else if (match[0] === ')') {
	      regexpSource += ')?';
	    }

	    tokens.push(match[0]);

	    lastIndex = matcher.lastIndex;
	  }

	  if (lastIndex !== pattern.length) {
	    tokens.push(pattern.slice(lastIndex, pattern.length));
	    regexpSource += escapeSource(pattern.slice(lastIndex, pattern.length));
	  }

	  return {
	    pattern: pattern,
	    regexpSource: regexpSource,
	    paramNames: paramNames,
	    tokens: tokens };

	}

	var CompiledPatternsCache = {};

	function compilePattern(pattern) {
	  if (!(pattern in CompiledPatternsCache)) CompiledPatternsCache[pattern] = _compilePattern(pattern);

	  return CompiledPatternsCache[pattern];
	}

	/**
	   * Attempts to match a pattern on the given pathname. Patterns may use
	   * the following special characters:
	   *
	   * - :paramName     Matches a URL segment up to the next /, ?, or #. The
	   *                  captured string is considered a "param"
	   * - ()             Wraps a segment of the URL that is optional
	   * - *              Consumes (non-greedy) all characters up to the next
	   *                  character in the pattern, or to the end of the URL if
	   *                  there is none
	   * - **             Consumes (greedy) all characters up to the next character
	   *                  in the pattern, or to the end of the URL if there is none
	   *
	   * The return value is an object with the following properties:
	   *
	   * - remainingPathname
	   * - paramNames
	   * - paramValues
	   */

	function matchPattern(pattern, pathname) {
	  // Make leading slashes consistent between pattern and pathname.
	  if (pattern.charAt(0) !== '/') {
	    pattern = '/' + pattern;
	  }
	  if (pathname.charAt(0) !== '/') {
	    pathname = '/' + pathname;
	  }

	  var _compilePattern2 = compilePattern(pattern);

	  var regexpSource = _compilePattern2.regexpSource;
	  var paramNames = _compilePattern2.paramNames;
	  var tokens = _compilePattern2.tokens;

	  regexpSource += '/*'; // Capture path separators

	  // Special-case patterns like '*' for catch-all routes.
	  var captureRemaining = tokens[tokens.length - 1] !== '*';

	  if (captureRemaining) {
	    // This will match newlines in the remaining path.
	    regexpSource += '([\\s\\S]*?)';
	  }

	  var match = pathname.match(new RegExp('^' + regexpSource + '$', 'i'));

	  var remainingPathname = undefined,
	  paramValues = undefined;
	  if (match != null) {
	    if (captureRemaining) {
	      remainingPathname = match.pop();
	      var matchedPath = match[0].substr(0, match[0].length - remainingPathname.length);

	      // If we didn't match the entire pathname, then make sure that the match
	      // we did get ends at a path separator (potentially the one we added
	      // above at the beginning of the path, if the actual match was empty).
	      if (remainingPathname && matchedPath.charAt(matchedPath.length - 1) !== '/') {
	        return {
	          remainingPathname: null,
	          paramNames: paramNames,
	          paramValues: null };

	      }
	    } else {
	      // If this matched at all, then the match was the entire pathname.
	      remainingPathname = '';
	    }

	    paramValues = match.slice(1).map(function (v) {
	      return v != null ? decodeURIComponent(v) : v;
	    });
	  } else {
	    remainingPathname = paramValues = null;
	  }

	  return {
	    remainingPathname: remainingPathname,
	    paramNames: paramNames,
	    paramValues: paramValues };

	}

	function getParamNames(pattern) {
	  return compilePattern(pattern).paramNames;
	}

	function getParams(pattern, pathname) {
	  var _matchPattern = matchPattern(pattern, pathname);

	  var paramNames = _matchPattern.paramNames;
	  var paramValues = _matchPattern.paramValues;

	  if (paramValues != null) {
	    return paramNames.reduce(function (memo, paramName, index) {
	      memo[paramName] = paramValues[index];
	      return memo;
	    }, {});
	  }

	  return null;
	}

	/**
	   * Returns a version of the given pattern with params interpolated. Throws
	   * if there is a dynamic segment of the pattern for which there is no param.
	   */

	function formatPattern(pattern, params) {
	  params = params || {};

	  var _compilePattern3 = compilePattern(pattern);

	  var tokens = _compilePattern3.tokens;

	  var parenCount = 0,
	  pathname = '',
	  splatIndex = 0;

	  var token = undefined,
	  paramName = undefined,
	  paramValue = undefined;
	  for (var i = 0, len = tokens.length; i < len; ++i) {
	    token = tokens[i];

	    if (token === '*' || token === '**') {
	      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : _invariant2['default'](false) : undefined;

	      if (paramValue != null) pathname += encodeURI(paramValue);
	    } else if (token === '(') {
	      parenCount += 1;
	    } else if (token === ')') {
	      parenCount -= 1;
	    } else if (token.charAt(0) === ':') {
	      paramName = token.substring(1);
	      paramValue = params[paramName];

	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : _invariant2['default'](false) : undefined;

	      if (paramValue != null) pathname += encodeURIComponent(paramValue);
	    } else {
	      pathname += token;
	    }
	  }

	  return pathname.replace(/\/+/g, '/');
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}

	var _warning = __webpack_require__(161);

	var _warning2 = _interopRequireDefault(_warning);

	var _historyLibActions = __webpack_require__(165);

	var _historyLibUseQueries = __webpack_require__(186);

	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);

	var _computeChangedRoutes2 = __webpack_require__(189);

	var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);

	var _TransitionUtils = __webpack_require__(190);

	var _isActive2 = __webpack_require__(192);

	var _isActive3 = _interopRequireDefault(_isActive2);

	var _getComponents = __webpack_require__(193);

	var _getComponents2 = _interopRequireDefault(_getComponents);

	var _matchRoutes = __webpack_require__(194);

	var _matchRoutes2 = _interopRequireDefault(_matchRoutes);

	function hasAnyProperties(object) {
	  for (var p in object) {
	    if (object.hasOwnProperty(p)) return true;
	  }return false;
	}

	/**
	   * Returns a new createHistory function that may be used to create
	   * history objects that know about routing.
	   *
	   * Enhances history objects with the following methods:
	   *
	   * - listen((error, nextState) => {})
	   * - listenBeforeLeavingRoute(route, (nextLocation) => {})
	   * - match(location, (error, redirectLocation, nextState) => {})
	   * - isActive(pathname, query, indexOnly=false)
	   */
	function useRoutes(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var routes = options.routes;

	    var historyOptions = _objectWithoutProperties(options, ['routes']);

	    var history = _historyLibUseQueries2['default'](createHistory)(historyOptions);
	    var state = {};

	    function isActive(pathname, query) {
	      var indexOnly = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

	      return _isActive3['default'](pathname, query, indexOnly, state.location, state.routes, state.params);
	    }

	    function createLocationFromRedirectInfo(_ref) {
	      var pathname = _ref.pathname;
	      var query = _ref.query;
	      var state = _ref.state;

	      return history.createLocation(history.createPath(pathname, query), state, _historyLibActions.REPLACE);
	    }

	    var partialNextState = undefined;

	    function match(location, callback) {
	      if (partialNextState && partialNextState.location === location) {
	        // Continue from where we left off.
	        finishMatch(partialNextState, callback);
	      } else {
	        _matchRoutes2['default'](routes, location, function (error, nextState) {
	          if (error) {
	            callback(error);
	          } else if (nextState) {
	            finishMatch(_extends({}, nextState, { location: location }), callback);
	          } else {
	            callback();
	          }
	        });
	      }
	    }

	    function finishMatch(nextState, callback) {
	      var _computeChangedRoutes = _computeChangedRoutes3['default'](state, nextState);

	      var leaveRoutes = _computeChangedRoutes.leaveRoutes;
	      var enterRoutes = _computeChangedRoutes.enterRoutes;

	      _TransitionUtils.runLeaveHooks(leaveRoutes);

	      _TransitionUtils.runEnterHooks(enterRoutes, nextState, function (error, redirectInfo) {
	        if (error) {
	          callback(error);
	        } else if (redirectInfo) {
	          callback(null, createLocationFromRedirectInfo(redirectInfo));
	        } else {
	          // TODO: Fetch components after state is updated.
	          _getComponents2['default'](nextState, function (error, components) {
	            if (error) {
	              callback(error);
	            } else {
	              // TODO: Make match a pure function and have some other API
	              // for "match and update state".
	              callback(null, null, state = _extends({}, nextState, { components: components }));
	            }
	          });
	        }
	      });
	    }

	    var RouteGuid = 1;

	    function getRouteID(route) {
	      return route.__id__ || (route.__id__ = RouteGuid++);
	    }

	    var RouteHooks = {};

	    function getRouteHooksForRoutes(routes) {
	      return routes.reduce(function (hooks, route) {
	        hooks.push.apply(hooks, RouteHooks[getRouteID(route)]);
	        return hooks;
	      }, []);
	    }

	    function transitionHook(location, callback) {
	      _matchRoutes2['default'](routes, location, function (error, nextState) {
	        if (nextState == null) {
	          // TODO: We didn't actually match anything, but hang
	          // onto error/nextState so we don't have to matchRoutes
	          // again in the listen callback.
	          callback();
	          return;
	        }

	        // Cache some state here so we don't have to
	        // matchRoutes() again in the listen callback.
	        partialNextState = _extends({}, nextState, { location: location });

	        var hooks = getRouteHooksForRoutes(_computeChangedRoutes3['default'](state, partialNextState).leaveRoutes);

	        var result = undefined;
	        for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
	          // Passing the location arg here indicates to
	          // the user that this is a transition hook.
	          result = hooks[i](location);
	        }

	        callback(result);
	      });
	    }

	    function beforeUnloadHook() {
	      // Synchronously check to see if any route hooks want
	      // to prevent the current window/tab from closing.
	      if (state.routes) {
	        var hooks = getRouteHooksForRoutes(state.routes);

	        var message = undefined;
	        for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
	          // Passing no args indicates to the user that this is a
	          // beforeunload hook. We don't know the next location.
	          message = hooks[i]();
	        }

	        return message;
	      }
	    }

	    var unlistenBefore = undefined,
	    unlistenBeforeUnload = undefined;

	    /**
	                                       * Registers the given hook function to run before leaving the given route.
	                                       *
	                                       * During a normal transition, the hook function receives the next location
	                                       * as its only argument and must return either a) a prompt message to show
	                                       * the user, to make sure they want to leave the page or b) false, to prevent
	                                       * the transition.
	                                       *
	                                       * During the beforeunload event (in browsers) the hook receives no arguments.
	                                       * In this case it must return a prompt message to prevent the transition.
	                                       *
	                                       * Returns a function that may be used to unbind the listener.
	                                       */
	    function listenBeforeLeavingRoute(route, hook) {
	      // TODO: Warn if they register for a route that isn't currently
	      // active. They're probably doing something wrong, like re-creating
	      // route objects on every location change.
	      var routeID = getRouteID(route);
	      var hooks = RouteHooks[routeID];

	      if (hooks == null) {
	        var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);

	        hooks = RouteHooks[routeID] = [hook];

	        if (thereWereNoRouteHooks) {
	          // setup transition & beforeunload hooks
	          unlistenBefore = history.listenBefore(transitionHook);

	          if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
	        }
	      } else if (hooks.indexOf(hook) === -1) {
	        hooks.push(hook);
	      }

	      return function () {
	        var hooks = RouteHooks[routeID];

	        if (hooks != null) {
	          var newHooks = hooks.filter(function (item) {
	            return item !== hook;
	          });

	          if (newHooks.length === 0) {
	            delete RouteHooks[routeID];

	            if (!hasAnyProperties(RouteHooks)) {
	              // teardown transition & beforeunload hooks
	              if (unlistenBefore) {
	                unlistenBefore();
	                unlistenBefore = null;
	              }

	              if (unlistenBeforeUnload) {
	                unlistenBeforeUnload();
	                unlistenBeforeUnload = null;
	              }
	            }
	          } else {
	            RouteHooks[routeID] = newHooks;
	          }
	        }
	      };
	    }

	    /**
	       * This is the API for stateful environments. As the location
	       * changes, we update state and call the listener. We can also
	       * gracefully handle errors and redirects.
	       */
	    function listen(listener) {
	      // TODO: Only use a single history listener. Otherwise we'll
	      // end up with multiple concurrent calls to match.
	      return history.listen(function (location) {
	        if (state.location === location) {
	          listener(null, state);
	        } else {
	          match(location, function (error, redirectLocation, nextState) {
	            if (error) {
	              listener(error);
	            } else if (redirectLocation) {
	              history.transitionTo(redirectLocation);
	            } else if (nextState) {
	              listener(null, nextState);
	            } else {
	              process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : undefined;
	            }
	          });
	        }
	      });
	    }

	    return _extends({}, history, {
	      isActive: isActive,
	      match: match,
	      listenBeforeLeavingRoute: listenBeforeLeavingRoute,
	      listen: listen });

	  };
	}

	exports['default'] = useRoutes;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}

	var _warning = __webpack_require__(163);

	var _warning2 = _interopRequireDefault(_warning);

	var _queryString = __webpack_require__(187);

	var _runTransitionHook = __webpack_require__(178);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _parsePath = __webpack_require__(176);

	var _parsePath2 = _interopRequireDefault(_parsePath);

	var _deprecate = __webpack_require__(179);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	var SEARCH_BASE_KEY = '$searchBase';

	function defaultStringifyQuery(query) {
	  return _queryString.stringify(query).replace(/%20/g, '+');
	}

	var defaultParseQueryString = _queryString.parse;

	function isNestedObject(object) {
	  for (var p in object) {
	    if (object.hasOwnProperty(p) && _typeof(object[p]) === 'object' && !Array.isArray(object[p]) && object[p] !== null) return true;
	  }return false;
	}

	/**
	   * Returns a new createHistory function that may be used to create
	   * history objects that know how to handle URL queries.
	   */
	function useQueries(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var stringifyQuery = options.stringifyQuery;
	    var parseQueryString = options.parseQueryString;

	    var historyOptions = _objectWithoutProperties(options, ['stringifyQuery', 'parseQueryString']);

	    var history = createHistory(historyOptions);

	    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;

	    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;

	    function addQuery(location) {
	      if (location.query == null) {
	        var search = location.search;

	        location.query = parseQueryString(search.substring(1));
	        location[SEARCH_BASE_KEY] = { search: search, searchBase: '' };
	      }

	      // TODO: Instead of all the book-keeping here, this should just strip the
	      // stringified query from the search.

	      return location;
	    }

	    function appendQuery(location, query) {
	      var _extends2;

	      var queryString = undefined;
	      if (!query || (queryString = stringifyQuery(query)) === '') return location;

	      process.env.NODE_ENV !== 'production' ? _warning2['default'](stringifyQuery !== defaultStringifyQuery || !isNestedObject(query), 'useQueries does not stringify nested query objects by default; ' + 'use a custom stringifyQuery function') : undefined;

	      if (typeof location === 'string') location = _parsePath2['default'](location);

	      var searchBaseSpec = location[SEARCH_BASE_KEY];
	      var searchBase = undefined;
	      if (searchBaseSpec && location.search === searchBaseSpec.search) {
	        searchBase = searchBaseSpec.searchBase;
	      } else {
	        searchBase = location.search || '';
	      }

	      var search = searchBase + (searchBase ? '&' : '?') + queryString;

	      return _extends({}, location, (_extends2 = {
	        search: search },
	      _extends2[SEARCH_BASE_KEY] = { search: search, searchBase: searchBase }, _extends2));
	    }

	    // Override all read methods with query-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addQuery(location), callback);
	      });
	    }

	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addQuery(location));
	      });
	    }

	    // Override all write methods with query-aware versions.
	    function push(location) {
	      history.push(appendQuery(location, location.query));
	    }

	    function replace(location) {
	      history.replace(appendQuery(location, location.query));
	    }

	    function createPath(location, query) {
	      //warning(
	      //  !query,
	      //  'the query argument to createPath is deprecated; use a location descriptor instead'
	      //)
	      return history.createPath(appendQuery(location, query || location.query));
	    }

	    function createHref(location, query) {
	      //warning(
	      //  !query,
	      //  'the query argument to createHref is deprecated; use a location descriptor instead'
	      //)
	      return history.createHref(appendQuery(location, query || location.query));
	    }

	    function createLocation() {
	      return addQuery(history.createLocation.apply(history, arguments));
	    }

	    // deprecated
	    function pushState(state, path, query) {
	      if (typeof path === 'string') path = _parsePath2['default'](path);

	      push(_extends({ state: state }, path, { query: query }));
	    }

	    // deprecated
	    function replaceState(state, path, query) {
	      if (typeof path === 'string') path = _parsePath2['default'](path);

	      replace(_extends({ state: state }, path, { query: query }));
	    }

	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,

	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead') });

	  };
	}

	exports['default'] = useQueries;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strictUriEncode = __webpack_require__(188);

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str) {
		if (typeof str !== 'string') {
			return {};
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return {};
		}

		return str.split('&').reduce(function (ret, param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;

			key = decodeURIComponent(key);

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (!ret.hasOwnProperty(key)) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}

			return ret;
		}, {});
	};

	exports.stringify = function (obj) {
		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (val === undefined) {
				return '';
			}

			if (val === null) {
				return key;
			}

			if (Array.isArray(val)) {
				return val.slice().sort().map(function (val2) {
					return strictUriEncode(key) + '=' + strictUriEncode(val2);
				}).join('&');
			}

			return strictUriEncode(key) + '=' + strictUriEncode(val);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};

/***/ },
/* 188 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(184);

	function routeParamsChanged(route, prevState, nextState) {
	  if (!route.path) return false;

	  var paramNames = _PatternUtils.getParamNames(route.path);

	  return paramNames.some(function (paramName) {
	    return prevState.params[paramName] !== nextState.params[paramName];
	  });
	}

	/**
	   * Returns an object of { leaveRoutes, enterRoutes } determined by
	   * the change from prevState to nextState. We leave routes if either
	   * 1) they are not in the next state or 2) they are in the next state
	   * but their params have changed (i.e. /users/123 => /users/456).
	   *
	   * leaveRoutes are ordered starting at the leaf route of the tree
	   * we're leaving up to the common parent route. enterRoutes are ordered
	   * from the top of the tree we're entering down to the leaf route.
	   */
	function computeChangedRoutes(prevState, nextState) {
	  var prevRoutes = prevState && prevState.routes;
	  var nextRoutes = nextState.routes;

	  var leaveRoutes = undefined,
	  enterRoutes = undefined;
	  if (prevRoutes) {
	    leaveRoutes = prevRoutes.filter(function (route) {
	      return nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
	    });

	    // onLeave hooks start at the leaf route.
	    leaveRoutes.reverse();

	    enterRoutes = nextRoutes.filter(function (route) {
	      return prevRoutes.indexOf(route) === -1 || leaveRoutes.indexOf(route) !== -1;
	    });
	  } else {
	    leaveRoutes = [];
	    enterRoutes = nextRoutes;
	  }

	  return {
	    leaveRoutes: leaveRoutes,
	    enterRoutes: enterRoutes };

	}

	exports['default'] = computeChangedRoutes;
	module.exports = exports['default'];

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.runEnterHooks = runEnterHooks;
	exports.runLeaveHooks = runLeaveHooks;

	var _AsyncUtils = __webpack_require__(191);

	function createEnterHook(hook, route) {
	  return function (a, b, callback) {
	    hook.apply(route, arguments);

	    if (hook.length < 3) {
	      // Assume hook executes synchronously and
	      // automatically call the callback.
	      callback();
	    }
	  };
	}

	function getEnterHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onEnter) hooks.push(createEnterHook(route.onEnter, route));

	    return hooks;
	  }, []);
	}

	/**
	   * Runs all onEnter hooks in the given array of routes in order
	   * with onEnter(nextState, replaceState, callback) and calls
	   * callback(error, redirectInfo) when finished. The first hook
	   * to use replaceState short-circuits the loop.
	   *
	   * If a hook needs to run asynchronously, it may use the callback
	   * function. However, doing so will cause the transition to pause,
	   * which could lead to a non-responsive UI if the hook is slow.
	   */

	function runEnterHooks(routes, nextState, callback) {
	  var hooks = getEnterHooks(routes);

	  if (!hooks.length) {
	    callback();
	    return;
	  }

	  var redirectInfo = undefined;
	  function replaceState(state, pathname, query) {
	    redirectInfo = { pathname: pathname, query: query, state: state };
	  }

	  _AsyncUtils.loopAsync(hooks.length, function (index, next, done) {
	    hooks[index](nextState, replaceState, function (error) {
	      if (error || redirectInfo) {
	        done(error, redirectInfo); // No need to continue.
	      } else {
	        next();
	      }
	    });
	  }, callback);
	}

	/**
	   * Runs all onLeave hooks in the given array of routes in order.
	   */

	function runLeaveHooks(routes) {
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    if (routes[i].onLeave) routes[i].onLeave.call(routes[i]);
	  }
	}

/***/ },
/* 191 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports.loopAsync = loopAsync;
	exports.mapAsync = mapAsync;

	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	  isDone = false;

	  function done() {
	    isDone = true;
	    callback.apply(this, arguments);
	  }

	  function next() {
	    if (isDone) return;

	    if (currentTurn < turns) {
	      work.call(this, currentTurn++, next, done);
	    } else {
	      done.apply(this, arguments);
	    }
	  }

	  next();
	}

	function mapAsync(array, work, callback) {
	  var length = array.length;
	  var values = [];

	  if (length === 0) return callback(null, values);

	  var isDone = false,
	  doneCount = 0;

	  function done(index, error, value) {
	    if (isDone) return;

	    if (error) {
	      isDone = true;
	      callback(error);
	    } else {
	      values[index] = value;

	      isDone = ++doneCount === length;

	      if (isDone) callback(null, values);
	    }
	  }

	  array.forEach(function (item, index) {
	    work(item, index, function (error, value) {
	      done(index, error, value);
	    });
	  });
	}

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	var _PatternUtils = __webpack_require__(184);

	function deepEqual(a, b) {
	  if (a == b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return deepEqual(item, b[index]);
	    });
	  }

	  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') {
	    for (var p in a) {
	      if (!a.hasOwnProperty(p)) {
	        continue;
	      }

	      if (a[p] === undefined) {
	        if (b[p] !== undefined) {
	          return false;
	        }
	      } else if (!b.hasOwnProperty(p)) {
	        return false;
	      } else if (!deepEqual(a[p], b[p])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  return String(a) === String(b);
	}

	function paramsAreActive(paramNames, paramValues, activeParams) {
	  // FIXME: This doesn't work on repeated params in activeParams.
	  return paramNames.every(function (paramName, index) {
	    return String(paramValues[index]) === String(activeParams[paramName]);
	  });
	}

	function getMatchingRouteIndex(pathname, activeRoutes, activeParams) {
	  var remainingPathname = pathname,
	  paramNames = [],
	  paramValues = [];

	  for (var i = 0, len = activeRoutes.length; i < len; ++i) {
	    var route = activeRoutes[i];
	    var pattern = route.path || '';

	    if (pattern.charAt(0) === '/') {
	      remainingPathname = pathname;
	      paramNames = [];
	      paramValues = [];
	    }

	    if (remainingPathname !== null) {
	      var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
	      remainingPathname = matched.remainingPathname;
	      paramNames = [].concat(paramNames, matched.paramNames);
	      paramValues = [].concat(paramValues, matched.paramValues);
	    }

	    if (remainingPathname === '' && route.path && paramsAreActive(paramNames, paramValues, activeParams)) return i;
	  }

	  return null;
	}

	/**
	   * Returns true if the given pathname matches the active routes
	   * and params.
	   */
	function routeIsActive(pathname, routes, params, indexOnly) {
	  var i = getMatchingRouteIndex(pathname, routes, params);

	  if (i === null) {
	    // No match.
	    return false;
	  } else if (!indexOnly) {
	    // Any match is good enough.
	    return true;
	  }

	  // If any remaining routes past the match index have paths, then we can't
	  // be on the index route.
	  return routes.slice(i + 1).every(function (route) {
	    return !route.path;
	  });
	}

	/**
	   * Returns true if all key/value pairs in the given query are
	   * currently active.
	   */
	function queryIsActive(query, activeQuery) {
	  if (activeQuery == null) return query == null;

	  if (query == null) return true;

	  return deepEqual(query, activeQuery);
	}

	/**
	   * Returns true if a <Link> to the given pathname/query combination is
	   * currently active.
	   */
	function isActive(pathname, query, indexOnly, location, routes, params) {
	  if (location == null) return false;

	  if (!routeIsActive(pathname, routes, params, indexOnly)) return false;

	  return queryIsActive(query, location.query);
	}

	exports['default'] = isActive;
	module.exports = exports['default'];

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _AsyncUtils = __webpack_require__(191);

	function getComponentsForRoute(location, route, callback) {
	  if (route.component || route.components) {
	    callback(null, route.component || route.components);
	  } else if (route.getComponent) {
	    route.getComponent(location, callback);
	  } else if (route.getComponents) {
	    route.getComponents(location, callback);
	  } else {
	    callback();
	  }
	}

	/**
	   * Asynchronously fetches all components needed for the given router
	   * state and calls callback(error, components) when finished.
	   *
	   * Note: This operation may finish synchronously if no routes have an
	   * asynchronous getComponents method.
	   */
	function getComponents(nextState, callback) {
	  _AsyncUtils.mapAsync(nextState.routes, function (route, index, callback) {
	    getComponentsForRoute(nextState.location, route, callback);
	  }, callback);
	}

	exports['default'] = getComponents;
	module.exports = exports['default'];

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _warning = __webpack_require__(161);

	var _warning2 = _interopRequireDefault(_warning);

	var _AsyncUtils = __webpack_require__(191);

	var _PatternUtils = __webpack_require__(184);

	var _RouteUtils = __webpack_require__(180);

	function getChildRoutes(route, location, callback) {
	  if (route.childRoutes) {
	    callback(null, route.childRoutes);
	  } else if (route.getChildRoutes) {
	    route.getChildRoutes(location, function (error, childRoutes) {
	      callback(error, !error && _RouteUtils.createRoutes(childRoutes));
	    });
	  } else {
	    callback();
	  }
	}

	function getIndexRoute(route, location, callback) {
	  if (route.indexRoute) {
	    callback(null, route.indexRoute);
	  } else if (route.getIndexRoute) {
	    route.getIndexRoute(location, function (error, indexRoute) {
	      callback(error, !error && _RouteUtils.createRoutes(indexRoute)[0]);
	    });
	  } else if (route.childRoutes) {
	    (function () {
	      var pathless = route.childRoutes.filter(function (obj) {
	        return !obj.hasOwnProperty('path');
	      });

	      _AsyncUtils.loopAsync(pathless.length, function (index, next, done) {
	        getIndexRoute(pathless[index], location, function (error, indexRoute) {
	          if (error || indexRoute) {
	            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
	            done(error, routes);
	          } else {
	            next();
	          }
	        });
	      }, function (err, routes) {
	        callback(null, routes);
	      });
	    })();
	  } else {
	    callback();
	  }
	}

	function assignParams(params, paramNames, paramValues) {
	  return paramNames.reduce(function (params, paramName, index) {
	    var paramValue = paramValues && paramValues[index];

	    if (Array.isArray(params[paramName])) {
	      params[paramName].push(paramValue);
	    } else if (paramName in params) {
	      params[paramName] = [params[paramName], paramValue];
	    } else {
	      params[paramName] = paramValue;
	    }

	    return params;
	  }, params);
	}

	function createParams(paramNames, paramValues) {
	  return assignParams({}, paramNames, paramValues);
	}

	function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
	  var pattern = route.path || '';

	  if (pattern.charAt(0) === '/') {
	    remainingPathname = location.pathname;
	    paramNames = [];
	    paramValues = [];
	  }

	  if (remainingPathname !== null) {
	    var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
	    remainingPathname = matched.remainingPathname;
	    paramNames = [].concat(paramNames, matched.paramNames);
	    paramValues = [].concat(paramValues, matched.paramValues);

	    if (remainingPathname === '' && route.path) {
	      var _ret2 = function () {
	        var match = {
	          routes: [route],
	          params: createParams(paramNames, paramValues) };


	        getIndexRoute(route, location, function (error, indexRoute) {
	          if (error) {
	            callback(error);
	          } else {
	            if (Array.isArray(indexRoute)) {
	              var _match$routes;

	              process.env.NODE_ENV !== 'production' ? _warning2['default'](indexRoute.every(function (route) {
	                return !route.path;
	              }), 'Index routes should not have paths') : undefined;
	              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
	            } else if (indexRoute) {
	              process.env.NODE_ENV !== 'production' ? _warning2['default'](!indexRoute.path, 'Index routes should not have paths') : undefined;
	              match.routes.push(indexRoute);
	            }

	            callback(null, match);
	          }
	        });
	        return {
	          v: undefined };

	      }();

	      if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === 'object') return _ret2.v;
	    }
	  }

	  if (remainingPathname != null || route.childRoutes) {
	    // Either a) this route matched at least some of the path or b)
	    // we don't have to load this route's children asynchronously. In
	    // either case continue checking for matches in the subtree.
	    getChildRoutes(route, location, function (error, childRoutes) {
	      if (error) {
	        callback(error);
	      } else if (childRoutes) {
	        // Check the child routes to see if any of them match.
	        matchRoutes(childRoutes, location, function (error, match) {
	          if (error) {
	            callback(error);
	          } else if (match) {
	            // A child route matched! Augment the match and pass it up the stack.
	            match.routes.unshift(route);
	            callback(null, match);
	          } else {
	            callback();
	          }
	        }, remainingPathname, paramNames, paramValues);
	      } else {
	        callback();
	      }
	    });
	  } else {
	    callback();
	  }
	}

	/**
	   * Asynchronously matches the given location to a set of routes and calls
	   * callback(error, state) when finished. The state object will have the
	   * following properties:
	   *
	   * - routes       An array of routes that matched, in hierarchical order
	   * - params       An object of URL parameters
	   *
	   * Note: This operation may finish synchronously if no routes have an
	   * asynchronous getChildRoutes method.
	   */
	function matchRoutes(routes, location, callback) {
	  var remainingPathname = arguments.length <= 3 || arguments[3] === undefined ? location.pathname : arguments[3];
	  var paramNames = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
	  var paramValues = arguments.length <= 5 || arguments[5] === undefined ? [] : arguments[5];
	  return function () {
	    _AsyncUtils.loopAsync(routes.length, function (index, next, done) {
	      matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
	        if (error || match) {
	          done(error, match);
	        } else {
	          next();
	        }
	      });
	    }, callback);
	  }();
	}

	exports['default'] = matchRoutes;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.falsy = falsy;

	var _react = __webpack_require__(1);

	var func = _react.PropTypes.func;
	var object = _react.PropTypes.object;
	var arrayOf = _react.PropTypes.arrayOf;
	var oneOfType = _react.PropTypes.oneOfType;
	var element = _react.PropTypes.element;
	var shape = _react.PropTypes.shape;
	var string = _react.PropTypes.string;

	function falsy(props, propName, componentName) {
	  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	}

	var history = shape({
	  listen: func.isRequired,
	  pushState: func.isRequired,
	  replaceState: func.isRequired,
	  go: func.isRequired });


	exports.history = history;
	var location = shape({
	  pathname: string.isRequired,
	  search: string.isRequired,
	  state: object,
	  action: string.isRequired,
	  key: string });


	exports.location = location;
	var component = oneOfType([func, string]);
	exports.component = component;
	var components = oneOfType([component, object]);
	exports.components = components;
	var route = oneOfType([object, element]);
	exports.route = route;
	var routes = oneOfType([route, arrayOf(route)]);

	exports.routes = routes;
	exports['default'] = {
	  falsy: falsy,
	  history: history,
	  location: location,
	  component: component,
	  components: components,
	  route: route };

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}

	function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _React$PropTypes = _react2['default'].PropTypes;
	var bool = _React$PropTypes.bool;
	var object = _React$PropTypes.object;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;

	function isLeftClickEvent(event) {
	  return event.button === 0;
	}

	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}

	function isEmptyObject(object) {
	  for (var p in object) {
	    if (object.hasOwnProperty(p)) return false;
	  }return true;
	}

	/**
	   * A <Link> is used to create an <a> element that links to a route.
	   * When that route is active, the link gets the value of its
	   * `activeClassName` prop
	   *
	   * For example, assuming you have the following route:
	   *
	   *   <Route path="/posts/:postID" component={Post} />
	   *
	   * You could use the following component to link to that route:
	   *
	   *   <Link to={`/posts/${post.id}`} />
	   *
	   * Links may pass along location state and/or query string parameters
	   * in the state/query props, respectively.
	   *
	   *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
	   */

	var Link = function (_Component) {
	  _inherits(Link, _Component);

	  function Link() {
	    _classCallCheck(this, Link);

	    _Component.apply(this, arguments);
	  }

	  Link.prototype.handleClick = function handleClick(event) {
	    var allowTransition = true;

	    if (this.props.onClick) this.props.onClick(event);

	    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;

	    if (event.defaultPrevented === true) allowTransition = false;

	    // If target prop is set (e.g. to "_blank") let browser handle link.
	    /* istanbul ignore if: untestable with Karma */
	    if (this.props.target) {
	      if (!allowTransition) event.preventDefault();

	      return;
	    }

	    event.preventDefault();

	    if (allowTransition) {
	      var _props = this.props;
	      var state = _props.state;
	      var to = _props.to;
	      var query = _props.query;
	      var hash = _props.hash;

	      if (hash) to += hash;

	      this.context.history.pushState(state, to, query);
	    }
	  };

	  Link.prototype.render = function render() {
	    var _this = this;

	    var _props2 = this.props;
	    var to = _props2.to;
	    var query = _props2.query;
	    var hash = _props2.hash;
	    var state = _props2.state;
	    var activeClassName = _props2.activeClassName;
	    var activeStyle = _props2.activeStyle;
	    var onlyActiveOnIndex = _props2.onlyActiveOnIndex;

	    var props = _objectWithoutProperties(_props2, ['to', 'query', 'hash', 'state', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);

	    // Manually override onClick.
	    props.onClick = function (e) {
	      return _this.handleClick(e);
	    };

	    // Ignore if rendered outside the context of history, simplifies unit testing.
	    var history = this.context.history;

	    if (history) {
	      props.href = history.createHref(to, query);

	      if (hash) props.href += hash;

	      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
	        if (history.isActive(to, query, onlyActiveOnIndex)) {
	          if (activeClassName) props.className += props.className === '' ? activeClassName : ' ' + activeClassName;

	          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
	        }
	      }
	    }

	    return _react2['default'].createElement('a', props);
	  };

	  return Link;
	}(_react.Component);

	Link.contextTypes = {
	  history: object };


	Link.propTypes = {
	  to: string.isRequired,
	  query: object,
	  hash: string,
	  state: object,
	  activeStyle: object,
	  activeClassName: string,
	  onlyActiveOnIndex: bool.isRequired,
	  onClick: func };


	Link.defaultProps = {
	  onlyActiveOnIndex: false,
	  className: '',
	  style: {} };


	exports['default'] = Link;
	module.exports = exports['default'];

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}

	function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Link = __webpack_require__(196);

	var _Link2 = _interopRequireDefault(_Link);

	/**
	                                             * An <IndexLink> is used to link to an <IndexRoute>.
	                                             */

	var IndexLink = function (_Component) {
	  _inherits(IndexLink, _Component);

	  function IndexLink() {
	    _classCallCheck(this, IndexLink);

	    _Component.apply(this, arguments);
	  }

	  IndexLink.prototype.render = function render() {
	    return _react2['default'].createElement(_Link2['default'], _extends({}, this.props, { onlyActiveOnIndex: true }));
	  };

	  return IndexLink;
	}(_react.Component);

	exports['default'] = IndexLink;
	module.exports = exports['default'];

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}

	function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var _warning = __webpack_require__(161);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Redirect = __webpack_require__(199);

	var _Redirect2 = _interopRequireDefault(_Redirect);

	var _PropTypes = __webpack_require__(195);

	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;

	/**
	                                       * An <IndexRedirect> is used to redirect from an indexRoute.
	                                       */

	var IndexRedirect = function (_Component) {
	  _inherits(IndexRedirect, _Component);

	  function IndexRedirect() {
	    _classCallCheck(this, IndexRedirect);

	    _Component.apply(this, arguments);
	  }

	  /* istanbul ignore next: sanity check */

	  IndexRedirect.prototype.render = function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  };

	  return IndexRedirect;
	}(_react.Component);

	IndexRedirect.propTypes = {
	  to: string.isRequired,
	  query: object,
	  state: object,
	  onEnter: _PropTypes.falsy,
	  children: _PropTypes.falsy };


	IndexRedirect.createRouteFromReactElement = function (element, parentRoute) {
	  /* istanbul ignore else: sanity check */
	  if (parentRoute) {
	    parentRoute.indexRoute = _Redirect2['default'].createRouteFromReactElement(element);
	  } else {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'An <IndexRedirect> does not make sense at the root of your route config') : undefined;
	  }
	};

	exports['default'] = IndexRedirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}

	function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _RouteUtils = __webpack_require__(180);

	var _PatternUtils = __webpack_require__(184);

	var _PropTypes = __webpack_require__(195);

	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;

	/**
	                                       * A <Redirect> is used to declare another URL path a client should
	                                       * be sent to when they request a given URL.
	                                       *
	                                       * Redirects are placed alongside routes in the route configuration
	                                       * and are traversed in the same manner.
	                                       */

	var Redirect = function (_Component) {
	  _inherits(Redirect, _Component);

	  function Redirect() {
	    _classCallCheck(this, Redirect);

	    _Component.apply(this, arguments);
	  }

	  /* istanbul ignore next: sanity check */

	  Redirect.prototype.render = function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Redirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  };

	  return Redirect;
	}(_react.Component);

	Redirect.createRouteFromReactElement = function (element) {
	  var route = _RouteUtils.createRouteFromReactElement(element);

	  if (route.from) route.path = route.from;

	  route.onEnter = function (nextState, replaceState) {
	    var location = nextState.location;
	    var params = nextState.params;

	    var pathname = undefined;
	    if (route.to.charAt(0) === '/') {
	      pathname = _PatternUtils.formatPattern(route.to, params);
	    } else if (!route.to) {
	      pathname = location.pathname;
	    } else {
	      var routeIndex = nextState.routes.indexOf(route);
	      var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
	      var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
	      pathname = _PatternUtils.formatPattern(pattern, params);
	    }

	    replaceState(route.state || location.state, pathname, route.query || location.query);
	  };

	  return route;
	};

	Redirect.getRoutePattern = function (routes, routeIndex) {
	  var parentPattern = '';

	  for (var i = routeIndex; i >= 0; i--) {
	    var route = routes[i];
	    var pattern = route.path || '';
	    parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;

	    if (pattern.indexOf('/') === 0) break;
	  }

	  return '/' + parentPattern;
	};

	Redirect.propTypes = {
	  path: string,
	  from: string, // Alias for path
	  to: string.isRequired,
	  query: object,
	  state: object,
	  onEnter: _PropTypes.falsy,
	  children: _PropTypes.falsy };


	exports['default'] = Redirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}

	function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var _warning = __webpack_require__(161);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _RouteUtils = __webpack_require__(180);

	var _PropTypes = __webpack_require__(195);

	var func = _react2['default'].PropTypes.func;

	/**
	                                               * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
	                                               * a JSX route config.
	                                               */

	var IndexRoute = function (_Component) {
	  _inherits(IndexRoute, _Component);

	  function IndexRoute() {
	    _classCallCheck(this, IndexRoute);

	    _Component.apply(this, arguments);
	  }

	  /* istanbul ignore next: sanity check */

	  IndexRoute.prototype.render = function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRoute> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  };

	  return IndexRoute;
	}(_react.Component);

	IndexRoute.propTypes = {
	  path: _PropTypes.falsy,
	  component: _PropTypes.component,
	  components: _PropTypes.components,
	  getComponent: func,
	  getComponents: func };


	IndexRoute.createRouteFromReactElement = function (element, parentRoute) {
	  /* istanbul ignore else: sanity check */
	  if (parentRoute) {
	    parentRoute.indexRoute = _RouteUtils.createRouteFromReactElement(element);
	  } else {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'An <IndexRoute> does not make sense at the root of your route config') : undefined;
	  }
	};

	exports['default'] = IndexRoute;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}

	function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _RouteUtils = __webpack_require__(180);

	var _PropTypes = __webpack_require__(195);

	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;

	/**
	                                   * A <Route> is used to declare which components are rendered to the
	                                   * page when the URL matches a given pattern.
	                                   *
	                                   * Routes are arranged in a nested tree structure. When a new URL is
	                                   * requested, the tree is searched depth-first to find a route whose
	                                   * path matches the URL.  When one is found, all routes in the tree
	                                   * that lead to it are considered "active" and their components are
	                                   * rendered into the DOM, nested in the same order as in the tree.
	                                   */

	var Route = function (_Component) {
	  _inherits(Route, _Component);

	  function Route() {
	    _classCallCheck(this, Route);

	    _Component.apply(this, arguments);
	  }

	  /* istanbul ignore next: sanity check */

	  Route.prototype.render = function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Route> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  };

	  return Route;
	}(_react.Component);

	Route.createRouteFromReactElement = _RouteUtils.createRouteFromReactElement;

	Route.propTypes = {
	  path: string,
	  component: _PropTypes.component,
	  components: _PropTypes.components,
	  getComponent: func,
	  getComponents: func };


	exports['default'] = Route;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _PropTypes = __webpack_require__(195);

	/**
	                                          * A mixin that adds the "history" instance variable to components.
	                                          */
	var History = {

	  contextTypes: {
	    history: _PropTypes.history },


	  componentWillMount: function componentWillMount() {
	    this.history = this.context.history;
	  } };



	exports['default'] = History;
	module.exports = exports['default'];

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var object = _react2['default'].PropTypes.object;

	/**
	                                                   * The Lifecycle mixin adds the routerWillLeave lifecycle method to a
	                                                   * component that may be used to cancel a transition or prompt the user
	                                                   * for confirmation.
	                                                   *
	                                                   * On standard transitions, routerWillLeave receives a single argument: the
	                                                   * location we're transitioning to. To cancel the transition, return false.
	                                                   * To prompt the user for confirmation, return a prompt message (string).
	                                                   *
	                                                   * During the beforeunload event (assuming you're using the useBeforeUnload
	                                                   * history enhancer), routerWillLeave does not receive a location object
	                                                   * because it isn't possible for us to know the location we're transitioning
	                                                   * to. In this case routerWillLeave must return a prompt message to prevent
	                                                   * the user from closing the window/tab.
	                                                   */
	var Lifecycle = {

	  contextTypes: {
	    history: object.isRequired,
	    // Nested children receive the route as context, either
	    // set by the route component using the RouteContext mixin
	    // or by some other ancestor.
	    route: object },


	  propTypes: {
	    // Route components receive the route object as a prop.
	    route: object },


	  componentDidMount: function componentDidMount() {
	    !this.routerWillLeave ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin requires you to define a routerWillLeave method') : _invariant2['default'](false) : undefined;

	    var route = this.props.route || this.context.route;

	    !route ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin must be used on either a) a <Route component> or ' + 'b) a descendant of a <Route component> that uses the RouteContext mixin') : _invariant2['default'](false) : undefined;

	    this._unlistenBeforeLeavingRoute = this.context.history.listenBeforeLeavingRoute(route, this.routerWillLeave);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlistenBeforeLeavingRoute) this._unlistenBeforeLeavingRoute();
	  } };



	exports['default'] = Lifecycle;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var object = _react2['default'].PropTypes.object;

	/**
	                                                   * The RouteContext mixin provides a convenient way for route
	                                                   * components to set the route in context. This is needed for
	                                                   * routes that render elements that want to use the Lifecycle
	                                                   * mixin to prevent transitions.
	                                                   */
	var RouteContext = {

	  propTypes: {
	    route: object.isRequired },


	  childContextTypes: {
	    route: object.isRequired },


	  getChildContext: function getChildContext() {
	    return {
	      route: this.props.route };

	  } };



	exports['default'] = RouteContext;
	module.exports = exports['default'];

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _invariant = __webpack_require__(182);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _historyLibCreateMemoryHistory = __webpack_require__(206);

	var _historyLibCreateMemoryHistory2 = _interopRequireDefault(_historyLibCreateMemoryHistory);

	var _historyLibUseBasename = __webpack_require__(207);

	var _historyLibUseBasename2 = _interopRequireDefault(_historyLibUseBasename);

	var _RouteUtils = __webpack_require__(180);

	var _useRoutes = __webpack_require__(185);

	var _useRoutes2 = _interopRequireDefault(_useRoutes);

	var createHistory = _useRoutes2['default'](_historyLibUseBasename2['default'](_historyLibCreateMemoryHistory2['default']));

	/**
	                                                                                                                             * A high-level API to be used for server-side rendering.
	                                                                                                                             *
	                                                                                                                             * This function matches a location to a set of routes and calls
	                                                                                                                             * callback(error, redirectLocation, renderProps) when finished.
	                                                                                                                             *
	                                                                                                                             * Note: You probably don't want to use this in a browser. Use
	                                                                                                                             * the history.listen API instead.
	                                                                                                                             */
	function match(_ref, callback) {
	  var routes = _ref.routes;
	  var location = _ref.location;
	  var parseQueryString = _ref.parseQueryString;
	  var stringifyQuery = _ref.stringifyQuery;
	  var basename = _ref.basename;

	  !location ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'match needs a location') : _invariant2['default'](false) : undefined;

	  var history = createHistory({
	    routes: _RouteUtils.createRoutes(routes),
	    parseQueryString: parseQueryString,
	    stringifyQuery: stringifyQuery,
	    basename: basename });


	  // Allow match({ location: '/the/path', ... })
	  if (typeof location === 'string') location = history.createLocation(location);

	  history.match(location, function (error, redirectLocation, nextState) {
	    callback(error, redirectLocation, nextState && _extends({}, nextState, { history: history }));
	  });
	}

	exports['default'] = match;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _warning = __webpack_require__(163);

	var _warning2 = _interopRequireDefault(_warning);

	var _invariant = __webpack_require__(164);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(165);

	var _createHistory = __webpack_require__(170);

	var _createHistory2 = _interopRequireDefault(_createHistory);

	var _parsePath = __webpack_require__(176);

	var _parsePath2 = _interopRequireDefault(_parsePath);

	function createStateStorage(entries) {
	  return entries.filter(function (entry) {
	    return entry.state;
	  }).reduce(function (memo, entry) {
	    memo[entry.key] = entry.state;
	    return memo;
	  }, {});
	}

	function createMemoryHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  if (Array.isArray(options)) {
	    options = { entries: options };
	  } else if (typeof options === 'string') {
	    options = { entries: [options] };
	  }

	  var history = _createHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: saveState,
	    go: go }));


	  var _options = options;
	  var entries = _options.entries;
	  var current = _options.current;

	  if (typeof entries === 'string') {
	    entries = [entries];
	  } else if (!Array.isArray(entries)) {
	    entries = ['/'];
	  }

	  entries = entries.map(function (entry) {
	    var key = history.createKey();

	    if (typeof entry === 'string') return { pathname: entry, key: key };

	    if ((typeof entry === 'undefined' ? 'undefined' : _typeof(entry)) === 'object' && entry) return _extends({}, entry, { key: key });

	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Unable to create history entry from %s', entry) : _invariant2['default'](false) : undefined;
	  });

	  if (current == null) {
	    current = entries.length - 1;
	  } else {
	    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : _invariant2['default'](false) : undefined;
	  }

	  var storage = createStateStorage(entries);

	  function saveState(key, state) {
	    storage[key] = state;
	  }

	  function readState(key) {
	    return storage[key];
	  }

	  function getCurrentLocation() {
	    var entry = entries[current];
	    var key = entry.key;
	    var basename = entry.basename;
	    var pathname = entry.pathname;
	    var search = entry.search;

	    var path = (basename || '') + pathname + (search || '');

	    var state = undefined;
	    if (key) {
	      state = readState(key);
	    } else {
	      state = null;
	      key = history.createKey();
	      entry.key = key;
	    }

	    var location = _parsePath2['default'](path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function canGo(n) {
	    var index = current + n;
	    return index >= 0 && index < entries.length;
	  }

	  function go(n) {
	    if (n) {
	      if (!canGo(n)) {
	        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Cannot go(%s) there is not enough history', n) : undefined;
	        return;
	      }

	      current += n;

	      var currentLocation = getCurrentLocation();

	      // change action to POP
	      history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
	    }
	  }

	  function finishTransition(location) {
	    switch (location.action) {
	      case _Actions.PUSH:
	        current += 1;

	        // if we are not on the top of stack
	        // remove rest and push new
	        if (current < entries.length) entries.splice(current);

	        entries.push(location);
	        saveState(location.key, location.state);
	        break;
	      case _Actions.REPLACE:
	        entries[current] = location;
	        saveState(location.key, location.state);
	        break;}

	  }

	  return history;
	}

	exports['default'] = createMemoryHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}

	var _ExecutionEnvironment = __webpack_require__(166);

	var _runTransitionHook = __webpack_require__(178);

	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);

	var _extractPath = __webpack_require__(177);

	var _extractPath2 = _interopRequireDefault(_extractPath);

	var _parsePath = __webpack_require__(176);

	var _parsePath2 = _interopRequireDefault(_parsePath);

	var _deprecate = __webpack_require__(179);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function useBasename(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var basename = options.basename;

	    var historyOptions = _objectWithoutProperties(options, ['basename']);

	    var history = createHistory(historyOptions);

	    // Automatically use the value of <base href> in HTML
	    // documents as basename if it's not explicitly given.
	    if (basename == null && _ExecutionEnvironment.canUseDOM) {
	      var base = document.getElementsByTagName('base')[0];

	      if (base) basename = _extractPath2['default'](base.href);
	    }

	    function addBasename(location) {
	      if (basename && location.basename == null) {
	        if (location.pathname.indexOf(basename) === 0) {
	          location.pathname = location.pathname.substring(basename.length);
	          location.basename = basename;

	          if (location.pathname === '') location.pathname = '/';
	        } else {
	          location.basename = '';
	        }
	      }

	      return location;
	    }

	    function prependBasename(location) {
	      if (!basename) return location;

	      if (typeof location === 'string') location = _parsePath2['default'](location);

	      var pname = location.pathname;
	      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
	      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
	      var pathname = normalizedBasename + normalizedPathname;

	      return _extends({}, location, {
	        pathname: pathname });

	    }

	    // Override all read methods with basename-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addBasename(location), callback);
	      });
	    }

	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addBasename(location));
	      });
	    }

	    // Override all write methods with basename-aware versions.
	    function push(location) {
	      history.push(prependBasename(location));
	    }

	    function replace(location) {
	      history.replace(prependBasename(location));
	    }

	    function createPath(location) {
	      return history.createPath(prependBasename(location));
	    }

	    function createHref(location) {
	      return history.createHref(prependBasename(location));
	    }

	    function createLocation() {
	      return addBasename(history.createLocation.apply(history, arguments));
	    }

	    // deprecated
	    function pushState(state, path) {
	      if (typeof path === 'string') path = _parsePath2['default'](path);

	      push(_extends({ state: state }, path));
	    }

	    // deprecated
	    function replaceState(state, path) {
	      if (typeof path === 'string') path = _parsePath2['default'](path);

	      replace(_extends({ state: state }, path));
	    }

	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,

	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead') });

	  };
	}

	exports['default'] = useBasename;
	module.exports = exports['default'];

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _deprecate = __webpack_require__(179);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	var _createLocation2 = __webpack_require__(175);

	var _createLocation3 = _interopRequireDefault(_createLocation2);

	var _createBrowserHistory = __webpack_require__(209);

	var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);

	exports.createHistory = _createBrowserHistory2['default'];

	var _createHashHistory2 = __webpack_require__(162);

	var _createHashHistory3 = _interopRequireDefault(_createHashHistory2);

	exports.createHashHistory = _createHashHistory3['default'];

	var _createMemoryHistory2 = __webpack_require__(206);

	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

	exports.createMemoryHistory = _createMemoryHistory3['default'];

	var _useBasename2 = __webpack_require__(207);

	var _useBasename3 = _interopRequireDefault(_useBasename2);

	exports.useBasename = _useBasename3['default'];

	var _useBeforeUnload2 = __webpack_require__(210);

	var _useBeforeUnload3 = _interopRequireDefault(_useBeforeUnload2);

	exports.useBeforeUnload = _useBeforeUnload3['default'];

	var _useQueries2 = __webpack_require__(186);

	var _useQueries3 = _interopRequireDefault(_useQueries2);

	exports.useQueries = _useQueries3['default'];

	var _Actions2 = __webpack_require__(165);

	var _Actions3 = _interopRequireDefault(_Actions2);

	exports.Actions = _Actions3['default'];

	// deprecated

	var _enableBeforeUnload2 = __webpack_require__(211);

	var _enableBeforeUnload3 = _interopRequireDefault(_enableBeforeUnload2);

	exports.enableBeforeUnload = _enableBeforeUnload3['default'];

	var _enableQueries2 = __webpack_require__(212);

	var _enableQueries3 = _interopRequireDefault(_enableQueries2);

	exports.enableQueries = _enableQueries3['default'];
	var createLocation = _deprecate2['default'](_createLocation3['default'], 'Using createLocation without a history instance is deprecated; please use history.createLocation instead');
	exports.createLocation = createLocation;

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _invariant = __webpack_require__(164);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _Actions = __webpack_require__(165);

	var _ExecutionEnvironment = __webpack_require__(166);

	var _DOMUtils = __webpack_require__(167);

	var _DOMStateStorage = __webpack_require__(168);

	var _createDOMHistory = __webpack_require__(169);

	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

	var _parsePath = __webpack_require__(176);

	var _parsePath2 = _interopRequireDefault(_parsePath);

	/**
	                                                       * Creates and returns a history object that uses HTML5's history API
	                                                       * (pushState, replaceState, and the popstate event) to manage history.
	                                                       * This is the recommended method of managing history in browsers because
	                                                       * it provides the cleanest URLs.
	                                                       *
	                                                       * Note: In browsers that do not support the HTML5 history API full
	                                                       * page reloads will be used to preserve URLs.
	                                                       */
	function createBrowserHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;

	  var forceRefresh = options.forceRefresh;

	  var isSupported = _DOMUtils.supportsHistory();
	  var useRefresh = !isSupported || forceRefresh;

	  function getCurrentLocation(historyState) {
	    historyState = historyState || window.history.state || {};

	    var path = _DOMUtils.getWindowPath();
	    var _historyState = historyState;
	    var key = _historyState.key;

	    var state = undefined;
	    if (key) {
	      state = _DOMStateStorage.readState(key);
	    } else {
	      state = null;
	      key = history.createKey();

	      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);
	    }

	    var location = _parsePath2['default'](path);

	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }

	  function startPopStateListener(_ref) {
	    var transitionTo = _ref.transitionTo;

	    function popStateListener(event) {
	      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.

	      transitionTo(getCurrentLocation(event.state));
	    }

	    _DOMUtils.addEventListener(window, 'popstate', popStateListener);

	    return function () {
	      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);
	    };
	  }

	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;

	    if (action === _Actions.POP) return; // Nothing to do.

	    _DOMStateStorage.saveState(key, state);

	    var path = (basename || '') + pathname + search + hash;
	    var historyState = {
	      key: key };


	    if (action === _Actions.PUSH) {
	      if (useRefresh) {
	        window.location.href = path;
	        return false; // Prevent location update.
	      } else {
	        window.history.pushState(historyState, null, path);
	      }
	    } else {
	      // REPLACE
	      if (useRefresh) {
	        window.location.replace(path);
	        return false; // Prevent location update.
	      } else {
	        window.history.replaceState(historyState, null, path);
	      }
	    }
	  }

	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState }));


	  var listenerCount = 0,
	  stopPopStateListener = undefined;

	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    var unlisten = history.listenBefore(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }

	  function listen(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    var unlisten = history.listen(listener);

	    return function () {
	      unlisten();

	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }

	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

	    history.registerTransitionHook(hook);
	  }

	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);

	    if (--listenerCount === 0) stopPopStateListener();
	  }

	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    registerTransitionHook: registerTransitionHook,
	    unregisterTransitionHook: unregisterTransitionHook });

	}

	exports['default'] = createBrowserHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _warning = __webpack_require__(163);

	var _warning2 = _interopRequireDefault(_warning);

	var _ExecutionEnvironment = __webpack_require__(166);

	var _DOMUtils = __webpack_require__(167);

	var _deprecate = __webpack_require__(179);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	function startBeforeUnloadListener(getBeforeUnloadPromptMessage) {
	  function listener(event) {
	    var message = getBeforeUnloadPromptMessage();

	    if (typeof message === 'string') {
	      (event || window.event).returnValue = message;
	      return message;
	    }
	  }

	  _DOMUtils.addEventListener(window, 'beforeunload', listener);

	  return function () {
	    _DOMUtils.removeEventListener(window, 'beforeunload', listener);
	  };
	}

	/**
	   * Returns a new createHistory function that can be used to create
	   * history objects that know how to use the beforeunload event in web
	   * browsers to cancel navigation.
	   */
	function useBeforeUnload(createHistory) {
	  return function (options) {
	    var history = createHistory(options);

	    var stopBeforeUnloadListener = undefined;
	    var beforeUnloadHooks = [];

	    function getBeforeUnloadPromptMessage() {
	      var message = undefined;

	      for (var i = 0, len = beforeUnloadHooks.length; message == null && i < len; ++i) {
	        message = beforeUnloadHooks[i].call();
	      }return message;
	    }

	    function listenBeforeUnload(hook) {
	      beforeUnloadHooks.push(hook);

	      if (beforeUnloadHooks.length === 1) {
	        if (_ExecutionEnvironment.canUseDOM) {
	          stopBeforeUnloadListener = startBeforeUnloadListener(getBeforeUnloadPromptMessage);
	        } else {
	          process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'listenBeforeUnload only works in DOM environments') : undefined;
	        }
	      }

	      return function () {
	        beforeUnloadHooks = beforeUnloadHooks.filter(function (item) {
	          return item !== hook;
	        });

	        if (beforeUnloadHooks.length === 0 && stopBeforeUnloadListener) {
	          stopBeforeUnloadListener();
	          stopBeforeUnloadListener = null;
	        }
	      };
	    }

	    // deprecated
	    function registerBeforeUnloadHook(hook) {
	      if (_ExecutionEnvironment.canUseDOM && beforeUnloadHooks.indexOf(hook) === -1) {
	        beforeUnloadHooks.push(hook);

	        if (beforeUnloadHooks.length === 1) stopBeforeUnloadListener = startBeforeUnloadListener(getBeforeUnloadPromptMessage);
	      }
	    }

	    // deprecated
	    function unregisterBeforeUnloadHook(hook) {
	      if (beforeUnloadHooks.length > 0) {
	        beforeUnloadHooks = beforeUnloadHooks.filter(function (item) {
	          return item !== hook;
	        });

	        if (beforeUnloadHooks.length === 0) stopBeforeUnloadListener();
	      }
	    }

	    return _extends({}, history, {
	      listenBeforeUnload: listenBeforeUnload,

	      registerBeforeUnloadHook: _deprecate2['default'](registerBeforeUnloadHook, 'registerBeforeUnloadHook is deprecated; use listenBeforeUnload instead'),
	      unregisterBeforeUnloadHook: _deprecate2['default'](unregisterBeforeUnloadHook, 'unregisterBeforeUnloadHook is deprecated; use the callback returned from listenBeforeUnload instead') });

	  };
	}

	exports['default'] = useBeforeUnload;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _deprecate = __webpack_require__(179);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	var _useBeforeUnload = __webpack_require__(210);

	var _useBeforeUnload2 = _interopRequireDefault(_useBeforeUnload);

	exports['default'] = _deprecate2['default'](_useBeforeUnload2['default'], 'enableBeforeUnload is deprecated, use useBeforeUnload instead');
	module.exports = exports['default'];

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _deprecate = __webpack_require__(179);

	var _deprecate2 = _interopRequireDefault(_deprecate);

	var _useQueries = __webpack_require__(186);

	var _useQueries2 = _interopRequireDefault(_useQueries);

	exports['default'] = _deprecate2['default'](_useQueries2['default'], 'enableQueries is deprecated, use useQueries instead');
	module.exports = exports['default'];

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.AvailableScripts = exports.Scripts = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _class, _class2, _class3, _class4, _class5;var _react = __webpack_require__(1);var React = _interopRequireWildcard(_react);
	var _reactDom = __webpack_require__(158);var ReactDOM = _interopRequireWildcard(_reactDom);
	var _jquery = __webpack_require__(214);var _jquery2 = _interopRequireDefault(_jquery);
	var _reactAddonsUpdate = __webpack_require__(216);var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);
	var _mobxReact = __webpack_require__(218);
	var _reactModal = __webpack_require__(220);var _reactModal2 = _interopRequireDefault(_reactModal);
	var _modal = __webpack_require__(241);
	var _reactRouter = __webpack_require__(159);
	var _reactSelect = __webpack_require__(242);var _reactSelect2 = _interopRequireDefault(_reactSelect);
	var _confirm = __webpack_require__(254);var _confirm2 = _interopRequireDefault(_confirm);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var


	Scripts = exports.Scripts = (0, _mobxReact.observer)(_class = function (_React$Component) {_inherits(Scripts, _React$Component);
	    function Scripts(props) {_classCallCheck(this, Scripts);var _this = _possibleConstructorReturn(this, (Scripts.__proto__ || Object.getPrototypeOf(Scripts)).call(this,
	        props));
	        _this.state = {
	            cloning: null };return _this;

	    }_createClass(Scripts, [{ key: 'createScript', value: function createScript(
	        e) {var _props =
	            this.props,projectsStore = _props.projectsStore,scriptsStore = _props.scriptsStore,modalStore = _props.modalStore,usersStore = _props.usersStore;
	            var project = projectsStore.project(scriptsStore.creating_project);
	            e.preventDefault();
	            _jquery2.default.ajax({
	                method: 'POST',
	                url: document.body.getAttribute('data-scripts-url'),
	                data: JSON.stringify({ name: scriptsStore.creating_name, project: project, owner: usersStore.session_user }),
	                success: function success(res) {
	                    scriptsStore.scripts = res.scripts;
	                    modalStore.modal = false;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'updateScript', value: function updateScript(
	        e, script) {var _props2 =
	            this.props,scriptsStore = _props2.scriptsStore,modalStore = _props2.modalStore;
	            if (e) {e.preventDefault();}
	            _jquery2.default.ajax({
	                method: 'PUT',
	                url: document.body.getAttribute('data-scripts-url'),
	                data: JSON.stringify(script ? script : scriptsStore.editing),
	                success: function success(res) {
	                    scriptsStore.scripts = res.scripts;
	                    modalStore.modal = false;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'deleteScript', value: function deleteScript(
	        script) {var _props3 =
	            this.props,scriptsStore = _props3.scriptsStore,modalStore = _props3.modalStore;
	            (0, _confirm2.default)("Вы действительно хотите удалить скрипт: " + script.name).then(
	            function (result) {
	                _jquery2.default.ajax({
	                    method: 'DELETE',
	                    url: document.body.getAttribute('data-scripts-url'),
	                    data: JSON.stringify({ id: script.id }),
	                    success: function success(res) {
	                        scriptsStore.scripts = res.scripts;
	                    },
	                    error: function error(res) {
	                        console.log(res);
	                    } });

	            },
	            function (result) {
	                console.log('cancel called');
	            });

	        } }, { key: 'setAccesses', value: function setAccesses(
	        accesses, script) {var
	            scriptsStore = this.props.scriptsStore;
	            _jquery2.default.ajax({
	                method: 'POST',
	                url: document.body.getAttribute('data-accesses-url'),
	                data: JSON.stringify({ accesses: accesses, script: script }),
	                success: function success(res) {
	                    scriptsStore.scripts = res.scripts;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'cloneScript', value: function cloneScript(
	        script) {var _this2 = this;var
	            scriptsStore = this.props.scriptsStore;
	            this.setState((0, _reactAddonsUpdate2.default)(this.state, { cloning: { $set: script } }), function () {
	                _jquery2.default.ajax({
	                    method: 'POST',
	                    url: document.body.getAttribute('data-clone-script-url'),
	                    data: JSON.stringify(script),
	                    success: function success(res) {
	                        scriptsStore.scripts = res.scripts;
	                        _this2.setState((0, _reactAddonsUpdate2.default)(_this2.state, { cloning: { $set: null } }));
	                    },
	                    error: function error(res) {
	                        console.log(res);
	                    } });

	            });
	        } }, { key: 'render', value: function render()
	        {var _this3 = this;var _props4 =
	            this.props,scriptsStore = _props4.scriptsStore,modalStore = _props4.modalStore,projectsStore = _props4.projectsStore,usersStore = _props4.usersStore,tablesStore = _props4.tablesStore,available = _props4.available;
	            if (usersStore.session_user) {
	                return (
	                    React.createElement('div', { className: 'col-md-12' },
	                        !available ?
	                        React.createElement('div', null,
	                            React.createElement('div', { className: 'col-md-2' },
	                                React.createElement('button', { onClick: function onClick() {
	                                            modalStore.modal = true;
	                                            modalStore.component = CreatingScript;
	                                        }, className: 'btn btn-success' }, '+ \u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0441\u043A\u0440\u0438\u043F\u0442')),

	                            React.createElement('div', { className: 'col-md-3' },
	                                React.createElement('div', { className: 'form-group' },
	                                    React.createElement('input', { onChange: function onChange(e) {return scriptsStore.filter_by_name = e.target.value;}, className: 'form-control', type: 'text', placeholder: '\u041F\u043E\u0438\u0441\u043A \u043F\u043E \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u044E' }))),


	                            React.createElement('div', { className: 'col-md-3' },
	                                React.createElement('div', { className: 'form-group' },
	                                    React.createElement('select', { onChange: function onChange(e) {return scriptsStore.filter_by_project = e.target.value ? parseInt(e.target.value) : null;}, className: 'form-control' },
	                                        React.createElement('option', { value: '' }, '-- \u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043F\u0440\u043E\u0435\u043A\u0442 --'),
	                                        projectsStore.projects.map(function (project, key) {
	                                            return (
	                                                React.createElement('option', { key: key, value: project.id }, project.name));

	                                        })))),



	                            React.createElement('div', { className: 'col-md-3 pull-right' },
	                                React.createElement('button', { className: 'btn btn-success' }, '\u0417\u0430\u043A\u0430\u0437\u0430\u0442\u044C \u0440\u0430\u0437\u0440\u0430\u0431\u043E\u0442\u043A\u0443 \u0441\u043A\u0440\u0438\u043F\u0442\u0430'))) :


	                        null,
	                        React.createElement('div', { className: 'row' },
	                            React.createElement('div', { className: 'col-md-12' },
	                                React.createElement('table', { className: 'table' },
	                                    React.createElement('thead', null,
	                                        React.createElement('tr', null,
	                                            React.createElement('td', null, '\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435'),
	                                            React.createElement('td', null, '\u041F\u0440\u043E\u0435\u043A\u0442'),
	                                            React.createElement('td', null, '\u0412\u043B\u0430\u0434\u0435\u043B\u0435\u0446'),
	                                            !available ?
	                                            React.createElement('td', null, '\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C') :
	                                            null,
	                                            !available ?
	                                            React.createElement('td', null, '\u0414\u043E\u0441\u0442\u0443\u043F\u044B') :

	                                            React.createElement('td', null, '\u041F\u0440\u0430\u0432\u0430'))),



	                                    React.createElement('tbody', null,
	                                        scriptsStore.filteredScripts(available).map(function (script, key) {
	                                            var access = available ? script.accesses.find(function (access) {return access.user.id === usersStore.session_user.id;}) : null;
	                                            return (
	                                                React.createElement('tr', { key: key },
	                                                    React.createElement('td', null, React.createElement(_reactRouter.Link, { to: '/tables/' + script.id + '' }, script.name)),
	                                                    React.createElement('td', null, script.project.name),
	                                                    React.createElement('td', null, script.owner.email),
	                                                    !available ?
	                                                    React.createElement('td', null,
	                                                        _this3.state.cloning ?
	                                                        React.createElement('span', null,
	                                                            _this3.state.cloning === script ?
	                                                            React.createElement('span', null, '\u041A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435...') :
	                                                            null) :


	                                                        React.createElement('button', { className: 'btn btn-default', onClick: function onClick() {_this3.cloneScript(script);} }, '\u0421\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C')) :




	                                                    null,
	                                                    !available ?
	                                                    React.createElement('td', null,
	                                                        React.createElement('button', { onClick: function onClick() {
	                                                                    modalStore.modal = true;
	                                                                    modalStore.component = React.createElement(Accesses, { script: script, usersStore: usersStore, setAccesses: _this3.setAccesses.bind(_this3) });
	                                                                }, className: 'btn btn-default' }, '\u041F\u0440\u0430\u0432\u0430')) :


	                                                    React.createElement('td', null,
	                                                        access.edit ? 'Редактирование' : 'Просмотр'),



	                                                    React.createElement('td', { className: 'text-right' },
	                                                        (available ? access.edit : true) ?
	                                                        React.createElement('button', { className: 'btn btn-default', onClick: function onClick() {
	                                                                    scriptsStore.editing = script;
	                                                                    modalStore.modal = true;
	                                                                    modalStore.component = EditingScript;
	                                                                } }, '\u0420\u0435\u0434.') :
	                                                        null),

	                                                    !available ?
	                                                    React.createElement('td', { className: 'text-right' },
	                                                        React.createElement('button', { className: 'btn btn-danger', onClick: function onClick() {_this3.deleteScript(script);} }, '\u0423\u0434\u0430\u043B\u0438\u0442\u044C')) :

	                                                    null));


	                                        }))))),




	                        React.createElement(_modal.ModalWrapper, { scriptsStore: scriptsStore, tablesStore: tablesStore, projectsStore: projectsStore, modalStore: modalStore, createScript: this.createScript.bind(this), updateScript: this.updateScript.bind(this), available: available })));


	            }
	            return null;
	        } }]);return Scripts;}(React.Component)) || _class;var



	CreatingScript = (0, _mobxReact.observer)(_class2 = function (_React$Component2) {_inherits(CreatingScript, _React$Component2);function CreatingScript() {_classCallCheck(this, CreatingScript);return _possibleConstructorReturn(this, (CreatingScript.__proto__ || Object.getPrototypeOf(CreatingScript)).apply(this, arguments));}_createClass(CreatingScript, [{ key: 'render', value: function render()
	        {var _this5 = this;var _props5 =
	            this.props,projectsStore = _props5.projectsStore,scriptsStore = _props5.scriptsStore;
	            return (
	                React.createElement('div', { className: 'row' },
	                    React.createElement('form', { action: '', onSubmit: function onSubmit(e) {return _this5.props.createScript(e);} },
	                        React.createElement('div', { className: 'col-md-12' },
	                            React.createElement('div', { className: 'form-group' },
	                                React.createElement('input', { className: 'form-control', onChange: function onChange(e) {scriptsStore.creating_name = e.target.value;}, value: scriptsStore.creating_name, type: 'text', name: 'name', placeholder: '\u0418\u043C\u044F \u0441\u043A\u0440\u0438\u043F\u0442\u0430' }))),


	                        React.createElement('div', { className: 'col-md-12' },
	                            React.createElement('div', { className: 'form-group' },
	                                React.createElement('select', { onChange: function onChange(e) {return scriptsStore.creating_project = e.target.value ? parseInt(e.target.value) : null;}, name: 'project', className: 'form-control' },
	                                    React.createElement('option', { value: '' }, '-- \u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043F\u0440\u043E\u0435\u043A\u0442 --'),
	                                    projectsStore.projects.map(function (project, key) {
	                                        return (
	                                            React.createElement('option', { key: key, value: project.id }, project.name));

	                                    })))),



	                        React.createElement('div', { className: 'col-md-12' },
	                            React.createElement('div', { className: 'form-group' },
	                                React.createElement('button', { className: 'btn btn-success', type: 'submit' }, '\u0421\u043E\u0437\u0434\u0430\u0442\u044C'))))));





	        } }]);return CreatingScript;}(React.Component)) || _class2;var



	EditingScript = (0, _mobxReact.observer)(_class3 = function (_React$Component3) {_inherits(EditingScript, _React$Component3);function EditingScript() {_classCallCheck(this, EditingScript);return _possibleConstructorReturn(this, (EditingScript.__proto__ || Object.getPrototypeOf(EditingScript)).apply(this, arguments));}_createClass(EditingScript, [{ key: 'render', value: function render()
	        {var _this7 = this;var _props6 =
	            this.props,projectsStore = _props6.projectsStore,scriptsStore = _props6.scriptsStore,available = _props6.available;
	            if (scriptsStore.editing) {
	                return (
	                    React.createElement('div', { className: 'row' },
	                        React.createElement('form', { action: '', onSubmit: function onSubmit(e) {return _this7.props.updateScript(e);} },
	                            React.createElement('div', { className: 'col-md-12' },
	                                React.createElement('div', { className: 'form-group' },
	                                    React.createElement('input', { className: 'form-control', onChange: function onChange(e) {return scriptsStore.editing.name = e.target.value;}, value: scriptsStore.editing.name, type: 'text', name: 'name', placeholder: '\u0418\u043C\u044F \u0441\u043A\u0440\u0438\u043F\u0442\u0430' }))),


	                            !available ?
	                            React.createElement('div', { className: 'col-md-12' },
	                                React.createElement('div', { className: 'form-group' },
	                                    React.createElement('select', { onChange: function onChange(e) {return scriptsStore.editing.project = e.target.value ? projectsStore.project(parseInt(e.target.value)) : null;}, value: scriptsStore.editing.project.id, name: 'project', className: 'form-control' },
	                                        projectsStore.projects.map(function (project, key) {
	                                            return (
	                                                React.createElement('option', { key: key, value: project.id }, project.name));

	                                        })))) :



	                            null,
	                            React.createElement('div', { className: 'col-md-12' },
	                                React.createElement('div', { className: 'form-group' },
	                                    React.createElement('button', { className: 'btn btn-success', type: 'submit' }, '\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C'))))));





	            }
	            return React.createElement('div', null);
	        } }]);return EditingScript;}(React.Component)) || _class3;var



	Accesses = (0, _mobxReact.observer)(_class4 = function (_React$Component4) {_inherits(Accesses, _React$Component4);
	    function Accesses(props) {_classCallCheck(this, Accesses);var _this8 = _possibleConstructorReturn(this, (Accesses.__proto__ || Object.getPrototypeOf(Accesses)).call(this,
	        props));

	        _this8.state = {
	            accesses: _this8.formatAccesses(props.script.accesses) };return _this8;

	    }_createClass(Accesses, [{ key: 'componentWillReceiveProps', value: function componentWillReceiveProps(
	        props) {
	            this.setState((0, _reactAddonsUpdate2.default)(this.state, {
	                accesses: { $set: this.formatAccesses(props.script.accesses) } }));

	        } }, { key: 'formatAccesses', value: function formatAccesses(
	        accesses) {
	            return accesses.map(function (access) {
	                return { value: access.user.id, label: access.user.email, selected: true, edit: access.edit };
	            });
	        } }, { key: 'onSelect', value: function onSelect(
	        selects, edit) {var _this9 = this;var
	            script = this.props.script;var
	            accesses = this.state.accesses;
	            var new_accesses = accesses.filter(function (access) {return access.edit !== edit;});
	            selects.map(function (select) {
	                new_accesses.push(
	                { value: select.value, label: select.label, selected: true, edit: edit });

	            });
	            this.setState((0, _reactAddonsUpdate2.default)(this.state, { accesses: { $set: new_accesses } }), function () {
	                _this9.props.setAccesses(new_accesses.map(function (access) {
	                    return { user_id: access.value, edit: access.edit };
	                }), script);
	            });
	        } }, { key: 'getSelected', value: function getSelected(
	        edit) {
	            return this.state.accesses.filter(function (access) {return access.edit === edit;});
	        } }, { key: 'getOptions', value: function getOptions(
	        edit) {var
	            usersStore = this.props.usersStore;
	            var edit_selects = this.getSelected(true);
	            var no_edit_selects = this.getSelected(false);
	            var options = edit ? edit_selects : no_edit_selects;
	            var all_options = edit_selects.concat(no_edit_selects);
	            usersStore.users.map(function (user) {
	                if (all_options.length > 0 ? !all_options.find(function (option) {return option.value === user.id;}) : true) {
	                    options.push(
	                    { value: user.id, label: user.email });

	                }
	            });
	            return options;
	        } }, { key: 'render', value: function render()
	        {var _this10 = this;
	            return (
	                React.createElement('div', { className: 'col-md-12' },
	                    React.createElement('div', { className: 'row' },
	                        React.createElement('div', { className: 'col-md-12' },
	                            React.createElement('p', null, '\u041C\u043E\u0434\u0435\u0440\u0430\u0442\u043E\u0440\u044B'),
	                            React.createElement(MultiSelectField, {
	                                options: this.getOptions(true),
	                                onChange: function onChange(selects) {_this10.onSelect(selects, true);} }))),


	                    React.createElement('div', { className: 'row' },
	                        React.createElement('div', { className: 'col-md-12' },
	                            React.createElement('p', null, '\u041E\u043F\u0435\u0440\u0430\u0442\u043E\u0440\u044B'),
	                            React.createElement(MultiSelectField, {
	                                options: this.getOptions(false),
	                                onChange: function onChange(selects) {_this10.onSelect(selects, false);} })))));




	        } }]);return Accesses;}(React.Component)) || _class4;var


	MultiSelectField = function (_React$Component5) {_inherits(MultiSelectField, _React$Component5);
	    function MultiSelectField(props) {_classCallCheck(this, MultiSelectField);var _this11 = _possibleConstructorReturn(this, (MultiSelectField.__proto__ || Object.getPrototypeOf(MultiSelectField)).call(this,
	        props));

	        _this11.displayName = 'MultiSelect';
	        _this11.state = {
	            options: props.options,
	            value: props.options.filter(function (i) {return i.selected;}) };return _this11;

	    }_createClass(MultiSelectField, [{ key: 'componentWillReceiveProps', value: function componentWillReceiveProps(
	        props) {
	            this.setState({
	                options: props.options,
	                value: props.options.filter(function (i) {return i.selected;}) });

	        } }, { key: 'render', value: function render()
	        {var _this12 = this;
	            return (
	                React.createElement(_reactSelect2.default, {
	                    multi: true,
	                    value: this.state.value,
	                    placeholder: '\u0414\u0430\u0442\u044C \u0434\u043E\u0441\u0442\u0443\u043F \u043A \u0441\u043A\u0440\u0438\u043F\u0442\u0443',
	                    options: this.state.options,
	                    onChange: function onChange(e) {
	                        _this12.setState((0, _reactAddonsUpdate2.default)(_this12.state, { value: { $set: e } }), function () {
	                            _this12.props.onChange(e);
	                        });
	                    } }));

	        } }]);return MultiSelectField;}(React.Component);var



	AvailableScripts = exports.AvailableScripts = (0, _mobxReact.observer)(_class5 = function (_React$Component6) {_inherits(AvailableScripts, _React$Component6);function AvailableScripts() {_classCallCheck(this, AvailableScripts);return _possibleConstructorReturn(this, (AvailableScripts.__proto__ || Object.getPrototypeOf(AvailableScripts)).apply(this, arguments));}_createClass(AvailableScripts, [{ key: 'render', value: function render()
	        {
	            return React.cloneElement(React.createElement(Scripts, this.props), { available: true });
	        } }]);return AvailableScripts;}(React.Component)) || _class5;

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/*!
	 * jQuery JavaScript Library v1.12.4
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-05-20T17:17Z
	 */

	(function(global,factory){

	if(( false?"undefined":_typeof(module))==="object"&&_typeof(module.exports)==="object"){
	// For CommonJS and CommonJS-like environments where a proper `window`
	// is present, execute the factory and get jQuery.
	// For environments that do not have a `window` with a `document`
	// (such as Node.js), expose a factory as module.exports.
	// This accentuates the need for the creation of a real `window`.
	// e.g. var jQuery = require("jquery")(window);
	// See ticket #14549 for more info.
	module.exports=global.document?
	factory(global,true):
	function(w){
	if(!w.document){
	throw new Error("jQuery requires a window with a document");
	}
	return factory(w);
	};
	}else{
	factory(global);
	}

	// Pass this if window is not defined yet
	})(typeof window!=="undefined"?window:undefined,function(window,noGlobal){

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var deletedIds=[];

	var document=window.document;

	var _slice=deletedIds.slice;

	var concat=deletedIds.concat;

	var push=deletedIds.push;

	var indexOf=deletedIds.indexOf;

	var class2type={};

	var toString=class2type.toString;

	var hasOwn=class2type.hasOwnProperty;

	var support={};



	var
	version="1.12.4",

	// Define a local copy of jQuery
	jQuery=function jQuery(selector,context){

	// The jQuery object is actually just the init constructor 'enhanced'
	// Need init if jQuery is called (just allow error to be thrown if not included)
	return new jQuery.fn.init(selector,context);
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix=/^-ms-/,
	rdashAlpha=/-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase=function fcamelCase(all,letter){
	return letter.toUpperCase();
	};

	jQuery.fn=jQuery.prototype={

	// The current version of jQuery being used
	jquery:version,

	constructor:jQuery,

	// Start with an empty selector
	selector:"",

	// The default length of a jQuery object is 0
	length:0,

	toArray:function toArray(){
	return _slice.call(this);
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get:function get(num){
	return num!=null?

	// Return just the one element from the set
	num<0?this[num+this.length]:this[num]:

	// Return all the elements in a clean array
	_slice.call(this);
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack:function pushStack(elems){

	// Build a new jQuery matched element set
	var ret=jQuery.merge(this.constructor(),elems);

	// Add the old object onto the stack (as a reference)
	ret.prevObject=this;
	ret.context=this.context;

	// Return the newly-formed element set
	return ret;
	},

	// Execute a callback for every element in the matched set.
	each:function each(callback){
	return jQuery.each(this,callback);
	},

	map:function map(callback){
	return this.pushStack(jQuery.map(this,function(elem,i){
	return callback.call(elem,i,elem);
	}));
	},

	slice:function slice(){
	return this.pushStack(_slice.apply(this,arguments));
	},

	first:function first(){
	return this.eq(0);
	},

	last:function last(){
	return this.eq(-1);
	},

	eq:function eq(i){
	var len=this.length,
	j=+i+(i<0?len:0);
	return this.pushStack(j>=0&&j<len?[this[j]]:[]);
	},

	end:function end(){
	return this.prevObject||this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push:push,
	sort:deletedIds.sort,
	splice:deletedIds.splice};


	jQuery.extend=jQuery.fn.extend=function(){
	var src,copyIsArray,copy,name,options,clone,
	target=arguments[0]||{},
	i=1,
	length=arguments.length,
	deep=false;

	// Handle a deep copy situation
	if(typeof target==="boolean"){
	deep=target;

	// skip the boolean and the target
	target=arguments[i]||{};
	i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if((typeof target==="undefined"?"undefined":_typeof(target))!=="object"&&!jQuery.isFunction(target)){
	target={};
	}

	// extend jQuery itself if only one argument is passed
	if(i===length){
	target=this;
	i--;
	}

	for(;i<length;i++){

	// Only deal with non-null/undefined values
	if((options=arguments[i])!=null){

	// Extend the base object
	for(name in options){
	src=target[name];
	copy=options[name];

	// Prevent never-ending loop
	if(target===copy){
	continue;
	}

	// Recurse if we're merging plain objects or arrays
	if(deep&&copy&&(jQuery.isPlainObject(copy)||(
	copyIsArray=jQuery.isArray(copy)))){

	if(copyIsArray){
	copyIsArray=false;
	clone=src&&jQuery.isArray(src)?src:[];

	}else{
	clone=src&&jQuery.isPlainObject(src)?src:{};
	}

	// Never move original objects, clone them
	target[name]=jQuery.extend(deep,clone,copy);

	// Don't bring in undefined values
	}else if(copy!==undefined){
	target[name]=copy;
	}
	}
	}
	}

	// Return the modified object
	return target;
	};

	jQuery.extend({

	// Unique for each copy of jQuery on the page
	expando:"jQuery"+(version+Math.random()).replace(/\D/g,""),

	// Assume jQuery is ready without the ready module
	isReady:true,

	error:function error(msg){
	throw new Error(msg);
	},

	noop:function noop(){},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction:function isFunction(obj){
	return jQuery.type(obj)==="function";
	},

	isArray:Array.isArray||function(obj){
	return jQuery.type(obj)==="array";
	},

	isWindow:function isWindow(obj){
	/* jshint eqeqeq: false */
	return obj!=null&&obj==obj.window;
	},

	isNumeric:function isNumeric(obj){

	// parseFloat NaNs numeric-cast false positives (null|true|false|"")
	// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
	// subtraction forces infinities to NaN
	// adding 1 corrects loss of precision from parseFloat (#15100)
	var realStringObj=obj&&obj.toString();
	return!jQuery.isArray(obj)&&realStringObj-parseFloat(realStringObj)+1>=0;
	},

	isEmptyObject:function isEmptyObject(obj){
	var name;
	for(name in obj){
	return false;
	}
	return true;
	},

	isPlainObject:function isPlainObject(obj){
	var key;

	// Must be an Object.
	// Because of IE, we also have to check the presence of the constructor property.
	// Make sure that DOM nodes and window objects don't pass through, as well
	if(!obj||jQuery.type(obj)!=="object"||obj.nodeType||jQuery.isWindow(obj)){
	return false;
	}

	try{

	// Not own constructor property must be Object
	if(obj.constructor&&
	!hasOwn.call(obj,"constructor")&&
	!hasOwn.call(obj.constructor.prototype,"isPrototypeOf")){
	return false;
	}
	}catch(e){

	// IE8,9 Will throw exceptions on certain host objects #9897
	return false;
	}

	// Support: IE<9
	// Handle iteration over inherited properties before own properties.
	if(!support.ownFirst){
	for(key in obj){
	return hasOwn.call(obj,key);
	}
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	for(key in obj){}

	return key===undefined||hasOwn.call(obj,key);
	},

	type:function type(obj){
	if(obj==null){
	return obj+"";
	}
	return(typeof obj==="undefined"?"undefined":_typeof(obj))==="object"||typeof obj==="function"?
	class2type[toString.call(obj)]||"object":typeof
	obj==="undefined"?"undefined":_typeof(obj);
	},

	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval:function globalEval(data){
	if(data&&jQuery.trim(data)){

	// We use execScript on Internet Explorer
	// We use an anonymous function so that context is window
	// rather than jQuery in Firefox
	(window.execScript||function(data){
	window["eval"].call(window,data);// jscs:ignore requireDotNotation
	})(data);
	}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase:function camelCase(string){
	return string.replace(rmsPrefix,"ms-").replace(rdashAlpha,fcamelCase);
	},

	nodeName:function nodeName(elem,name){
	return elem.nodeName&&elem.nodeName.toLowerCase()===name.toLowerCase();
	},

	each:function each(obj,callback){
	var length,i=0;

	if(isArrayLike(obj)){
	length=obj.length;
	for(;i<length;i++){
	if(callback.call(obj[i],i,obj[i])===false){
	break;
	}
	}
	}else{
	for(i in obj){
	if(callback.call(obj[i],i,obj[i])===false){
	break;
	}
	}
	}

	return obj;
	},

	// Support: Android<4.1, IE<9
	trim:function trim(text){
	return text==null?
	"":
	(text+"").replace(rtrim,"");
	},

	// results is for internal usage only
	makeArray:function makeArray(arr,results){
	var ret=results||[];

	if(arr!=null){
	if(isArrayLike(Object(arr))){
	jQuery.merge(ret,
	typeof arr==="string"?
	[arr]:arr);

	}else{
	push.call(ret,arr);
	}
	}

	return ret;
	},

	inArray:function inArray(elem,arr,i){
	var len;

	if(arr){
	if(indexOf){
	return indexOf.call(arr,elem,i);
	}

	len=arr.length;
	i=i?i<0?Math.max(0,len+i):i:0;

	for(;i<len;i++){

	// Skip accessing in sparse arrays
	if(i in arr&&arr[i]===elem){
	return i;
	}
	}
	}

	return-1;
	},

	merge:function merge(first,second){
	var len=+second.length,
	j=0,
	i=first.length;

	while(j<len){
	first[i++]=second[j++];
	}

	// Support: IE<9
	// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
	if(len!==len){
	while(second[j]!==undefined){
	first[i++]=second[j++];
	}
	}

	first.length=i;

	return first;
	},

	grep:function grep(elems,callback,invert){
	var callbackInverse,
	matches=[],
	i=0,
	length=elems.length,
	callbackExpect=!invert;

	// Go through the array, only saving the items
	// that pass the validator function
	for(;i<length;i++){
	callbackInverse=!callback(elems[i],i);
	if(callbackInverse!==callbackExpect){
	matches.push(elems[i]);
	}
	}

	return matches;
	},

	// arg is for internal usage only
	map:function map(elems,callback,arg){
	var length,value,
	i=0,
	ret=[];

	// Go through the array, translating each of the items to their new values
	if(isArrayLike(elems)){
	length=elems.length;
	for(;i<length;i++){
	value=callback(elems[i],i,arg);

	if(value!=null){
	ret.push(value);
	}
	}

	// Go through every key on the object,
	}else{
	for(i in elems){
	value=callback(elems[i],i,arg);

	if(value!=null){
	ret.push(value);
	}
	}
	}

	// Flatten any nested arrays
	return concat.apply([],ret);
	},

	// A global GUID counter for objects
	guid:1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy:function proxy(fn,context){
	var args,proxy,tmp;

	if(typeof context==="string"){
	tmp=fn[context];
	context=fn;
	fn=tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if(!jQuery.isFunction(fn)){
	return undefined;
	}

	// Simulated bind
	args=_slice.call(arguments,2);
	proxy=function proxy(){
	return fn.apply(context||this,args.concat(_slice.call(arguments)));
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid=fn.guid=fn.guid||jQuery.guid++;

	return proxy;
	},

	now:function now(){
	return+new Date();
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support:support});


	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if(typeof Symbol==="function"){
	jQuery.fn[Symbol.iterator]=deletedIds[Symbol.iterator];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
	function(i,name){
	class2type["[object "+name+"]"]=name.toLowerCase();
	});

	function isArrayLike(obj){

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length=!!obj&&"length"in obj&&obj.length,
	type=jQuery.type(obj);

	if(type==="function"||jQuery.isWindow(obj)){
	return false;
	}

	return type==="array"||length===0||
	typeof length==="number"&&length>0&&length-1 in obj;
	}
	var Sizzle=
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	function(window){

	var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando="sizzle"+1*new Date(),
	preferredDoc=window.document,
	dirruns=0,
	done=0,
	classCache=createCache(),
	tokenCache=createCache(),
	compilerCache=createCache(),
	sortOrder=function sortOrder(a,b){
	if(a===b){
	hasDuplicate=true;
	}
	return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE=1<<31,

	// Instance methods
	hasOwn={}.hasOwnProperty,
	arr=[],
	pop=arr.pop,
	push_native=arr.push,
	push=arr.push,
	slice=arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf=function indexOf(list,elem){
	var i=0,
	len=list.length;
	for(;i<len;i++){
	if(list[i]===elem){
	return i;
	}
	}
	return-1;
	},

	booleans="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace="[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes="\\["+whitespace+"*("+identifier+")(?:"+whitespace+
	// Operator (capture 2)
	"*([*^$|!~]?=)"+whitespace+
	// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
	"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+identifier+"))|)"+whitespace+
	"*\\]",

	pseudos=":("+identifier+")(?:\\(("+
	// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
	// 1. quoted (capture 3; capture 4 or capture 5)
	"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|"+
	// 2. simple (capture 6)
	"((?:\\\\.|[^\\\\()[\\]]|"+attributes+")*)|"+
	// 3. anything else (capture 2)
	".*"+
	")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace=new RegExp(whitespace+"+","g"),
	rtrim=new RegExp("^"+whitespace+"+|((?:^|[^\\\\])(?:\\\\.)*)"+whitespace+"+$","g"),

	rcomma=new RegExp("^"+whitespace+"*,"+whitespace+"*"),
	rcombinators=new RegExp("^"+whitespace+"*([>+~]|"+whitespace+")"+whitespace+"*"),

	rattributeQuotes=new RegExp("="+whitespace+"*([^\\]'\"]*?)"+whitespace+"*\\]","g"),

	rpseudo=new RegExp(pseudos),
	ridentifier=new RegExp("^"+identifier+"$"),

	matchExpr={
	"ID":new RegExp("^#("+identifier+")"),
	"CLASS":new RegExp("^\\.("+identifier+")"),
	"TAG":new RegExp("^("+identifier+"|[*])"),
	"ATTR":new RegExp("^"+attributes),
	"PSEUDO":new RegExp("^"+pseudos),
	"CHILD":new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+whitespace+
	"*(even|odd|(([+-]|)(\\d*)n|)"+whitespace+"*(?:([+-]|)"+whitespace+
	"*(\\d+)|))"+whitespace+"*\\)|)","i"),
	"bool":new RegExp("^(?:"+booleans+")$","i"),
	// For use in libraries implementing .is()
	// We use this for POS matching in `select`
	"needsContext":new RegExp("^"+whitespace+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+
	whitespace+"*((?:-\\d)?\\d*)"+whitespace+"*\\)|)(?=[^-]|$)","i")},


	rinputs=/^(?:input|select|textarea|button)$/i,
	rheader=/^h\d$/i,

	rnative=/^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling=/[+~]/,
	rescape=/'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape=new RegExp("\\\\([\\da-f]{1,6}"+whitespace+"?|("+whitespace+")|.)","ig"),
	funescape=function funescape(_,escaped,escapedWhitespace){
	var high="0x"+escaped-0x10000;
	// NaN means non-codepoint
	// Support: Firefox<24
	// Workaround erroneous numeric interpretation of +"0x"
	return high!==high||escapedWhitespace?
	escaped:
	high<0?
	// BMP codepoint
	String.fromCharCode(high+0x10000):
	// Supplemental Plane codepoint (surrogate pair)
	String.fromCharCode(high>>10|0xD800,high&0x3FF|0xDC00);
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler=function unloadHandler(){
	setDocument();
	};

	// Optimize for push.apply( _, NodeList )
	try{
	push.apply(
	arr=slice.call(preferredDoc.childNodes),
	preferredDoc.childNodes);

	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[preferredDoc.childNodes.length].nodeType;
	}catch(e){
	push={apply:arr.length?

	// Leverage slice if possible
	function(target,els){
	push_native.apply(target,slice.call(els));
	}:

	// Support: IE<9
	// Otherwise append directly
	function(target,els){
	var j=target.length,
	i=0;
	// Can't trust NodeList.length
	while(target[j++]=els[i++]){}
	target.length=j-1;
	}};

	}

	function Sizzle(selector,context,results,seed){
	var m,i,elem,nid,nidselect,match,groups,newSelector,
	newContext=context&&context.ownerDocument,

	// nodeType defaults to 9, since context defaults to document
	nodeType=context?context.nodeType:9;

	results=results||[];

	// Return early from calls with invalid selector or context
	if(typeof selector!=="string"||!selector||
	nodeType!==1&&nodeType!==9&&nodeType!==11){

	return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if(!seed){

	if((context?context.ownerDocument||context:preferredDoc)!==document){
	setDocument(context);
	}
	context=context||document;

	if(documentIsHTML){

	// If the selector is sufficiently simple, try using a "get*By*" DOM method
	// (excepting DocumentFragment context, where the methods don't exist)
	if(nodeType!==11&&(match=rquickExpr.exec(selector))){

	// ID selector
	if(m=match[1]){

	// Document context
	if(nodeType===9){
	if(elem=context.getElementById(m)){

	// Support: IE, Opera, Webkit
	// TODO: identify versions
	// getElementById can match elements by name instead of ID
	if(elem.id===m){
	results.push(elem);
	return results;
	}
	}else{
	return results;
	}

	// Element context
	}else{

	// Support: IE, Opera, Webkit
	// TODO: identify versions
	// getElementById can match elements by name instead of ID
	if(newContext&&(elem=newContext.getElementById(m))&&
	contains(context,elem)&&
	elem.id===m){

	results.push(elem);
	return results;
	}
	}

	// Type selector
	}else if(match[2]){
	push.apply(results,context.getElementsByTagName(selector));
	return results;

	// Class selector
	}else if((m=match[3])&&support.getElementsByClassName&&
	context.getElementsByClassName){

	push.apply(results,context.getElementsByClassName(m));
	return results;
	}
	}

	// Take advantage of querySelectorAll
	if(support.qsa&&
	!compilerCache[selector+" "]&&(
	!rbuggyQSA||!rbuggyQSA.test(selector))){

	if(nodeType!==1){
	newContext=context;
	newSelector=selector;

	// qSA looks outside Element context, which is not what we want
	// Thanks to Andrew Dupont for this workaround technique
	// Support: IE <=8
	// Exclude object elements
	}else if(context.nodeName.toLowerCase()!=="object"){

	// Capture the context ID, setting it first if necessary
	if(nid=context.getAttribute("id")){
	nid=nid.replace(rescape,"\\$&");
	}else{
	context.setAttribute("id",nid=expando);
	}

	// Prefix every selector in the list
	groups=tokenize(selector);
	i=groups.length;
	nidselect=ridentifier.test(nid)?"#"+nid:"[id='"+nid+"']";
	while(i--){
	groups[i]=nidselect+" "+toSelector(groups[i]);
	}
	newSelector=groups.join(",");

	// Expand context for sibling selectors
	newContext=rsibling.test(selector)&&testContext(context.parentNode)||
	context;
	}

	if(newSelector){
	try{
	push.apply(results,
	newContext.querySelectorAll(newSelector));

	return results;
	}catch(qsaError){
	}finally{
	if(nid===expando){
	context.removeAttribute("id");
	}
	}
	}
	}
	}
	}

	// All others
	return select(selector.replace(rtrim,"$1"),context,results,seed);
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache(){
	var keys=[];

	function cache(key,value){
	// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
	if(keys.push(key+" ")>Expr.cacheLength){
	// Only keep the most recent entries
	delete cache[keys.shift()];
	}
	return cache[key+" "]=value;
	}
	return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction(fn){
	fn[expando]=true;
	return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert(fn){
	var div=document.createElement("div");

	try{
	return!!fn(div);
	}catch(e){
	return false;
	}finally{
	// Remove from its parent by default
	if(div.parentNode){
	div.parentNode.removeChild(div);
	}
	// release memory in IE
	div=null;
	}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle(attrs,handler){
	var arr=attrs.split("|"),
	i=arr.length;

	while(i--){
	Expr.attrHandle[arr[i]]=handler;
	}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck(a,b){
	var cur=b&&a,
	diff=cur&&a.nodeType===1&&b.nodeType===1&&
	(~b.sourceIndex||MAX_NEGATIVE)-(
	~a.sourceIndex||MAX_NEGATIVE);

	// Use IE sourceIndex if available on both nodes
	if(diff){
	return diff;
	}

	// Check if b follows a
	if(cur){
	while(cur=cur.nextSibling){
	if(cur===b){
	return-1;
	}
	}
	}

	return a?1:-1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo(type){
	return function(elem){
	var name=elem.nodeName.toLowerCase();
	return name==="input"&&elem.type===type;
	};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo(type){
	return function(elem){
	var name=elem.nodeName.toLowerCase();
	return(name==="input"||name==="button")&&elem.type===type;
	};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo(fn){
	return markFunction(function(argument){
	argument=+argument;
	return markFunction(function(seed,matches){
	var j,
	matchIndexes=fn([],seed.length,argument),
	i=matchIndexes.length;

	// Match elements found at the specified indexes
	while(i--){
	if(seed[j=matchIndexes[i]]){
	seed[j]=!(matches[j]=seed[j]);
	}
	}
	});
	});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext(context){
	return context&&typeof context.getElementsByTagName!=="undefined"&&context;
	}

	// Expose support vars for convenience
	support=Sizzle.support={};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML=Sizzle.isXML=function(elem){
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement=elem&&(elem.ownerDocument||elem).documentElement;
	return documentElement?documentElement.nodeName!=="HTML":false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument=Sizzle.setDocument=function(node){
	var hasCompare,parent,
	doc=node?node.ownerDocument||node:preferredDoc;

	// Return early if doc is invalid or already selected
	if(doc===document||doc.nodeType!==9||!doc.documentElement){
	return document;
	}

	// Update global variables
	document=doc;
	docElem=document.documentElement;
	documentIsHTML=!isXML(document);

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if((parent=document.defaultView)&&parent.top!==parent){
	// Support: IE 11
	if(parent.addEventListener){
	parent.addEventListener("unload",unloadHandler,false);

	// Support: IE 9 - 10 only
	}else if(parent.attachEvent){
	parent.attachEvent("onunload",unloadHandler);
	}
	}

	/* Attributes
		---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes=assert(function(div){
	div.className="i";
	return!div.getAttribute("className");
	});

	/* getElement(s)By*
		---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName=assert(function(div){
	div.appendChild(document.createComment(""));
	return!div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName=rnative.test(document.getElementsByClassName);

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById=assert(function(div){
	docElem.appendChild(div).id=expando;
	return!document.getElementsByName||!document.getElementsByName(expando).length;
	});

	// ID find and filter
	if(support.getById){
	Expr.find["ID"]=function(id,context){
	if(typeof context.getElementById!=="undefined"&&documentIsHTML){
	var m=context.getElementById(id);
	return m?[m]:[];
	}
	};
	Expr.filter["ID"]=function(id){
	var attrId=id.replace(runescape,funescape);
	return function(elem){
	return elem.getAttribute("id")===attrId;
	};
	};
	}else{
	// Support: IE6/7
	// getElementById is not reliable as a find shortcut
	delete Expr.find["ID"];

	Expr.filter["ID"]=function(id){
	var attrId=id.replace(runescape,funescape);
	return function(elem){
	var node=typeof elem.getAttributeNode!=="undefined"&&
	elem.getAttributeNode("id");
	return node&&node.value===attrId;
	};
	};
	}

	// Tag
	Expr.find["TAG"]=support.getElementsByTagName?
	function(tag,context){
	if(typeof context.getElementsByTagName!=="undefined"){
	return context.getElementsByTagName(tag);

	// DocumentFragment nodes don't have gEBTN
	}else if(support.qsa){
	return context.querySelectorAll(tag);
	}
	}:

	function(tag,context){
	var elem,
	tmp=[],
	i=0,
	// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
	results=context.getElementsByTagName(tag);

	// Filter out possible comments
	if(tag==="*"){
	while(elem=results[i++]){
	if(elem.nodeType===1){
	tmp.push(elem);
	}
	}

	return tmp;
	}
	return results;
	};

	// Class
	Expr.find["CLASS"]=support.getElementsByClassName&&function(className,context){
	if(typeof context.getElementsByClassName!=="undefined"&&documentIsHTML){
	return context.getElementsByClassName(className);
	}
	};

	/* QSA/matchesSelector
		---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches=[];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA=[];

	if(support.qsa=rnative.test(document.querySelectorAll)){
	// Build QSA regex
	// Regex strategy adopted from Diego Perini
	assert(function(div){
	// Select is set to empty string on purpose
	// This is to test IE's treatment of not explicitly
	// setting a boolean content attribute,
	// since its presence should be enough
	// http://bugs.jquery.com/ticket/12359
	docElem.appendChild(div).innerHTML="<a id='"+expando+"'></a>"+
	"<select id='"+expando+"-\r\\' msallowcapture=''>"+
	"<option selected=''></option></select>";

	// Support: IE8, Opera 11-12.16
	// Nothing should be selected when empty strings follow ^= or $= or *=
	// The test attribute must be unknown in Opera but "safe" for WinRT
	// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
	if(div.querySelectorAll("[msallowcapture^='']").length){
	rbuggyQSA.push("[*^$]="+whitespace+"*(?:''|\"\")");
	}

	// Support: IE8
	// Boolean attributes and "value" are not treated correctly
	if(!div.querySelectorAll("[selected]").length){
	rbuggyQSA.push("\\["+whitespace+"*(?:value|"+booleans+")");
	}

	// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
	if(!div.querySelectorAll("[id~="+expando+"-]").length){
	rbuggyQSA.push("~=");
	}

	// Webkit/Opera - :checked should return selected option elements
	// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
	// IE8 throws error here and will not see later tests
	if(!div.querySelectorAll(":checked").length){
	rbuggyQSA.push(":checked");
	}

	// Support: Safari 8+, iOS 8+
	// https://bugs.webkit.org/show_bug.cgi?id=136851
	// In-page `selector#id sibing-combinator selector` fails
	if(!div.querySelectorAll("a#"+expando+"+*").length){
	rbuggyQSA.push(".#.+[+~]");
	}
	});

	assert(function(div){
	// Support: Windows 8 Native Apps
	// The type and name attributes are restricted during .innerHTML assignment
	var input=document.createElement("input");
	input.setAttribute("type","hidden");
	div.appendChild(input).setAttribute("name","D");

	// Support: IE8
	// Enforce case-sensitivity of name attribute
	if(div.querySelectorAll("[name=d]").length){
	rbuggyQSA.push("name"+whitespace+"*[*^$|!~]?=");
	}

	// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
	// IE8 throws error here and will not see later tests
	if(!div.querySelectorAll(":enabled").length){
	rbuggyQSA.push(":enabled",":disabled");
	}

	// Opera 10-11 does not throw on post-comma invalid pseudos
	div.querySelectorAll("*,:x");
	rbuggyQSA.push(",.*:");
	});
	}

	if(support.matchesSelector=rnative.test(matches=docElem.matches||
	docElem.webkitMatchesSelector||
	docElem.mozMatchesSelector||
	docElem.oMatchesSelector||
	docElem.msMatchesSelector)){

	assert(function(div){
	// Check to see if it's possible to do matchesSelector
	// on a disconnected node (IE 9)
	support.disconnectedMatch=matches.call(div,"div");

	// This should fail with an exception
	// Gecko does not error, returns false instead
	matches.call(div,"[s!='']:x");
	rbuggyMatches.push("!=",pseudos);
	});
	}

	rbuggyQSA=rbuggyQSA.length&&new RegExp(rbuggyQSA.join("|"));
	rbuggyMatches=rbuggyMatches.length&&new RegExp(rbuggyMatches.join("|"));

	/* Contains
		---------------------------------------------------------------------- */
	hasCompare=rnative.test(docElem.compareDocumentPosition);

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains=hasCompare||rnative.test(docElem.contains)?
	function(a,b){
	var adown=a.nodeType===9?a.documentElement:a,
	bup=b&&b.parentNode;
	return a===bup||!!(bup&&bup.nodeType===1&&(
	adown.contains?
	adown.contains(bup):
	a.compareDocumentPosition&&a.compareDocumentPosition(bup)&16));

	}:
	function(a,b){
	if(b){
	while(b=b.parentNode){
	if(b===a){
	return true;
	}
	}
	}
	return false;
	};

	/* Sorting
		---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder=hasCompare?
	function(a,b){

	// Flag for duplicate removal
	if(a===b){
	hasDuplicate=true;
	return 0;
	}

	// Sort on method existence if only one input has compareDocumentPosition
	var compare=!a.compareDocumentPosition-!b.compareDocumentPosition;
	if(compare){
	return compare;
	}

	// Calculate position if both inputs belong to the same document
	compare=(a.ownerDocument||a)===(b.ownerDocument||b)?
	a.compareDocumentPosition(b):

	// Otherwise we know they are disconnected
	1;

	// Disconnected nodes
	if(compare&1||
	!support.sortDetached&&b.compareDocumentPosition(a)===compare){

	// Choose the first element that is related to our preferred document
	if(a===document||a.ownerDocument===preferredDoc&&contains(preferredDoc,a)){
	return-1;
	}
	if(b===document||b.ownerDocument===preferredDoc&&contains(preferredDoc,b)){
	return 1;
	}

	// Maintain original order
	return sortInput?
	indexOf(sortInput,a)-indexOf(sortInput,b):
	0;
	}

	return compare&4?-1:1;
	}:
	function(a,b){
	// Exit early if the nodes are identical
	if(a===b){
	hasDuplicate=true;
	return 0;
	}

	var cur,
	i=0,
	aup=a.parentNode,
	bup=b.parentNode,
	ap=[a],
	bp=[b];

	// Parentless nodes are either documents or disconnected
	if(!aup||!bup){
	return a===document?-1:
	b===document?1:
	aup?-1:
	bup?1:
	sortInput?
	indexOf(sortInput,a)-indexOf(sortInput,b):
	0;

	// If the nodes are siblings, we can do a quick check
	}else if(aup===bup){
	return siblingCheck(a,b);
	}

	// Otherwise we need full lists of their ancestors for comparison
	cur=a;
	while(cur=cur.parentNode){
	ap.unshift(cur);
	}
	cur=b;
	while(cur=cur.parentNode){
	bp.unshift(cur);
	}

	// Walk down the tree looking for a discrepancy
	while(ap[i]===bp[i]){
	i++;
	}

	return i?
	// Do a sibling check if the nodes have a common ancestor
	siblingCheck(ap[i],bp[i]):

	// Otherwise nodes in our document sort first
	ap[i]===preferredDoc?-1:
	bp[i]===preferredDoc?1:
	0;
	};

	return document;
	};

	Sizzle.matches=function(expr,elements){
	return Sizzle(expr,null,null,elements);
	};

	Sizzle.matchesSelector=function(elem,expr){
	// Set document vars if needed
	if((elem.ownerDocument||elem)!==document){
	setDocument(elem);
	}

	// Make sure that attribute selectors are quoted
	expr=expr.replace(rattributeQuotes,"='$1']");

	if(support.matchesSelector&&documentIsHTML&&
	!compilerCache[expr+" "]&&(
	!rbuggyMatches||!rbuggyMatches.test(expr))&&(
	!rbuggyQSA||!rbuggyQSA.test(expr))){

	try{
	var ret=matches.call(elem,expr);

	// IE 9's matchesSelector returns false on disconnected nodes
	if(ret||support.disconnectedMatch||
	// As well, disconnected nodes are said to be in a document
	// fragment in IE 9
	elem.document&&elem.document.nodeType!==11){
	return ret;
	}
	}catch(e){}
	}

	return Sizzle(expr,document,null,[elem]).length>0;
	};

	Sizzle.contains=function(context,elem){
	// Set document vars if needed
	if((context.ownerDocument||context)!==document){
	setDocument(context);
	}
	return contains(context,elem);
	};

	Sizzle.attr=function(elem,name){
	// Set document vars if needed
	if((elem.ownerDocument||elem)!==document){
	setDocument(elem);
	}

	var fn=Expr.attrHandle[name.toLowerCase()],
	// Don't get fooled by Object.prototype properties (jQuery #13807)
	val=fn&&hasOwn.call(Expr.attrHandle,name.toLowerCase())?
	fn(elem,name,!documentIsHTML):
	undefined;

	return val!==undefined?
	val:
	support.attributes||!documentIsHTML?
	elem.getAttribute(name):
	(val=elem.getAttributeNode(name))&&val.specified?
	val.value:
	null;
	};

	Sizzle.error=function(msg){
	throw new Error("Syntax error, unrecognized expression: "+msg);
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort=function(results){
	var elem,
	duplicates=[],
	j=0,
	i=0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate=!support.detectDuplicates;
	sortInput=!support.sortStable&&results.slice(0);
	results.sort(sortOrder);

	if(hasDuplicate){
	while(elem=results[i++]){
	if(elem===results[i]){
	j=duplicates.push(i);
	}
	}
	while(j--){
	results.splice(duplicates[j],1);
	}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput=null;

	return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText=Sizzle.getText=function(elem){
	var node,
	ret="",
	i=0,
	nodeType=elem.nodeType;

	if(!nodeType){
	// If no nodeType, this is expected to be an array
	while(node=elem[i++]){
	// Do not traverse comment nodes
	ret+=getText(node);
	}
	}else if(nodeType===1||nodeType===9||nodeType===11){
	// Use textContent for elements
	// innerText usage removed for consistency of new lines (jQuery #11153)
	if(typeof elem.textContent==="string"){
	return elem.textContent;
	}else{
	// Traverse its children
	for(elem=elem.firstChild;elem;elem=elem.nextSibling){
	ret+=getText(elem);
	}
	}
	}else if(nodeType===3||nodeType===4){
	return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
	};

	Expr=Sizzle.selectors={

	// Can be adjusted by the user
	cacheLength:50,

	createPseudo:markFunction,

	match:matchExpr,

	attrHandle:{},

	find:{},

	relative:{
	">":{dir:"parentNode",first:true},
	" ":{dir:"parentNode"},
	"+":{dir:"previousSibling",first:true},
	"~":{dir:"previousSibling"}},


	preFilter:{
	"ATTR":function ATTR(match){
	match[1]=match[1].replace(runescape,funescape);

	// Move the given value to match[3] whether quoted or unquoted
	match[3]=(match[3]||match[4]||match[5]||"").replace(runescape,funescape);

	if(match[2]==="~="){
	match[3]=" "+match[3]+" ";
	}

	return match.slice(0,4);
	},

	"CHILD":function CHILD(match){
	/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
	match[1]=match[1].toLowerCase();

	if(match[1].slice(0,3)==="nth"){
	// nth-* requires argument
	if(!match[3]){
	Sizzle.error(match[0]);
	}

	// numeric x and y parameters for Expr.filter.CHILD
	// remember that false/true cast respectively to 0/1
	match[4]=+(match[4]?match[5]+(match[6]||1):2*(match[3]==="even"||match[3]==="odd"));
	match[5]=+(match[7]+match[8]||match[3]==="odd");

	// other types prohibit arguments
	}else if(match[3]){
	Sizzle.error(match[0]);
	}

	return match;
	},

	"PSEUDO":function PSEUDO(match){
	var excess,
	unquoted=!match[6]&&match[2];

	if(matchExpr["CHILD"].test(match[0])){
	return null;
	}

	// Accept quoted arguments as-is
	if(match[3]){
	match[2]=match[4]||match[5]||"";

	// Strip excess characters from unquoted arguments
	}else if(unquoted&&rpseudo.test(unquoted)&&(
	// Get excess from tokenize (recursively)
	excess=tokenize(unquoted,true))&&(
	// advance to the next closing parenthesis
	excess=unquoted.indexOf(")",unquoted.length-excess)-unquoted.length)){

	// excess is a negative index
	match[0]=match[0].slice(0,excess);
	match[2]=unquoted.slice(0,excess);
	}

	// Return only captures needed by the pseudo filter method (type and argument)
	return match.slice(0,3);
	}},


	filter:{

	"TAG":function TAG(nodeNameSelector){
	var nodeName=nodeNameSelector.replace(runescape,funescape).toLowerCase();
	return nodeNameSelector==="*"?
	function(){return true;}:
	function(elem){
	return elem.nodeName&&elem.nodeName.toLowerCase()===nodeName;
	};
	},

	"CLASS":function CLASS(className){
	var pattern=classCache[className+" "];

	return pattern||
	(pattern=new RegExp("(^|"+whitespace+")"+className+"("+whitespace+"|$)"))&&
	classCache(className,function(elem){
	return pattern.test(typeof elem.className==="string"&&elem.className||typeof elem.getAttribute!=="undefined"&&elem.getAttribute("class")||"");
	});
	},

	"ATTR":function ATTR(name,operator,check){
	return function(elem){
	var result=Sizzle.attr(elem,name);

	if(result==null){
	return operator==="!=";
	}
	if(!operator){
	return true;
	}

	result+="";

	return operator==="="?result===check:
	operator==="!="?result!==check:
	operator==="^="?check&&result.indexOf(check)===0:
	operator==="*="?check&&result.indexOf(check)>-1:
	operator==="$="?check&&result.slice(-check.length)===check:
	operator==="~="?(" "+result.replace(rwhitespace," ")+" ").indexOf(check)>-1:
	operator==="|="?result===check||result.slice(0,check.length+1)===check+"-":
	false;
	};
	},

	"CHILD":function CHILD(type,what,argument,first,last){
	var simple=type.slice(0,3)!=="nth",
	forward=type.slice(-4)!=="last",
	ofType=what==="of-type";

	return first===1&&last===0?

	// Shortcut for :nth-*(n)
	function(elem){
	return!!elem.parentNode;
	}:

	function(elem,context,xml){
	var cache,uniqueCache,outerCache,node,nodeIndex,start,
	dir=simple!==forward?"nextSibling":"previousSibling",
	parent=elem.parentNode,
	name=ofType&&elem.nodeName.toLowerCase(),
	useCache=!xml&&!ofType,
	diff=false;

	if(parent){

	// :(first|last|only)-(child|of-type)
	if(simple){
	while(dir){
	node=elem;
	while(node=node[dir]){
	if(ofType?
	node.nodeName.toLowerCase()===name:
	node.nodeType===1){

	return false;
	}
	}
	// Reverse direction for :only-* (if we haven't yet done so)
	start=dir=type==="only"&&!start&&"nextSibling";
	}
	return true;
	}

	start=[forward?parent.firstChild:parent.lastChild];

	// non-xml :nth-child(...) stores cache data on `parent`
	if(forward&&useCache){

	// Seek `elem` from a previously-cached index

	// ...in a gzip-friendly way
	node=parent;
	outerCache=node[expando]||(node[expando]={});

	// Support: IE <9 only
	// Defend against cloned attroperties (jQuery gh-1709)
	uniqueCache=outerCache[node.uniqueID]||(
	outerCache[node.uniqueID]={});

	cache=uniqueCache[type]||[];
	nodeIndex=cache[0]===dirruns&&cache[1];
	diff=nodeIndex&&cache[2];
	node=nodeIndex&&parent.childNodes[nodeIndex];

	while(node=++nodeIndex&&node&&node[dir]||(

	// Fallback to seeking `elem` from the start
	diff=nodeIndex=0)||start.pop()){

	// When found, cache indexes on `parent` and break
	if(node.nodeType===1&&++diff&&node===elem){
	uniqueCache[type]=[dirruns,nodeIndex,diff];
	break;
	}
	}

	}else{
	// Use previously-cached element index if available
	if(useCache){
	// ...in a gzip-friendly way
	node=elem;
	outerCache=node[expando]||(node[expando]={});

	// Support: IE <9 only
	// Defend against cloned attroperties (jQuery gh-1709)
	uniqueCache=outerCache[node.uniqueID]||(
	outerCache[node.uniqueID]={});

	cache=uniqueCache[type]||[];
	nodeIndex=cache[0]===dirruns&&cache[1];
	diff=nodeIndex;
	}

	// xml :nth-child(...)
	// or :nth-last-child(...) or :nth(-last)?-of-type(...)
	if(diff===false){
	// Use the same loop as above to seek `elem` from the start
	while(node=++nodeIndex&&node&&node[dir]||(
	diff=nodeIndex=0)||start.pop()){

	if((ofType?
	node.nodeName.toLowerCase()===name:
	node.nodeType===1)&&
	++diff){

	// Cache the index of each encountered element
	if(useCache){
	outerCache=node[expando]||(node[expando]={});

	// Support: IE <9 only
	// Defend against cloned attroperties (jQuery gh-1709)
	uniqueCache=outerCache[node.uniqueID]||(
	outerCache[node.uniqueID]={});

	uniqueCache[type]=[dirruns,diff];
	}

	if(node===elem){
	break;
	}
	}
	}
	}
	}

	// Incorporate the offset, then check against cycle size
	diff-=last;
	return diff===first||diff%first===0&&diff/first>=0;
	}
	};
	},

	"PSEUDO":function PSEUDO(pseudo,argument){
	// pseudo-class names are case-insensitive
	// http://www.w3.org/TR/selectors/#pseudo-classes
	// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
	// Remember that setFilters inherits from pseudos
	var args,
	fn=Expr.pseudos[pseudo]||Expr.setFilters[pseudo.toLowerCase()]||
	Sizzle.error("unsupported pseudo: "+pseudo);

	// The user may use createPseudo to indicate that
	// arguments are needed to create the filter function
	// just as Sizzle does
	if(fn[expando]){
	return fn(argument);
	}

	// But maintain support for old signatures
	if(fn.length>1){
	args=[pseudo,pseudo,"",argument];
	return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())?
	markFunction(function(seed,matches){
	var idx,
	matched=fn(seed,argument),
	i=matched.length;
	while(i--){
	idx=indexOf(seed,matched[i]);
	seed[idx]=!(matches[idx]=matched[i]);
	}
	}):
	function(elem){
	return fn(elem,0,args);
	};
	}

	return fn;
	}},


	pseudos:{
	// Potentially complex pseudos
	"not":markFunction(function(selector){
	// Trim the selector passed to compile
	// to avoid treating leading and trailing
	// spaces as combinators
	var input=[],
	results=[],
	matcher=compile(selector.replace(rtrim,"$1"));

	return matcher[expando]?
	markFunction(function(seed,matches,context,xml){
	var elem,
	unmatched=matcher(seed,null,xml,[]),
	i=seed.length;

	// Match elements unmatched by `matcher`
	while(i--){
	if(elem=unmatched[i]){
	seed[i]=!(matches[i]=elem);
	}
	}
	}):
	function(elem,context,xml){
	input[0]=elem;
	matcher(input,null,xml,results);
	// Don't keep the element (issue #299)
	input[0]=null;
	return!results.pop();
	};
	}),

	"has":markFunction(function(selector){
	return function(elem){
	return Sizzle(selector,elem).length>0;
	};
	}),

	"contains":markFunction(function(text){
	text=text.replace(runescape,funescape);
	return function(elem){
	return(elem.textContent||elem.innerText||getText(elem)).indexOf(text)>-1;
	};
	}),

	// "Whether an element is represented by a :lang() selector
	// is based solely on the element's language value
	// being equal to the identifier C,
	// or beginning with the identifier C immediately followed by "-".
	// The matching of C against the element's language value is performed case-insensitively.
	// The identifier C does not have to be a valid language name."
	// http://www.w3.org/TR/selectors/#lang-pseudo
	"lang":markFunction(function(lang){
	// lang value must be a valid identifier
	if(!ridentifier.test(lang||"")){
	Sizzle.error("unsupported lang: "+lang);
	}
	lang=lang.replace(runescape,funescape).toLowerCase();
	return function(elem){
	var elemLang;
	do{
	if(elemLang=documentIsHTML?
	elem.lang:
	elem.getAttribute("xml:lang")||elem.getAttribute("lang")){

	elemLang=elemLang.toLowerCase();
	return elemLang===lang||elemLang.indexOf(lang+"-")===0;
	}
	}while((elem=elem.parentNode)&&elem.nodeType===1);
	return false;
	};
	}),

	// Miscellaneous
	"target":function target(elem){
	var hash=window.location&&window.location.hash;
	return hash&&hash.slice(1)===elem.id;
	},

	"root":function root(elem){
	return elem===docElem;
	},

	"focus":function focus(elem){
	return elem===document.activeElement&&(!document.hasFocus||document.hasFocus())&&!!(elem.type||elem.href||~elem.tabIndex);
	},

	// Boolean properties
	"enabled":function enabled(elem){
	return elem.disabled===false;
	},

	"disabled":function disabled(elem){
	return elem.disabled===true;
	},

	"checked":function checked(elem){
	// In CSS3, :checked should return both checked and selected elements
	// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
	var nodeName=elem.nodeName.toLowerCase();
	return nodeName==="input"&&!!elem.checked||nodeName==="option"&&!!elem.selected;
	},

	"selected":function selected(elem){
	// Accessing this property makes selected-by-default
	// options in Safari work properly
	if(elem.parentNode){
	elem.parentNode.selectedIndex;
	}

	return elem.selected===true;
	},

	// Contents
	"empty":function empty(elem){
	// http://www.w3.org/TR/selectors/#empty-pseudo
	// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
	//   but not by others (comment: 8; processing instruction: 7; etc.)
	// nodeType < 6 works because attributes (2) do not appear as children
	for(elem=elem.firstChild;elem;elem=elem.nextSibling){
	if(elem.nodeType<6){
	return false;
	}
	}
	return true;
	},

	"parent":function parent(elem){
	return!Expr.pseudos["empty"](elem);
	},

	// Element/input types
	"header":function header(elem){
	return rheader.test(elem.nodeName);
	},

	"input":function input(elem){
	return rinputs.test(elem.nodeName);
	},

	"button":function button(elem){
	var name=elem.nodeName.toLowerCase();
	return name==="input"&&elem.type==="button"||name==="button";
	},

	"text":function text(elem){
	var attr;
	return elem.nodeName.toLowerCase()==="input"&&
	elem.type==="text"&&(

	// Support: IE<8
	// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
	(attr=elem.getAttribute("type"))==null||attr.toLowerCase()==="text");
	},

	// Position-in-collection
	"first":createPositionalPseudo(function(){
	return[0];
	}),

	"last":createPositionalPseudo(function(matchIndexes,length){
	return[length-1];
	}),

	"eq":createPositionalPseudo(function(matchIndexes,length,argument){
	return[argument<0?argument+length:argument];
	}),

	"even":createPositionalPseudo(function(matchIndexes,length){
	var i=0;
	for(;i<length;i+=2){
	matchIndexes.push(i);
	}
	return matchIndexes;
	}),

	"odd":createPositionalPseudo(function(matchIndexes,length){
	var i=1;
	for(;i<length;i+=2){
	matchIndexes.push(i);
	}
	return matchIndexes;
	}),

	"lt":createPositionalPseudo(function(matchIndexes,length,argument){
	var i=argument<0?argument+length:argument;
	for(;--i>=0;){
	matchIndexes.push(i);
	}
	return matchIndexes;
	}),

	"gt":createPositionalPseudo(function(matchIndexes,length,argument){
	var i=argument<0?argument+length:argument;
	for(;++i<length;){
	matchIndexes.push(i);
	}
	return matchIndexes;
	})}};



	Expr.pseudos["nth"]=Expr.pseudos["eq"];

	// Add button/input type pseudos
	for(i in{radio:true,checkbox:true,file:true,password:true,image:true}){
	Expr.pseudos[i]=createInputPseudo(i);
	}
	for(i in{submit:true,reset:true}){
	Expr.pseudos[i]=createButtonPseudo(i);
	}

	// Easy API for creating new setFilters
	function setFilters(){}
	setFilters.prototype=Expr.filters=Expr.pseudos;
	Expr.setFilters=new setFilters();

	tokenize=Sizzle.tokenize=function(selector,parseOnly){
	var matched,match,tokens,type,
	soFar,groups,preFilters,
	cached=tokenCache[selector+" "];

	if(cached){
	return parseOnly?0:cached.slice(0);
	}

	soFar=selector;
	groups=[];
	preFilters=Expr.preFilter;

	while(soFar){

	// Comma and first run
	if(!matched||(match=rcomma.exec(soFar))){
	if(match){
	// Don't consume trailing commas as valid
	soFar=soFar.slice(match[0].length)||soFar;
	}
	groups.push(tokens=[]);
	}

	matched=false;

	// Combinators
	if(match=rcombinators.exec(soFar)){
	matched=match.shift();
	tokens.push({
	value:matched,
	// Cast descendant combinators to space
	type:match[0].replace(rtrim," ")});

	soFar=soFar.slice(matched.length);
	}

	// Filters
	for(type in Expr.filter){
	if((match=matchExpr[type].exec(soFar))&&(!preFilters[type]||(
	match=preFilters[type](match)))){
	matched=match.shift();
	tokens.push({
	value:matched,
	type:type,
	matches:match});

	soFar=soFar.slice(matched.length);
	}
	}

	if(!matched){
	break;
	}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly?
	soFar.length:
	soFar?
	Sizzle.error(selector):
	// Cache the tokens
	tokenCache(selector,groups).slice(0);
	};

	function toSelector(tokens){
	var i=0,
	len=tokens.length,
	selector="";
	for(;i<len;i++){
	selector+=tokens[i].value;
	}
	return selector;
	}

	function addCombinator(matcher,combinator,base){
	var dir=combinator.dir,
	checkNonElements=base&&dir==="parentNode",
	doneName=done++;

	return combinator.first?
	// Check against closest ancestor/preceding element
	function(elem,context,xml){
	while(elem=elem[dir]){
	if(elem.nodeType===1||checkNonElements){
	return matcher(elem,context,xml);
	}
	}
	}:

	// Check against all ancestor/preceding elements
	function(elem,context,xml){
	var oldCache,uniqueCache,outerCache,
	newCache=[dirruns,doneName];

	// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
	if(xml){
	while(elem=elem[dir]){
	if(elem.nodeType===1||checkNonElements){
	if(matcher(elem,context,xml)){
	return true;
	}
	}
	}
	}else{
	while(elem=elem[dir]){
	if(elem.nodeType===1||checkNonElements){
	outerCache=elem[expando]||(elem[expando]={});

	// Support: IE <9 only
	// Defend against cloned attroperties (jQuery gh-1709)
	uniqueCache=outerCache[elem.uniqueID]||(outerCache[elem.uniqueID]={});

	if((oldCache=uniqueCache[dir])&&
	oldCache[0]===dirruns&&oldCache[1]===doneName){

	// Assign to newCache so results back-propagate to previous elements
	return newCache[2]=oldCache[2];
	}else{
	// Reuse newcache so results back-propagate to previous elements
	uniqueCache[dir]=newCache;

	// A match means we're done; a fail means we have to keep checking
	if(newCache[2]=matcher(elem,context,xml)){
	return true;
	}
	}
	}
	}
	}
	};
	}

	function elementMatcher(matchers){
	return matchers.length>1?
	function(elem,context,xml){
	var i=matchers.length;
	while(i--){
	if(!matchers[i](elem,context,xml)){
	return false;
	}
	}
	return true;
	}:
	matchers[0];
	}

	function multipleContexts(selector,contexts,results){
	var i=0,
	len=contexts.length;
	for(;i<len;i++){
	Sizzle(selector,contexts[i],results);
	}
	return results;
	}

	function condense(unmatched,map,filter,context,xml){
	var elem,
	newUnmatched=[],
	i=0,
	len=unmatched.length,
	mapped=map!=null;

	for(;i<len;i++){
	if(elem=unmatched[i]){
	if(!filter||filter(elem,context,xml)){
	newUnmatched.push(elem);
	if(mapped){
	map.push(i);
	}
	}
	}
	}

	return newUnmatched;
	}

	function setMatcher(preFilter,selector,matcher,postFilter,postFinder,postSelector){
	if(postFilter&&!postFilter[expando]){
	postFilter=setMatcher(postFilter);
	}
	if(postFinder&&!postFinder[expando]){
	postFinder=setMatcher(postFinder,postSelector);
	}
	return markFunction(function(seed,results,context,xml){
	var temp,i,elem,
	preMap=[],
	postMap=[],
	preexisting=results.length,

	// Get initial elements from seed or context
	elems=seed||multipleContexts(selector||"*",context.nodeType?[context]:context,[]),

	// Prefilter to get matcher input, preserving a map for seed-results synchronization
	matcherIn=preFilter&&(seed||!selector)?
	condense(elems,preMap,preFilter,context,xml):
	elems,

	matcherOut=matcher?
	// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
	postFinder||(seed?preFilter:preexisting||postFilter)?

	// ...intermediate processing is necessary
	[]:

	// ...otherwise use results directly
	results:
	matcherIn;

	// Find primary matches
	if(matcher){
	matcher(matcherIn,matcherOut,context,xml);
	}

	// Apply postFilter
	if(postFilter){
	temp=condense(matcherOut,postMap);
	postFilter(temp,[],context,xml);

	// Un-match failing elements by moving them back to matcherIn
	i=temp.length;
	while(i--){
	if(elem=temp[i]){
	matcherOut[postMap[i]]=!(matcherIn[postMap[i]]=elem);
	}
	}
	}

	if(seed){
	if(postFinder||preFilter){
	if(postFinder){
	// Get the final matcherOut by condensing this intermediate into postFinder contexts
	temp=[];
	i=matcherOut.length;
	while(i--){
	if(elem=matcherOut[i]){
	// Restore matcherIn since elem is not yet a final match
	temp.push(matcherIn[i]=elem);
	}
	}
	postFinder(null,matcherOut=[],temp,xml);
	}

	// Move matched elements from seed to results to keep them synchronized
	i=matcherOut.length;
	while(i--){
	if((elem=matcherOut[i])&&
	(temp=postFinder?indexOf(seed,elem):preMap[i])>-1){

	seed[temp]=!(results[temp]=elem);
	}
	}
	}

	// Add elements to results, through postFinder if defined
	}else{
	matcherOut=condense(
	matcherOut===results?
	matcherOut.splice(preexisting,matcherOut.length):
	matcherOut);

	if(postFinder){
	postFinder(null,results,matcherOut,xml);
	}else{
	push.apply(results,matcherOut);
	}
	}
	});
	}

	function matcherFromTokens(tokens){
	var checkContext,matcher,j,
	len=tokens.length,
	leadingRelative=Expr.relative[tokens[0].type],
	implicitRelative=leadingRelative||Expr.relative[" "],
	i=leadingRelative?1:0,

	// The foundational matcher ensures that elements are reachable from top-level context(s)
	matchContext=addCombinator(function(elem){
	return elem===checkContext;
	},implicitRelative,true),
	matchAnyContext=addCombinator(function(elem){
	return indexOf(checkContext,elem)>-1;
	},implicitRelative,true),
	matchers=[function(elem,context,xml){
	var ret=!leadingRelative&&(xml||context!==outermostContext)||(
	(checkContext=context).nodeType?
	matchContext(elem,context,xml):
	matchAnyContext(elem,context,xml));
	// Avoid hanging onto element (issue #299)
	checkContext=null;
	return ret;
	}];

	for(;i<len;i++){
	if(matcher=Expr.relative[tokens[i].type]){
	matchers=[addCombinator(elementMatcher(matchers),matcher)];
	}else{
	matcher=Expr.filter[tokens[i].type].apply(null,tokens[i].matches);

	// Return special upon seeing a positional matcher
	if(matcher[expando]){
	// Find the next relative operator (if any) for proper handling
	j=++i;
	for(;j<len;j++){
	if(Expr.relative[tokens[j].type]){
	break;
	}
	}
	return setMatcher(
	i>1&&elementMatcher(matchers),
	i>1&&toSelector(
	// If the preceding token was a descendant combinator, insert an implicit any-element `*`
	tokens.slice(0,i-1).concat({value:tokens[i-2].type===" "?"*":""})).
	replace(rtrim,"$1"),
	matcher,
	i<j&&matcherFromTokens(tokens.slice(i,j)),
	j<len&&matcherFromTokens(tokens=tokens.slice(j)),
	j<len&&toSelector(tokens));

	}
	matchers.push(matcher);
	}
	}

	return elementMatcher(matchers);
	}

	function matcherFromGroupMatchers(elementMatchers,setMatchers){
	var bySet=setMatchers.length>0,
	byElement=elementMatchers.length>0,
	superMatcher=function superMatcher(seed,context,xml,results,outermost){
	var elem,j,matcher,
	matchedCount=0,
	i="0",
	unmatched=seed&&[],
	setMatched=[],
	contextBackup=outermostContext,
	// We must always have either seed elements or outermost context
	elems=seed||byElement&&Expr.find["TAG"]("*",outermost),
	// Use integer dirruns iff this is the outermost matcher
	dirrunsUnique=dirruns+=contextBackup==null?1:Math.random()||0.1,
	len=elems.length;

	if(outermost){
	outermostContext=context===document||context||outermost;
	}

	// Add elements passing elementMatchers directly to results
	// Support: IE<9, Safari
	// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
	for(;i!==len&&(elem=elems[i])!=null;i++){
	if(byElement&&elem){
	j=0;
	if(!context&&elem.ownerDocument!==document){
	setDocument(elem);
	xml=!documentIsHTML;
	}
	while(matcher=elementMatchers[j++]){
	if(matcher(elem,context||document,xml)){
	results.push(elem);
	break;
	}
	}
	if(outermost){
	dirruns=dirrunsUnique;
	}
	}

	// Track unmatched elements for set filters
	if(bySet){
	// They will have gone through all possible matchers
	if(elem=!matcher&&elem){
	matchedCount--;
	}

	// Lengthen the array for every element, matched or not
	if(seed){
	unmatched.push(elem);
	}
	}
	}

	// `i` is now the count of elements visited above, and adding it to `matchedCount`
	// makes the latter nonnegative.
	matchedCount+=i;

	// Apply set filters to unmatched elements
	// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
	// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
	// no element matchers and no seed.
	// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
	// case, which will result in a "00" `matchedCount` that differs from `i` but is also
	// numerically zero.
	if(bySet&&i!==matchedCount){
	j=0;
	while(matcher=setMatchers[j++]){
	matcher(unmatched,setMatched,context,xml);
	}

	if(seed){
	// Reintegrate element matches to eliminate the need for sorting
	if(matchedCount>0){
	while(i--){
	if(!(unmatched[i]||setMatched[i])){
	setMatched[i]=pop.call(results);
	}
	}
	}

	// Discard index placeholder values to get only actual matches
	setMatched=condense(setMatched);
	}

	// Add matches to results
	push.apply(results,setMatched);

	// Seedless set matches succeeding multiple successful matchers stipulate sorting
	if(outermost&&!seed&&setMatched.length>0&&
	matchedCount+setMatchers.length>1){

	Sizzle.uniqueSort(results);
	}
	}

	// Override manipulation of globals by nested matchers
	if(outermost){
	dirruns=dirrunsUnique;
	outermostContext=contextBackup;
	}

	return unmatched;
	};

	return bySet?
	markFunction(superMatcher):
	superMatcher;
	}

	compile=Sizzle.compile=function(selector,match/* Internal Use Only */){
	var i,
	setMatchers=[],
	elementMatchers=[],
	cached=compilerCache[selector+" "];

	if(!cached){
	// Generate a function of recursive functions that can be used to check each element
	if(!match){
	match=tokenize(selector);
	}
	i=match.length;
	while(i--){
	cached=matcherFromTokens(match[i]);
	if(cached[expando]){
	setMatchers.push(cached);
	}else{
	elementMatchers.push(cached);
	}
	}

	// Cache the compiled function
	cached=compilerCache(selector,matcherFromGroupMatchers(elementMatchers,setMatchers));

	// Save selector and tokenization
	cached.selector=selector;
	}
	return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select=Sizzle.select=function(selector,context,results,seed){
	var i,tokens,token,type,find,
	compiled=typeof selector==="function"&&selector,
	match=!seed&&tokenize(selector=compiled.selector||selector);

	results=results||[];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if(match.length===1){

	// Reduce context if the leading compound selector is an ID
	tokens=match[0]=match[0].slice(0);
	if(tokens.length>2&&(token=tokens[0]).type==="ID"&&
	support.getById&&context.nodeType===9&&documentIsHTML&&
	Expr.relative[tokens[1].type]){

	context=(Expr.find["ID"](token.matches[0].replace(runescape,funescape),context)||[])[0];
	if(!context){
	return results;

	// Precompiled matchers will still verify ancestry, so step up a level
	}else if(compiled){
	context=context.parentNode;
	}

	selector=selector.slice(tokens.shift().value.length);
	}

	// Fetch a seed set for right-to-left matching
	i=matchExpr["needsContext"].test(selector)?0:tokens.length;
	while(i--){
	token=tokens[i];

	// Abort if we hit a combinator
	if(Expr.relative[type=token.type]){
	break;
	}
	if(find=Expr.find[type]){
	// Search, expanding context for leading sibling combinators
	if(seed=find(
	token.matches[0].replace(runescape,funescape),
	rsibling.test(tokens[0].type)&&testContext(context.parentNode)||context))
	{

	// If seed is empty or no tokens remain, we can return early
	tokens.splice(i,1);
	selector=seed.length&&toSelector(tokens);
	if(!selector){
	push.apply(results,seed);
	return results;
	}

	break;
	}
	}
	}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	(compiled||compile(selector,match))(
	seed,
	context,
	!documentIsHTML,
	results,
	!context||rsibling.test(selector)&&testContext(context.parentNode)||context);

	return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable=expando.split("").sort(sortOrder).join("")===expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates=!!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached=assert(function(div1){
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition(document.createElement("div"))&1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if(!assert(function(div){
	div.innerHTML="<a href='#'></a>";
	return div.firstChild.getAttribute("href")==="#";
	})){
	addHandle("type|href|height|width",function(elem,name,isXML){
	if(!isXML){
	return elem.getAttribute(name,name.toLowerCase()==="type"?1:2);
	}
	});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if(!support.attributes||!assert(function(div){
	div.innerHTML="<input/>";
	div.firstChild.setAttribute("value","");
	return div.firstChild.getAttribute("value")==="";
	})){
	addHandle("value",function(elem,name,isXML){
	if(!isXML&&elem.nodeName.toLowerCase()==="input"){
	return elem.defaultValue;
	}
	});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if(!assert(function(div){
	return div.getAttribute("disabled")==null;
	})){
	addHandle(booleans,function(elem,name,isXML){
	var val;
	if(!isXML){
	return elem[name]===true?name.toLowerCase():
	(val=elem.getAttributeNode(name))&&val.specified?
	val.value:
	null;
	}
	});
	}

	return Sizzle;

	}(window);



	jQuery.find=Sizzle;
	jQuery.expr=Sizzle.selectors;
	jQuery.expr[":"]=jQuery.expr.pseudos;
	jQuery.uniqueSort=jQuery.unique=Sizzle.uniqueSort;
	jQuery.text=Sizzle.getText;
	jQuery.isXMLDoc=Sizzle.isXML;
	jQuery.contains=Sizzle.contains;



	var dir=function dir(elem,_dir,until){
	var matched=[],
	truncate=until!==undefined;

	while((elem=elem[_dir])&&elem.nodeType!==9){
	if(elem.nodeType===1){
	if(truncate&&jQuery(elem).is(until)){
	break;
	}
	matched.push(elem);
	}
	}
	return matched;
	};


	var _siblings=function _siblings(n,elem){
	var matched=[];

	for(;n;n=n.nextSibling){
	if(n.nodeType===1&&n!==elem){
	matched.push(n);
	}
	}

	return matched;
	};


	var rneedsContext=jQuery.expr.match.needsContext;

	var rsingleTag=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;



	var risSimple=/^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow(elements,qualifier,not){
	if(jQuery.isFunction(qualifier)){
	return jQuery.grep(elements,function(elem,i){
	/* jshint -W018 */
	return!!qualifier.call(elem,i,elem)!==not;
	});

	}

	if(qualifier.nodeType){
	return jQuery.grep(elements,function(elem){
	return elem===qualifier!==not;
	});

	}

	if(typeof qualifier==="string"){
	if(risSimple.test(qualifier)){
	return jQuery.filter(qualifier,elements,not);
	}

	qualifier=jQuery.filter(qualifier,elements);
	}

	return jQuery.grep(elements,function(elem){
	return jQuery.inArray(elem,qualifier)>-1!==not;
	});
	}

	jQuery.filter=function(expr,elems,not){
	var elem=elems[0];

	if(not){
	expr=":not("+expr+")";
	}

	return elems.length===1&&elem.nodeType===1?
	jQuery.find.matchesSelector(elem,expr)?[elem]:[]:
	jQuery.find.matches(expr,jQuery.grep(elems,function(elem){
	return elem.nodeType===1;
	}));
	};

	jQuery.fn.extend({
	find:function find(selector){
	var i,
	ret=[],
	self=this,
	len=self.length;

	if(typeof selector!=="string"){
	return this.pushStack(jQuery(selector).filter(function(){
	for(i=0;i<len;i++){
	if(jQuery.contains(self[i],this)){
	return true;
	}
	}
	}));
	}

	for(i=0;i<len;i++){
	jQuery.find(selector,self[i],ret);
	}

	// Needed because $( selector, context ) becomes $( context ).find( selector )
	ret=this.pushStack(len>1?jQuery.unique(ret):ret);
	ret.selector=this.selector?this.selector+" "+selector:selector;
	return ret;
	},
	filter:function filter(selector){
	return this.pushStack(winnow(this,selector||[],false));
	},
	not:function not(selector){
	return this.pushStack(winnow(this,selector||[],true));
	},
	is:function is(selector){
	return!!winnow(
	this,

	// If this is a positional/relative selector, check membership in the returned set
	// so $("p:first").is("p:last") won't return true for a doc with two "p".
	typeof selector==="string"&&rneedsContext.test(selector)?
	jQuery(selector):
	selector||[],
	false).
	length;
	}});



	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init=jQuery.fn.init=function(selector,context,root){
	var match,elem;

	// HANDLE: $(""), $(null), $(undefined), $(false)
	if(!selector){
	return this;
	}

	// init accepts an alternate rootjQuery
	// so migrate can support jQuery.sub (gh-2101)
	root=root||rootjQuery;

	// Handle HTML strings
	if(typeof selector==="string"){
	if(selector.charAt(0)==="<"&&
	selector.charAt(selector.length-1)===">"&&
	selector.length>=3){

	// Assume that strings that start and end with <> are HTML and skip the regex check
	match=[null,selector,null];

	}else{
	match=rquickExpr.exec(selector);
	}

	// Match html or make sure no context is specified for #id
	if(match&&(match[1]||!context)){

	// HANDLE: $(html) -> $(array)
	if(match[1]){
	context=context instanceof jQuery?context[0]:context;

	// scripts is true for back-compat
	// Intentionally let the error be thrown if parseHTML is not present
	jQuery.merge(this,jQuery.parseHTML(
	match[1],
	context&&context.nodeType?context.ownerDocument||context:document,
	true));


	// HANDLE: $(html, props)
	if(rsingleTag.test(match[1])&&jQuery.isPlainObject(context)){
	for(match in context){

	// Properties of context are called as methods if possible
	if(jQuery.isFunction(this[match])){
	this[match](context[match]);

	// ...and otherwise set as attributes
	}else{
	this.attr(match,context[match]);
	}
	}
	}

	return this;

	// HANDLE: $(#id)
	}else{
	elem=document.getElementById(match[2]);

	// Check parentNode to catch when Blackberry 4.6 returns
	// nodes that are no longer in the document #6963
	if(elem&&elem.parentNode){

	// Handle the case where IE and Opera return items
	// by name instead of ID
	if(elem.id!==match[2]){
	return rootjQuery.find(selector);
	}

	// Otherwise, we inject the element directly into the jQuery object
	this.length=1;
	this[0]=elem;
	}

	this.context=document;
	this.selector=selector;
	return this;
	}

	// HANDLE: $(expr, $(...))
	}else if(!context||context.jquery){
	return(context||root).find(selector);

	// HANDLE: $(expr, context)
	// (which is just equivalent to: $(context).find(expr)
	}else{
	return this.constructor(context).find(selector);
	}

	// HANDLE: $(DOMElement)
	}else if(selector.nodeType){
	this.context=this[0]=selector;
	this.length=1;
	return this;

	// HANDLE: $(function)
	// Shortcut for document ready
	}else if(jQuery.isFunction(selector)){
	return typeof root.ready!=="undefined"?
	root.ready(selector):

	// Execute immediately if ready is not present
	selector(jQuery);
	}

	if(selector.selector!==undefined){
	this.selector=selector.selector;
	this.context=selector.context;
	}

	return jQuery.makeArray(selector,this);
	};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype=jQuery.fn;

	// Initialize central reference
	rootjQuery=jQuery(document);


	var rparentsprev=/^(?:parents|prev(?:Until|All))/,

	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique={
	children:true,
	contents:true,
	next:true,
	prev:true};


	jQuery.fn.extend({
	has:function has(target){
	var i,
	targets=jQuery(target,this),
	len=targets.length;

	return this.filter(function(){
	for(i=0;i<len;i++){
	if(jQuery.contains(this,targets[i])){
	return true;
	}
	}
	});
	},

	closest:function closest(selectors,context){
	var cur,
	i=0,
	l=this.length,
	matched=[],
	pos=rneedsContext.test(selectors)||typeof selectors!=="string"?
	jQuery(selectors,context||this.context):
	0;

	for(;i<l;i++){
	for(cur=this[i];cur&&cur!==context;cur=cur.parentNode){

	// Always skip document fragments
	if(cur.nodeType<11&&(pos?
	pos.index(cur)>-1:

	// Don't pass non-elements to Sizzle
	cur.nodeType===1&&
	jQuery.find.matchesSelector(cur,selectors))){

	matched.push(cur);
	break;
	}
	}
	}

	return this.pushStack(matched.length>1?jQuery.uniqueSort(matched):matched);
	},

	// Determine the position of an element within
	// the matched set of elements
	index:function index(elem){

	// No argument, return index in parent
	if(!elem){
	return this[0]&&this[0].parentNode?this.first().prevAll().length:-1;
	}

	// index in selector
	if(typeof elem==="string"){
	return jQuery.inArray(this[0],jQuery(elem));
	}

	// Locate the position of the desired element
	return jQuery.inArray(

	// If it receives a jQuery object, the first element is used
	elem.jquery?elem[0]:elem,this);
	},

	add:function add(selector,context){
	return this.pushStack(
	jQuery.uniqueSort(
	jQuery.merge(this.get(),jQuery(selector,context))));


	},

	addBack:function addBack(selector){
	return this.add(selector==null?
	this.prevObject:this.prevObject.filter(selector));

	}});


	function sibling(cur,dir){
	do{
	cur=cur[dir];
	}while(cur&&cur.nodeType!==1);

	return cur;
	}

	jQuery.each({
	parent:function parent(elem){
	var parent=elem.parentNode;
	return parent&&parent.nodeType!==11?parent:null;
	},
	parents:function parents(elem){
	return dir(elem,"parentNode");
	},
	parentsUntil:function parentsUntil(elem,i,until){
	return dir(elem,"parentNode",until);
	},
	next:function next(elem){
	return sibling(elem,"nextSibling");
	},
	prev:function prev(elem){
	return sibling(elem,"previousSibling");
	},
	nextAll:function nextAll(elem){
	return dir(elem,"nextSibling");
	},
	prevAll:function prevAll(elem){
	return dir(elem,"previousSibling");
	},
	nextUntil:function nextUntil(elem,i,until){
	return dir(elem,"nextSibling",until);
	},
	prevUntil:function prevUntil(elem,i,until){
	return dir(elem,"previousSibling",until);
	},
	siblings:function siblings(elem){
	return _siblings((elem.parentNode||{}).firstChild,elem);
	},
	children:function children(elem){
	return _siblings(elem.firstChild);
	},
	contents:function contents(elem){
	return jQuery.nodeName(elem,"iframe")?
	elem.contentDocument||elem.contentWindow.document:
	jQuery.merge([],elem.childNodes);
	}},
	function(name,fn){
	jQuery.fn[name]=function(until,selector){
	var ret=jQuery.map(this,fn,until);

	if(name.slice(-5)!=="Until"){
	selector=until;
	}

	if(selector&&typeof selector==="string"){
	ret=jQuery.filter(selector,ret);
	}

	if(this.length>1){

	// Remove duplicates
	if(!guaranteedUnique[name]){
	ret=jQuery.uniqueSort(ret);
	}

	// Reverse order for parents* and prev-derivatives
	if(rparentsprev.test(name)){
	ret=ret.reverse();
	}
	}

	return this.pushStack(ret);
	};
	});
	var rnotwhite=/\S+/g;



	// Convert String-formatted options into Object-formatted ones
	function createOptions(options){
	var object={};
	jQuery.each(options.match(rnotwhite)||[],function(_,flag){
	object[flag]=true;
	});
	return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks=function(options){

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options=typeof options==="string"?
	createOptions(options):
	jQuery.extend({},options);

	var// Flag to know if list is currently firing
	firing,

	// Last fire value for non-forgettable lists
	memory,

	// Flag to know if list was already fired
	_fired,

	// Flag to prevent firing
	_locked,

	// Actual callback list
	list=[],

	// Queue of execution data for repeatable lists
	queue=[],

	// Index of currently firing callback (modified by add/remove as needed)
	firingIndex=-1,

	// Fire callbacks
	fire=function fire(){

	// Enforce single-firing
	_locked=options.once;

	// Execute callbacks for all pending executions,
	// respecting firingIndex overrides and runtime changes
	_fired=firing=true;
	for(;queue.length;firingIndex=-1){
	memory=queue.shift();
	while(++firingIndex<list.length){

	// Run callback and check for early termination
	if(list[firingIndex].apply(memory[0],memory[1])===false&&
	options.stopOnFalse){

	// Jump to end and forget the data so .add doesn't re-fire
	firingIndex=list.length;
	memory=false;
	}
	}
	}

	// Forget the data if we're done with it
	if(!options.memory){
	memory=false;
	}

	firing=false;

	// Clean up if we're done firing for good
	if(_locked){

	// Keep an empty list if we have data for future add calls
	if(memory){
	list=[];

	// Otherwise, this object is spent
	}else{
	list="";
	}
	}
	},

	// Actual Callbacks object
	self={

	// Add a callback or a collection of callbacks to the list
	add:function add(){
	if(list){

	// If we have memory from a past run, we should fire after adding
	if(memory&&!firing){
	firingIndex=list.length-1;
	queue.push(memory);
	}

	(function add(args){
	jQuery.each(args,function(_,arg){
	if(jQuery.isFunction(arg)){
	if(!options.unique||!self.has(arg)){
	list.push(arg);
	}
	}else if(arg&&arg.length&&jQuery.type(arg)!=="string"){

	// Inspect recursively
	add(arg);
	}
	});
	})(arguments);

	if(memory&&!firing){
	fire();
	}
	}
	return this;
	},

	// Remove a callback from the list
	remove:function remove(){
	jQuery.each(arguments,function(_,arg){
	var index;
	while((index=jQuery.inArray(arg,list,index))>-1){
	list.splice(index,1);

	// Handle firing indexes
	if(index<=firingIndex){
	firingIndex--;
	}
	}
	});
	return this;
	},

	// Check if a given callback is in the list.
	// If no argument is given, return whether or not list has callbacks attached.
	has:function has(fn){
	return fn?
	jQuery.inArray(fn,list)>-1:
	list.length>0;
	},

	// Remove all callbacks from the list
	empty:function empty(){
	if(list){
	list=[];
	}
	return this;
	},

	// Disable .fire and .add
	// Abort any current/pending executions
	// Clear all callbacks and values
	disable:function disable(){
	_locked=queue=[];
	list=memory="";
	return this;
	},
	disabled:function disabled(){
	return!list;
	},

	// Disable .fire
	// Also disable .add unless we have memory (since it would have no effect)
	// Abort any pending executions
	lock:function lock(){
	_locked=true;
	if(!memory){
	self.disable();
	}
	return this;
	},
	locked:function locked(){
	return!!_locked;
	},

	// Call all callbacks with the given context and arguments
	fireWith:function fireWith(context,args){
	if(!_locked){
	args=args||[];
	args=[context,args.slice?args.slice():args];
	queue.push(args);
	if(!firing){
	fire();
	}
	}
	return this;
	},

	// Call all the callbacks with the given arguments
	fire:function fire(){
	self.fireWith(this,arguments);
	return this;
	},

	// To know if the callbacks have already been called at least once
	fired:function fired(){
	return!!_fired;
	}};


	return self;
	};


	jQuery.extend({

	Deferred:function Deferred(func){
	var tuples=[

	// action, add listener, listener list, final state
	["resolve","done",jQuery.Callbacks("once memory"),"resolved"],
	["reject","fail",jQuery.Callbacks("once memory"),"rejected"],
	["notify","progress",jQuery.Callbacks("memory")]],

	_state="pending",
	_promise={
	state:function state(){
	return _state;
	},
	always:function always(){
	deferred.done(arguments).fail(arguments);
	return this;
	},
	then:function then()/* fnDone, fnFail, fnProgress */{
	var fns=arguments;
	return jQuery.Deferred(function(newDefer){
	jQuery.each(tuples,function(i,tuple){
	var fn=jQuery.isFunction(fns[i])&&fns[i];

	// deferred[ done | fail | progress ] for forwarding actions to newDefer
	deferred[tuple[1]](function(){
	var returned=fn&&fn.apply(this,arguments);
	if(returned&&jQuery.isFunction(returned.promise)){
	returned.promise().
	progress(newDefer.notify).
	done(newDefer.resolve).
	fail(newDefer.reject);
	}else{
	newDefer[tuple[0]+"With"](
	this===_promise?newDefer.promise():this,
	fn?[returned]:arguments);

	}
	});
	});
	fns=null;
	}).promise();
	},

	// Get a promise for this deferred
	// If obj is provided, the promise aspect is added to the object
	promise:function promise(obj){
	return obj!=null?jQuery.extend(obj,_promise):_promise;
	}},

	deferred={};

	// Keep pipe for back-compat
	_promise.pipe=_promise.then;

	// Add list-specific methods
	jQuery.each(tuples,function(i,tuple){
	var list=tuple[2],
	stateString=tuple[3];

	// promise[ done | fail | progress ] = list.add
	_promise[tuple[1]]=list.add;

	// Handle state
	if(stateString){
	list.add(function(){

	// state = [ resolved | rejected ]
	_state=stateString;

	// [ reject_list | resolve_list ].disable; progress_list.lock
	},tuples[i^1][2].disable,tuples[2][2].lock);
	}

	// deferred[ resolve | reject | notify ]
	deferred[tuple[0]]=function(){
	deferred[tuple[0]+"With"](this===deferred?_promise:this,arguments);
	return this;
	};
	deferred[tuple[0]+"With"]=list.fireWith;
	});

	// Make the deferred a promise
	_promise.promise(deferred);

	// Call given func if any
	if(func){
	func.call(deferred,deferred);
	}

	// All done!
	return deferred;
	},

	// Deferred helper
	when:function when(subordinate/* , ..., subordinateN */){
	var i=0,
	resolveValues=_slice.call(arguments),
	length=resolveValues.length,

	// the count of uncompleted subordinates
	remaining=length!==1||
	subordinate&&jQuery.isFunction(subordinate.promise)?length:0,

	// the master Deferred.
	// If resolveValues consist of only a single Deferred, just use that.
	deferred=remaining===1?subordinate:jQuery.Deferred(),

	// Update function for both resolve and progress values
	updateFunc=function updateFunc(i,contexts,values){
	return function(value){
	contexts[i]=this;
	values[i]=arguments.length>1?_slice.call(arguments):value;
	if(values===progressValues){
	deferred.notifyWith(contexts,values);

	}else if(! --remaining){
	deferred.resolveWith(contexts,values);
	}
	};
	},

	progressValues,progressContexts,resolveContexts;

	// add listeners to Deferred subordinates; treat others as resolved
	if(length>1){
	progressValues=new Array(length);
	progressContexts=new Array(length);
	resolveContexts=new Array(length);
	for(;i<length;i++){
	if(resolveValues[i]&&jQuery.isFunction(resolveValues[i].promise)){
	resolveValues[i].promise().
	progress(updateFunc(i,progressContexts,progressValues)).
	done(updateFunc(i,resolveContexts,resolveValues)).
	fail(deferred.reject);
	}else{
	--remaining;
	}
	}
	}

	// if we're not waiting on anything, resolve the master
	if(!remaining){
	deferred.resolveWith(resolveContexts,resolveValues);
	}

	return deferred.promise();
	}});



	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready=function(fn){

	// Add the callback
	jQuery.ready.promise().done(fn);

	return this;
	};

	jQuery.extend({

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady:false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait:1,

	// Hold (or release) the ready event
	holdReady:function holdReady(hold){
	if(hold){
	jQuery.readyWait++;
	}else{
	jQuery.ready(true);
	}
	},

	// Handle when the DOM is ready
	ready:function ready(wait){

	// Abort if there are pending holds or we're already ready
	if(wait===true?--jQuery.readyWait:jQuery.isReady){
	return;
	}

	// Remember that the DOM is ready
	jQuery.isReady=true;

	// If a normal DOM Ready event fired, decrement, and wait if need be
	if(wait!==true&&--jQuery.readyWait>0){
	return;
	}

	// If there are functions bound, to execute
	readyList.resolveWith(document,[jQuery]);

	// Trigger any bound ready events
	if(jQuery.fn.triggerHandler){
	jQuery(document).triggerHandler("ready");
	jQuery(document).off("ready");
	}
	}});


	/**
	 * Clean-up method for dom ready events
	 */
	function detach(){
	if(document.addEventListener){
	document.removeEventListener("DOMContentLoaded",completed);
	window.removeEventListener("load",completed);

	}else{
	document.detachEvent("onreadystatechange",completed);
	window.detachEvent("onload",completed);
	}
	}

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed(){

	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if(document.addEventListener||
	window.event.type==="load"||
	document.readyState==="complete"){

	detach();
	jQuery.ready();
	}
	}

	jQuery.ready.promise=function(obj){
	if(!readyList){

	readyList=jQuery.Deferred();

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE6-10
	// Older IE sometimes signals "interactive" too soon
	if(document.readyState==="complete"||
	document.readyState!=="loading"&&!document.documentElement.doScroll){

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout(jQuery.ready);

	// Standards-based browsers support DOMContentLoaded
	}else if(document.addEventListener){

	// Use the handy event callback
	document.addEventListener("DOMContentLoaded",completed);

	// A fallback to window.onload, that will always work
	window.addEventListener("load",completed);

	// If IE event model is used
	}else{

	// Ensure firing before onload, maybe late but safe also for iframes
	document.attachEvent("onreadystatechange",completed);

	// A fallback to window.onload, that will always work
	window.attachEvent("onload",completed);

	// If IE and not a frame
	// continually check to see if the document is ready
	var top=false;

	try{
	top=window.frameElement==null&&document.documentElement;
	}catch(e){}

	if(top&&top.doScroll){
	(function doScrollCheck(){
	if(!jQuery.isReady){

	try{

	// Use the trick by Diego Perini
	// http://javascript.nwbox.com/IEContentLoaded/
	top.doScroll("left");
	}catch(e){
	return window.setTimeout(doScrollCheck,50);
	}

	// detach all dom ready events
	detach();

	// and execute any waiting functions
	jQuery.ready();
	}
	})();
	}
	}
	}
	return readyList.promise(obj);
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Support: IE<9
	// Iteration over object's inherited properties before its own
	var i;
	for(i in jQuery(support)){
	break;
	}
	support.ownFirst=i==="0";

	// Note: most support tests are defined in their respective modules.
	// false until the test is run
	support.inlineBlockNeedsLayout=false;

	// Execute ASAP in case we need to set body.style.zoom
	jQuery(function(){

	// Minified: var a,b,c,d
	var val,div,body,container;

	body=document.getElementsByTagName("body")[0];
	if(!body||!body.style){

	// Return for frameset docs that don't have a body
	return;
	}

	// Setup
	div=document.createElement("div");
	container=document.createElement("div");
	container.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild(container).appendChild(div);

	if(typeof div.style.zoom!=="undefined"){

	// Support: IE<8
	// Check if natively block-level elements act like inline-block
	// elements when setting their display to 'inline' and giving
	// them layout
	div.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

	support.inlineBlockNeedsLayout=val=div.offsetWidth===3;
	if(val){

	// Prevent IE 6 from affecting layout for positioned elements #11048
	// Prevent IE from shrinking the body in IE 7 mode #12869
	// Support: IE<8
	body.style.zoom=1;
	}
	}

	body.removeChild(container);
	});


	(function(){
	var div=document.createElement("div");

	// Support: IE<9
	support.deleteExpando=true;
	try{
	delete div.test;
	}catch(e){
	support.deleteExpando=false;
	}

	// Null elements to avoid leaks in IE.
	div=null;
	})();
	var acceptData=function acceptData(elem){
	var noData=jQuery.noData[(elem.nodeName+" ").toLowerCase()],
	nodeType=+elem.nodeType||1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType!==1&&nodeType!==9?
	false:

	// Nodes accept data unless otherwise specified; rejection can be conditional
	!noData||noData!==true&&elem.getAttribute("classid")===noData;
	};




	var rbrace=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash=/([A-Z])/g;

	function dataAttr(elem,key,data){

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if(data===undefined&&elem.nodeType===1){

	var name="data-"+key.replace(rmultiDash,"-$1").toLowerCase();

	data=elem.getAttribute(name);

	if(typeof data==="string"){
	try{
	data=data==="true"?true:
	data==="false"?false:
	data==="null"?null:

	// Only convert to a number if it doesn't change the string
	+data+""===data?+data:
	rbrace.test(data)?jQuery.parseJSON(data):
	data;
	}catch(e){}

	// Make sure we set the data so it isn't changed later
	jQuery.data(elem,key,data);

	}else{
	data=undefined;
	}
	}

	return data;
	}

	// checks a cache object for emptiness
	function isEmptyDataObject(obj){
	var name;
	for(name in obj){

	// if the public data object is empty, the private is still empty
	if(name==="data"&&jQuery.isEmptyObject(obj[name])){
	continue;
	}
	if(name!=="toJSON"){
	return false;
	}
	}

	return true;
	}

	function internalData(elem,name,data,pvt/* Internal Use Only */){
	if(!acceptData(elem)){
	return;
	}

	var ret,thisCache,
	internalKey=jQuery.expando,

	// We have to handle DOM nodes and JS objects differently because IE6-7
	// can't GC object references properly across the DOM-JS boundary
	isNode=elem.nodeType,

	// Only DOM nodes need the global jQuery cache; JS object data is
	// attached directly to the object so GC can occur automatically
	cache=isNode?jQuery.cache:elem,

	// Only defining an ID for JS objects if its cache already exists allows
	// the code to shortcut on the same path as a DOM node with no cache
	id=isNode?elem[internalKey]:elem[internalKey]&&internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if((!id||!cache[id]||!pvt&&!cache[id].data)&&
	data===undefined&&typeof name==="string"){
	return;
	}

	if(!id){

	// Only DOM nodes need a new unique ID for each element since their data
	// ends up in the global cache
	if(isNode){
	id=elem[internalKey]=deletedIds.pop()||jQuery.guid++;
	}else{
	id=internalKey;
	}
	}

	if(!cache[id]){

	// Avoid exposing jQuery metadata on plain JS objects when the object
	// is serialized using JSON.stringify
	cache[id]=isNode?{}:{toJSON:jQuery.noop};
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if((typeof name==="undefined"?"undefined":_typeof(name))==="object"||typeof name==="function"){
	if(pvt){
	cache[id]=jQuery.extend(cache[id],name);
	}else{
	cache[id].data=jQuery.extend(cache[id].data,name);
	}
	}

	thisCache=cache[id];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if(!pvt){
	if(!thisCache.data){
	thisCache.data={};
	}

	thisCache=thisCache.data;
	}

	if(data!==undefined){
	thisCache[jQuery.camelCase(name)]=data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if(typeof name==="string"){

	// First Try to find as-is property data
	ret=thisCache[name];

	// Test for null|undefined property data
	if(ret==null){

	// Try to find the camelCased property
	ret=thisCache[jQuery.camelCase(name)];
	}
	}else{
	ret=thisCache;
	}

	return ret;
	}

	function internalRemoveData(elem,name,pvt){
	if(!acceptData(elem)){
	return;
	}

	var thisCache,i,
	isNode=elem.nodeType,

	// See jQuery.data for more information
	cache=isNode?jQuery.cache:elem,
	id=isNode?elem[jQuery.expando]:jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if(!cache[id]){
	return;
	}

	if(name){

	thisCache=pvt?cache[id]:cache[id].data;

	if(thisCache){

	// Support array or space separated string names for data keys
	if(!jQuery.isArray(name)){

	// try the string as a key before any manipulation
	if(name in thisCache){
	name=[name];
	}else{

	// split the camel cased version by spaces unless a key with the spaces exists
	name=jQuery.camelCase(name);
	if(name in thisCache){
	name=[name];
	}else{
	name=name.split(" ");
	}
	}
	}else{

	// If "name" is an array of keys...
	// When data is initially created, via ("key", "val") signature,
	// keys will be converted to camelCase.
	// Since there is no way to tell _how_ a key was added, remove
	// both plain key and camelCase key. #12786
	// This will only penalize the array argument path.
	name=name.concat(jQuery.map(name,jQuery.camelCase));
	}

	i=name.length;
	while(i--){
	delete thisCache[name[i]];
	}

	// If there is no data left in the cache, we want to continue
	// and let the cache object itself get destroyed
	if(pvt?!isEmptyDataObject(thisCache):!jQuery.isEmptyObject(thisCache)){
	return;
	}
	}
	}

	// See jQuery.data for more information
	if(!pvt){
	delete cache[id].data;

	// Don't destroy the parent cache unless the internal data object
	// had been the only thing left in it
	if(!isEmptyDataObject(cache[id])){
	return;
	}
	}

	// Destroy the cache
	if(isNode){
	jQuery.cleanData([elem],true);

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	}else if(support.deleteExpando||cache!=cache.window){
	/* jshint eqeqeq: true */
	delete cache[id];

	// When all else fails, undefined
	}else{
	cache[id]=undefined;
	}
	}

	jQuery.extend({
	cache:{},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData:{
	"applet ":true,
	"embed ":true,

	// ...but Flash objects (which have this classid) *can* handle expandos
	"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},


	hasData:function hasData(elem){
	elem=elem.nodeType?jQuery.cache[elem[jQuery.expando]]:elem[jQuery.expando];
	return!!elem&&!isEmptyDataObject(elem);
	},

	data:function data(elem,name,_data){
	return internalData(elem,name,_data);
	},

	removeData:function removeData(elem,name){
	return internalRemoveData(elem,name);
	},

	// For internal use only.
	_data:function _data(elem,name,data){
	return internalData(elem,name,data,true);
	},

	_removeData:function _removeData(elem,name){
	return internalRemoveData(elem,name,true);
	}});


	jQuery.fn.extend({
	data:function data(key,value){
	var i,name,data,
	elem=this[0],
	attrs=elem&&elem.attributes;

	// Special expections of .data basically thwart jQuery.access,
	// so implement the relevant behavior ourselves

	// Gets all values
	if(key===undefined){
	if(this.length){
	data=jQuery.data(elem);

	if(elem.nodeType===1&&!jQuery._data(elem,"parsedAttrs")){
	i=attrs.length;
	while(i--){

	// Support: IE11+
	// The attrs elements can be null (#14894)
	if(attrs[i]){
	name=attrs[i].name;
	if(name.indexOf("data-")===0){
	name=jQuery.camelCase(name.slice(5));
	dataAttr(elem,name,data[name]);
	}
	}
	}
	jQuery._data(elem,"parsedAttrs",true);
	}
	}

	return data;
	}

	// Sets multiple values
	if((typeof key==="undefined"?"undefined":_typeof(key))==="object"){
	return this.each(function(){
	jQuery.data(this,key);
	});
	}

	return arguments.length>1?

	// Sets one value
	this.each(function(){
	jQuery.data(this,key,value);
	}):

	// Gets one value
	// Try to fetch any internally stored data first
	elem?dataAttr(elem,key,jQuery.data(elem,key)):undefined;
	},

	removeData:function removeData(key){
	return this.each(function(){
	jQuery.removeData(this,key);
	});
	}});



	jQuery.extend({
	queue:function queue(elem,type,data){
	var queue;

	if(elem){
	type=(type||"fx")+"queue";
	queue=jQuery._data(elem,type);

	// Speed up dequeue by getting out quickly if this is just a lookup
	if(data){
	if(!queue||jQuery.isArray(data)){
	queue=jQuery._data(elem,type,jQuery.makeArray(data));
	}else{
	queue.push(data);
	}
	}
	return queue||[];
	}
	},

	dequeue:function dequeue(elem,type){
	type=type||"fx";

	var queue=jQuery.queue(elem,type),
	startLength=queue.length,
	fn=queue.shift(),
	hooks=jQuery._queueHooks(elem,type),
	next=function next(){
	jQuery.dequeue(elem,type);
	};

	// If the fx queue is dequeued, always remove the progress sentinel
	if(fn==="inprogress"){
	fn=queue.shift();
	startLength--;
	}

	if(fn){

	// Add a progress sentinel to prevent the fx queue from being
	// automatically dequeued
	if(type==="fx"){
	queue.unshift("inprogress");
	}

	// clear up the last queue stop function
	delete hooks.stop;
	fn.call(elem,next,hooks);
	}

	if(!startLength&&hooks){
	hooks.empty.fire();
	}
	},

	// not intended for public consumption - generates a queueHooks object,
	// or returns the current one
	_queueHooks:function _queueHooks(elem,type){
	var key=type+"queueHooks";
	return jQuery._data(elem,key)||jQuery._data(elem,key,{
	empty:jQuery.Callbacks("once memory").add(function(){
	jQuery._removeData(elem,type+"queue");
	jQuery._removeData(elem,key);
	})});

	}});


	jQuery.fn.extend({
	queue:function queue(type,data){
	var setter=2;

	if(typeof type!=="string"){
	data=type;
	type="fx";
	setter--;
	}

	if(arguments.length<setter){
	return jQuery.queue(this[0],type);
	}

	return data===undefined?
	this:
	this.each(function(){
	var queue=jQuery.queue(this,type,data);

	// ensure a hooks for this queue
	jQuery._queueHooks(this,type);

	if(type==="fx"&&queue[0]!=="inprogress"){
	jQuery.dequeue(this,type);
	}
	});
	},
	dequeue:function dequeue(type){
	return this.each(function(){
	jQuery.dequeue(this,type);
	});
	},
	clearQueue:function clearQueue(type){
	return this.queue(type||"fx",[]);
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise:function promise(type,obj){
	var tmp,
	count=1,
	defer=jQuery.Deferred(),
	elements=this,
	i=this.length,
	resolve=function resolve(){
	if(! --count){
	defer.resolveWith(elements,[elements]);
	}
	};

	if(typeof type!=="string"){
	obj=type;
	type=undefined;
	}
	type=type||"fx";

	while(i--){
	tmp=jQuery._data(elements[i],type+"queueHooks");
	if(tmp&&tmp.empty){
	count++;
	tmp.empty.add(resolve);
	}
	}
	resolve();
	return defer.promise(obj);
	}});



	(function(){
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks=function(){
	if(shrinkWrapBlocksVal!=null){
	return shrinkWrapBlocksVal;
	}

	// Will be changed later if needed.
	shrinkWrapBlocksVal=false;

	// Minified: var b,c,d
	var div,body,container;

	body=document.getElementsByTagName("body")[0];
	if(!body||!body.style){

	// Test fired too early or in an unsupported environment, exit.
	return;
	}

	// Setup
	div=document.createElement("div");
	container=document.createElement("div");
	container.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild(container).appendChild(div);

	// Support: IE6
	// Check if elements with layout shrink-wrap their children
	if(typeof div.style.zoom!=="undefined"){

	// Reset CSS: box-sizing; display; margin; border
	div.style.cssText=

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;"+
	"box-sizing:content-box;display:block;margin:0;border:0;"+
	"padding:1px;width:1px;zoom:1";
	div.appendChild(document.createElement("div")).style.width="5px";
	shrinkWrapBlocksVal=div.offsetWidth!==3;
	}

	body.removeChild(container);

	return shrinkWrapBlocksVal;
	};

	})();
	var pnum=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var rcssNum=new RegExp("^(?:([+-])=|)("+pnum+")([a-z%]*)$","i");


	var cssExpand=["Top","Right","Bottom","Left"];

	var isHidden=function isHidden(elem,el){

	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem=el||elem;
	return jQuery.css(elem,"display")==="none"||
	!jQuery.contains(elem.ownerDocument,elem);
	};



	function adjustCSS(elem,prop,valueParts,tween){
	var adjusted,
	scale=1,
	maxIterations=20,
	currentValue=tween?
	function(){return tween.cur();}:
	function(){return jQuery.css(elem,prop,"");},
	initial=currentValue(),
	unit=valueParts&&valueParts[3]||(jQuery.cssNumber[prop]?"":"px"),

	// Starting value computation is required for potential unit mismatches
	initialInUnit=(jQuery.cssNumber[prop]||unit!=="px"&&+initial)&&
	rcssNum.exec(jQuery.css(elem,prop));

	if(initialInUnit&&initialInUnit[3]!==unit){

	// Trust units reported by jQuery.css
	unit=unit||initialInUnit[3];

	// Make sure we update the tween properties later on
	valueParts=valueParts||[];

	// Iteratively approximate from a nonzero starting point
	initialInUnit=+initial||1;

	do{

	// If previous iteration zeroed out, double until we get *something*.
	// Use string for doubling so we don't accidentally see scale as unchanged below
	scale=scale||".5";

	// Adjust and apply
	initialInUnit=initialInUnit/scale;
	jQuery.style(elem,prop,initialInUnit+unit);

	// Update scale, tolerating zero or NaN from tween.cur()
	// Break the loop if scale is unchanged or perfect, or if we've just had enough.
	}while(
	scale!==(scale=currentValue()/initial)&&scale!==1&&--maxIterations);

	}

	if(valueParts){
	initialInUnit=+initialInUnit||+initial||0;

	// Apply relative offset (+=/-=) if specified
	adjusted=valueParts[1]?
	initialInUnit+(valueParts[1]+1)*valueParts[2]:
	+valueParts[2];
	if(tween){
	tween.unit=unit;
	tween.start=initialInUnit;
	tween.end=adjusted;
	}
	}
	return adjusted;
	}


	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access=function access(elems,fn,key,value,chainable,emptyGet,raw){
	var i=0,
	length=elems.length,
	bulk=key==null;

	// Sets many values
	if(jQuery.type(key)==="object"){
	chainable=true;
	for(i in key){
	access(elems,fn,i,key[i],true,emptyGet,raw);
	}

	// Sets one value
	}else if(value!==undefined){
	chainable=true;

	if(!jQuery.isFunction(value)){
	raw=true;
	}

	if(bulk){

	// Bulk operations run against the entire set
	if(raw){
	fn.call(elems,value);
	fn=null;

	// ...except when executing function values
	}else{
	bulk=fn;
	fn=function fn(elem,key,value){
	return bulk.call(jQuery(elem),value);
	};
	}
	}

	if(fn){
	for(;i<length;i++){
	fn(
	elems[i],
	key,
	raw?value:value.call(elems[i],i,fn(elems[i],key)));

	}
	}
	}

	return chainable?
	elems:

	// Gets
	bulk?
	fn.call(elems):
	length?fn(elems[0],key):emptyGet;
	};
	var rcheckableType=/^(?:checkbox|radio)$/i;

	var rtagName=/<([\w:-]+)/;

	var rscriptType=/^$|\/(?:java|ecma)script/i;

	var rleadingWhitespace=/^\s+/;

	var nodeNames="abbr|article|aside|audio|bdi|canvas|data|datalist|"+
	"details|dialog|figcaption|figure|footer|header|hgroup|main|"+
	"mark|meter|nav|output|picture|progress|section|summary|template|time|video";



	function createSafeFragment(document){
	var list=nodeNames.split("|"),
	safeFrag=document.createDocumentFragment();

	if(safeFrag.createElement){
	while(list.length){
	safeFrag.createElement(
	list.pop());

	}
	}
	return safeFrag;
	}


	(function(){
	var div=document.createElement("div"),
	fragment=document.createDocumentFragment(),
	input=document.createElement("input");

	// Setup
	div.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace=div.firstChild.nodeType===3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody=!div.getElementsByTagName("tbody").length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize=!!div.getElementsByTagName("link").length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone=
	document.createElement("nav").cloneNode(true).outerHTML!=="<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type="checkbox";
	input.checked=true;
	fragment.appendChild(input);
	support.appendChecked=input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML="<textarea>x</textarea>";
	support.noCloneChecked=!!div.cloneNode(true).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild(div);

	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input=document.createElement("input");
	input.setAttribute("type","radio");
	input.setAttribute("checked","checked");
	input.setAttribute("name","t");

	div.appendChild(input);

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone=div.cloneNode(true).cloneNode(true).lastChild.checked;

	// Support: IE<9
	// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
	support.noCloneEvent=!!div.addEventListener;

	// Support: IE<9
	// Since attributes and properties are the same in IE,
	// cleanData must set properties to undefined rather than use removeAttribute
	div[jQuery.expando]=1;
	support.attributes=!div.getAttribute(jQuery.expando);
	})();


	// We have to close these tags to support XHTML (#13200)
	var wrapMap={
	option:[1,"<select multiple='multiple'>","</select>"],
	legend:[1,"<fieldset>","</fieldset>"],
	area:[1,"<map>","</map>"],

	// Support: IE8
	param:[1,"<object>","</object>"],
	thead:[1,"<table>","</table>"],
	tr:[2,"<table><tbody>","</tbody></table>"],
	col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],
	td:[3,"<table><tbody><tr>","</tr></tbody></table>"],

	// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
	// unless wrapped in a div with non-breaking characters in front of it.
	_default:support.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};


	// Support: IE8-IE9
	wrapMap.optgroup=wrapMap.option;

	wrapMap.tbody=wrapMap.tfoot=wrapMap.colgroup=wrapMap.caption=wrapMap.thead;
	wrapMap.th=wrapMap.td;


	function getAll(context,tag){
	var elems,elem,
	i=0,
	found=typeof context.getElementsByTagName!=="undefined"?
	context.getElementsByTagName(tag||"*"):
	typeof context.querySelectorAll!=="undefined"?
	context.querySelectorAll(tag||"*"):
	undefined;

	if(!found){
	for(found=[],elems=context.childNodes||context;
	(elem=elems[i])!=null;
	i++)
	{
	if(!tag||jQuery.nodeName(elem,tag)){
	found.push(elem);
	}else{
	jQuery.merge(found,getAll(elem,tag));
	}
	}
	}

	return tag===undefined||tag&&jQuery.nodeName(context,tag)?
	jQuery.merge([context],found):
	found;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval(elems,refElements){
	var elem,
	i=0;
	for(;(elem=elems[i])!=null;i++){
	jQuery._data(
	elem,
	"globalEval",
	!refElements||jQuery._data(refElements[i],"globalEval"));

	}
	}


	var rhtml=/<|&#?\w+;/,
	rtbody=/<tbody/i;

	function fixDefaultChecked(elem){
	if(rcheckableType.test(elem.type)){
	elem.defaultChecked=elem.checked;
	}
	}

	function buildFragment(elems,context,scripts,selection,ignored){
	var j,elem,contains,
	tmp,tag,tbody,wrap,
	l=elems.length,

	// Ensure a safe fragment
	safe=createSafeFragment(context),

	nodes=[],
	i=0;

	for(;i<l;i++){
	elem=elems[i];

	if(elem||elem===0){

	// Add nodes directly
	if(jQuery.type(elem)==="object"){
	jQuery.merge(nodes,elem.nodeType?[elem]:elem);

	// Convert non-html into a text node
	}else if(!rhtml.test(elem)){
	nodes.push(context.createTextNode(elem));

	// Convert html into DOM nodes
	}else{
	tmp=tmp||safe.appendChild(context.createElement("div"));

	// Deserialize a standard representation
	tag=(rtagName.exec(elem)||["",""])[1].toLowerCase();
	wrap=wrapMap[tag]||wrapMap._default;

	tmp.innerHTML=wrap[1]+jQuery.htmlPrefilter(elem)+wrap[2];

	// Descend through wrappers to the right content
	j=wrap[0];
	while(j--){
	tmp=tmp.lastChild;
	}

	// Manually add leading whitespace removed by IE
	if(!support.leadingWhitespace&&rleadingWhitespace.test(elem)){
	nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
	}

	// Remove IE's autoinserted <tbody> from table fragments
	if(!support.tbody){

	// String was a <table>, *may* have spurious <tbody>
	elem=tag==="table"&&!rtbody.test(elem)?
	tmp.firstChild:

	// String was a bare <thead> or <tfoot>
	wrap[1]==="<table>"&&!rtbody.test(elem)?
	tmp:
	0;

	j=elem&&elem.childNodes.length;
	while(j--){
	if(jQuery.nodeName(tbody=elem.childNodes[j],"tbody")&&
	!tbody.childNodes.length){

	elem.removeChild(tbody);
	}
	}
	}

	jQuery.merge(nodes,tmp.childNodes);

	// Fix #12392 for WebKit and IE > 9
	tmp.textContent="";

	// Fix #12392 for oldIE
	while(tmp.firstChild){
	tmp.removeChild(tmp.firstChild);
	}

	// Remember the top-level container for proper cleanup
	tmp=safe.lastChild;
	}
	}
	}

	// Fix #11356: Clear elements from fragment
	if(tmp){
	safe.removeChild(tmp);
	}

	// Reset defaultChecked for any radios and checkboxes
	// about to be appended to the DOM in IE 6/7 (#8060)
	if(!support.appendChecked){
	jQuery.grep(getAll(nodes,"input"),fixDefaultChecked);
	}

	i=0;
	while(elem=nodes[i++]){

	// Skip elements already in the context collection (trac-4087)
	if(selection&&jQuery.inArray(elem,selection)>-1){
	if(ignored){
	ignored.push(elem);
	}

	continue;
	}

	contains=jQuery.contains(elem.ownerDocument,elem);

	// Append to fragment
	tmp=getAll(safe.appendChild(elem),"script");

	// Preserve script evaluation history
	if(contains){
	setGlobalEval(tmp);
	}

	// Capture executables
	if(scripts){
	j=0;
	while(elem=tmp[j++]){
	if(rscriptType.test(elem.type||"")){
	scripts.push(elem);
	}
	}
	}
	}

	tmp=null;

	return safe;
	}


	(function(){
	var i,eventName,
	div=document.createElement("div");

	// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
	for(i in{submit:true,change:true,focusin:true}){
	eventName="on"+i;

	if(!(support[i]=eventName in window)){

	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
	div.setAttribute(eventName,"t");
	support[i]=div.attributes[eventName].expando===false;
	}
	}

	// Null elements to avoid leaks in IE.
	div=null;
	})();


	var rformElems=/^(?:input|select|textarea)$/i,
	rkeyEvent=/^key/,
	rmouseEvent=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rfocusMorph=/^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace=/^([^.]*)(?:\.(.+)|)/;

	function returnTrue(){
	return true;
	}

	function returnFalse(){
	return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement(){
	try{
	return document.activeElement;
	}catch(err){}
	}

	function _on(elem,types,selector,data,fn,one){
	var origFn,type;

	// Types can be a map of types/handlers
	if((typeof types==="undefined"?"undefined":_typeof(types))==="object"){

	// ( types-Object, selector, data )
	if(typeof selector!=="string"){

	// ( types-Object, data )
	data=data||selector;
	selector=undefined;
	}
	for(type in types){
	_on(elem,type,selector,data,types[type],one);
	}
	return elem;
	}

	if(data==null&&fn==null){

	// ( types, fn )
	fn=selector;
	data=selector=undefined;
	}else if(fn==null){
	if(typeof selector==="string"){

	// ( types, selector, fn )
	fn=data;
	data=undefined;
	}else{

	// ( types, data, fn )
	fn=data;
	data=selector;
	selector=undefined;
	}
	}
	if(fn===false){
	fn=returnFalse;
	}else if(!fn){
	return elem;
	}

	if(one===1){
	origFn=fn;
	fn=function fn(event){

	// Can use an empty set, since event contains the info
	jQuery().off(event);
	return origFn.apply(this,arguments);
	};

	// Use same guid so caller can remove using origFn
	fn.guid=origFn.guid||(origFn.guid=jQuery.guid++);
	}
	return elem.each(function(){
	jQuery.event.add(this,types,fn,data,selector);
	});
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event={

	global:{},

	add:function add(elem,types,handler,data,selector){
	var tmp,events,t,handleObjIn,
	special,eventHandle,handleObj,
	handlers,type,namespaces,origType,
	elemData=jQuery._data(elem);

	// Don't attach events to noData or text/comment nodes (but allow plain objects)
	if(!elemData){
	return;
	}

	// Caller can pass in an object of custom data in lieu of the handler
	if(handler.handler){
	handleObjIn=handler;
	handler=handleObjIn.handler;
	selector=handleObjIn.selector;
	}

	// Make sure that the handler has a unique ID, used to find/remove it later
	if(!handler.guid){
	handler.guid=jQuery.guid++;
	}

	// Init the element's event structure and main handler, if this is the first
	if(!(events=elemData.events)){
	events=elemData.events={};
	}
	if(!(eventHandle=elemData.handle)){
	eventHandle=elemData.handle=function(e){

	// Discard the second event of a jQuery.event.trigger() and
	// when an event is called after a page has unloaded
	return typeof jQuery!=="undefined"&&(
	!e||jQuery.event.triggered!==e.type)?
	jQuery.event.dispatch.apply(eventHandle.elem,arguments):
	undefined;
	};

	// Add elem as a property of the handle fn to prevent a memory leak
	// with IE non-native events
	eventHandle.elem=elem;
	}

	// Handle multiple events separated by a space
	types=(types||"").match(rnotwhite)||[""];
	t=types.length;
	while(t--){
	tmp=rtypenamespace.exec(types[t])||[];
	type=origType=tmp[1];
	namespaces=(tmp[2]||"").split(".").sort();

	// There *must* be a type, no attaching namespace-only handlers
	if(!type){
	continue;
	}

	// If event changes its type, use the special event handlers for the changed type
	special=jQuery.event.special[type]||{};

	// If selector defined, determine special event api type, otherwise given type
	type=(selector?special.delegateType:special.bindType)||type;

	// Update special based on newly reset type
	special=jQuery.event.special[type]||{};

	// handleObj is passed to all event handlers
	handleObj=jQuery.extend({
	type:type,
	origType:origType,
	data:data,
	handler:handler,
	guid:handler.guid,
	selector:selector,
	needsContext:selector&&jQuery.expr.match.needsContext.test(selector),
	namespace:namespaces.join(".")},
	handleObjIn);

	// Init the event handler queue if we're the first
	if(!(handlers=events[type])){
	handlers=events[type]=[];
	handlers.delegateCount=0;

	// Only use addEventListener/attachEvent if the special events handler returns false
	if(!special.setup||
	special.setup.call(elem,data,namespaces,eventHandle)===false){

	// Bind the global event handler to the element
	if(elem.addEventListener){
	elem.addEventListener(type,eventHandle,false);

	}else if(elem.attachEvent){
	elem.attachEvent("on"+type,eventHandle);
	}
	}
	}

	if(special.add){
	special.add.call(elem,handleObj);

	if(!handleObj.handler.guid){
	handleObj.handler.guid=handler.guid;
	}
	}

	// Add to the element's handler list, delegates in front
	if(selector){
	handlers.splice(handlers.delegateCount++,0,handleObj);
	}else{
	handlers.push(handleObj);
	}

	// Keep track of which events have ever been used, for event optimization
	jQuery.event.global[type]=true;
	}

	// Nullify elem to prevent memory leaks in IE
	elem=null;
	},

	// Detach an event or set of events from an element
	remove:function remove(elem,types,handler,selector,mappedTypes){
	var j,handleObj,tmp,
	origCount,t,events,
	special,handlers,type,
	namespaces,origType,
	elemData=jQuery.hasData(elem)&&jQuery._data(elem);

	if(!elemData||!(events=elemData.events)){
	return;
	}

	// Once for each type.namespace in types; type may be omitted
	types=(types||"").match(rnotwhite)||[""];
	t=types.length;
	while(t--){
	tmp=rtypenamespace.exec(types[t])||[];
	type=origType=tmp[1];
	namespaces=(tmp[2]||"").split(".").sort();

	// Unbind all events (on this namespace, if provided) for the element
	if(!type){
	for(type in events){
	jQuery.event.remove(elem,type+types[t],handler,selector,true);
	}
	continue;
	}

	special=jQuery.event.special[type]||{};
	type=(selector?special.delegateType:special.bindType)||type;
	handlers=events[type]||[];
	tmp=tmp[2]&&
	new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)");

	// Remove matching events
	origCount=j=handlers.length;
	while(j--){
	handleObj=handlers[j];

	if((mappedTypes||origType===handleObj.origType)&&(
	!handler||handler.guid===handleObj.guid)&&(
	!tmp||tmp.test(handleObj.namespace))&&(
	!selector||selector===handleObj.selector||
	selector==="**"&&handleObj.selector)){
	handlers.splice(j,1);

	if(handleObj.selector){
	handlers.delegateCount--;
	}
	if(special.remove){
	special.remove.call(elem,handleObj);
	}
	}
	}

	// Remove generic event handler if we removed something and no more handlers exist
	// (avoids potential for endless recursion during removal of special event handlers)
	if(origCount&&!handlers.length){
	if(!special.teardown||
	special.teardown.call(elem,namespaces,elemData.handle)===false){

	jQuery.removeEvent(elem,type,elemData.handle);
	}

	delete events[type];
	}
	}

	// Remove the expando if it's no longer used
	if(jQuery.isEmptyObject(events)){
	delete elemData.handle;

	// removeData also checks for emptiness and clears the expando if empty
	// so use it instead of delete
	jQuery._removeData(elem,"events");
	}
	},

	trigger:function trigger(event,data,elem,onlyHandlers){
	var handle,ontype,cur,
	bubbleType,special,tmp,i,
	eventPath=[elem||document],
	type=hasOwn.call(event,"type")?event.type:event,
	namespaces=hasOwn.call(event,"namespace")?event.namespace.split("."):[];

	cur=tmp=elem=elem||document;

	// Don't do events on text and comment nodes
	if(elem.nodeType===3||elem.nodeType===8){
	return;
	}

	// focus/blur morphs to focusin/out; ensure we're not firing them right now
	if(rfocusMorph.test(type+jQuery.event.triggered)){
	return;
	}

	if(type.indexOf(".")>-1){

	// Namespaced trigger; create a regexp to match event type in handle()
	namespaces=type.split(".");
	type=namespaces.shift();
	namespaces.sort();
	}
	ontype=type.indexOf(":")<0&&"on"+type;

	// Caller can pass in a jQuery.Event object, Object, or just an event type string
	event=event[jQuery.expando]?
	event:
	new jQuery.Event(type,(typeof event==="undefined"?"undefined":_typeof(event))==="object"&&event);

	// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
	event.isTrigger=onlyHandlers?2:3;
	event.namespace=namespaces.join(".");
	event.rnamespace=event.namespace?
	new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)"):
	null;

	// Clean up the event in case it is being reused
	event.result=undefined;
	if(!event.target){
	event.target=elem;
	}

	// Clone any incoming data and prepend the event, creating the handler arg list
	data=data==null?
	[event]:
	jQuery.makeArray(data,[event]);

	// Allow special events to draw outside the lines
	special=jQuery.event.special[type]||{};
	if(!onlyHandlers&&special.trigger&&special.trigger.apply(elem,data)===false){
	return;
	}

	// Determine event propagation path in advance, per W3C events spec (#9951)
	// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
	if(!onlyHandlers&&!special.noBubble&&!jQuery.isWindow(elem)){

	bubbleType=special.delegateType||type;
	if(!rfocusMorph.test(bubbleType+type)){
	cur=cur.parentNode;
	}
	for(;cur;cur=cur.parentNode){
	eventPath.push(cur);
	tmp=cur;
	}

	// Only add window if we got to document (e.g., not plain obj or detached DOM)
	if(tmp===(elem.ownerDocument||document)){
	eventPath.push(tmp.defaultView||tmp.parentWindow||window);
	}
	}

	// Fire handlers on the event path
	i=0;
	while((cur=eventPath[i++])&&!event.isPropagationStopped()){

	event.type=i>1?
	bubbleType:
	special.bindType||type;

	// jQuery handler
	handle=(jQuery._data(cur,"events")||{})[event.type]&&
	jQuery._data(cur,"handle");

	if(handle){
	handle.apply(cur,data);
	}

	// Native handler
	handle=ontype&&cur[ontype];
	if(handle&&handle.apply&&acceptData(cur)){
	event.result=handle.apply(cur,data);
	if(event.result===false){
	event.preventDefault();
	}
	}
	}
	event.type=type;

	// If nobody prevented the default action, do it now
	if(!onlyHandlers&&!event.isDefaultPrevented()){

	if(
	(!special._default||
	special._default.apply(eventPath.pop(),data)===false)&&
	acceptData(elem))
	{

	// Call a native DOM method on the target with the same name name as the event.
	// Can't use an .isFunction() check here because IE6/7 fails that test.
	// Don't do default actions on window, that's where global variables be (#6170)
	if(ontype&&elem[type]&&!jQuery.isWindow(elem)){

	// Don't re-trigger an onFOO event when we call its FOO() method
	tmp=elem[ontype];

	if(tmp){
	elem[ontype]=null;
	}

	// Prevent re-triggering of the same event, since we already bubbled it above
	jQuery.event.triggered=type;
	try{
	elem[type]();
	}catch(e){

	// IE<9 dies on focus/blur to hidden element (#1486,#12518)
	// only reproducible on winXP IE8 native, not IE9 in IE8 mode
	}
	jQuery.event.triggered=undefined;

	if(tmp){
	elem[ontype]=tmp;
	}
	}
	}
	}

	return event.result;
	},

	dispatch:function dispatch(event){

	// Make a writable jQuery.Event from the native event object
	event=jQuery.event.fix(event);

	var i,j,ret,matched,handleObj,
	handlerQueue=[],
	args=_slice.call(arguments),
	handlers=(jQuery._data(this,"events")||{})[event.type]||[],
	special=jQuery.event.special[event.type]||{};

	// Use the fix-ed jQuery.Event rather than the (read-only) native event
	args[0]=event;
	event.delegateTarget=this;

	// Call the preDispatch hook for the mapped type, and let it bail if desired
	if(special.preDispatch&&special.preDispatch.call(this,event)===false){
	return;
	}

	// Determine handlers
	handlerQueue=jQuery.event.handlers.call(this,event,handlers);

	// Run delegates first; they may want to stop propagation beneath us
	i=0;
	while((matched=handlerQueue[i++])&&!event.isPropagationStopped()){
	event.currentTarget=matched.elem;

	j=0;
	while((handleObj=matched.handlers[j++])&&
	!event.isImmediatePropagationStopped()){

	// Triggered event must either 1) have no namespace, or 2) have namespace(s)
	// a subset or equal to those in the bound event (both can have no namespace).
	if(!event.rnamespace||event.rnamespace.test(handleObj.namespace)){

	event.handleObj=handleObj;
	event.data=handleObj.data;

	ret=((jQuery.event.special[handleObj.origType]||{}).handle||
	handleObj.handler).apply(matched.elem,args);

	if(ret!==undefined){
	if((event.result=ret)===false){
	event.preventDefault();
	event.stopPropagation();
	}
	}
	}
	}
	}

	// Call the postDispatch hook for the mapped type
	if(special.postDispatch){
	special.postDispatch.call(this,event);
	}

	return event.result;
	},

	handlers:function handlers(event,_handlers){
	var i,matches,sel,handleObj,
	handlerQueue=[],
	delegateCount=_handlers.delegateCount,
	cur=event.target;

	// Support (at least): Chrome, IE9
	// Find delegate handlers
	// Black-hole SVG <use> instance trees (#13180)
	//
	// Support: Firefox<=42+
	// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
	if(delegateCount&&cur.nodeType&&(
	event.type!=="click"||isNaN(event.button)||event.button<1)){

	/* jshint eqeqeq: false */
	for(;cur!=this;cur=cur.parentNode||this){
	/* jshint eqeqeq: true */

	// Don't check non-elements (#13208)
	// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
	if(cur.nodeType===1&&(cur.disabled!==true||event.type!=="click")){
	matches=[];
	for(i=0;i<delegateCount;i++){
	handleObj=_handlers[i];

	// Don't conflict with Object.prototype properties (#13203)
	sel=handleObj.selector+" ";

	if(matches[sel]===undefined){
	matches[sel]=handleObj.needsContext?
	jQuery(sel,this).index(cur)>-1:
	jQuery.find(sel,this,null,[cur]).length;
	}
	if(matches[sel]){
	matches.push(handleObj);
	}
	}
	if(matches.length){
	handlerQueue.push({elem:cur,handlers:matches});
	}
	}
	}
	}

	// Add the remaining (directly-bound) handlers
	if(delegateCount<_handlers.length){
	handlerQueue.push({elem:this,handlers:_handlers.slice(delegateCount)});
	}

	return handlerQueue;
	},

	fix:function fix(event){
	if(event[jQuery.expando]){
	return event;
	}

	// Create a writable copy of the event object and normalize some properties
	var i,prop,copy,
	type=event.type,
	originalEvent=event,
	fixHook=this.fixHooks[type];

	if(!fixHook){
	this.fixHooks[type]=fixHook=
	rmouseEvent.test(type)?this.mouseHooks:
	rkeyEvent.test(type)?this.keyHooks:
	{};
	}
	copy=fixHook.props?this.props.concat(fixHook.props):this.props;

	event=new jQuery.Event(originalEvent);

	i=copy.length;
	while(i--){
	prop=copy[i];
	event[prop]=originalEvent[prop];
	}

	// Support: IE<9
	// Fix target property (#1925)
	if(!event.target){
	event.target=originalEvent.srcElement||document;
	}

	// Support: Safari 6-8+
	// Target should not be a text node (#504, #13143)
	if(event.target.nodeType===3){
	event.target=event.target.parentNode;
	}

	// Support: IE<9
	// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
	event.metaKey=!!event.metaKey;

	return fixHook.filter?fixHook.filter(event,originalEvent):event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props:("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase "+
	"metaKey relatedTarget shiftKey target timeStamp view which").split(" "),

	fixHooks:{},

	keyHooks:{
	props:"char charCode key keyCode".split(" "),
	filter:function filter(event,original){

	// Add which for key events
	if(event.which==null){
	event.which=original.charCode!=null?original.charCode:original.keyCode;
	}

	return event;
	}},


	mouseHooks:{
	props:("button buttons clientX clientY fromElement offsetX offsetY "+
	"pageX pageY screenX screenY toElement").split(" "),
	filter:function filter(event,original){
	var body,eventDoc,doc,
	button=original.button,
	fromElement=original.fromElement;

	// Calculate pageX/Y if missing and clientX/Y available
	if(event.pageX==null&&original.clientX!=null){
	eventDoc=event.target.ownerDocument||document;
	doc=eventDoc.documentElement;
	body=eventDoc.body;

	event.pageX=original.clientX+(
	doc&&doc.scrollLeft||body&&body.scrollLeft||0)-(
	doc&&doc.clientLeft||body&&body.clientLeft||0);
	event.pageY=original.clientY+(
	doc&&doc.scrollTop||body&&body.scrollTop||0)-(
	doc&&doc.clientTop||body&&body.clientTop||0);
	}

	// Add relatedTarget, if necessary
	if(!event.relatedTarget&&fromElement){
	event.relatedTarget=fromElement===event.target?
	original.toElement:
	fromElement;
	}

	// Add which for click: 1 === left; 2 === middle; 3 === right
	// Note: button is not normalized, so don't use it
	if(!event.which&&button!==undefined){
	event.which=button&1?1:button&2?3:button&4?2:0;
	}

	return event;
	}},


	special:{
	load:{

	// Prevent triggered image.load events from bubbling to window.load
	noBubble:true},

	focus:{

	// Fire native event if possible so blur/focus sequence is correct
	trigger:function trigger(){
	if(this!==safeActiveElement()&&this.focus){
	try{
	this.focus();
	return false;
	}catch(e){

	// Support: IE<9
	// If we error on focus to hidden element (#1486, #12518),
	// let .trigger() run the handlers
	}
	}
	},
	delegateType:"focusin"},

	blur:{
	trigger:function trigger(){
	if(this===safeActiveElement()&&this.blur){
	this.blur();
	return false;
	}
	},
	delegateType:"focusout"},

	click:{

	// For checkbox, fire native event so checked state will be right
	trigger:function trigger(){
	if(jQuery.nodeName(this,"input")&&this.type==="checkbox"&&this.click){
	this.click();
	return false;
	}
	},

	// For cross-browser consistency, don't fire native .click() on links
	_default:function _default(event){
	return jQuery.nodeName(event.target,"a");
	}},


	beforeunload:{
	postDispatch:function postDispatch(event){

	// Support: Firefox 20+
	// Firefox doesn't alert if the returnValue field is not set.
	if(event.result!==undefined&&event.originalEvent){
	event.originalEvent.returnValue=event.result;
	}
	}}},



	// Piggyback on a donor event to simulate a different one
	simulate:function simulate(type,elem,event){
	var e=jQuery.extend(
	new jQuery.Event(),
	event,
	{
	type:type,
	isSimulated:true

	// Previously, `originalEvent: {}` was set here, so stopPropagation call
	// would not be triggered on donor event, since in our own
	// jQuery.event.stopPropagation function we had a check for existence of
	// originalEvent.stopPropagation method, so, consequently it would be a noop.
	//
	// Guard for simulated events was moved to jQuery.event.stopPropagation function
	// since `originalEvent` should point to the original event for the
	// constancy with other events and for more focused logic
	});


	jQuery.event.trigger(e,null,elem);

	if(e.isDefaultPrevented()){
	event.preventDefault();
	}
	}};


	jQuery.removeEvent=document.removeEventListener?
	function(elem,type,handle){

	// This "if" is needed for plain objects
	if(elem.removeEventListener){
	elem.removeEventListener(type,handle);
	}
	}:
	function(elem,type,handle){
	var name="on"+type;

	if(elem.detachEvent){

	// #8545, #7054, preventing memory leaks for custom events in IE6-8
	// detachEvent needed property on element, by name of that event,
	// to properly expose it to GC
	if(typeof elem[name]==="undefined"){
	elem[name]=null;
	}

	elem.detachEvent(name,handle);
	}
	};

	jQuery.Event=function(src,props){

	// Allow instantiation without the 'new' keyword
	if(!(this instanceof jQuery.Event)){
	return new jQuery.Event(src,props);
	}

	// Event object
	if(src&&src.type){
	this.originalEvent=src;
	this.type=src.type;

	// Events bubbling up the document may have been marked as prevented
	// by a handler lower down the tree; reflect the correct value.
	this.isDefaultPrevented=src.defaultPrevented||
	src.defaultPrevented===undefined&&

	// Support: IE < 9, Android < 4.0
	src.returnValue===false?
	returnTrue:
	returnFalse;

	// Event type
	}else{
	this.type=src;
	}

	// Put explicitly provided properties onto the event object
	if(props){
	jQuery.extend(this,props);
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp=src&&src.timeStamp||jQuery.now();

	// Mark it as fixed
	this[jQuery.expando]=true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype={
	constructor:jQuery.Event,
	isDefaultPrevented:returnFalse,
	isPropagationStopped:returnFalse,
	isImmediatePropagationStopped:returnFalse,

	preventDefault:function preventDefault(){
	var e=this.originalEvent;

	this.isDefaultPrevented=returnTrue;
	if(!e){
	return;
	}

	// If preventDefault exists, run it on the original event
	if(e.preventDefault){
	e.preventDefault();

	// Support: IE
	// Otherwise set the returnValue property of the original event to false
	}else{
	e.returnValue=false;
	}
	},
	stopPropagation:function stopPropagation(){
	var e=this.originalEvent;

	this.isPropagationStopped=returnTrue;

	if(!e||this.isSimulated){
	return;
	}

	// If stopPropagation exists, run it on the original event
	if(e.stopPropagation){
	e.stopPropagation();
	}

	// Support: IE
	// Set the cancelBubble property of the original event to true
	e.cancelBubble=true;
	},
	stopImmediatePropagation:function stopImmediatePropagation(){
	var e=this.originalEvent;

	this.isImmediatePropagationStopped=returnTrue;

	if(e&&e.stopImmediatePropagation){
	e.stopImmediatePropagation();
	}

	this.stopPropagation();
	}};


	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each({
	mouseenter:"mouseover",
	mouseleave:"mouseout",
	pointerenter:"pointerover",
	pointerleave:"pointerout"},
	function(orig,fix){
	jQuery.event.special[orig]={
	delegateType:fix,
	bindType:fix,

	handle:function handle(event){
	var ret,
	target=this,
	related=event.relatedTarget,
	handleObj=event.handleObj;

	// For mouseenter/leave call the handler if related is outside the target.
	// NB: No relatedTarget if the mouse left/entered the browser window
	if(!related||related!==target&&!jQuery.contains(target,related)){
	event.type=handleObj.origType;
	ret=handleObj.handler.apply(this,arguments);
	event.type=fix;
	}
	return ret;
	}};

	});

	// IE submit delegation
	if(!support.submit){

	jQuery.event.special.submit={
	setup:function setup(){

	// Only need this for delegated form submit events
	if(jQuery.nodeName(this,"form")){
	return false;
	}

	// Lazy-add a submit handler when a descendant form may potentially be submitted
	jQuery.event.add(this,"click._submit keypress._submit",function(e){

	// Node name check avoids a VML-related crash in IE (#9807)
	var elem=e.target,
	form=jQuery.nodeName(elem,"input")||jQuery.nodeName(elem,"button")?

	// Support: IE <=8
	// We use jQuery.prop instead of elem.form
	// to allow fixing the IE8 delegated submit issue (gh-2332)
	// by 3rd party polyfills/workarounds.
	jQuery.prop(elem,"form"):
	undefined;

	if(form&&!jQuery._data(form,"submit")){
	jQuery.event.add(form,"submit._submit",function(event){
	event._submitBubble=true;
	});
	jQuery._data(form,"submit",true);
	}
	});

	// return undefined since we don't need an event listener
	},

	postDispatch:function postDispatch(event){

	// If form was submitted by the user, bubble the event up the tree
	if(event._submitBubble){
	delete event._submitBubble;
	if(this.parentNode&&!event.isTrigger){
	jQuery.event.simulate("submit",this.parentNode,event);
	}
	}
	},

	teardown:function teardown(){

	// Only need this for delegated form submit events
	if(jQuery.nodeName(this,"form")){
	return false;
	}

	// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
	jQuery.event.remove(this,"._submit");
	}};

	}

	// IE change delegation and checkbox/radio fix
	if(!support.change){

	jQuery.event.special.change={

	setup:function setup(){

	if(rformElems.test(this.nodeName)){

	// IE doesn't fire change on a check/radio until blur; trigger it on click
	// after a propertychange. Eat the blur-change in special.change.handle.
	// This still fires onchange a second time for check/radio after blur.
	if(this.type==="checkbox"||this.type==="radio"){
	jQuery.event.add(this,"propertychange._change",function(event){
	if(event.originalEvent.propertyName==="checked"){
	this._justChanged=true;
	}
	});
	jQuery.event.add(this,"click._change",function(event){
	if(this._justChanged&&!event.isTrigger){
	this._justChanged=false;
	}

	// Allow triggered, simulated change events (#11500)
	jQuery.event.simulate("change",this,event);
	});
	}
	return false;
	}

	// Delegated event; lazy-add a change handler on descendant inputs
	jQuery.event.add(this,"beforeactivate._change",function(e){
	var elem=e.target;

	if(rformElems.test(elem.nodeName)&&!jQuery._data(elem,"change")){
	jQuery.event.add(elem,"change._change",function(event){
	if(this.parentNode&&!event.isSimulated&&!event.isTrigger){
	jQuery.event.simulate("change",this.parentNode,event);
	}
	});
	jQuery._data(elem,"change",true);
	}
	});
	},

	handle:function handle(event){
	var elem=event.target;

	// Swallow native change events from checkbox/radio, we already triggered them above
	if(this!==elem||event.isSimulated||event.isTrigger||
	elem.type!=="radio"&&elem.type!=="checkbox"){

	return event.handleObj.handler.apply(this,arguments);
	}
	},

	teardown:function teardown(){
	jQuery.event.remove(this,"._change");

	return!rformElems.test(this.nodeName);
	}};

	}

	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if(!support.focusin){
	jQuery.each({focus:"focusin",blur:"focusout"},function(orig,fix){

	// Attach a single capturing handler on the document while someone wants focusin/focusout
	var handler=function handler(event){
	jQuery.event.simulate(fix,event.target,jQuery.event.fix(event));
	};

	jQuery.event.special[fix]={
	setup:function setup(){
	var doc=this.ownerDocument||this,
	attaches=jQuery._data(doc,fix);

	if(!attaches){
	doc.addEventListener(orig,handler,true);
	}
	jQuery._data(doc,fix,(attaches||0)+1);
	},
	teardown:function teardown(){
	var doc=this.ownerDocument||this,
	attaches=jQuery._data(doc,fix)-1;

	if(!attaches){
	doc.removeEventListener(orig,handler,true);
	jQuery._removeData(doc,fix);
	}else{
	jQuery._data(doc,fix,attaches);
	}
	}};

	});
	}

	jQuery.fn.extend({

	on:function on(types,selector,data,fn){
	return _on(this,types,selector,data,fn);
	},
	one:function one(types,selector,data,fn){
	return _on(this,types,selector,data,fn,1);
	},
	off:function off(types,selector,fn){
	var handleObj,type;
	if(types&&types.preventDefault&&types.handleObj){

	// ( event )  dispatched jQuery.Event
	handleObj=types.handleObj;
	jQuery(types.delegateTarget).off(
	handleObj.namespace?
	handleObj.origType+"."+handleObj.namespace:
	handleObj.origType,
	handleObj.selector,
	handleObj.handler);

	return this;
	}
	if((typeof types==="undefined"?"undefined":_typeof(types))==="object"){

	// ( types-object [, selector] )
	for(type in types){
	this.off(type,selector,types[type]);
	}
	return this;
	}
	if(selector===false||typeof selector==="function"){

	// ( types [, fn] )
	fn=selector;
	selector=undefined;
	}
	if(fn===false){
	fn=returnFalse;
	}
	return this.each(function(){
	jQuery.event.remove(this,types,fn,selector);
	});
	},

	trigger:function trigger(type,data){
	return this.each(function(){
	jQuery.event.trigger(type,data,this);
	});
	},
	triggerHandler:function triggerHandler(type,data){
	var elem=this[0];
	if(elem){
	return jQuery.event.trigger(type,data,elem,true);
	}
	}});



	var rinlinejQuery=/ jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache=new RegExp("<(?:"+nodeNames+")[\\s/>]","i"),
	rxhtmlTag=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml=/<script|<style|<link/i,

	// checked="checked" or checked
	rchecked=/checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked=/^true\/(.*)/,
	rcleanScript=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
	safeFragment=createSafeFragment(document),
	fragmentDiv=safeFragment.appendChild(document.createElement("div"));

	// Support: IE<8
	// Manipulating tables requires a tbody
	function manipulationTarget(elem,content){
	return jQuery.nodeName(elem,"table")&&
	jQuery.nodeName(content.nodeType!==11?content:content.firstChild,"tr")?

	elem.getElementsByTagName("tbody")[0]||
	elem.appendChild(elem.ownerDocument.createElement("tbody")):
	elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript(elem){
	elem.type=(jQuery.find.attr(elem,"type")!==null)+"/"+elem.type;
	return elem;
	}
	function restoreScript(elem){
	var match=rscriptTypeMasked.exec(elem.type);
	if(match){
	elem.type=match[1];
	}else{
	elem.removeAttribute("type");
	}
	return elem;
	}

	function cloneCopyEvent(src,dest){
	if(dest.nodeType!==1||!jQuery.hasData(src)){
	return;
	}

	var type,i,l,
	oldData=jQuery._data(src),
	curData=jQuery._data(dest,oldData),
	events=oldData.events;

	if(events){
	delete curData.handle;
	curData.events={};

	for(type in events){
	for(i=0,l=events[type].length;i<l;i++){
	jQuery.event.add(dest,type,events[type][i]);
	}
	}
	}

	// make the cloned public data object a copy from the original
	if(curData.data){
	curData.data=jQuery.extend({},curData.data);
	}
	}

	function fixCloneNodeIssues(src,dest){
	var nodeName,e,data;

	// We do not need to do anything for non-Elements
	if(dest.nodeType!==1){
	return;
	}

	nodeName=dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if(!support.noCloneEvent&&dest[jQuery.expando]){
	data=jQuery._data(dest);

	for(e in data.events){
	jQuery.removeEvent(dest,e,data.handle);
	}

	// Event data gets referenced instead of copied if the expando gets copied too
	dest.removeAttribute(jQuery.expando);
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if(nodeName==="script"&&dest.text!==src.text){
	disableScript(dest).text=src.text;
	restoreScript(dest);

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	}else if(nodeName==="object"){
	if(dest.parentNode){
	dest.outerHTML=src.outerHTML;
	}

	// This path appears unavoidable for IE9. When cloning an object
	// element in IE9, the outerHTML strategy above is not sufficient.
	// If the src has innerHTML and the destination does not,
	// copy the src.innerHTML into the dest.innerHTML. #10324
	if(support.html5Clone&&src.innerHTML&&!jQuery.trim(dest.innerHTML)){
	dest.innerHTML=src.innerHTML;
	}

	}else if(nodeName==="input"&&rcheckableType.test(src.type)){

	// IE6-8 fails to persist the checked state of a cloned checkbox
	// or radio button. Worse, IE6-7 fail to give the cloned element
	// a checked appearance if the defaultChecked value isn't also set

	dest.defaultChecked=dest.checked=src.checked;

	// IE6-7 get confused and end up setting the value of a cloned
	// checkbox/radio button to an empty string instead of "on"
	if(dest.value!==src.value){
	dest.value=src.value;
	}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	}else if(nodeName==="option"){
	dest.defaultSelected=dest.selected=src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	}else if(nodeName==="input"||nodeName==="textarea"){
	dest.defaultValue=src.defaultValue;
	}
	}

	function domManip(collection,args,callback,ignored){

	// Flatten any nested arrays
	args=concat.apply([],args);

	var first,node,hasScripts,
	scripts,doc,fragment,
	i=0,
	l=collection.length,
	iNoClone=l-1,
	value=args[0],
	isFunction=jQuery.isFunction(value);

	// We can't cloneNode fragments that contain checked, in WebKit
	if(isFunction||
	l>1&&typeof value==="string"&&
	!support.checkClone&&rchecked.test(value)){
	return collection.each(function(index){
	var self=collection.eq(index);
	if(isFunction){
	args[0]=value.call(this,index,self.html());
	}
	domManip(self,args,callback,ignored);
	});
	}

	if(l){
	fragment=buildFragment(args,collection[0].ownerDocument,false,collection,ignored);
	first=fragment.firstChild;

	if(fragment.childNodes.length===1){
	fragment=first;
	}

	// Require either new content or an interest in ignored elements to invoke the callback
	if(first||ignored){
	scripts=jQuery.map(getAll(fragment,"script"),disableScript);
	hasScripts=scripts.length;

	// Use the original fragment for the last item
	// instead of the first because it can end up
	// being emptied incorrectly in certain situations (#8070).
	for(;i<l;i++){
	node=fragment;

	if(i!==iNoClone){
	node=jQuery.clone(node,true,true);

	// Keep references to cloned scripts for later restoration
	if(hasScripts){

	// Support: Android<4.1, PhantomJS<2
	// push.apply(_, arraylike) throws on ancient WebKit
	jQuery.merge(scripts,getAll(node,"script"));
	}
	}

	callback.call(collection[i],node,i);
	}

	if(hasScripts){
	doc=scripts[scripts.length-1].ownerDocument;

	// Reenable scripts
	jQuery.map(scripts,restoreScript);

	// Evaluate executable scripts on first document insertion
	for(i=0;i<hasScripts;i++){
	node=scripts[i];
	if(rscriptType.test(node.type||"")&&
	!jQuery._data(node,"globalEval")&&
	jQuery.contains(doc,node)){

	if(node.src){

	// Optional AJAX dependency, but won't run scripts if not present
	if(jQuery._evalUrl){
	jQuery._evalUrl(node.src);
	}
	}else{
	jQuery.globalEval(
	(node.text||node.textContent||node.innerHTML||"").
	replace(rcleanScript,""));

	}
	}
	}
	}

	// Fix #11809: Avoid leaking memory
	fragment=first=null;
	}
	}

	return collection;
	}

	function _remove(elem,selector,keepData){
	var node,
	elems=selector?jQuery.filter(selector,elem):elem,
	i=0;

	for(;(node=elems[i])!=null;i++){

	if(!keepData&&node.nodeType===1){
	jQuery.cleanData(getAll(node));
	}

	if(node.parentNode){
	if(keepData&&jQuery.contains(node.ownerDocument,node)){
	setGlobalEval(getAll(node,"script"));
	}
	node.parentNode.removeChild(node);
	}
	}

	return elem;
	}

	jQuery.extend({
	htmlPrefilter:function htmlPrefilter(html){
	return html.replace(rxhtmlTag,"<$1></$2>");
	},

	clone:function clone(elem,dataAndEvents,deepDataAndEvents){
	var destElements,node,clone,i,srcElements,
	inPage=jQuery.contains(elem.ownerDocument,elem);

	if(support.html5Clone||jQuery.isXMLDoc(elem)||
	!rnoshimcache.test("<"+elem.nodeName+">")){

	clone=elem.cloneNode(true);

	// IE<=8 does not properly clone detached, unknown element nodes
	}else{
	fragmentDiv.innerHTML=elem.outerHTML;
	fragmentDiv.removeChild(clone=fragmentDiv.firstChild);
	}

	if((!support.noCloneEvent||!support.noCloneChecked)&&(
	elem.nodeType===1||elem.nodeType===11)&&!jQuery.isXMLDoc(elem)){

	// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
	destElements=getAll(clone);
	srcElements=getAll(elem);

	// Fix all IE cloning issues
	for(i=0;(node=srcElements[i])!=null;++i){

	// Ensure that the destination node is not null; Fixes #9587
	if(destElements[i]){
	fixCloneNodeIssues(node,destElements[i]);
	}
	}
	}

	// Copy the events from the original to the clone
	if(dataAndEvents){
	if(deepDataAndEvents){
	srcElements=srcElements||getAll(elem);
	destElements=destElements||getAll(clone);

	for(i=0;(node=srcElements[i])!=null;i++){
	cloneCopyEvent(node,destElements[i]);
	}
	}else{
	cloneCopyEvent(elem,clone);
	}
	}

	// Preserve script evaluation history
	destElements=getAll(clone,"script");
	if(destElements.length>0){
	setGlobalEval(destElements,!inPage&&getAll(elem,"script"));
	}

	destElements=srcElements=node=null;

	// Return the cloned set
	return clone;
	},

	cleanData:function cleanData(elems,/* internal */forceAcceptData){
	var elem,type,id,data,
	i=0,
	internalKey=jQuery.expando,
	cache=jQuery.cache,
	attributes=support.attributes,
	special=jQuery.event.special;

	for(;(elem=elems[i])!=null;i++){
	if(forceAcceptData||acceptData(elem)){

	id=elem[internalKey];
	data=id&&cache[id];

	if(data){
	if(data.events){
	for(type in data.events){
	if(special[type]){
	jQuery.event.remove(elem,type);

	// This is a shortcut to avoid jQuery.event.remove's overhead
	}else{
	jQuery.removeEvent(elem,type,data.handle);
	}
	}
	}

	// Remove cache only if it was not already removed by jQuery.event.remove
	if(cache[id]){

	delete cache[id];

	// Support: IE<9
	// IE does not allow us to delete expando properties from nodes
	// IE creates expando attributes along with the property
	// IE does not have a removeAttribute function on Document nodes
	if(!attributes&&typeof elem.removeAttribute!=="undefined"){
	elem.removeAttribute(internalKey);

	// Webkit & Blink performance suffers when deleting properties
	// from DOM nodes, so set to undefined instead
	// https://code.google.com/p/chromium/issues/detail?id=378607
	}else{
	elem[internalKey]=undefined;
	}

	deletedIds.push(id);
	}
	}
	}
	}
	}});


	jQuery.fn.extend({

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip:domManip,

	detach:function detach(selector){
	return _remove(this,selector,true);
	},

	remove:function remove(selector){
	return _remove(this,selector);
	},

	text:function text(value){
	return access(this,function(value){
	return value===undefined?
	jQuery.text(this):
	this.empty().append(
	(this[0]&&this[0].ownerDocument||document).createTextNode(value));

	},null,value,arguments.length);
	},

	append:function append(){
	return domManip(this,arguments,function(elem){
	if(this.nodeType===1||this.nodeType===11||this.nodeType===9){
	var target=manipulationTarget(this,elem);
	target.appendChild(elem);
	}
	});
	},

	prepend:function prepend(){
	return domManip(this,arguments,function(elem){
	if(this.nodeType===1||this.nodeType===11||this.nodeType===9){
	var target=manipulationTarget(this,elem);
	target.insertBefore(elem,target.firstChild);
	}
	});
	},

	before:function before(){
	return domManip(this,arguments,function(elem){
	if(this.parentNode){
	this.parentNode.insertBefore(elem,this);
	}
	});
	},

	after:function after(){
	return domManip(this,arguments,function(elem){
	if(this.parentNode){
	this.parentNode.insertBefore(elem,this.nextSibling);
	}
	});
	},

	empty:function empty(){
	var elem,
	i=0;

	for(;(elem=this[i])!=null;i++){

	// Remove element nodes and prevent memory leaks
	if(elem.nodeType===1){
	jQuery.cleanData(getAll(elem,false));
	}

	// Remove any remaining nodes
	while(elem.firstChild){
	elem.removeChild(elem.firstChild);
	}

	// If this is a select, ensure that it displays empty (#12336)
	// Support: IE<9
	if(elem.options&&jQuery.nodeName(elem,"select")){
	elem.options.length=0;
	}
	}

	return this;
	},

	clone:function clone(dataAndEvents,deepDataAndEvents){
	dataAndEvents=dataAndEvents==null?false:dataAndEvents;
	deepDataAndEvents=deepDataAndEvents==null?dataAndEvents:deepDataAndEvents;

	return this.map(function(){
	return jQuery.clone(this,dataAndEvents,deepDataAndEvents);
	});
	},

	html:function html(value){
	return access(this,function(value){
	var elem=this[0]||{},
	i=0,
	l=this.length;

	if(value===undefined){
	return elem.nodeType===1?
	elem.innerHTML.replace(rinlinejQuery,""):
	undefined;
	}

	// See if we can take a shortcut and just use innerHTML
	if(typeof value==="string"&&!rnoInnerhtml.test(value)&&(
	support.htmlSerialize||!rnoshimcache.test(value))&&(
	support.leadingWhitespace||!rleadingWhitespace.test(value))&&
	!wrapMap[(rtagName.exec(value)||["",""])[1].toLowerCase()]){

	value=jQuery.htmlPrefilter(value);

	try{
	for(;i<l;i++){

	// Remove element nodes and prevent memory leaks
	elem=this[i]||{};
	if(elem.nodeType===1){
	jQuery.cleanData(getAll(elem,false));
	elem.innerHTML=value;
	}
	}

	elem=0;

	// If using innerHTML throws an exception, use the fallback method
	}catch(e){}
	}

	if(elem){
	this.empty().append(value);
	}
	},null,value,arguments.length);
	},

	replaceWith:function replaceWith(){
	var ignored=[];

	// Make the changes, replacing each non-ignored context element with the new content
	return domManip(this,arguments,function(elem){
	var parent=this.parentNode;

	if(jQuery.inArray(this,ignored)<0){
	jQuery.cleanData(getAll(this));
	if(parent){
	parent.replaceChild(elem,this);
	}
	}

	// Force callback invocation
	},ignored);
	}});


	jQuery.each({
	appendTo:"append",
	prependTo:"prepend",
	insertBefore:"before",
	insertAfter:"after",
	replaceAll:"replaceWith"},
	function(name,original){
	jQuery.fn[name]=function(selector){
	var elems,
	i=0,
	ret=[],
	insert=jQuery(selector),
	last=insert.length-1;

	for(;i<=last;i++){
	elems=i===last?this:this.clone(true);
	jQuery(insert[i])[original](elems);

	// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
	push.apply(ret,elems.get());
	}

	return this.pushStack(ret);
	};
	});


	var iframe,
	elemdisplay={

	// Support: Firefox
	// We have to pre-define these values for FF (#10227)
	HTML:"block",
	BODY:"block"};


	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay(name,doc){
	var elem=jQuery(doc.createElement(name)).appendTo(doc.body),

	display=jQuery.css(elem[0],"display");

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay(nodeName){
	var doc=document,
	display=elemdisplay[nodeName];

	if(!display){
	display=actualDisplay(nodeName,doc);

	// If the simple way fails, read from inside an iframe
	if(display==="none"||!display){

	// Use the already-created iframe if possible
	iframe=(iframe||jQuery("<iframe frameborder='0' width='0' height='0'/>")).
	appendTo(doc.documentElement);

	// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
	doc=(iframe[0].contentWindow||iframe[0].contentDocument).document;

	// Support: IE
	doc.write();
	doc.close();

	display=actualDisplay(nodeName,doc);
	iframe.detach();
	}

	// Store the correct default display
	elemdisplay[nodeName]=display;
	}

	return display;
	}
	var rmargin=/^margin/;

	var rnumnonpx=new RegExp("^("+pnum+")(?!px)[a-z%]+$","i");

	var swap=function swap(elem,options,callback,args){
	var ret,name,
	old={};

	// Remember the old values, and insert the new ones
	for(name in options){
	old[name]=elem.style[name];
	elem.style[name]=options[name];
	}

	ret=callback.apply(elem,args||[]);

	// Revert the old values
	for(name in options){
	elem.style[name]=old[name];
	}

	return ret;
	};


	var documentElement=document.documentElement;



	(function(){
	var pixelPositionVal,pixelMarginRightVal,boxSizingReliableVal,
	reliableHiddenOffsetsVal,reliableMarginRightVal,reliableMarginLeftVal,
	container=document.createElement("div"),
	div=document.createElement("div");

	// Finish early in limited (non-browser) environments
	if(!div.style){
	return;
	}

	div.style.cssText="float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity=div.style.opacity==="0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat=!!div.style.cssFloat;

	div.style.backgroundClip="content-box";
	div.cloneNode(true).style.backgroundClip="";
	support.clearCloneStyle=div.style.backgroundClip==="content-box";

	container=document.createElement("div");
	container.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;"+
	"padding:0;margin-top:1px;position:absolute";
	div.innerHTML="";
	container.appendChild(div);

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing=div.style.boxSizing===""||div.style.MozBoxSizing===""||
	div.style.WebkitBoxSizing==="";

	jQuery.extend(support,{
	reliableHiddenOffsets:function reliableHiddenOffsets(){
	if(pixelPositionVal==null){
	computeStyleTests();
	}
	return reliableHiddenOffsetsVal;
	},

	boxSizingReliable:function boxSizingReliable(){

	// We're checking for pixelPositionVal here instead of boxSizingReliableVal
	// since that compresses better and they're computed together anyway.
	if(pixelPositionVal==null){
	computeStyleTests();
	}
	return boxSizingReliableVal;
	},

	pixelMarginRight:function pixelMarginRight(){

	// Support: Android 4.0-4.3
	if(pixelPositionVal==null){
	computeStyleTests();
	}
	return pixelMarginRightVal;
	},

	pixelPosition:function pixelPosition(){
	if(pixelPositionVal==null){
	computeStyleTests();
	}
	return pixelPositionVal;
	},

	reliableMarginRight:function reliableMarginRight(){

	// Support: Android 2.3
	if(pixelPositionVal==null){
	computeStyleTests();
	}
	return reliableMarginRightVal;
	},

	reliableMarginLeft:function reliableMarginLeft(){

	// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
	if(pixelPositionVal==null){
	computeStyleTests();
	}
	return reliableMarginLeftVal;
	}});


	function computeStyleTests(){
	var contents,divStyle,
	documentElement=document.documentElement;

	// Setup
	documentElement.appendChild(container);

	div.style.cssText=

	// Support: Android 2.3
	// Vendor-prefix box-sizing
	"-webkit-box-sizing:border-box;box-sizing:border-box;"+
	"position:relative;display:block;"+
	"margin:auto;border:1px;padding:1px;"+
	"top:1%;width:50%";

	// Support: IE<9
	// Assume reasonable values in the absence of getComputedStyle
	pixelPositionVal=boxSizingReliableVal=reliableMarginLeftVal=false;
	pixelMarginRightVal=reliableMarginRightVal=true;

	// Check for getComputedStyle so that this code is not run in IE<9.
	if(window.getComputedStyle){
	divStyle=window.getComputedStyle(div);
	pixelPositionVal=(divStyle||{}).top!=="1%";
	reliableMarginLeftVal=(divStyle||{}).marginLeft==="2px";
	boxSizingReliableVal=(divStyle||{width:"4px"}).width==="4px";

	// Support: Android 4.0 - 4.3 only
	// Some styles come back with percentage values, even though they shouldn't
	div.style.marginRight="50%";
	pixelMarginRightVal=(divStyle||{marginRight:"4px"}).marginRight==="4px";

	// Support: Android 2.3 only
	// Div with explicit width and no margin-right incorrectly
	// gets computed margin-right based on width of container (#3333)
	// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
	contents=div.appendChild(document.createElement("div"));

	// Reset CSS: box-sizing; display; margin; border; padding
	contents.style.cssText=div.style.cssText=

	// Support: Android 2.3
	// Vendor-prefix box-sizing
	"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;"+
	"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
	contents.style.marginRight=contents.style.width="0";
	div.style.width="1px";

	reliableMarginRightVal=
	!parseFloat((window.getComputedStyle(contents)||{}).marginRight);

	div.removeChild(contents);
	}

	// Support: IE6-8
	// First check that getClientRects works as expected
	// Check if table cells still have offsetWidth/Height when they are set
	// to display:none and there are still other visible table cells in a
	// table row; if so, offsetWidth/Height are not reliable for use when
	// determining if an element has been hidden directly using
	// display:none (it is still safe to use offsets if a parent element is
	// hidden; don safety goggles and see bug #4512 for more information).
	div.style.display="none";
	reliableHiddenOffsetsVal=div.getClientRects().length===0;
	if(reliableHiddenOffsetsVal){
	div.style.display="";
	div.innerHTML="<table><tr><td></td><td>t</td></tr></table>";
	div.childNodes[0].style.borderCollapse="separate";
	contents=div.getElementsByTagName("td");
	contents[0].style.cssText="margin:0;border:0;padding:0;display:none";
	reliableHiddenOffsetsVal=contents[0].offsetHeight===0;
	if(reliableHiddenOffsetsVal){
	contents[0].style.display="";
	contents[1].style.display="none";
	reliableHiddenOffsetsVal=contents[0].offsetHeight===0;
	}
	}

	// Teardown
	documentElement.removeChild(container);
	}

	})();


	var getStyles,curCSS,
	rposition=/^(top|right|bottom|left)$/;

	if(window.getComputedStyle){
	getStyles=function getStyles(elem){

	// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
	// IE throws on elements created in popups
	// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
	var view=elem.ownerDocument.defaultView;

	if(!view||!view.opener){
	view=window;
	}

	return view.getComputedStyle(elem);
	};

	curCSS=function curCSS(elem,name,computed){
	var width,minWidth,maxWidth,ret,
	style=elem.style;

	computed=computed||getStyles(elem);

	// getPropertyValue is only needed for .css('filter') in IE9, see #12537
	ret=computed?computed.getPropertyValue(name)||computed[name]:undefined;

	// Support: Opera 12.1x only
	// Fall back to style even without computed
	// computed is undefined for elems on document fragments
	if((ret===""||ret===undefined)&&!jQuery.contains(elem.ownerDocument,elem)){
	ret=jQuery.style(elem,name);
	}

	if(computed){

	// A tribute to the "awesome hack by Dean Edwards"
	// Chrome < 17 and Safari 5.0 uses "computed value"
	// instead of "used value" for margin-right
	// Safari 5.1.7 (at least) returns percentage for a larger set of values,
	// but width seems to be reliably pixels
	// this is against the CSSOM draft spec:
	// http://dev.w3.org/csswg/cssom/#resolved-values
	if(!support.pixelMarginRight()&&rnumnonpx.test(ret)&&rmargin.test(name)){

	// Remember the original values
	width=style.width;
	minWidth=style.minWidth;
	maxWidth=style.maxWidth;

	// Put in the new values to get a computed value out
	style.minWidth=style.maxWidth=style.width=ret;
	ret=computed.width;

	// Revert the changed values
	style.width=width;
	style.minWidth=minWidth;
	style.maxWidth=maxWidth;
	}
	}

	// Support: IE
	// IE returns zIndex value as an integer.
	return ret===undefined?
	ret:
	ret+"";
	};
	}else if(documentElement.currentStyle){
	getStyles=function getStyles(elem){
	return elem.currentStyle;
	};

	curCSS=function curCSS(elem,name,computed){
	var left,rs,rsLeft,ret,
	style=elem.style;

	computed=computed||getStyles(elem);
	ret=computed?computed[name]:undefined;

	// Avoid setting ret to empty string here
	// so we don't default to auto
	if(ret==null&&style&&style[name]){
	ret=style[name];
	}

	// From the awesome hack by Dean Edwards
	// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

	// If we're not dealing with a regular pixel number
	// but a number that has a weird ending, we need to convert it to pixels
	// but not position css attributes, as those are
	// proportional to the parent element instead
	// and we can't measure the parent instead because it
	// might trigger a "stacking dolls" problem
	if(rnumnonpx.test(ret)&&!rposition.test(name)){

	// Remember the original values
	left=style.left;
	rs=elem.runtimeStyle;
	rsLeft=rs&&rs.left;

	// Put in the new values to get a computed value out
	if(rsLeft){
	rs.left=elem.currentStyle.left;
	}
	style.left=name==="fontSize"?"1em":ret;
	ret=style.pixelLeft+"px";

	// Revert the changed values
	style.left=left;
	if(rsLeft){
	rs.left=rsLeft;
	}
	}

	// Support: IE
	// IE returns zIndex value as an integer.
	return ret===undefined?
	ret:
	ret+""||"auto";
	};
	}




	function addGetHookIf(conditionFn,hookFn){

	// Define the hook, we'll check on the first run if it's really needed.
	return{
	get:function get(){
	if(conditionFn()){

	// Hook not needed (or it's not possible to use it due
	// to missing dependency), remove it.
	delete this.get;
	return;
	}

	// Hook needed; redefine it so that the support test is not executed again.
	return(this.get=hookFn).apply(this,arguments);
	}};

	}


	var

	ralpha=/alpha\([^)]*\)/i,
	ropacity=/opacity\s*=\s*([^)]*)/i,

	// swappable if display is none or starts with table except
	// "table", "table-cell", or "table-caption"
	// see here for display values:
	// https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap=/^(none|table(?!-c[ea]).+)/,
	rnumsplit=new RegExp("^("+pnum+")(.*)$","i"),

	cssShow={position:"absolute",visibility:"hidden",display:"block"},
	cssNormalTransform={
	letterSpacing:"0",
	fontWeight:"400"},


	cssPrefixes=["Webkit","O","Moz","ms"],
	emptyStyle=document.createElement("div").style;


	// return a css property mapped to a potentially vendor prefixed property
	function vendorPropName(name){

	// shortcut for names that are not vendor prefixed
	if(name in emptyStyle){
	return name;
	}

	// check for vendor prefixed names
	var capName=name.charAt(0).toUpperCase()+name.slice(1),
	i=cssPrefixes.length;

	while(i--){
	name=cssPrefixes[i]+capName;
	if(name in emptyStyle){
	return name;
	}
	}
	}

	function showHide(elements,show){
	var display,elem,hidden,
	values=[],
	index=0,
	length=elements.length;

	for(;index<length;index++){
	elem=elements[index];
	if(!elem.style){
	continue;
	}

	values[index]=jQuery._data(elem,"olddisplay");
	display=elem.style.display;
	if(show){

	// Reset the inline display of this element to learn if it is
	// being hidden by cascaded rules or not
	if(!values[index]&&display==="none"){
	elem.style.display="";
	}

	// Set elements which have been overridden with display: none
	// in a stylesheet to whatever the default browser style is
	// for such an element
	if(elem.style.display===""&&isHidden(elem)){
	values[index]=
	jQuery._data(elem,"olddisplay",defaultDisplay(elem.nodeName));
	}
	}else{
	hidden=isHidden(elem);

	if(display&&display!=="none"||!hidden){
	jQuery._data(
	elem,
	"olddisplay",
	hidden?display:jQuery.css(elem,"display"));

	}
	}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for(index=0;index<length;index++){
	elem=elements[index];
	if(!elem.style){
	continue;
	}
	if(!show||elem.style.display==="none"||elem.style.display===""){
	elem.style.display=show?values[index]||"":"none";
	}
	}

	return elements;
	}

	function setPositiveNumber(elem,value,subtract){
	var matches=rnumsplit.exec(value);
	return matches?

	// Guard against undefined "subtract", e.g., when used as in cssHooks
	Math.max(0,matches[1]-(subtract||0))+(matches[2]||"px"):
	value;
	}

	function augmentWidthOrHeight(elem,name,extra,isBorderBox,styles){
	var i=extra===(isBorderBox?"border":"content")?

	// If we already have the right measurement, avoid augmentation
	4:

	// Otherwise initialize for horizontal or vertical properties
	name==="width"?1:0,

	val=0;

	for(;i<4;i+=2){

	// both box models exclude margin, so add it if we want it
	if(extra==="margin"){
	val+=jQuery.css(elem,extra+cssExpand[i],true,styles);
	}

	if(isBorderBox){

	// border-box includes padding, so remove it if we want content
	if(extra==="content"){
	val-=jQuery.css(elem,"padding"+cssExpand[i],true,styles);
	}

	// at this point, extra isn't border nor margin, so remove border
	if(extra!=="margin"){
	val-=jQuery.css(elem,"border"+cssExpand[i]+"Width",true,styles);
	}
	}else{

	// at this point, extra isn't content, so add padding
	val+=jQuery.css(elem,"padding"+cssExpand[i],true,styles);

	// at this point, extra isn't content nor padding, so add border
	if(extra!=="padding"){
	val+=jQuery.css(elem,"border"+cssExpand[i]+"Width",true,styles);
	}
	}
	}

	return val;
	}

	function getWidthOrHeight(elem,name,extra){

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox=true,
	val=name==="width"?elem.offsetWidth:elem.offsetHeight,
	styles=getStyles(elem),
	isBorderBox=support.boxSizing&&
	jQuery.css(elem,"boxSizing",false,styles)==="border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if(val<=0||val==null){

	// Fall back to computed then uncomputed css if necessary
	val=curCSS(elem,name,styles);
	if(val<0||val==null){
	val=elem.style[name];
	}

	// Computed unit is not pixels. Stop here and return.
	if(rnumnonpx.test(val)){
	return val;
	}

	// we need the check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox=isBorderBox&&(
	support.boxSizingReliable()||val===elem.style[name]);

	// Normalize "", auto, and prepare for extra
	val=parseFloat(val)||0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return val+
	augmentWidthOrHeight(
	elem,
	name,
	extra||(isBorderBox?"border":"content"),
	valueIsBorderBox,
	styles)+

	"px";
	}

	jQuery.extend({

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks:{
	opacity:{
	get:function get(elem,computed){
	if(computed){

	// We should always get a number back from opacity
	var ret=curCSS(elem,"opacity");
	return ret===""?"1":ret;
	}
	}}},



	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber:{
	"animationIterationCount":true,
	"columnCount":true,
	"fillOpacity":true,
	"flexGrow":true,
	"flexShrink":true,
	"fontWeight":true,
	"lineHeight":true,
	"opacity":true,
	"order":true,
	"orphans":true,
	"widows":true,
	"zIndex":true,
	"zoom":true},


	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps:{

	// normalize float css property
	"float":support.cssFloat?"cssFloat":"styleFloat"},


	// Get and set the style property on a DOM Node
	style:function style(elem,name,value,extra){

	// Don't set styles on text and comment nodes
	if(!elem||elem.nodeType===3||elem.nodeType===8||!elem.style){
	return;
	}

	// Make sure that we're working with the right name
	var ret,type,hooks,
	origName=jQuery.camelCase(name),
	style=elem.style;

	name=jQuery.cssProps[origName]||(
	jQuery.cssProps[origName]=vendorPropName(origName)||origName);

	// gets hook for the prefixed version
	// followed by the unprefixed version
	hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName];

	// Check if we're setting a value
	if(value!==undefined){
	type=typeof value==="undefined"?"undefined":_typeof(value);

	// Convert "+=" or "-=" to relative numbers (#7345)
	if(type==="string"&&(ret=rcssNum.exec(value))&&ret[1]){
	value=adjustCSS(elem,name,ret);

	// Fixes bug #9237
	type="number";
	}

	// Make sure that null and NaN values aren't set. See: #7116
	if(value==null||value!==value){
	return;
	}

	// If a number was passed in, add the unit (except for certain CSS properties)
	if(type==="number"){
	value+=ret&&ret[3]||(jQuery.cssNumber[origName]?"":"px");
	}

	// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
	// but it would mean to define eight
	// (for every problematic property) identical functions
	if(!support.clearCloneStyle&&value===""&&name.indexOf("background")===0){
	style[name]="inherit";
	}

	// If a hook was provided, use that value, otherwise just set the specified value
	if(!hooks||!("set"in hooks)||
	(value=hooks.set(elem,value,extra))!==undefined){

	// Support: IE
	// Swallow errors from 'invalid' CSS values (#5509)
	try{
	style[name]=value;
	}catch(e){}
	}

	}else{

	// If a hook was provided get the non-computed value from there
	if(hooks&&"get"in hooks&&
	(ret=hooks.get(elem,false,extra))!==undefined){

	return ret;
	}

	// Otherwise just get the value from the style object
	return style[name];
	}
	},

	css:function css(elem,name,extra,styles){
	var num,val,hooks,
	origName=jQuery.camelCase(name);

	// Make sure that we're working with the right name
	name=jQuery.cssProps[origName]||(
	jQuery.cssProps[origName]=vendorPropName(origName)||origName);

	// gets hook for the prefixed version
	// followed by the unprefixed version
	hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName];

	// If a hook was provided get the computed value from there
	if(hooks&&"get"in hooks){
	val=hooks.get(elem,true,extra);
	}

	// Otherwise, if a way to get the computed value exists, use that
	if(val===undefined){
	val=curCSS(elem,name,styles);
	}

	//convert "normal" to computed value
	if(val==="normal"&&name in cssNormalTransform){
	val=cssNormalTransform[name];
	}

	// Return, converting to number if forced or a qualifier was provided and val looks numeric
	if(extra===""||extra){
	num=parseFloat(val);
	return extra===true||isFinite(num)?num||0:val;
	}
	return val;
	}});


	jQuery.each(["height","width"],function(i,name){
	jQuery.cssHooks[name]={
	get:function get(elem,computed,extra){
	if(computed){

	// certain elements can have dimension info if we invisibly show them
	// however, it must have a current display style that would benefit from this
	return rdisplayswap.test(jQuery.css(elem,"display"))&&
	elem.offsetWidth===0?
	swap(elem,cssShow,function(){
	return getWidthOrHeight(elem,name,extra);
	}):
	getWidthOrHeight(elem,name,extra);
	}
	},

	set:function set(elem,value,extra){
	var styles=extra&&getStyles(elem);
	return setPositiveNumber(elem,value,extra?
	augmentWidthOrHeight(
	elem,
	name,
	extra,
	support.boxSizing&&
	jQuery.css(elem,"boxSizing",false,styles)==="border-box",
	styles):
	0);

	}};

	});

	if(!support.opacity){
	jQuery.cssHooks.opacity={
	get:function get(elem,computed){

	// IE uses filters for opacity
	return ropacity.test((computed&&elem.currentStyle?
	elem.currentStyle.filter:
	elem.style.filter)||"")?
	0.01*parseFloat(RegExp.$1)+"":
	computed?"1":"";
	},

	set:function set(elem,value){
	var style=elem.style,
	currentStyle=elem.currentStyle,
	opacity=jQuery.isNumeric(value)?"alpha(opacity="+value*100+")":"",
	filter=currentStyle&&currentStyle.filter||style.filter||"";

	// IE has trouble with opacity if it does not have layout
	// Force it by setting the zoom level
	style.zoom=1;

	// if setting opacity to 1, and no other filters exist -
	// attempt to remove filter attribute #6652
	// if value === "", then remove inline opacity #12685
	if((value>=1||value==="")&&
	jQuery.trim(filter.replace(ralpha,""))===""&&
	style.removeAttribute){

	// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
	// if "filter:" is present at all, clearType is disabled, we want to avoid this
	// style.removeAttribute is IE Only, but so apparently is this code path...
	style.removeAttribute("filter");

	// if there is no filter style applied in a css rule
	// or unset inline opacity, we are done
	if(value===""||currentStyle&&!currentStyle.filter){
	return;
	}
	}

	// otherwise, set new filter values
	style.filter=ralpha.test(filter)?
	filter.replace(ralpha,opacity):
	filter+" "+opacity;
	}};

	}

	jQuery.cssHooks.marginRight=addGetHookIf(support.reliableMarginRight,
	function(elem,computed){
	if(computed){
	return swap(elem,{"display":"inline-block"},
	curCSS,[elem,"marginRight"]);
	}
	});


	jQuery.cssHooks.marginLeft=addGetHookIf(support.reliableMarginLeft,
	function(elem,computed){
	if(computed){
	return(
	parseFloat(curCSS(elem,"marginLeft"))||(

	// Support: IE<=11+
	// Running getBoundingClientRect on a disconnected node in IE throws an error
	// Support: IE8 only
	// getClientRects() errors on disconnected elems
	jQuery.contains(elem.ownerDocument,elem)?
	elem.getBoundingClientRect().left-
	swap(elem,{marginLeft:0},function(){
	return elem.getBoundingClientRect().left;
	}):
	0))+

	"px";
	}
	});


	// These hooks are used by animate to expand properties
	jQuery.each({
	margin:"",
	padding:"",
	border:"Width"},
	function(prefix,suffix){
	jQuery.cssHooks[prefix+suffix]={
	expand:function expand(value){
	var i=0,
	expanded={},

	// assumes a single number if not a string
	parts=typeof value==="string"?value.split(" "):[value];

	for(;i<4;i++){
	expanded[prefix+cssExpand[i]+suffix]=
	parts[i]||parts[i-2]||parts[0];
	}

	return expanded;
	}};


	if(!rmargin.test(prefix)){
	jQuery.cssHooks[prefix+suffix].set=setPositiveNumber;
	}
	});

	jQuery.fn.extend({
	css:function css(name,value){
	return access(this,function(elem,name,value){
	var styles,len,
	map={},
	i=0;

	if(jQuery.isArray(name)){
	styles=getStyles(elem);
	len=name.length;

	for(;i<len;i++){
	map[name[i]]=jQuery.css(elem,name[i],false,styles);
	}

	return map;
	}

	return value!==undefined?
	jQuery.style(elem,name,value):
	jQuery.css(elem,name);
	},name,value,arguments.length>1);
	},
	show:function show(){
	return showHide(this,true);
	},
	hide:function hide(){
	return showHide(this);
	},
	toggle:function toggle(state){
	if(typeof state==="boolean"){
	return state?this.show():this.hide();
	}

	return this.each(function(){
	if(isHidden(this)){
	jQuery(this).show();
	}else{
	jQuery(this).hide();
	}
	});
	}});



	function Tween(elem,options,prop,end,easing){
	return new Tween.prototype.init(elem,options,prop,end,easing);
	}
	jQuery.Tween=Tween;

	Tween.prototype={
	constructor:Tween,
	init:function init(elem,options,prop,end,easing,unit){
	this.elem=elem;
	this.prop=prop;
	this.easing=easing||jQuery.easing._default;
	this.options=options;
	this.start=this.now=this.cur();
	this.end=end;
	this.unit=unit||(jQuery.cssNumber[prop]?"":"px");
	},
	cur:function cur(){
	var hooks=Tween.propHooks[this.prop];

	return hooks&&hooks.get?
	hooks.get(this):
	Tween.propHooks._default.get(this);
	},
	run:function run(percent){
	var eased,
	hooks=Tween.propHooks[this.prop];

	if(this.options.duration){
	this.pos=eased=jQuery.easing[this.easing](
	percent,this.options.duration*percent,0,1,this.options.duration);

	}else{
	this.pos=eased=percent;
	}
	this.now=(this.end-this.start)*eased+this.start;

	if(this.options.step){
	this.options.step.call(this.elem,this.now,this);
	}

	if(hooks&&hooks.set){
	hooks.set(this);
	}else{
	Tween.propHooks._default.set(this);
	}
	return this;
	}};


	Tween.prototype.init.prototype=Tween.prototype;

	Tween.propHooks={
	_default:{
	get:function get(tween){
	var result;

	// Use a property on the element directly when it is not a DOM element,
	// or when there is no matching style property that exists.
	if(tween.elem.nodeType!==1||
	tween.elem[tween.prop]!=null&&tween.elem.style[tween.prop]==null){
	return tween.elem[tween.prop];
	}

	// passing an empty string as a 3rd parameter to .css will automatically
	// attempt a parseFloat and fallback to a string if the parse fails
	// so, simple values such as "10px" are parsed to Float.
	// complex values such as "rotate(1rad)" are returned as is.
	result=jQuery.css(tween.elem,tween.prop,"");

	// Empty strings, null, undefined and "auto" are converted to 0.
	return!result||result==="auto"?0:result;
	},
	set:function set(tween){

	// use step hook for back compat - use cssHook if its there - use .style if its
	// available and use plain properties where available
	if(jQuery.fx.step[tween.prop]){
	jQuery.fx.step[tween.prop](tween);
	}else if(tween.elem.nodeType===1&&(
	tween.elem.style[jQuery.cssProps[tween.prop]]!=null||
	jQuery.cssHooks[tween.prop])){
	jQuery.style(tween.elem,tween.prop,tween.now+tween.unit);
	}else{
	tween.elem[tween.prop]=tween.now;
	}
	}}};



	// Support: IE <=9
	// Panic based approach to setting things on disconnected nodes

	Tween.propHooks.scrollTop=Tween.propHooks.scrollLeft={
	set:function set(tween){
	if(tween.elem.nodeType&&tween.elem.parentNode){
	tween.elem[tween.prop]=tween.now;
	}
	}};


	jQuery.easing={
	linear:function linear(p){
	return p;
	},
	swing:function swing(p){
	return 0.5-Math.cos(p*Math.PI)/2;
	},
	_default:"swing"};


	jQuery.fx=Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step={};




	var
	fxNow,timerId,
	rfxtypes=/^(?:toggle|show|hide)$/,
	rrun=/queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow(){
	window.setTimeout(function(){
	fxNow=undefined;
	});
	return fxNow=jQuery.now();
	}

	// Generate parameters to create a standard animation
	function genFx(type,includeWidth){
	var which,
	attrs={height:type},
	i=0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth=includeWidth?1:0;
	for(;i<4;i+=2-includeWidth){
	which=cssExpand[i];
	attrs["margin"+which]=attrs["padding"+which]=type;
	}

	if(includeWidth){
	attrs.opacity=attrs.width=type;
	}

	return attrs;
	}

	function createTween(value,prop,animation){
	var tween,
	collection=(Animation.tweeners[prop]||[]).concat(Animation.tweeners["*"]),
	index=0,
	length=collection.length;
	for(;index<length;index++){
	if(tween=collection[index].call(animation,prop,value)){

	// we're done with this property
	return tween;
	}
	}
	}

	function defaultPrefilter(elem,props,opts){
	/* jshint validthis: true */
	var prop,value,toggle,tween,hooks,oldfire,display,checkDisplay,
	anim=this,
	orig={},
	style=elem.style,
	hidden=elem.nodeType&&isHidden(elem),
	dataShow=jQuery._data(elem,"fxshow");

	// handle queue: false promises
	if(!opts.queue){
	hooks=jQuery._queueHooks(elem,"fx");
	if(hooks.unqueued==null){
	hooks.unqueued=0;
	oldfire=hooks.empty.fire;
	hooks.empty.fire=function(){
	if(!hooks.unqueued){
	oldfire();
	}
	};
	}
	hooks.unqueued++;

	anim.always(function(){

	// doing this makes sure that the complete handler will be called
	// before this completes
	anim.always(function(){
	hooks.unqueued--;
	if(!jQuery.queue(elem,"fx").length){
	hooks.empty.fire();
	}
	});
	});
	}

	// height/width overflow pass
	if(elem.nodeType===1&&("height"in props||"width"in props)){

	// Make sure that nothing sneaks out
	// Record all 3 overflow attributes because IE does not
	// change the overflow attribute when overflowX and
	// overflowY are set to the same value
	opts.overflow=[style.overflow,style.overflowX,style.overflowY];

	// Set display property to inline-block for height/width
	// animations on inline elements that are having width/height animated
	display=jQuery.css(elem,"display");

	// Test default display if display is currently "none"
	checkDisplay=display==="none"?
	jQuery._data(elem,"olddisplay")||defaultDisplay(elem.nodeName):display;

	if(checkDisplay==="inline"&&jQuery.css(elem,"float")==="none"){

	// inline-level elements accept inline-block;
	// block-level elements need to be inline with layout
	if(!support.inlineBlockNeedsLayout||defaultDisplay(elem.nodeName)==="inline"){
	style.display="inline-block";
	}else{
	style.zoom=1;
	}
	}
	}

	if(opts.overflow){
	style.overflow="hidden";
	if(!support.shrinkWrapBlocks()){
	anim.always(function(){
	style.overflow=opts.overflow[0];
	style.overflowX=opts.overflow[1];
	style.overflowY=opts.overflow[2];
	});
	}
	}

	// show/hide pass
	for(prop in props){
	value=props[prop];
	if(rfxtypes.exec(value)){
	delete props[prop];
	toggle=toggle||value==="toggle";
	if(value===(hidden?"hide":"show")){

	// If there is dataShow left over from a stopped hide or show
	// and we are going to proceed with show, we should pretend to be hidden
	if(value==="show"&&dataShow&&dataShow[prop]!==undefined){
	hidden=true;
	}else{
	continue;
	}
	}
	orig[prop]=dataShow&&dataShow[prop]||jQuery.style(elem,prop);

	// Any non-fx value stops us from restoring the original display value
	}else{
	display=undefined;
	}
	}

	if(!jQuery.isEmptyObject(orig)){
	if(dataShow){
	if("hidden"in dataShow){
	hidden=dataShow.hidden;
	}
	}else{
	dataShow=jQuery._data(elem,"fxshow",{});
	}

	// store state if its toggle - enables .stop().toggle() to "reverse"
	if(toggle){
	dataShow.hidden=!hidden;
	}
	if(hidden){
	jQuery(elem).show();
	}else{
	anim.done(function(){
	jQuery(elem).hide();
	});
	}
	anim.done(function(){
	var prop;
	jQuery._removeData(elem,"fxshow");
	for(prop in orig){
	jQuery.style(elem,prop,orig[prop]);
	}
	});
	for(prop in orig){
	tween=createTween(hidden?dataShow[prop]:0,prop,anim);

	if(!(prop in dataShow)){
	dataShow[prop]=tween.start;
	if(hidden){
	tween.end=tween.start;
	tween.start=prop==="width"||prop==="height"?1:0;
	}
	}
	}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	}else if((display==="none"?defaultDisplay(elem.nodeName):display)==="inline"){
	style.display=display;
	}
	}

	function propFilter(props,specialEasing){
	var index,name,easing,value,hooks;

	// camelCase, specialEasing and expand cssHook pass
	for(index in props){
	name=jQuery.camelCase(index);
	easing=specialEasing[name];
	value=props[index];
	if(jQuery.isArray(value)){
	easing=value[1];
	value=props[index]=value[0];
	}

	if(index!==name){
	props[name]=value;
	delete props[index];
	}

	hooks=jQuery.cssHooks[name];
	if(hooks&&"expand"in hooks){
	value=hooks.expand(value);
	delete props[name];

	// not quite $.extend, this wont overwrite keys already present.
	// also - reusing 'index' from above because we have the correct "name"
	for(index in value){
	if(!(index in props)){
	props[index]=value[index];
	specialEasing[index]=easing;
	}
	}
	}else{
	specialEasing[name]=easing;
	}
	}
	}

	function Animation(elem,properties,options){
	var result,
	stopped,
	index=0,
	length=Animation.prefilters.length,
	deferred=jQuery.Deferred().always(function(){

	// don't match elem in the :animated selector
	delete tick.elem;
	}),
	tick=function tick(){
	if(stopped){
	return false;
	}
	var currentTime=fxNow||createFxNow(),
	remaining=Math.max(0,animation.startTime+animation.duration-currentTime),

	// Support: Android 2.3
	// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
	temp=remaining/animation.duration||0,
	percent=1-temp,
	index=0,
	length=animation.tweens.length;

	for(;index<length;index++){
	animation.tweens[index].run(percent);
	}

	deferred.notifyWith(elem,[animation,percent,remaining]);

	if(percent<1&&length){
	return remaining;
	}else{
	deferred.resolveWith(elem,[animation]);
	return false;
	}
	},
	animation=deferred.promise({
	elem:elem,
	props:jQuery.extend({},properties),
	opts:jQuery.extend(true,{
	specialEasing:{},
	easing:jQuery.easing._default},
	options),
	originalProperties:properties,
	originalOptions:options,
	startTime:fxNow||createFxNow(),
	duration:options.duration,
	tweens:[],
	createTween:function createTween(prop,end){
	var tween=jQuery.Tween(elem,animation.opts,prop,end,
	animation.opts.specialEasing[prop]||animation.opts.easing);
	animation.tweens.push(tween);
	return tween;
	},
	stop:function stop(gotoEnd){
	var index=0,

	// if we are going to the end, we want to run all the tweens
	// otherwise we skip this part
	length=gotoEnd?animation.tweens.length:0;
	if(stopped){
	return this;
	}
	stopped=true;
	for(;index<length;index++){
	animation.tweens[index].run(1);
	}

	// resolve when we played the last frame
	// otherwise, reject
	if(gotoEnd){
	deferred.notifyWith(elem,[animation,1,0]);
	deferred.resolveWith(elem,[animation,gotoEnd]);
	}else{
	deferred.rejectWith(elem,[animation,gotoEnd]);
	}
	return this;
	}}),

	props=animation.props;

	propFilter(props,animation.opts.specialEasing);

	for(;index<length;index++){
	result=Animation.prefilters[index].call(animation,elem,props,animation.opts);
	if(result){
	if(jQuery.isFunction(result.stop)){
	jQuery._queueHooks(animation.elem,animation.opts.queue).stop=
	jQuery.proxy(result.stop,result);
	}
	return result;
	}
	}

	jQuery.map(props,createTween,animation);

	if(jQuery.isFunction(animation.opts.start)){
	animation.opts.start.call(elem,animation);
	}

	jQuery.fx.timer(
	jQuery.extend(tick,{
	elem:elem,
	anim:animation,
	queue:animation.opts.queue}));



	// attach callbacks from options
	return animation.progress(animation.opts.progress).
	done(animation.opts.done,animation.opts.complete).
	fail(animation.opts.fail).
	always(animation.opts.always);
	}

	jQuery.Animation=jQuery.extend(Animation,{

	tweeners:{
	"*":[function(prop,value){
	var tween=this.createTween(prop,value);
	adjustCSS(tween.elem,prop,rcssNum.exec(value),tween);
	return tween;
	}]},


	tweener:function tweener(props,callback){
	if(jQuery.isFunction(props)){
	callback=props;
	props=["*"];
	}else{
	props=props.match(rnotwhite);
	}

	var prop,
	index=0,
	length=props.length;

	for(;index<length;index++){
	prop=props[index];
	Animation.tweeners[prop]=Animation.tweeners[prop]||[];
	Animation.tweeners[prop].unshift(callback);
	}
	},

	prefilters:[defaultPrefilter],

	prefilter:function prefilter(callback,prepend){
	if(prepend){
	Animation.prefilters.unshift(callback);
	}else{
	Animation.prefilters.push(callback);
	}
	}});


	jQuery.speed=function(speed,easing,fn){
	var opt=speed&&(typeof speed==="undefined"?"undefined":_typeof(speed))==="object"?jQuery.extend({},speed):{
	complete:fn||!fn&&easing||
	jQuery.isFunction(speed)&&speed,
	duration:speed,
	easing:fn&&easing||easing&&!jQuery.isFunction(easing)&&easing};


	opt.duration=jQuery.fx.off?0:typeof opt.duration==="number"?opt.duration:
	opt.duration in jQuery.fx.speeds?
	jQuery.fx.speeds[opt.duration]:jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if(opt.queue==null||opt.queue===true){
	opt.queue="fx";
	}

	// Queueing
	opt.old=opt.complete;

	opt.complete=function(){
	if(jQuery.isFunction(opt.old)){
	opt.old.call(this);
	}

	if(opt.queue){
	jQuery.dequeue(this,opt.queue);
	}
	};

	return opt;
	};

	jQuery.fn.extend({
	fadeTo:function fadeTo(speed,to,easing,callback){

	// show any hidden elements after setting opacity to 0
	return this.filter(isHidden).css("opacity",0).show()

	// animate to the value specified
	.end().animate({opacity:to},speed,easing,callback);
	},
	animate:function animate(prop,speed,easing,callback){
	var empty=jQuery.isEmptyObject(prop),
	optall=jQuery.speed(speed,easing,callback),
	doAnimation=function doAnimation(){

	// Operate on a copy of prop so per-property easing won't be lost
	var anim=Animation(this,jQuery.extend({},prop),optall);

	// Empty animations, or finishing resolves immediately
	if(empty||jQuery._data(this,"finish")){
	anim.stop(true);
	}
	};
	doAnimation.finish=doAnimation;

	return empty||optall.queue===false?
	this.each(doAnimation):
	this.queue(optall.queue,doAnimation);
	},
	stop:function stop(type,clearQueue,gotoEnd){
	var stopQueue=function stopQueue(hooks){
	var stop=hooks.stop;
	delete hooks.stop;
	stop(gotoEnd);
	};

	if(typeof type!=="string"){
	gotoEnd=clearQueue;
	clearQueue=type;
	type=undefined;
	}
	if(clearQueue&&type!==false){
	this.queue(type||"fx",[]);
	}

	return this.each(function(){
	var dequeue=true,
	index=type!=null&&type+"queueHooks",
	timers=jQuery.timers,
	data=jQuery._data(this);

	if(index){
	if(data[index]&&data[index].stop){
	stopQueue(data[index]);
	}
	}else{
	for(index in data){
	if(data[index]&&data[index].stop&&rrun.test(index)){
	stopQueue(data[index]);
	}
	}
	}

	for(index=timers.length;index--;){
	if(timers[index].elem===this&&(
	type==null||timers[index].queue===type)){

	timers[index].anim.stop(gotoEnd);
	dequeue=false;
	timers.splice(index,1);
	}
	}

	// start the next in the queue if the last step wasn't forced
	// timers currently will call their complete callbacks, which will dequeue
	// but only if they were gotoEnd
	if(dequeue||!gotoEnd){
	jQuery.dequeue(this,type);
	}
	});
	},
	finish:function finish(type){
	if(type!==false){
	type=type||"fx";
	}
	return this.each(function(){
	var index,
	data=jQuery._data(this),
	queue=data[type+"queue"],
	hooks=data[type+"queueHooks"],
	timers=jQuery.timers,
	length=queue?queue.length:0;

	// enable finishing flag on private data
	data.finish=true;

	// empty the queue first
	jQuery.queue(this,type,[]);

	if(hooks&&hooks.stop){
	hooks.stop.call(this,true);
	}

	// look for any active animations, and finish them
	for(index=timers.length;index--;){
	if(timers[index].elem===this&&timers[index].queue===type){
	timers[index].anim.stop(true);
	timers.splice(index,1);
	}
	}

	// look for any animations in the old queue and finish them
	for(index=0;index<length;index++){
	if(queue[index]&&queue[index].finish){
	queue[index].finish.call(this);
	}
	}

	// turn off finishing flag
	delete data.finish;
	});
	}});


	jQuery.each(["toggle","show","hide"],function(i,name){
	var cssFn=jQuery.fn[name];
	jQuery.fn[name]=function(speed,easing,callback){
	return speed==null||typeof speed==="boolean"?
	cssFn.apply(this,arguments):
	this.animate(genFx(name,true),speed,easing,callback);
	};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
	slideDown:genFx("show"),
	slideUp:genFx("hide"),
	slideToggle:genFx("toggle"),
	fadeIn:{opacity:"show"},
	fadeOut:{opacity:"hide"},
	fadeToggle:{opacity:"toggle"}},
	function(name,props){
	jQuery.fn[name]=function(speed,easing,callback){
	return this.animate(props,speed,easing,callback);
	};
	});

	jQuery.timers=[];
	jQuery.fx.tick=function(){
	var timer,
	timers=jQuery.timers,
	i=0;

	fxNow=jQuery.now();

	for(;i<timers.length;i++){
	timer=timers[i];

	// Checks the timer has not already been removed
	if(!timer()&&timers[i]===timer){
	timers.splice(i--,1);
	}
	}

	if(!timers.length){
	jQuery.fx.stop();
	}
	fxNow=undefined;
	};

	jQuery.fx.timer=function(timer){
	jQuery.timers.push(timer);
	if(timer()){
	jQuery.fx.start();
	}else{
	jQuery.timers.pop();
	}
	};

	jQuery.fx.interval=13;

	jQuery.fx.start=function(){
	if(!timerId){
	timerId=window.setInterval(jQuery.fx.tick,jQuery.fx.interval);
	}
	};

	jQuery.fx.stop=function(){
	window.clearInterval(timerId);
	timerId=null;
	};

	jQuery.fx.speeds={
	slow:600,
	fast:200,

	// Default speed
	_default:400};



	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay=function(time,type){
	time=jQuery.fx?jQuery.fx.speeds[time]||time:time;
	type=type||"fx";

	return this.queue(type,function(next,hooks){
	var timeout=window.setTimeout(next,time);
	hooks.stop=function(){
	window.clearTimeout(timeout);
	};
	});
	};


	(function(){
	var a,
	input=document.createElement("input"),
	div=document.createElement("div"),
	select=document.createElement("select"),
	opt=select.appendChild(document.createElement("option"));

	// Setup
	div=document.createElement("div");
	div.setAttribute("className","t");
	div.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a=div.getElementsByTagName("a")[0];

	// Support: Windows Web Apps (WWA)
	// `type` must use .setAttribute for WWA (#14901)
	input.setAttribute("type","checkbox");
	div.appendChild(input);

	a=div.getElementsByTagName("a")[0];

	// First batch of tests.
	a.style.cssText="top:1px";

	// Test setAttribute on camelCase class.
	// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute=div.className!=="t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style=/top/.test(a.getAttribute("style"));

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized=a.getAttribute("href")==="/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn=!!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected=opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype=!!document.createElement("form").enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled=true;
	support.optDisabled=!opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input=document.createElement("input");
	input.setAttribute("value","");
	support.input=input.getAttribute("value")==="";

	// Check if an input maintains its value after becoming a radio
	input.value="t";
	input.setAttribute("type","radio");
	support.radioValue=input.value==="t";
	})();


	var rreturn=/\r/g,
	rspaces=/[\x20\t\r\n\f]+/g;

	jQuery.fn.extend({
	val:function val(value){
	var hooks,ret,isFunction,
	elem=this[0];

	if(!arguments.length){
	if(elem){
	hooks=jQuery.valHooks[elem.type]||
	jQuery.valHooks[elem.nodeName.toLowerCase()];

	if(
	hooks&&
	"get"in hooks&&
	(ret=hooks.get(elem,"value"))!==undefined)
	{
	return ret;
	}

	ret=elem.value;

	return typeof ret==="string"?

	// handle most common string cases
	ret.replace(rreturn,""):

	// handle cases where value is null/undef or number
	ret==null?"":ret;
	}

	return;
	}

	isFunction=jQuery.isFunction(value);

	return this.each(function(i){
	var val;

	if(this.nodeType!==1){
	return;
	}

	if(isFunction){
	val=value.call(this,i,jQuery(this).val());
	}else{
	val=value;
	}

	// Treat null/undefined as ""; convert numbers to string
	if(val==null){
	val="";
	}else if(typeof val==="number"){
	val+="";
	}else if(jQuery.isArray(val)){
	val=jQuery.map(val,function(value){
	return value==null?"":value+"";
	});
	}

	hooks=jQuery.valHooks[this.type]||jQuery.valHooks[this.nodeName.toLowerCase()];

	// If set returns undefined, fall back to normal setting
	if(!hooks||!("set"in hooks)||hooks.set(this,val,"value")===undefined){
	this.value=val;
	}
	});
	}});


	jQuery.extend({
	valHooks:{
	option:{
	get:function get(elem){
	var val=jQuery.find.attr(elem,"value");
	return val!=null?
	val:

	// Support: IE10-11+
	// option.text throws exceptions (#14686, #14858)
	// Strip and collapse whitespace
	// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
	jQuery.trim(jQuery.text(elem)).replace(rspaces," ");
	}},

	select:{
	get:function get(elem){
	var value,option,
	options=elem.options,
	index=elem.selectedIndex,
	one=elem.type==="select-one"||index<0,
	values=one?null:[],
	max=one?index+1:options.length,
	i=index<0?
	max:
	one?index:0;

	// Loop through all the selected options
	for(;i<max;i++){
	option=options[i];

	// oldIE doesn't update selected after form reset (#2551)
	if((option.selected||i===index)&&(

	// Don't return options that are disabled or in a disabled optgroup
	support.optDisabled?
	!option.disabled:
	option.getAttribute("disabled")===null)&&(
	!option.parentNode.disabled||
	!jQuery.nodeName(option.parentNode,"optgroup"))){

	// Get the specific value for the option
	value=jQuery(option).val();

	// We don't need an array for one selects
	if(one){
	return value;
	}

	// Multi-Selects return an array
	values.push(value);
	}
	}

	return values;
	},

	set:function set(elem,value){
	var optionSet,option,
	options=elem.options,
	values=jQuery.makeArray(value),
	i=options.length;

	while(i--){
	option=options[i];

	if(jQuery.inArray(jQuery.valHooks.option.get(option),values)>-1){

	// Support: IE6
	// When new option element is added to select box we need to
	// force reflow of newly added node in order to workaround delay
	// of initialization properties
	try{
	option.selected=optionSet=true;

	}catch(_){

	// Will be executed only in IE6
	option.scrollHeight;
	}

	}else{
	option.selected=false;
	}
	}

	// Force browsers to behave consistently when non-matching value is set
	if(!optionSet){
	elem.selectedIndex=-1;
	}

	return options;
	}}}});




	// Radios and checkboxes getter/setter
	jQuery.each(["radio","checkbox"],function(){
	jQuery.valHooks[this]={
	set:function set(elem,value){
	if(jQuery.isArray(value)){
	return elem.checked=jQuery.inArray(jQuery(elem).val(),value)>-1;
	}
	}};

	if(!support.checkOn){
	jQuery.valHooks[this].get=function(elem){
	return elem.getAttribute("value")===null?"on":elem.value;
	};
	}
	});




	var nodeHook,boolHook,
	attrHandle=jQuery.expr.attrHandle,
	ruseDefault=/^(?:checked|selected)$/i,
	getSetAttribute=support.getSetAttribute,
	getSetInput=support.input;

	jQuery.fn.extend({
	attr:function attr(name,value){
	return access(this,jQuery.attr,name,value,arguments.length>1);
	},

	removeAttr:function removeAttr(name){
	return this.each(function(){
	jQuery.removeAttr(this,name);
	});
	}});


	jQuery.extend({
	attr:function attr(elem,name,value){
	var ret,hooks,
	nType=elem.nodeType;

	// Don't get/set attributes on text, comment and attribute nodes
	if(nType===3||nType===8||nType===2){
	return;
	}

	// Fallback to prop when attributes are not supported
	if(typeof elem.getAttribute==="undefined"){
	return jQuery.prop(elem,name,value);
	}

	// All attributes are lowercase
	// Grab necessary hook if one is defined
	if(nType!==1||!jQuery.isXMLDoc(elem)){
	name=name.toLowerCase();
	hooks=jQuery.attrHooks[name]||(
	jQuery.expr.match.bool.test(name)?boolHook:nodeHook);
	}

	if(value!==undefined){
	if(value===null){
	jQuery.removeAttr(elem,name);
	return;
	}

	if(hooks&&"set"in hooks&&
	(ret=hooks.set(elem,value,name))!==undefined){
	return ret;
	}

	elem.setAttribute(name,value+"");
	return value;
	}

	if(hooks&&"get"in hooks&&(ret=hooks.get(elem,name))!==null){
	return ret;
	}

	ret=jQuery.find.attr(elem,name);

	// Non-existent attributes return null, we normalize to undefined
	return ret==null?undefined:ret;
	},

	attrHooks:{
	type:{
	set:function set(elem,value){
	if(!support.radioValue&&value==="radio"&&
	jQuery.nodeName(elem,"input")){

	// Setting the type on a radio button after the value resets the value in IE8-9
	// Reset value to default in case type is set after value during creation
	var val=elem.value;
	elem.setAttribute("type",value);
	if(val){
	elem.value=val;
	}
	return value;
	}
	}}},



	removeAttr:function removeAttr(elem,value){
	var name,propName,
	i=0,
	attrNames=value&&value.match(rnotwhite);

	if(attrNames&&elem.nodeType===1){
	while(name=attrNames[i++]){
	propName=jQuery.propFix[name]||name;

	// Boolean attributes get special treatment (#10870)
	if(jQuery.expr.match.bool.test(name)){

	// Set corresponding property to false
	if(getSetInput&&getSetAttribute||!ruseDefault.test(name)){
	elem[propName]=false;

	// Support: IE<9
	// Also clear defaultChecked/defaultSelected (if appropriate)
	}else{
	elem[jQuery.camelCase("default-"+name)]=
	elem[propName]=false;
	}

	// See #9699 for explanation of this approach (setting first, then removal)
	}else{
	jQuery.attr(elem,name,"");
	}

	elem.removeAttribute(getSetAttribute?name:propName);
	}
	}
	}});


	// Hooks for boolean attributes
	boolHook={
	set:function set(elem,value,name){
	if(value===false){

	// Remove boolean attributes when set to false
	jQuery.removeAttr(elem,name);
	}else if(getSetInput&&getSetAttribute||!ruseDefault.test(name)){

	// IE<8 needs the *property* name
	elem.setAttribute(!getSetAttribute&&jQuery.propFix[name]||name,name);

	}else{

	// Support: IE<9
	// Use defaultChecked and defaultSelected for oldIE
	elem[jQuery.camelCase("default-"+name)]=elem[name]=true;
	}
	return name;
	}};


	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g),function(i,name){
	var getter=attrHandle[name]||jQuery.find.attr;

	if(getSetInput&&getSetAttribute||!ruseDefault.test(name)){
	attrHandle[name]=function(elem,name,isXML){
	var ret,handle;
	if(!isXML){

	// Avoid an infinite loop by temporarily removing this function from the getter
	handle=attrHandle[name];
	attrHandle[name]=ret;
	ret=getter(elem,name,isXML)!=null?
	name.toLowerCase():
	null;
	attrHandle[name]=handle;
	}
	return ret;
	};
	}else{
	attrHandle[name]=function(elem,name,isXML){
	if(!isXML){
	return elem[jQuery.camelCase("default-"+name)]?
	name.toLowerCase():
	null;
	}
	};
	}
	});

	// fix oldIE attroperties
	if(!getSetInput||!getSetAttribute){
	jQuery.attrHooks.value={
	set:function set(elem,value,name){
	if(jQuery.nodeName(elem,"input")){

	// Does not return so that setAttribute is also used
	elem.defaultValue=value;
	}else{

	// Use nodeHook if defined (#1954); otherwise setAttribute is fine
	return nodeHook&&nodeHook.set(elem,value,name);
	}
	}};

	}

	// IE6/7 do not support getting/setting some attributes with get/setAttribute
	if(!getSetAttribute){

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook={
	set:function set(elem,value,name){

	// Set the existing or create a new attribute node
	var ret=elem.getAttributeNode(name);
	if(!ret){
	elem.setAttributeNode(
	ret=elem.ownerDocument.createAttribute(name));

	}

	ret.value=value+="";

	// Break association with cloned elements by also using setAttribute (#9646)
	if(name==="value"||value===elem.getAttribute(name)){
	return value;
	}
	}};


	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id=attrHandle.name=attrHandle.coords=
	function(elem,name,isXML){
	var ret;
	if(!isXML){
	return(ret=elem.getAttributeNode(name))&&ret.value!==""?
	ret.value:
	null;
	}
	};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button={
	get:function get(elem,name){
	var ret=elem.getAttributeNode(name);
	if(ret&&ret.specified){
	return ret.value;
	}
	},
	set:nodeHook.set};


	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable={
	set:function set(elem,value,name){
	nodeHook.set(elem,value===""?false:value,name);
	}};


	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each(["width","height"],function(i,name){
	jQuery.attrHooks[name]={
	set:function set(elem,value){
	if(value===""){
	elem.setAttribute(name,"auto");
	return value;
	}
	}};

	});
	}

	if(!support.style){
	jQuery.attrHooks.style={
	get:function get(elem){

	// Return undefined in the case of empty string
	// Note: IE uppercases css property names, but if we were to .toLowerCase()
	// .cssText, that would destroy case sensitivity in URL's, like in "background"
	return elem.style.cssText||undefined;
	},
	set:function set(elem,value){
	return elem.style.cssText=value+"";
	}};

	}




	var rfocusable=/^(?:input|select|textarea|button|object)$/i,
	rclickable=/^(?:a|area)$/i;

	jQuery.fn.extend({
	prop:function prop(name,value){
	return access(this,jQuery.prop,name,value,arguments.length>1);
	},

	removeProp:function removeProp(name){
	name=jQuery.propFix[name]||name;
	return this.each(function(){

	// try/catch handles cases where IE balks (such as removing a property on window)
	try{
	this[name]=undefined;
	delete this[name];
	}catch(e){}
	});
	}});


	jQuery.extend({
	prop:function prop(elem,name,value){
	var ret,hooks,
	nType=elem.nodeType;

	// Don't get/set properties on text, comment and attribute nodes
	if(nType===3||nType===8||nType===2){
	return;
	}

	if(nType!==1||!jQuery.isXMLDoc(elem)){

	// Fix name and attach hooks
	name=jQuery.propFix[name]||name;
	hooks=jQuery.propHooks[name];
	}

	if(value!==undefined){
	if(hooks&&"set"in hooks&&
	(ret=hooks.set(elem,value,name))!==undefined){
	return ret;
	}

	return elem[name]=value;
	}

	if(hooks&&"get"in hooks&&(ret=hooks.get(elem,name))!==null){
	return ret;
	}

	return elem[name];
	},

	propHooks:{
	tabIndex:{
	get:function get(elem){

	// elem.tabIndex doesn't always return the
	// correct value when it hasn't been explicitly set
	// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
	// Use proper attribute retrieval(#12072)
	var tabindex=jQuery.find.attr(elem,"tabindex");

	return tabindex?
	parseInt(tabindex,10):
	rfocusable.test(elem.nodeName)||
	rclickable.test(elem.nodeName)&&elem.href?
	0:
	-1;
	}}},



	propFix:{
	"for":"htmlFor",
	"class":"className"}});



	// Some attributes require a special call on IE
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if(!support.hrefNormalized){

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each(["href","src"],function(i,name){
	jQuery.propHooks[name]={
	get:function get(elem){
	return elem.getAttribute(name,4);
	}};

	});
	}

	// Support: Safari, IE9+
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if(!support.optSelected){
	jQuery.propHooks.selected={
	get:function get(elem){
	var parent=elem.parentNode;

	if(parent){
	parent.selectedIndex;

	// Make sure that it also works with optgroups, see #5701
	if(parent.parentNode){
	parent.parentNode.selectedIndex;
	}
	}
	return null;
	},
	set:function set(elem){
	var parent=elem.parentNode;
	if(parent){
	parent.selectedIndex;

	if(parent.parentNode){
	parent.parentNode.selectedIndex;
	}
	}
	}};

	}

	jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"],
	function(){
	jQuery.propFix[this.toLowerCase()]=this;
	});

	// IE6/7 call enctype encoding
	if(!support.enctype){
	jQuery.propFix.enctype="encoding";
	}




	var rclass=/[\t\r\n\f]/g;

	function getClass(elem){
	return jQuery.attr(elem,"class")||"";
	}

	jQuery.fn.extend({
	addClass:function addClass(value){
	var classes,elem,cur,curValue,clazz,j,finalValue,
	i=0;

	if(jQuery.isFunction(value)){
	return this.each(function(j){
	jQuery(this).addClass(value.call(this,j,getClass(this)));
	});
	}

	if(typeof value==="string"&&value){
	classes=value.match(rnotwhite)||[];

	while(elem=this[i++]){
	curValue=getClass(elem);
	cur=elem.nodeType===1&&
	(" "+curValue+" ").replace(rclass," ");

	if(cur){
	j=0;
	while(clazz=classes[j++]){
	if(cur.indexOf(" "+clazz+" ")<0){
	cur+=clazz+" ";
	}
	}

	// only assign if different to avoid unneeded rendering.
	finalValue=jQuery.trim(cur);
	if(curValue!==finalValue){
	jQuery.attr(elem,"class",finalValue);
	}
	}
	}
	}

	return this;
	},

	removeClass:function removeClass(value){
	var classes,elem,cur,curValue,clazz,j,finalValue,
	i=0;

	if(jQuery.isFunction(value)){
	return this.each(function(j){
	jQuery(this).removeClass(value.call(this,j,getClass(this)));
	});
	}

	if(!arguments.length){
	return this.attr("class","");
	}

	if(typeof value==="string"&&value){
	classes=value.match(rnotwhite)||[];

	while(elem=this[i++]){
	curValue=getClass(elem);

	// This expression is here for better compressibility (see addClass)
	cur=elem.nodeType===1&&
	(" "+curValue+" ").replace(rclass," ");

	if(cur){
	j=0;
	while(clazz=classes[j++]){

	// Remove *all* instances
	while(cur.indexOf(" "+clazz+" ")>-1){
	cur=cur.replace(" "+clazz+" "," ");
	}
	}

	// Only assign if different to avoid unneeded rendering.
	finalValue=jQuery.trim(cur);
	if(curValue!==finalValue){
	jQuery.attr(elem,"class",finalValue);
	}
	}
	}
	}

	return this;
	},

	toggleClass:function toggleClass(value,stateVal){
	var type=typeof value==="undefined"?"undefined":_typeof(value);

	if(typeof stateVal==="boolean"&&type==="string"){
	return stateVal?this.addClass(value):this.removeClass(value);
	}

	if(jQuery.isFunction(value)){
	return this.each(function(i){
	jQuery(this).toggleClass(
	value.call(this,i,getClass(this),stateVal),
	stateVal);

	});
	}

	return this.each(function(){
	var className,i,self,classNames;

	if(type==="string"){

	// Toggle individual class names
	i=0;
	self=jQuery(this);
	classNames=value.match(rnotwhite)||[];

	while(className=classNames[i++]){

	// Check each className given, space separated list
	if(self.hasClass(className)){
	self.removeClass(className);
	}else{
	self.addClass(className);
	}
	}

	// Toggle whole class name
	}else if(value===undefined||type==="boolean"){
	className=getClass(this);
	if(className){

	// store className if set
	jQuery._data(this,"__className__",className);
	}

	// If the element has a class name or if we're passed "false",
	// then remove the whole classname (if there was one, the above saved it).
	// Otherwise bring back whatever was previously saved (if anything),
	// falling back to the empty string if nothing was stored.
	jQuery.attr(this,"class",
	className||value===false?
	"":
	jQuery._data(this,"__className__")||"");

	}
	});
	},

	hasClass:function hasClass(selector){
	var className,elem,
	i=0;

	className=" "+selector+" ";
	while(elem=this[i++]){
	if(elem.nodeType===1&&
	(" "+getClass(elem)+" ").replace(rclass," ").
	indexOf(className)>-1)
	{
	return true;
	}
	}

	return false;
	}});





	// Return jQuery for attributes-only inclusion


	jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick "+
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+
	"change select submit keydown keypress keyup error contextmenu").split(" "),
	function(i,name){

	// Handle event binding
	jQuery.fn[name]=function(data,fn){
	return arguments.length>0?
	this.on(name,null,data,fn):
	this.trigger(name);
	};
	});

	jQuery.fn.extend({
	hover:function hover(fnOver,fnOut){
	return this.mouseenter(fnOver).mouseleave(fnOut||fnOver);
	}});



	var location=window.location;

	var nonce=jQuery.now();

	var rquery=/\?/;



	var rvalidtokens=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

	jQuery.parseJSON=function(data){

	// Attempt to parse using the native JSON parser first
	if(window.JSON&&window.JSON.parse){

	// Support: Android 2.3
	// Workaround failure to string-cast null input
	return window.JSON.parse(data+"");
	}

	var requireNonComma,
	depth=null,
	str=jQuery.trim(data+"");

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str&&!jQuery.trim(str.replace(rvalidtokens,function(token,comma,open,close){

	// Force termination if we see a misplaced comma
	if(requireNonComma&&comma){
	depth=0;
	}

	// Perform no more replacements after returning to outermost depth
	if(depth===0){
	return token;
	}

	// Commas must not follow "[", "{", or ","
	requireNonComma=open||comma;

	// Determine new depth
	// array/object open ("[" or "{"): depth += true - false (increment)
	// array/object close ("]" or "}"): depth += false - true (decrement)
	// other cases ("," or primitive): depth += true - true (numeric cast)
	depth+=!close-!open;

	// Remove this token
	return"";
	}))?
	Function("return "+str)():
	jQuery.error("Invalid JSON: "+data);
	};


	// Cross-browser xml parsing
	jQuery.parseXML=function(data){
	var xml,tmp;
	if(!data||typeof data!=="string"){
	return null;
	}
	try{
	if(window.DOMParser){// Standard
	tmp=new window.DOMParser();
	xml=tmp.parseFromString(data,"text/xml");
	}else{// IE
	xml=new window.ActiveXObject("Microsoft.XMLDOM");
	xml.async="false";
	xml.loadXML(data);
	}
	}catch(e){
	xml=undefined;
	}
	if(!xml||!xml.documentElement||xml.getElementsByTagName("parsererror").length){
	jQuery.error("Invalid XML: "+data);
	}
	return xml;
	};


	var
	rhash=/#.*$/,
	rts=/([?&])_=[^&]*/,

	// IE leaves an \r character at EOL
	rheaders=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent=/^(?:GET|HEAD)$/,
	rprotocol=/^\/\//,
	rurl=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
	prefilters={},

	/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
	transports={},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes="*/".concat("*"),

	// Document location
	ajaxLocation=location.href,

	// Segment location into parts
	ajaxLocParts=rurl.exec(ajaxLocation.toLowerCase())||[];

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure){

	// dataTypeExpression is optional and defaults to "*"
	return function(dataTypeExpression,func){

	if(typeof dataTypeExpression!=="string"){
	func=dataTypeExpression;
	dataTypeExpression="*";
	}

	var dataType,
	i=0,
	dataTypes=dataTypeExpression.toLowerCase().match(rnotwhite)||[];

	if(jQuery.isFunction(func)){

	// For each dataType in the dataTypeExpression
	while(dataType=dataTypes[i++]){

	// Prepend if requested
	if(dataType.charAt(0)==="+"){
	dataType=dataType.slice(1)||"*";
	(structure[dataType]=structure[dataType]||[]).unshift(func);

	// Otherwise append
	}else{
	(structure[dataType]=structure[dataType]||[]).push(func);
	}
	}
	}
	};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure,options,originalOptions,jqXHR){

	var inspected={},
	seekingTransport=structure===transports;

	function inspect(dataType){
	var selected;
	inspected[dataType]=true;
	jQuery.each(structure[dataType]||[],function(_,prefilterOrFactory){
	var dataTypeOrTransport=prefilterOrFactory(options,originalOptions,jqXHR);
	if(typeof dataTypeOrTransport==="string"&&
	!seekingTransport&&!inspected[dataTypeOrTransport]){

	options.dataTypes.unshift(dataTypeOrTransport);
	inspect(dataTypeOrTransport);
	return false;
	}else if(seekingTransport){
	return!(selected=dataTypeOrTransport);
	}
	});
	return selected;
	}

	return inspect(options.dataTypes[0])||!inspected["*"]&&inspect("*");
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target,src){
	var deep,key,
	flatOptions=jQuery.ajaxSettings.flatOptions||{};

	for(key in src){
	if(src[key]!==undefined){
	(flatOptions[key]?target:deep||(deep={}))[key]=src[key];
	}
	}
	if(deep){
	jQuery.extend(true,target,deep);
	}

	return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses(s,jqXHR,responses){
	var firstDataType,ct,finalDataType,type,
	contents=s.contents,
	dataTypes=s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while(dataTypes[0]==="*"){
	dataTypes.shift();
	if(ct===undefined){
	ct=s.mimeType||jqXHR.getResponseHeader("Content-Type");
	}
	}

	// Check if we're dealing with a known content-type
	if(ct){
	for(type in contents){
	if(contents[type]&&contents[type].test(ct)){
	dataTypes.unshift(type);
	break;
	}
	}
	}

	// Check to see if we have a response for the expected dataType
	if(dataTypes[0]in responses){
	finalDataType=dataTypes[0];
	}else{

	// Try convertible dataTypes
	for(type in responses){
	if(!dataTypes[0]||s.converters[type+" "+dataTypes[0]]){
	finalDataType=type;
	break;
	}
	if(!firstDataType){
	firstDataType=type;
	}
	}

	// Or just use first one
	finalDataType=finalDataType||firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if(finalDataType){
	if(finalDataType!==dataTypes[0]){
	dataTypes.unshift(finalDataType);
	}
	return responses[finalDataType];
	}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert(s,response,jqXHR,isSuccess){
	var conv2,current,conv,tmp,prev,
	converters={},

	// Work with a copy of dataTypes in case we need to modify it for conversion
	dataTypes=s.dataTypes.slice();

	// Create converters map with lowercased keys
	if(dataTypes[1]){
	for(conv in s.converters){
	converters[conv.toLowerCase()]=s.converters[conv];
	}
	}

	current=dataTypes.shift();

	// Convert to each sequential dataType
	while(current){

	if(s.responseFields[current]){
	jqXHR[s.responseFields[current]]=response;
	}

	// Apply the dataFilter if provided
	if(!prev&&isSuccess&&s.dataFilter){
	response=s.dataFilter(response,s.dataType);
	}

	prev=current;
	current=dataTypes.shift();

	if(current){

	// There's only work to do if current dataType is non-auto
	if(current==="*"){

	current=prev;

	// Convert response if prev dataType is non-auto and differs from current
	}else if(prev!=="*"&&prev!==current){

	// Seek a direct converter
	conv=converters[prev+" "+current]||converters["* "+current];

	// If none found, seek a pair
	if(!conv){
	for(conv2 in converters){

	// If conv2 outputs current
	tmp=conv2.split(" ");
	if(tmp[1]===current){

	// If prev can be converted to accepted input
	conv=converters[prev+" "+tmp[0]]||
	converters["* "+tmp[0]];
	if(conv){

	// Condense equivalence converters
	if(conv===true){
	conv=converters[conv2];

	// Otherwise, insert the intermediate dataType
	}else if(converters[conv2]!==true){
	current=tmp[0];
	dataTypes.unshift(tmp[1]);
	}
	break;
	}
	}
	}
	}

	// Apply converter (if not an equivalence)
	if(conv!==true){

	// Unless errors are allowed to bubble, catch and return them
	if(conv&&s["throws"]){// jscs:ignore requireDotNotation
	response=conv(response);
	}else{
	try{
	response=conv(response);
	}catch(e){
	return{
	state:"parsererror",
	error:conv?e:"No conversion from "+prev+" to "+current};

	}
	}
	}
	}
	}
	}

	return{state:"success",data:response};
	}

	jQuery.extend({

	// Counter for holding the number of active queries
	active:0,

	// Last-Modified header cache for next request
	lastModified:{},
	etag:{},

	ajaxSettings:{
	url:ajaxLocation,
	type:"GET",
	isLocal:rlocalProtocol.test(ajaxLocParts[1]),
	global:true,
	processData:true,
	async:true,
	contentType:"application/x-www-form-urlencoded; charset=UTF-8",
	/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

	accepts:{
	"*":allTypes,
	text:"text/plain",
	html:"text/html",
	xml:"application/xml, text/xml",
	json:"application/json, text/javascript"},


	contents:{
	xml:/\bxml\b/,
	html:/\bhtml/,
	json:/\bjson\b/},


	responseFields:{
	xml:"responseXML",
	text:"responseText",
	json:"responseJSON"},


	// Data converters
	// Keys separate source (or catchall "*") and destination types with a single space
	converters:{

	// Convert anything to text
	"* text":String,

	// Text to html (true = no transformation)
	"text html":true,

	// Evaluate text as a json expression
	"text json":jQuery.parseJSON,

	// Parse text as xml
	"text xml":jQuery.parseXML},


	// For options that shouldn't be deep extended:
	// you can add your own custom options here if
	// and when you create one that shouldn't be
	// deep extended (see ajaxExtend)
	flatOptions:{
	url:true,
	context:true}},



	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup:function ajaxSetup(target,settings){
	return settings?

	// Building a settings object
	ajaxExtend(ajaxExtend(target,jQuery.ajaxSettings),settings):

	// Extending ajaxSettings
	ajaxExtend(jQuery.ajaxSettings,target);
	},

	ajaxPrefilter:addToPrefiltersOrTransports(prefilters),
	ajaxTransport:addToPrefiltersOrTransports(transports),

	// Main method
	ajax:function ajax(url,options){

	// If url is an object, simulate pre-1.5 signature
	if((typeof url==="undefined"?"undefined":_typeof(url))==="object"){
	options=url;
	url=undefined;
	}

	// Force options to be an object
	options=options||{};

	var

	// Cross-domain detection vars
	parts,

	// Loop variable
	i,

	// URL without anti-cache param
	cacheURL,

	// Response headers as string
	responseHeadersString,

	// timeout handle
	timeoutTimer,

	// To know if global events are to be dispatched
	fireGlobals,

	transport,

	// Response headers
	responseHeaders,

	// Create the final options object
	s=jQuery.ajaxSetup({},options),

	// Callbacks context
	callbackContext=s.context||s,

	// Context for global events is callbackContext if it is a DOM node or jQuery collection
	globalEventContext=s.context&&(
	callbackContext.nodeType||callbackContext.jquery)?
	jQuery(callbackContext):
	jQuery.event,

	// Deferreds
	deferred=jQuery.Deferred(),
	completeDeferred=jQuery.Callbacks("once memory"),

	// Status-dependent callbacks
	_statusCode=s.statusCode||{},

	// Headers (they are sent all at once)
	requestHeaders={},
	requestHeadersNames={},

	// The jqXHR state
	state=0,

	// Default abort message
	strAbort="canceled",

	// Fake xhr
	jqXHR={
	readyState:0,

	// Builds headers hashtable if needed
	getResponseHeader:function getResponseHeader(key){
	var match;
	if(state===2){
	if(!responseHeaders){
	responseHeaders={};
	while(match=rheaders.exec(responseHeadersString)){
	responseHeaders[match[1].toLowerCase()]=match[2];
	}
	}
	match=responseHeaders[key.toLowerCase()];
	}
	return match==null?null:match;
	},

	// Raw string
	getAllResponseHeaders:function getAllResponseHeaders(){
	return state===2?responseHeadersString:null;
	},

	// Caches the header
	setRequestHeader:function setRequestHeader(name,value){
	var lname=name.toLowerCase();
	if(!state){
	name=requestHeadersNames[lname]=requestHeadersNames[lname]||name;
	requestHeaders[name]=value;
	}
	return this;
	},

	// Overrides response content-type header
	overrideMimeType:function overrideMimeType(type){
	if(!state){
	s.mimeType=type;
	}
	return this;
	},

	// Status-dependent callbacks
	statusCode:function statusCode(map){
	var code;
	if(map){
	if(state<2){
	for(code in map){

	// Lazy-add the new callback in a way that preserves old ones
	_statusCode[code]=[_statusCode[code],map[code]];
	}
	}else{

	// Execute the appropriate callbacks
	jqXHR.always(map[jqXHR.status]);
	}
	}
	return this;
	},

	// Cancel the request
	abort:function abort(statusText){
	var finalText=statusText||strAbort;
	if(transport){
	transport.abort(finalText);
	}
	done(0,finalText);
	return this;
	}};


	// Attach deferreds
	deferred.promise(jqXHR).complete=completeDeferred.add;
	jqXHR.success=jqXHR.done;
	jqXHR.error=jqXHR.fail;

	// Remove hash character (#7531: and string promotion)
	// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
	// Handle falsy url in the settings object (#10093: consistency with old signature)
	// We also use the url parameter if available
	s.url=((url||s.url||ajaxLocation)+"").
	replace(rhash,"").
	replace(rprotocol,ajaxLocParts[1]+"//");

	// Alias method option to type as per ticket #12004
	s.type=options.method||options.type||s.method||s.type;

	// Extract dataTypes list
	s.dataTypes=jQuery.trim(s.dataType||"*").toLowerCase().match(rnotwhite)||[""];

	// A cross-domain request is in order when we have a protocol:host:port mismatch
	if(s.crossDomain==null){
	parts=rurl.exec(s.url.toLowerCase());
	s.crossDomain=!!(parts&&(
	parts[1]!==ajaxLocParts[1]||parts[2]!==ajaxLocParts[2]||
	(parts[3]||(parts[1]==="http:"?"80":"443"))!==(
	ajaxLocParts[3]||(ajaxLocParts[1]==="http:"?"80":"443"))));

	}

	// Convert data if not already a string
	if(s.data&&s.processData&&typeof s.data!=="string"){
	s.data=jQuery.param(s.data,s.traditional);
	}

	// Apply prefilters
	inspectPrefiltersOrTransports(prefilters,s,options,jqXHR);

	// If request was aborted inside a prefilter, stop there
	if(state===2){
	return jqXHR;
	}

	// We can fire global events as of now if asked to
	// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
	fireGlobals=jQuery.event&&s.global;

	// Watch for a new set of requests
	if(fireGlobals&&jQuery.active++===0){
	jQuery.event.trigger("ajaxStart");
	}

	// Uppercase the type
	s.type=s.type.toUpperCase();

	// Determine if request has content
	s.hasContent=!rnoContent.test(s.type);

	// Save the URL in case we're toying with the If-Modified-Since
	// and/or If-None-Match header later on
	cacheURL=s.url;

	// More options handling for requests with no content
	if(!s.hasContent){

	// If data is available, append data to url
	if(s.data){
	cacheURL=s.url+=(rquery.test(cacheURL)?"&":"?")+s.data;

	// #9682: remove data so that it's not used in an eventual retry
	delete s.data;
	}

	// Add anti-cache in url if needed
	if(s.cache===false){
	s.url=rts.test(cacheURL)?

	// If there is already a '_' parameter, set its value
	cacheURL.replace(rts,"$1_="+nonce++):

	// Otherwise add one to the end
	cacheURL+(rquery.test(cacheURL)?"&":"?")+"_="+nonce++;
	}
	}

	// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
	if(s.ifModified){
	if(jQuery.lastModified[cacheURL]){
	jqXHR.setRequestHeader("If-Modified-Since",jQuery.lastModified[cacheURL]);
	}
	if(jQuery.etag[cacheURL]){
	jqXHR.setRequestHeader("If-None-Match",jQuery.etag[cacheURL]);
	}
	}

	// Set the correct header, if data is being sent
	if(s.data&&s.hasContent&&s.contentType!==false||options.contentType){
	jqXHR.setRequestHeader("Content-Type",s.contentType);
	}

	// Set the Accepts header for the server, depending on the dataType
	jqXHR.setRequestHeader(
	"Accept",
	s.dataTypes[0]&&s.accepts[s.dataTypes[0]]?
	s.accepts[s.dataTypes[0]]+(
	s.dataTypes[0]!=="*"?", "+allTypes+"; q=0.01":""):
	s.accepts["*"]);


	// Check for headers option
	for(i in s.headers){
	jqXHR.setRequestHeader(i,s.headers[i]);
	}

	// Allow custom headers/mimetypes and early abort
	if(s.beforeSend&&(
	s.beforeSend.call(callbackContext,jqXHR,s)===false||state===2)){

	// Abort if not done already and return
	return jqXHR.abort();
	}

	// aborting is no longer a cancellation
	strAbort="abort";

	// Install callbacks on deferreds
	for(i in{success:1,error:1,complete:1}){
	jqXHR[i](s[i]);
	}

	// Get transport
	transport=inspectPrefiltersOrTransports(transports,s,options,jqXHR);

	// If no transport, we auto-abort
	if(!transport){
	done(-1,"No Transport");
	}else{
	jqXHR.readyState=1;

	// Send global event
	if(fireGlobals){
	globalEventContext.trigger("ajaxSend",[jqXHR,s]);
	}

	// If request was aborted inside ajaxSend, stop there
	if(state===2){
	return jqXHR;
	}

	// Timeout
	if(s.async&&s.timeout>0){
	timeoutTimer=window.setTimeout(function(){
	jqXHR.abort("timeout");
	},s.timeout);
	}

	try{
	state=1;
	transport.send(requestHeaders,done);
	}catch(e){

	// Propagate exception as error if not done
	if(state<2){
	done(-1,e);

	// Simply rethrow otherwise
	}else{
	throw e;
	}
	}
	}

	// Callback for when everything is done
	function done(status,nativeStatusText,responses,headers){
	var isSuccess,success,error,response,modified,
	statusText=nativeStatusText;

	// Called once
	if(state===2){
	return;
	}

	// State is "done" now
	state=2;

	// Clear timeout if it exists
	if(timeoutTimer){
	window.clearTimeout(timeoutTimer);
	}

	// Dereference transport for early garbage collection
	// (no matter how long the jqXHR object will be used)
	transport=undefined;

	// Cache response headers
	responseHeadersString=headers||"";

	// Set readyState
	jqXHR.readyState=status>0?4:0;

	// Determine if successful
	isSuccess=status>=200&&status<300||status===304;

	// Get response data
	if(responses){
	response=ajaxHandleResponses(s,jqXHR,responses);
	}

	// Convert no matter what (that way responseXXX fields are always set)
	response=ajaxConvert(s,response,jqXHR,isSuccess);

	// If successful, handle type chaining
	if(isSuccess){

	// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
	if(s.ifModified){
	modified=jqXHR.getResponseHeader("Last-Modified");
	if(modified){
	jQuery.lastModified[cacheURL]=modified;
	}
	modified=jqXHR.getResponseHeader("etag");
	if(modified){
	jQuery.etag[cacheURL]=modified;
	}
	}

	// if no content
	if(status===204||s.type==="HEAD"){
	statusText="nocontent";

	// if not modified
	}else if(status===304){
	statusText="notmodified";

	// If we have data, let's convert it
	}else{
	statusText=response.state;
	success=response.data;
	error=response.error;
	isSuccess=!error;
	}
	}else{

	// We extract error from statusText
	// then normalize statusText and status for non-aborts
	error=statusText;
	if(status||!statusText){
	statusText="error";
	if(status<0){
	status=0;
	}
	}
	}

	// Set data for the fake xhr object
	jqXHR.status=status;
	jqXHR.statusText=(nativeStatusText||statusText)+"";

	// Success/Error
	if(isSuccess){
	deferred.resolveWith(callbackContext,[success,statusText,jqXHR]);
	}else{
	deferred.rejectWith(callbackContext,[jqXHR,statusText,error]);
	}

	// Status-dependent callbacks
	jqXHR.statusCode(_statusCode);
	_statusCode=undefined;

	if(fireGlobals){
	globalEventContext.trigger(isSuccess?"ajaxSuccess":"ajaxError",
	[jqXHR,s,isSuccess?success:error]);
	}

	// Complete
	completeDeferred.fireWith(callbackContext,[jqXHR,statusText]);

	if(fireGlobals){
	globalEventContext.trigger("ajaxComplete",[jqXHR,s]);

	// Handle the global AJAX counter
	if(! --jQuery.active){
	jQuery.event.trigger("ajaxStop");
	}
	}
	}

	return jqXHR;
	},

	getJSON:function getJSON(url,data,callback){
	return jQuery.get(url,data,callback,"json");
	},

	getScript:function getScript(url,callback){
	return jQuery.get(url,undefined,callback,"script");
	}});


	jQuery.each(["get","post"],function(i,method){
	jQuery[method]=function(url,data,callback,type){

	// shift arguments if data argument was omitted
	if(jQuery.isFunction(data)){
	type=type||callback;
	callback=data;
	data=undefined;
	}

	// The url can be an options object (which then must have .url)
	return jQuery.ajax(jQuery.extend({
	url:url,
	type:method,
	dataType:type,
	data:data,
	success:callback},
	jQuery.isPlainObject(url)&&url));
	};
	});


	jQuery._evalUrl=function(url){
	return jQuery.ajax({
	url:url,

	// Make this explicit, since user can override this through ajaxSetup (#11264)
	type:"GET",
	dataType:"script",
	cache:true,
	async:false,
	global:false,
	"throws":true});

	};


	jQuery.fn.extend({
	wrapAll:function wrapAll(html){
	if(jQuery.isFunction(html)){
	return this.each(function(i){
	jQuery(this).wrapAll(html.call(this,i));
	});
	}

	if(this[0]){

	// The elements to wrap the target around
	var wrap=jQuery(html,this[0].ownerDocument).eq(0).clone(true);

	if(this[0].parentNode){
	wrap.insertBefore(this[0]);
	}

	wrap.map(function(){
	var elem=this;

	while(elem.firstChild&&elem.firstChild.nodeType===1){
	elem=elem.firstChild;
	}

	return elem;
	}).append(this);
	}

	return this;
	},

	wrapInner:function wrapInner(html){
	if(jQuery.isFunction(html)){
	return this.each(function(i){
	jQuery(this).wrapInner(html.call(this,i));
	});
	}

	return this.each(function(){
	var self=jQuery(this),
	contents=self.contents();

	if(contents.length){
	contents.wrapAll(html);

	}else{
	self.append(html);
	}
	});
	},

	wrap:function wrap(html){
	var isFunction=jQuery.isFunction(html);

	return this.each(function(i){
	jQuery(this).wrapAll(isFunction?html.call(this,i):html);
	});
	},

	unwrap:function unwrap(){
	return this.parent().each(function(){
	if(!jQuery.nodeName(this,"body")){
	jQuery(this).replaceWith(this.childNodes);
	}
	}).end();
	}});



	function getDisplay(elem){
	return elem.style&&elem.style.display||jQuery.css(elem,"display");
	}

	function filterHidden(elem){

	// Disconnected elements are considered hidden
	if(!jQuery.contains(elem.ownerDocument||document,elem)){
	return true;
	}
	while(elem&&elem.nodeType===1){
	if(getDisplay(elem)==="none"||elem.type==="hidden"){
	return true;
	}
	elem=elem.parentNode;
	}
	return false;
	}

	jQuery.expr.filters.hidden=function(elem){

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return support.reliableHiddenOffsets()?
	elem.offsetWidth<=0&&elem.offsetHeight<=0&&
	!elem.getClientRects().length:
	filterHidden(elem);
	};

	jQuery.expr.filters.visible=function(elem){
	return!jQuery.expr.filters.hidden(elem);
	};




	var r20=/%20/g,
	rbracket=/\[\]$/,
	rCRLF=/\r?\n/g,
	rsubmitterTypes=/^(?:submit|button|image|reset|file)$/i,
	rsubmittable=/^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix,obj,traditional,add){
	var name;

	if(jQuery.isArray(obj)){

	// Serialize array item.
	jQuery.each(obj,function(i,v){
	if(traditional||rbracket.test(prefix)){

	// Treat each array item as a scalar.
	add(prefix,v);

	}else{

	// Item is non-scalar (array or object), encode its numeric index.
	buildParams(
	prefix+"["+((typeof v==="undefined"?"undefined":_typeof(v))==="object"&&v!=null?i:"")+"]",
	v,
	traditional,
	add);

	}
	});

	}else if(!traditional&&jQuery.type(obj)==="object"){

	// Serialize object item.
	for(name in obj){
	buildParams(prefix+"["+name+"]",obj[name],traditional,add);
	}

	}else{

	// Serialize scalar item.
	add(prefix,obj);
	}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param=function(a,traditional){
	var prefix,
	s=[],
	add=function add(key,value){

	// If value is a function, invoke it and return its value
	value=jQuery.isFunction(value)?value():value==null?"":value;
	s[s.length]=encodeURIComponent(key)+"="+encodeURIComponent(value);
	};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if(traditional===undefined){
	traditional=jQuery.ajaxSettings&&jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if(jQuery.isArray(a)||a.jquery&&!jQuery.isPlainObject(a)){

	// Serialize the form elements
	jQuery.each(a,function(){
	add(this.name,this.value);
	});

	}else{

	// If traditional, encode the "old" way (the way 1.3.2 or older
	// did it), otherwise encode params recursively.
	for(prefix in a){
	buildParams(prefix,a[prefix],traditional,add);
	}
	}

	// Return the resulting serialization
	return s.join("&").replace(r20,"+");
	};

	jQuery.fn.extend({
	serialize:function serialize(){
	return jQuery.param(this.serializeArray());
	},
	serializeArray:function serializeArray(){
	return this.map(function(){

	// Can add propHook for "elements" to filter or add form elements
	var elements=jQuery.prop(this,"elements");
	return elements?jQuery.makeArray(elements):this;
	}).
	filter(function(){
	var type=this.type;

	// Use .is(":disabled") so that fieldset[disabled] works
	return this.name&&!jQuery(this).is(":disabled")&&
	rsubmittable.test(this.nodeName)&&!rsubmitterTypes.test(type)&&(
	this.checked||!rcheckableType.test(type));
	}).
	map(function(i,elem){
	var val=jQuery(this).val();

	return val==null?
	null:
	jQuery.isArray(val)?
	jQuery.map(val,function(val){
	return{name:elem.name,value:val.replace(rCRLF,"\r\n")};
	}):
	{name:elem.name,value:val.replace(rCRLF,"\r\n")};
	}).get();
	}});



	// Create the request object
	// (This is still attached to ajaxSettings for backward compatibility)
	jQuery.ajaxSettings.xhr=window.ActiveXObject!==undefined?

	// Support: IE6-IE8
	function(){

	// XHR cannot access local files, always use ActiveX for that case
	if(this.isLocal){
	return createActiveXHR();
	}

	// Support: IE 9-11
	// IE seems to error on cross-domain PATCH requests when ActiveX XHR
	// is used. In IE 9+ always use the native XHR.
	// Note: this condition won't catch Edge as it doesn't define
	// document.documentMode but it also doesn't support ActiveX so it won't
	// reach this code.
	if(document.documentMode>8){
	return createStandardXHR();
	}

	// Support: IE<9
	// oldIE XHR does not support non-RFC2616 methods (#13240)
	// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
	// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
	// Although this check for six methods instead of eight
	// since IE also does not support "trace" and "connect"
	return /^(get|post|head|put|delete|options)$/i.test(this.type)&&
	createStandardXHR()||createActiveXHR();
	}:

	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

	var xhrId=0,
	xhrCallbacks={},
	xhrSupported=jQuery.ajaxSettings.xhr();

	// Support: IE<10
	// Open requests must be manually aborted on unload (#5280)
	// See https://support.microsoft.com/kb/2856746 for more info
	if(window.attachEvent){
	window.attachEvent("onunload",function(){
	for(var key in xhrCallbacks){
	xhrCallbacks[key](undefined,true);
	}
	});
	}

	// Determine support properties
	support.cors=!!xhrSupported&&"withCredentials"in xhrSupported;
	xhrSupported=support.ajax=!!xhrSupported;

	// Create transport if the browser can provide an xhr
	if(xhrSupported){

	jQuery.ajaxTransport(function(options){

	// Cross domain only allowed if supported through XMLHttpRequest
	if(!options.crossDomain||support.cors){

	var _callback;

	return{
	send:function send(headers,complete){
	var i,
	xhr=options.xhr(),
	id=++xhrId;

	// Open the socket
	xhr.open(
	options.type,
	options.url,
	options.async,
	options.username,
	options.password);


	// Apply custom fields if provided
	if(options.xhrFields){
	for(i in options.xhrFields){
	xhr[i]=options.xhrFields[i];
	}
	}

	// Override mime type if needed
	if(options.mimeType&&xhr.overrideMimeType){
	xhr.overrideMimeType(options.mimeType);
	}

	// X-Requested-With header
	// For cross-domain requests, seeing as conditions for a preflight are
	// akin to a jigsaw puzzle, we simply never set it to be sure.
	// (it can always be set on a per-request basis or even using ajaxSetup)
	// For same-domain requests, won't change header if already provided.
	if(!options.crossDomain&&!headers["X-Requested-With"]){
	headers["X-Requested-With"]="XMLHttpRequest";
	}

	// Set headers
	for(i in headers){

	// Support: IE<9
	// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
	// request header to a null-value.
	//
	// To keep consistent with other XHR implementations, cast the value
	// to string and ignore `undefined`.
	if(headers[i]!==undefined){
	xhr.setRequestHeader(i,headers[i]+"");
	}
	}

	// Do send the request
	// This may raise an exception which is actually
	// handled in jQuery.ajax (so no try/catch here)
	xhr.send(options.hasContent&&options.data||null);

	// Listener
	_callback=function callback(_,isAbort){
	var status,statusText,responses;

	// Was never called and is aborted or complete
	if(_callback&&(isAbort||xhr.readyState===4)){

	// Clean up
	delete xhrCallbacks[id];
	_callback=undefined;
	xhr.onreadystatechange=jQuery.noop;

	// Abort manually if needed
	if(isAbort){
	if(xhr.readyState!==4){
	xhr.abort();
	}
	}else{
	responses={};
	status=xhr.status;

	// Support: IE<10
	// Accessing binary-data responseText throws an exception
	// (#11426)
	if(typeof xhr.responseText==="string"){
	responses.text=xhr.responseText;
	}

	// Firefox throws an exception when accessing
	// statusText for faulty cross-domain requests
	try{
	statusText=xhr.statusText;
	}catch(e){

	// We normalize with Webkit giving an empty statusText
	statusText="";
	}

	// Filter status for non standard behaviors

	// If the request is local and we have data: assume a success
	// (success with no data won't get notified, that's the best we
	// can do given current implementations)
	if(!status&&options.isLocal&&!options.crossDomain){
	status=responses.text?200:404;

	// IE - #1450: sometimes returns 1223 when it should be 204
	}else if(status===1223){
	status=204;
	}
	}
	}

	// Call complete if needed
	if(responses){
	complete(status,statusText,responses,xhr.getAllResponseHeaders());
	}
	};

	// Do send the request
	// `xhr.send` may raise an exception, but it will be
	// handled in jQuery.ajax (so no try/catch here)
	if(!options.async){

	// If we're in sync mode we fire the callback
	_callback();
	}else if(xhr.readyState===4){

	// (IE6 & IE7) if it's in cache and has been
	// retrieved directly we need to fire the callback
	window.setTimeout(_callback);
	}else{

	// Register the callback, but delay it in case `xhr.send` throws
	// Add to the list of active xhr callbacks
	xhr.onreadystatechange=xhrCallbacks[id]=_callback;
	}
	},

	abort:function abort(){
	if(_callback){
	_callback(undefined,true);
	}
	}};

	}
	});
	}

	// Functions to create xhrs
	function createStandardXHR(){
	try{
	return new window.XMLHttpRequest();
	}catch(e){}
	}

	function createActiveXHR(){
	try{
	return new window.ActiveXObject("Microsoft.XMLHTTP");
	}catch(e){}
	}




	// Install script dataType
	jQuery.ajaxSetup({
	accepts:{
	script:"text/javascript, application/javascript, "+
	"application/ecmascript, application/x-ecmascript"},

	contents:{
	script:/\b(?:java|ecma)script\b/},

	converters:{
	"text script":function textScript(text){
	jQuery.globalEval(text);
	return text;
	}}});



	// Handle cache's special case and global
	jQuery.ajaxPrefilter("script",function(s){
	if(s.cache===undefined){
	s.cache=false;
	}
	if(s.crossDomain){
	s.type="GET";
	s.global=false;
	}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script",function(s){

	// This transport only deals with cross domain requests
	if(s.crossDomain){

	var script,
	head=document.head||jQuery("head")[0]||document.documentElement;

	return{

	send:function send(_,callback){

	script=document.createElement("script");

	script.async=true;

	if(s.scriptCharset){
	script.charset=s.scriptCharset;
	}

	script.src=s.url;

	// Attach handlers for all browsers
	script.onload=script.onreadystatechange=function(_,isAbort){

	if(isAbort||!script.readyState||/loaded|complete/.test(script.readyState)){

	// Handle memory leak in IE
	script.onload=script.onreadystatechange=null;

	// Remove the script
	if(script.parentNode){
	script.parentNode.removeChild(script);
	}

	// Dereference the script
	script=null;

	// Callback if not abort
	if(!isAbort){
	callback(200,"success");
	}
	}
	};

	// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
	// Use native DOM manipulation to avoid our domManip AJAX trickery
	head.insertBefore(script,head.firstChild);
	},

	abort:function abort(){
	if(script){
	script.onload(undefined,true);
	}
	}};

	}
	});




	var oldCallbacks=[],
	rjsonp=/(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
	jsonp:"callback",
	jsonpCallback:function jsonpCallback(){
	var callback=oldCallbacks.pop()||jQuery.expando+"_"+nonce++;
	this[callback]=true;
	return callback;
	}});


	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp",function(s,originalSettings,jqXHR){

	var callbackName,overwritten,responseContainer,
	jsonProp=s.jsonp!==false&&(rjsonp.test(s.url)?
	"url":
	typeof s.data==="string"&&
	(s.contentType||"").
	indexOf("application/x-www-form-urlencoded")===0&&
	rjsonp.test(s.data)&&"data");


	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if(jsonProp||s.dataTypes[0]==="jsonp"){

	// Get callback name, remembering preexisting value associated with it
	callbackName=s.jsonpCallback=jQuery.isFunction(s.jsonpCallback)?
	s.jsonpCallback():
	s.jsonpCallback;

	// Insert callback into url or form data
	if(jsonProp){
	s[jsonProp]=s[jsonProp].replace(rjsonp,"$1"+callbackName);
	}else if(s.jsonp!==false){
	s.url+=(rquery.test(s.url)?"&":"?")+s.jsonp+"="+callbackName;
	}

	// Use data converter to retrieve json after script execution
	s.converters["script json"]=function(){
	if(!responseContainer){
	jQuery.error(callbackName+" was not called");
	}
	return responseContainer[0];
	};

	// force json dataType
	s.dataTypes[0]="json";

	// Install callback
	overwritten=window[callbackName];
	window[callbackName]=function(){
	responseContainer=arguments;
	};

	// Clean-up function (fires after converters)
	jqXHR.always(function(){

	// If previous value didn't exist - remove it
	if(overwritten===undefined){
	jQuery(window).removeProp(callbackName);

	// Otherwise restore preexisting value
	}else{
	window[callbackName]=overwritten;
	}

	// Save back as free
	if(s[callbackName]){

	// make sure that re-using the options doesn't screw things around
	s.jsonpCallback=originalSettings.jsonpCallback;

	// save the callback name for future use
	oldCallbacks.push(callbackName);
	}

	// Call if it was a function and we have a response
	if(responseContainer&&jQuery.isFunction(overwritten)){
	overwritten(responseContainer[0]);
	}

	responseContainer=overwritten=undefined;
	});

	// Delegate to script
	return"script";
	}
	});




	// data: string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML=function(data,context,keepScripts){
	if(!data||typeof data!=="string"){
	return null;
	}
	if(typeof context==="boolean"){
	keepScripts=context;
	context=false;
	}
	context=context||document;

	var parsed=rsingleTag.exec(data),
	scripts=!keepScripts&&[];

	// Single tag
	if(parsed){
	return[context.createElement(parsed[1])];
	}

	parsed=buildFragment([data],context,scripts);

	if(scripts&&scripts.length){
	jQuery(scripts).remove();
	}

	return jQuery.merge([],parsed.childNodes);
	};


	// Keep a copy of the old load method
	var _load=jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load=function(url,params,callback){
	if(typeof url!=="string"&&_load){
	return _load.apply(this,arguments);
	}

	var selector,type,response,
	self=this,
	off=url.indexOf(" ");

	if(off>-1){
	selector=jQuery.trim(url.slice(off,url.length));
	url=url.slice(0,off);
	}

	// If it's a function
	if(jQuery.isFunction(params)){

	// We assume that it's the callback
	callback=params;
	params=undefined;

	// Otherwise, build a param string
	}else if(params&&(typeof params==="undefined"?"undefined":_typeof(params))==="object"){
	type="POST";
	}

	// If we have elements to modify, make the request
	if(self.length>0){
	jQuery.ajax({
	url:url,

	// If "type" variable is undefined, then "GET" method will be used.
	// Make value of this field explicit since
	// user can override it through ajaxSetup method
	type:type||"GET",
	dataType:"html",
	data:params}).
	done(function(responseText){

	// Save response for use in complete callback
	response=arguments;

	self.html(selector?

	// If a selector was specified, locate the right elements in a dummy div
	// Exclude scripts to avoid IE 'Permission Denied' errors
	jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector):

	// Otherwise use the full result
	responseText);

	// If the request succeeds, this function gets "data", "status", "jqXHR"
	// but they are ignored because response was set above.
	// If it fails, this function gets "jqXHR", "status", "error"
	}).always(callback&&function(jqXHR,status){
	self.each(function(){
	callback.apply(this,response||[jqXHR.responseText,status,jqXHR]);
	});
	});
	}

	return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each([
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"],
	function(i,type){
	jQuery.fn[type]=function(fn){
	return this.on(type,fn);
	};
	});




	jQuery.expr.filters.animated=function(elem){
	return jQuery.grep(jQuery.timers,function(fn){
	return elem===fn.elem;
	}).length;
	};





	/**
	 * Gets a window from an element
	 */
	function getWindow(elem){
	return jQuery.isWindow(elem)?
	elem:
	elem.nodeType===9?
	elem.defaultView||elem.parentWindow:
	false;
	}

	jQuery.offset={
	setOffset:function setOffset(elem,options,i){
	var curPosition,curLeft,curCSSTop,curTop,curOffset,curCSSLeft,calculatePosition,
	position=jQuery.css(elem,"position"),
	curElem=jQuery(elem),
	props={};

	// set position first, in-case top/left are set even on static elem
	if(position==="static"){
	elem.style.position="relative";
	}

	curOffset=curElem.offset();
	curCSSTop=jQuery.css(elem,"top");
	curCSSLeft=jQuery.css(elem,"left");
	calculatePosition=(position==="absolute"||position==="fixed")&&
	jQuery.inArray("auto",[curCSSTop,curCSSLeft])>-1;

	// need to be able to calculate position if either top or left
	// is auto and position is either absolute or fixed
	if(calculatePosition){
	curPosition=curElem.position();
	curTop=curPosition.top;
	curLeft=curPosition.left;
	}else{
	curTop=parseFloat(curCSSTop)||0;
	curLeft=parseFloat(curCSSLeft)||0;
	}

	if(jQuery.isFunction(options)){

	// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
	options=options.call(elem,i,jQuery.extend({},curOffset));
	}

	if(options.top!=null){
	props.top=options.top-curOffset.top+curTop;
	}
	if(options.left!=null){
	props.left=options.left-curOffset.left+curLeft;
	}

	if("using"in options){
	options.using.call(elem,props);
	}else{
	curElem.css(props);
	}
	}};


	jQuery.fn.extend({
	offset:function offset(options){
	if(arguments.length){
	return options===undefined?
	this:
	this.each(function(i){
	jQuery.offset.setOffset(this,options,i);
	});
	}

	var docElem,win,
	box={top:0,left:0},
	elem=this[0],
	doc=elem&&elem.ownerDocument;

	if(!doc){
	return;
	}

	docElem=doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if(!jQuery.contains(docElem,elem)){
	return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if(typeof elem.getBoundingClientRect!=="undefined"){
	box=elem.getBoundingClientRect();
	}
	win=getWindow(doc);
	return{
	top:box.top+(win.pageYOffset||docElem.scrollTop)-(docElem.clientTop||0),
	left:box.left+(win.pageXOffset||docElem.scrollLeft)-(docElem.clientLeft||0)};

	},

	position:function position(){
	if(!this[0]){
	return;
	}

	var offsetParent,offset,
	parentOffset={top:0,left:0},
	elem=this[0];

	// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
	// because it is its only offset parent
	if(jQuery.css(elem,"position")==="fixed"){

	// we assume that getBoundingClientRect is available when computed position is fixed
	offset=elem.getBoundingClientRect();
	}else{

	// Get *real* offsetParent
	offsetParent=this.offsetParent();

	// Get correct offsets
	offset=this.offset();
	if(!jQuery.nodeName(offsetParent[0],"html")){
	parentOffset=offsetParent.offset();
	}

	// Add offsetParent borders
	parentOffset.top+=jQuery.css(offsetParent[0],"borderTopWidth",true);
	parentOffset.left+=jQuery.css(offsetParent[0],"borderLeftWidth",true);
	}

	// Subtract parent offsets and element margins
	// note: when an element has margin: auto the offsetLeft and marginLeft
	// are the same in Safari causing offset.left to incorrectly be 0
	return{
	top:offset.top-parentOffset.top-jQuery.css(elem,"marginTop",true),
	left:offset.left-parentOffset.left-jQuery.css(elem,"marginLeft",true)};

	},

	offsetParent:function offsetParent(){
	return this.map(function(){
	var offsetParent=this.offsetParent;

	while(offsetParent&&!jQuery.nodeName(offsetParent,"html")&&
	jQuery.css(offsetParent,"position")==="static"){
	offsetParent=offsetParent.offsetParent;
	}
	return offsetParent||documentElement;
	});
	}});


	// Create scrollLeft and scrollTop methods
	jQuery.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(method,prop){
	var top=/Y/.test(prop);

	jQuery.fn[method]=function(val){
	return access(this,function(elem,method,val){
	var win=getWindow(elem);

	if(val===undefined){
	return win?prop in win?win[prop]:
	win.document.documentElement[method]:
	elem[method];
	}

	if(win){
	win.scrollTo(
	!top?val:jQuery(win).scrollLeft(),
	top?val:jQuery(win).scrollTop());


	}else{
	elem[method]=val;
	}
	},method,val,arguments.length,null);
	};
	});

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	jQuery.each(["top","left"],function(i,prop){
	jQuery.cssHooks[prop]=addGetHookIf(support.pixelPosition,
	function(elem,computed){
	if(computed){
	computed=curCSS(elem,prop);

	// if curCSS returns percentage, fallback to offset
	return rnumnonpx.test(computed)?
	jQuery(elem).position()[prop]+"px":
	computed;
	}
	});

	});


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({Height:"height",Width:"width"},function(name,type){
	jQuery.each({padding:"inner"+name,content:type,"":"outer"+name},
	function(defaultExtra,funcName){

	// margin is only for outerHeight, outerWidth
	jQuery.fn[funcName]=function(margin,value){
	var chainable=arguments.length&&(defaultExtra||typeof margin!=="boolean"),
	extra=defaultExtra||(margin===true||value===true?"margin":"border");

	return access(this,function(elem,type,value){
	var doc;

	if(jQuery.isWindow(elem)){

	// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
	// isn't a whole lot we can do. See pull request at this URL for discussion:
	// https://github.com/jquery/jquery/pull/764
	return elem.document.documentElement["client"+name];
	}

	// Get document width or height
	if(elem.nodeType===9){
	doc=elem.documentElement;

	// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
	// whichever is greatest
	// unfortunately, this causes bug #3838 in IE6/8 only,
	// but there is currently no good, small way to fix it.
	return Math.max(
	elem.body["scroll"+name],doc["scroll"+name],
	elem.body["offset"+name],doc["offset"+name],
	doc["client"+name]);

	}

	return value===undefined?

	// Get width or height on the element, requesting but not forcing parseFloat
	jQuery.css(elem,type,extra):

	// Set width or height on the element
	jQuery.style(elem,type,value,extra);
	},type,chainable?margin:undefined,chainable,null);
	};
	});
	});


	jQuery.fn.extend({

	bind:function bind(types,data,fn){
	return this.on(types,null,data,fn);
	},
	unbind:function unbind(types,fn){
	return this.off(types,null,fn);
	},

	delegate:function delegate(selector,types,data,fn){
	return this.on(types,selector,data,fn);
	},
	undelegate:function undelegate(selector,types,fn){

	// ( namespace ) or ( selector, types [, fn] )
	return arguments.length===1?
	this.off(selector,"**"):
	this.off(types,selector||"**",fn);
	}});


	// The number of elements contained in the matched element set
	jQuery.fn.size=function(){
	return this.length;
	};

	jQuery.fn.andSelf=jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if(true){
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){
	return jQuery;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

	// Map over jQuery in case of overwrite
	_jQuery=window.jQuery,

	// Map over the $ in case of overwrite
	_$=window.$;

	jQuery.noConflict=function(deep){
	if(window.$===jQuery){
	window.$=_$;
	}

	if(deep&&window.jQuery===jQuery){
	window.jQuery=_jQuery;
	}

	return jQuery;
	};

	// Expose jQuery and $ identifiers, even in
	// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if(!noGlobal){
	window.jQuery=window.$=jQuery;
	}

	return jQuery;
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(215)(module)))

/***/ },
/* 215 */
/***/ function(module, exports) {

	"use strict";module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	};

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';module.exports = __webpack_require__(217);

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule update
	 */

	/* global hasOwnProperty:true */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var assign = __webpack_require__(39);
	var keyOf = __webpack_require__(79);
	var invariant = __webpack_require__(13);
	var hasOwnProperty = {}.hasOwnProperty;

	function shallowCopy(x) {
	  if (Array.isArray(x)) {
	    return x.concat();
	  } else if (x && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object') {
	    return assign(new x.constructor(), x);
	  } else {
	    return x;
	  }
	}

	var COMMAND_PUSH = keyOf({ $push: null });
	var COMMAND_UNSHIFT = keyOf({ $unshift: null });
	var COMMAND_SPLICE = keyOf({ $splice: null });
	var COMMAND_SET = keyOf({ $set: null });
	var COMMAND_MERGE = keyOf({ $merge: null });
	var COMMAND_APPLY = keyOf({ $apply: null });

	var ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];

	var ALL_COMMANDS_SET = {};

	ALL_COMMANDS_LIST.forEach(function (command) {
	  ALL_COMMANDS_SET[command] = true;
	});

	function invariantArrayCase(value, spec, command) {
	  !Array.isArray(value) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected target of %s to be an array; got %s.', command, value) : invariant(false) : undefined;
	  var specValue = spec[command];
	  !Array.isArray(specValue) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, specValue) : invariant(false) : undefined;
	}

	function update(value, spec) {
	  !((typeof spec === 'undefined' ? 'undefined' : _typeof(spec)) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): You provided a key path to update() that did not contain one ' + 'of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : invariant(false) : undefined;

	  if (hasOwnProperty.call(spec, COMMAND_SET)) {
	    !(Object.keys(spec).length === 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot have more than one key in an object with %s', COMMAND_SET) : invariant(false) : undefined;

	    return spec[COMMAND_SET];
	  }

	  var nextValue = shallowCopy(value);

	  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
	    var mergeObj = spec[COMMAND_MERGE];
	    !(mergeObj && (typeof mergeObj === 'undefined' ? 'undefined' : _typeof(mergeObj)) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): %s expects a spec of type \'object\'; got %s', COMMAND_MERGE, mergeObj) : invariant(false) : undefined;
	    !(nextValue && (typeof nextValue === 'undefined' ? 'undefined' : _typeof(nextValue)) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): %s expects a target of type \'object\'; got %s', COMMAND_MERGE, nextValue) : invariant(false) : undefined;
	    assign(nextValue, spec[COMMAND_MERGE]);
	  }

	  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
	    invariantArrayCase(value, spec, COMMAND_PUSH);
	    spec[COMMAND_PUSH].forEach(function (item) {
	      nextValue.push(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
	    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
	    spec[COMMAND_UNSHIFT].forEach(function (item) {
	      nextValue.unshift(item);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
	    !Array.isArray(value) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value) : invariant(false) : undefined;
	    !Array.isArray(spec[COMMAND_SPLICE]) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(false) : undefined;
	    spec[COMMAND_SPLICE].forEach(function (args) {
	      !Array.isArray(args) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(false) : undefined;
	      nextValue.splice.apply(nextValue, args);
	    });
	  }

	  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
	    !(typeof spec[COMMAND_APPLY] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]) : invariant(false) : undefined;
	    nextValue = spec[COMMAND_APPLY](nextValue);
	  }

	  for (var k in spec) {
	    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
	      nextValue[k] = update(value[k], spec[k]);
	    }
	  }

	  return nextValue;
	}

	module.exports = update;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};(function webpackUniversalModuleDefinition(root, factory) {
		if (( false ? 'undefined' : _typeof2(exports)) === 'object' && ( false ? 'undefined' : _typeof2(module)) === 'object')
		module.exports = factory(__webpack_require__(219), __webpack_require__(1), __webpack_require__(158));else
		if (true)
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(219), __webpack_require__(1), __webpack_require__(158)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else
		if ((typeof exports === 'undefined' ? 'undefined' : _typeof2(exports)) === 'object')
		exports["mobxReact"] = factory(require("mobx"), require("react"), require("react-dom"));else

		root["mobxReact"] = factory(root["mobx"], root["React"], root["ReactDOM"]);
	})(undefined, function (__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__) {
		return (/******/function (modules) {// webpackBootstrap
				/******/ // The module cache
				/******/var installedModules = {};

				/******/ // The require function
				/******/function __webpack_require__(moduleId) {

					/******/ // Check if module is in cache
					/******/if (installedModules[moduleId])
						/******/return installedModules[moduleId].exports;

					/******/ // Create a new module (and put it into the cache)
					/******/var module = installedModules[moduleId] = {
						/******/exports: {},
						/******/id: moduleId,
						/******/loaded: false
						/******/ };

					/******/ // Execute the module function
					/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

					/******/ // Flag the module as loaded
					/******/module.loaded = true;

					/******/ // Return the exports of the module
					/******/return module.exports;
					/******/}


				/******/ // expose the modules object (__webpack_modules__)
				/******/__webpack_require__.m = modules;

				/******/ // expose the module cache
				/******/__webpack_require__.c = installedModules;

				/******/ // __webpack_public_path__
				/******/__webpack_require__.p = "";

				/******/ // Load entry module and return exports
				/******/return __webpack_require__(0);
				/******/}(
			/************************************************************************/
			/******/[
			/* 0 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				Object.defineProperty(exports, "__esModule", {
					value: true });

				exports.reactiveComponent = exports.PropTypes = exports.propTypes = exports.inject = exports.Provider = exports.trackComponents = exports.componentByNodeRegistery = exports.renderReporter = exports.observer = undefined;

				var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);};

				var _arguments = arguments;

				var _observer = __webpack_require__(1);

				Object.defineProperty(exports, 'observer', {
					enumerable: true,
					get: function get() {
						return _observer.observer;
					} });

				Object.defineProperty(exports, 'renderReporter', {
					enumerable: true,
					get: function get() {
						return _observer.renderReporter;
					} });

				Object.defineProperty(exports, 'componentByNodeRegistery', {
					enumerable: true,
					get: function get() {
						return _observer.componentByNodeRegistery;
					} });

				Object.defineProperty(exports, 'trackComponents', {
					enumerable: true,
					get: function get() {
						return _observer.trackComponents;
					} });


				var _Provider = __webpack_require__(9);

				Object.defineProperty(exports, 'Provider', {
					enumerable: true,
					get: function get() {
						return _interopRequireDefault(_Provider).default;
					} });


				var _inject = __webpack_require__(6);

				Object.defineProperty(exports, 'inject', {
					enumerable: true,
					get: function get() {
						return _interopRequireDefault(_inject).default;
					} });


				var _mobx = __webpack_require__(2);

				var _mobx2 = _interopRequireDefault(_mobx);

				var _react = __webpack_require__(3);

				var _react2 = _interopRequireDefault(_react);

				var _propTypes = __webpack_require__(10);

				var propTypes = _interopRequireWildcard(_propTypes);

				function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}

				function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

				var TARGET_LIB_NAME = void 0;
				if (true) TARGET_LIB_NAME = 'mobx-react';
				if (false) TARGET_LIB_NAME = 'mobx-react/native';
				if (false) TARGET_LIB_NAME = 'mobx-react/custom';

				if (!_mobx2.default) throw new Error(TARGET_LIB_NAME + ' requires the MobX package');
				if (!_react2.default) throw new Error(TARGET_LIB_NAME + ' requires React to be available');

				exports.propTypes = propTypes;
				exports.PropTypes = propTypes;
				exports.default = module.exports;

				/* Deprecated */

				var reactiveComponent = exports.reactiveComponent = function reactiveComponent() {
					console.warn('[mobx-react] `reactiveComponent` has been renamed to `observer` ' + 'and will be removed in 1.1.');
					return observer.apply(null, _arguments);
				};

				/* DevTool support */
				if ((typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ? 'undefined' : _typeof(__MOBX_DEVTOOLS_GLOBAL_HOOK__)) === 'object') {
					__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobxReact(module.exports, _mobx2.default);
				}

				/***/},
			/* 1 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				Object.defineProperty(exports, "__esModule", {
					value: true });

				exports.renderReporter = exports.componentByNodeRegistery = undefined;

				var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);};

				exports.trackComponents = trackComponents;
				exports.observer = observer;

				var _mobx = __webpack_require__(2);

				var _mobx2 = _interopRequireDefault(_mobx);

				var _react = __webpack_require__(3);

				var _react2 = _interopRequireDefault(_react);

				var _reactDom = __webpack_require__(4);

				var _reactDom2 = _interopRequireDefault(_reactDom);

				var _EventEmitter = __webpack_require__(5);

				var _EventEmitter2 = _interopRequireDefault(_EventEmitter);

				var _inject = __webpack_require__(6);

				var _inject2 = _interopRequireDefault(_inject);

				function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

				/**
	                                                                                                  * dev tool support
	                                                                                                  */
				var isDevtoolsEnabled = false;

				// WeakMap<Node, Object>;
				var componentByNodeRegistery = exports.componentByNodeRegistery = typeof WeakMap !== "undefined" ? new WeakMap() : undefined;
				var renderReporter = exports.renderReporter = new _EventEmitter2.default();

				function findDOMNode(component) {
					if (_reactDom2.default) return _reactDom2.default.findDOMNode(component);
					return null;
				}

				function reportRendering(component) {
					var node = findDOMNode(component);
					if (node && componentByNodeRegistery) componentByNodeRegistery.set(node, component);

					renderReporter.emit({
						event: 'render',
						renderTime: component.__$mobRenderEnd - component.__$mobRenderStart,
						totalTime: Date.now() - component.__$mobRenderStart,
						component: component,
						node: node });

				}

				function trackComponents() {
					if (typeof WeakMap === "undefined") throw new Error("[mobx-react] tracking components is not supported in this browser.");
					if (!isDevtoolsEnabled) isDevtoolsEnabled = true;
				}

				/**
	      * Utilities
	      */

				function patch(target, funcName) {
					var base = target[funcName];
					var mixinFunc = reactiveMixin[funcName];
					if (!base) {
						target[funcName] = mixinFunc;
					} else {
						target[funcName] = function () {
							base.apply(this, arguments);
							mixinFunc.apply(this, arguments);
						};
					}
				}

				/**
	      * ReactiveMixin
	      */
				var reactiveMixin = {
					componentWillMount: function componentWillMount() {
						var _this = this;

						// Generate friendly name for debugging
						var initialName = this.displayName || this.name || this.constructor && (this.constructor.displayName || this.constructor.name) || "<component>";
						var rootNodeID = this._reactInternalInstance && this._reactInternalInstance._rootNodeID;
						var baseRender = this.render.bind(this);
						var reaction = null;
						var isRenderingPending = false;

						var initialRender = function initialRender() {
							reaction = new _mobx2.default.Reaction(initialName + '#' + rootNodeID + '.render()', function () {
								if (!isRenderingPending) {
									// N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)
									// This unidiomatic React usage but React will correctly warn about this so we continue as usual
									// See #85 / Pull #44
									isRenderingPending = true;
									if (typeof _this.componentWillReact === "function") _this.componentWillReact(); // TODO: wrap in action?
									if (_this.__$mobxIsUnmounted !== true) {
										// If we are unmounted at this point, componentWillReact() had a side effect causing the component to unmounted
										// TODO: remove this check? Then react will properly warn about the fact that this should not happen? See #73
										// However, people also claim this migth happen during unit tests..
										_react2.default.Component.prototype.forceUpdate.call(_this);
									}
								}
							});
							reactiveRender.$mobx = reaction;
							_this.render = reactiveRender;
							return reactiveRender();
						};

						var reactiveRender = function reactiveRender() {
							isRenderingPending = false;
							var rendering = undefined;
							reaction.track(function () {
								if (isDevtoolsEnabled) {
									_this.__$mobRenderStart = Date.now();
								}
								rendering = _mobx2.default.extras.allowStateChanges(false, baseRender);
								if (isDevtoolsEnabled) {
									_this.__$mobRenderEnd = Date.now();
								}
							});
							return rendering;
						};

						this.render = initialRender;
					},

					componentWillUnmount: function componentWillUnmount() {
						this.render.$mobx && this.render.$mobx.dispose();
						this.__$mobxIsUnmounted = true;
						if (isDevtoolsEnabled) {
							var node = findDOMNode(this);
							if (node && componentByNodeRegistery) {
								componentByNodeRegistery.delete(node);
							}
							renderReporter.emit({
								event: 'destroy',
								component: this,
								node: node });

						}
					},

					componentDidMount: function componentDidMount() {
						if (isDevtoolsEnabled) {
							reportRendering(this);
						}
					},

					componentDidUpdate: function componentDidUpdate() {
						if (isDevtoolsEnabled) {
							reportRendering(this);
						}
					},

					shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
						// update on any state changes (as is the default)
						if (this.state !== nextState) {
							return true;
						}
						// update if props are shallowly not equal, inspired by PureRenderMixin
						var keys = Object.keys(this.props);
						if (keys.length !== Object.keys(nextProps).length) {
							return true;
						}
						var key = void 0;
						for (var i = keys.length - 1; i >= 0, key = keys[i]; i--) {
							var newValue = nextProps[key];
							if (newValue !== this.props[key]) {
								return true;
							} else if (newValue && (typeof newValue === 'undefined' ? 'undefined' : _typeof(newValue)) === "object" && !_mobx2.default.isObservable(newValue)) {
								/**
	                                                                                                                                                           * If the newValue is still the same object, but that object is not observable,
	                                                                                                                                                           * fallback to the default React behavior: update, because the object *might* have changed.
	                                                                                                                                                           * If you need the non default behavior, just use the React pure render mixin, as that one
	                                                                                                                                                           * will work fine with mobx as well, instead of the default implementation of
	                                                                                                                                                           * observer.
	                                                                                                                                                           */
								return true;
							}
						}
						return false;
					} };


				/**
	          * Observer function / decorator
	          */
				function observer(arg1, arg2) {
					if (typeof arg1 === "string") {
						throw new Error("Store names should be provided as array");
					}
					if (Array.isArray(arg1)) {
						// component needs stores
						if (!arg2) {
							// invoked as decorator
							return function (componentClass) {
								return observer(arg1, componentClass);
							};
						} else {
							// TODO: deprecate this invocation style
							return _inject2.default.apply(null, arg1)(observer(arg2));
						}
					}
					var componentClass = arg1;

					// Stateless function component:
					// If it is function but doesn't seem to be a react class constructor,
					// wrap it to a react class automatically
					if (typeof componentClass === "function" && (!componentClass.prototype || !componentClass.prototype.render) && !componentClass.isReactClass && !_react2.default.Component.isPrototypeOf(componentClass)) {
						return observer(_react2.default.createClass({
							displayName: componentClass.displayName || componentClass.name,
							propTypes: componentClass.propTypes,
							contextTypes: componentClass.contextTypes,
							getDefaultProps: function getDefaultProps() {
								return componentClass.defaultProps;
							},
							render: function render() {
								return componentClass.call(this, this.props, this.context);
							} }));

					}

					if (!componentClass) {
						throw new Error("Please pass a valid component to 'observer'");
					}
					var target = componentClass.prototype || componentClass;
					["componentWillMount", "componentWillUnmount", "componentDidMount", "componentDidUpdate"].forEach(function (funcName) {
						patch(target, funcName);
					});
					if (!target.shouldComponentUpdate) {
						target.shouldComponentUpdate = reactiveMixin.shouldComponentUpdate;
					}
					componentClass.isMobXReactObserver = true;
					return componentClass;
				}

				/***/},
			/* 2 */
			/***/function (module, exports) {

				module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

				/***/},
			/* 3 */
			/***/function (module, exports) {

				module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

				/***/},
			/* 4 */
			/***/function (module, exports) {

				module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

				/***/},
			/* 5 */
			/***/function (module, exports) {

				"use strict";

				Object.defineProperty(exports, "__esModule", {
					value: true });


				var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();

				function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

				var EventEmitter = function () {
					function EventEmitter() {
						_classCallCheck(this, EventEmitter);

						this.listeners = [];
					}

					_createClass(EventEmitter, [{
						key: "on",
						value: function on(cb) {
							var _this = this;

							this.listeners.push(cb);
							return function () {
								var index = _this.listeners.indexOf(cb);
								if (index !== -1) _this.listeners.splice(index, 1);
							};
						} },
					{
						key: "emit",
						value: function emit(data) {
							this.listeners.forEach(function (fn) {
								return fn(data);
							});
						} }]);


					return EventEmitter;
				}();

				exports.default = EventEmitter;

				/***/},
			/* 6 */
			/***/function (module, exports, __webpack_require__) {

				/* WEBPACK VAR INJECTION */(function (process) {'use strict';

					Object.defineProperty(exports, "__esModule", {
						value: true });

					exports.default = inject;

					var _react = __webpack_require__(3);

					var _react2 = _interopRequireDefault(_react);

					var _hoistNonReactStatics = __webpack_require__(8);

					var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

					function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

					/**
	                                                                                                   * Store Injection
	                                                                                                   */
					function createStoreInjector(grabStoresFn, component) {
						var Injector = _react2.default.createClass({
							displayName: "MobXStoreInjector",
							render: function render() {
								var _this = this;

								var newProps = {};
								for (var key in this.props) {
									if (this.props.hasOwnProperty(key)) {
										newProps[key] = this.props[key];
									}
								}var additionalProps = grabStoresFn(this.context.mobxStores || {}, newProps, this.context) || {};
								for (var _key in additionalProps) {
									newProps[_key] = additionalProps[_key];
								}
								newProps.ref = function (instance) {
									_this.wrappedInstance = instance;
								};

								return _react2.default.createElement(component, newProps);
							}
							// TODO: should have shouldComponentUpdate?
						});
						Injector.contextTypes = { mobxStores: _react.PropTypes.object };
						Injector.wrappedComponent = component;
						injectStaticWarnings(Injector, component);
						(0, _hoistNonReactStatics2.default)(Injector, component);
						return Injector;
					}

					function injectStaticWarnings(hoc, component) {
						if (typeof process === "undefined" || !process.env || process.env.NODE_ENV === "production") return;

						['propTypes', 'defaultProps', 'contextTypes'].forEach(function (prop) {
							var propValue = hoc[prop];
							Object.defineProperty(hoc, prop, {
								set: function set(_) {
									// enable for testing:
									var name = component.displayName || component.name;
									console.warn('Mobx Injector: you are trying to attach ' + prop + ' to HOC instead of ' + name + '. Use `wrappedComponent` property.');
								},
								get: function get() {
									return propValue;
								},
								configurable: true });

						});
					}

					function grabStoresByName(storeNames) {
						return function (baseStores, nextProps) {
							storeNames.forEach(function (storeName) {
								if (storeName in nextProps) // prefer props over stores
									return;
								if (!(storeName in baseStores)) throw new Error("MobX observer: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
								nextProps[storeName] = baseStores[storeName];
							});
							return nextProps;
						};
					}

					/**
	       * higher order component that injects stores to a child.
	       * takes either a varargs list of strings, which are stores read from the context,
	       * or a function that manually maps the available stores from the context to props:
	       * storesToProps(mobxStores, props, context) => newProps
	       */
					function inject() /* fn(stores, nextProps) or ...storeNames */{
						var grabStoresFn = void 0;
						if (typeof arguments[0] === "function") {
							grabStoresFn = arguments[0];
						} else {
							var storesNames = [];
							for (var i = 0; i < arguments.length; i++) {
								storesNames[i] = arguments[i];
							}grabStoresFn = grabStoresByName(storesNames);
						}
						return function (componentClass) {
							return createStoreInjector(grabStoresFn, componentClass);
						};
					}
					/* WEBPACK VAR INJECTION */}).call(exports, __webpack_require__(7));

				/***/},
			/* 7 */
			/***/function (module, exports) {

				// shim for using process in browser
				var process = module.exports = {};

				// cached from whatever global is present so that test runners that stub it
				// don't break things.  But we need to wrap it in a try catch in case it is
				// wrapped in strict mode code which doesn't define any globals.  It's inside a
				// function because try/catches deoptimize in certain engines.

				var cachedSetTimeout;
				var cachedClearTimeout;

				(function () {
					try {
						cachedSetTimeout = setTimeout;
					} catch (e) {
						cachedSetTimeout = function cachedSetTimeout() {
							throw new Error('setTimeout is not defined');
						};
					}
					try {
						cachedClearTimeout = clearTimeout;
					} catch (e) {
						cachedClearTimeout = function cachedClearTimeout() {
							throw new Error('clearTimeout is not defined');
						};
					}
				})();
				function runTimeout(fun) {
					if (cachedSetTimeout === setTimeout) {
						return setTimeout(fun, 0);
					} else {
						return cachedSetTimeout.call(null, fun, 0);
					}
				}
				function runClearTimeout(marker) {
					if (cachedClearTimeout === clearTimeout) {
						clearTimeout(marker);
					} else {
						cachedClearTimeout.call(null, marker);
					}
				}
				var queue = [];
				var draining = false;
				var currentQueue;
				var queueIndex = -1;

				function cleanUpNextTick() {
					if (!draining || !currentQueue) {
						return;
					}
					draining = false;
					if (currentQueue.length) {
						queue = currentQueue.concat(queue);
					} else {
						queueIndex = -1;
					}
					if (queue.length) {
						drainQueue();
					}
				}

				function drainQueue() {
					if (draining) {
						return;
					}
					var timeout = runTimeout(cleanUpNextTick);
					draining = true;

					var len = queue.length;
					while (len) {
						currentQueue = queue;
						queue = [];
						while (++queueIndex < len) {
							if (currentQueue) {
								currentQueue[queueIndex].run();
							}
						}
						queueIndex = -1;
						len = queue.length;
					}
					currentQueue = null;
					draining = false;
					runClearTimeout(timeout);
				}

				process.nextTick = function (fun) {
					var args = new Array(arguments.length - 1);
					if (arguments.length > 1) {
						for (var i = 1; i < arguments.length; i++) {
							args[i - 1] = arguments[i];
						}
					}
					queue.push(new Item(fun, args));
					if (queue.length === 1 && !draining) {
						runTimeout(drainQueue);
					}
				};

				// v8 likes predictible objects
				function Item(fun, array) {
					this.fun = fun;
					this.array = array;
				}
				Item.prototype.run = function () {
					this.fun.apply(null, this.array);
				};
				process.title = 'browser';
				process.browser = true;
				process.env = {};
				process.argv = [];
				process.version = ''; // empty string to avoid regexp issues
				process.versions = {};

				function noop() {}

				process.on = noop;
				process.addListener = noop;
				process.once = noop;
				process.off = noop;
				process.removeListener = noop;
				process.removeAllListeners = noop;
				process.emit = noop;

				process.binding = function (name) {
					throw new Error('process.binding is not supported');
				};

				process.cwd = function () {return '/';};
				process.chdir = function (dir) {
					throw new Error('process.chdir is not supported');
				};
				process.umask = function () {return 0;};


				/***/},
			/* 8 */
			/***/function (module, exports) {

				/**
	                                    * Copyright 2015, Yahoo! Inc.
	                                    * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	                                    */
				'use strict';

				var REACT_STATICS = {
					childContextTypes: true,
					contextTypes: true,
					defaultProps: true,
					displayName: true,
					getDefaultProps: true,
					mixins: true,
					propTypes: true,
					type: true };


				var KNOWN_STATICS = {
					name: true,
					length: true,
					prototype: true,
					caller: true,
					arguments: true,
					arity: true };


				var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

				module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
					if (typeof sourceComponent !== 'string') {// don't hoist over string (html) components
						var keys = Object.getOwnPropertyNames(sourceComponent);

						/* istanbul ignore else */
						if (isGetOwnPropertySymbolsAvailable) {
							keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
						}

						for (var i = 0; i < keys.length; ++i) {
							if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
								try {
									targetComponent[keys[i]] = sourceComponent[keys[i]];
								} catch (error) {

								}
							}
						}
					}

					return targetComponent;
				};


				/***/},
			/* 9 */
			/***/function (module, exports, __webpack_require__) {

				"use strict";

				Object.defineProperty(exports, "__esModule", {
					value: true });


				var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();

				var _react = __webpack_require__(3);

				var _react2 = _interopRequireDefault(_react);

				function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

				function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

				function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;}

				function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

				var specialReactKeys = { children: true, key: true, ref: true };

				var Provider = function (_Component) {
					_inherits(Provider, _Component);

					function Provider() {
						_classCallCheck(this, Provider);

						return _possibleConstructorReturn(this, Object.getPrototypeOf(Provider).apply(this, arguments));
					}

					_createClass(Provider, [{
						key: "render",
						value: function render() {
							return _react2.default.Children.only(this.props.children);
						} },
					{
						key: "getChildContext",
						value: function getChildContext() {
							var stores = {};
							// inherit stores
							var baseStores = this.context.mobxStores;
							if (baseStores) for (var key in baseStores) {
								stores[key] = baseStores[key];
							}
							// add own stores
							for (var _key in this.props) {
								if (!specialReactKeys[_key]) stores[_key] = this.props[_key];
							}return {
								mobxStores: stores };

						} },
					{
						key: "componentWillReceiveProps",
						value: function componentWillReceiveProps(nextProps) {
							// Maybe this warning is to aggressive?
							if (Object.keys(nextProps).length !== Object.keys(this.props).length) console.warn("MobX Provider: The set of provided stores has changed. Please avoid changing stores as the change might not propagate to all children");
							for (var key in nextProps) {
								if (!specialReactKeys[key] && this.props[key] !== nextProps[key]) console.warn("MobX Provider: Provided store '" + key + "' has changed. Please avoid replacing stores as the change might not propagate to all children");
							}
						} }]);


					return Provider;
				}(_react.Component);

				Provider.contextTypes = {
					mobxStores: _react.PropTypes.object };

				Provider.childContextTypes = {
					mobxStores: _react.PropTypes.object.isRequired };

				exports.default = Provider;

				/***/},
			/* 10 */
			/***/function (module, exports, __webpack_require__) {

				'use strict';

				Object.defineProperty(exports, "__esModule", {
					value: true });

				exports.objectOrObservableObject = exports.arrayOrObservableArrayOf = exports.arrayOrObservableArray = exports.observableObject = exports.observableMap = exports.observableArrayOf = exports.observableArray = undefined;

				var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);};

				var _mobx = __webpack_require__(2);

				// Copied from React.PropTypes
				function createChainableTypeChecker(validate) {
					function checkType(isRequired, props, propName, componentName, location, propFullName) {
						for (var _len = arguments.length, rest = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
							rest[_key - 6] = arguments[_key];
						}

						return (0, _mobx.untracked)(function () {
							componentName = componentName || '<<anonymous>>';
							propFullName = propFullName || propName;
							if (props[propName] == null) {
								if (isRequired) {
									var actual = props[propName] === null ? 'null' : 'undefined';
									return new Error('The ' + location + ' `' + propFullName + '` is marked as required ' + 'in `' + componentName + '`, but its value is `' + actual + '`.');
								}
								return null;
							} else {
								return validate.apply(undefined, [props, propName, componentName, location, propFullName].concat(rest));
							}
						});
					}

					var chainedCheckType = checkType.bind(null, false);
					chainedCheckType.isRequired = checkType.bind(null, true);
					return chainedCheckType;
				}

				// Copied from React.PropTypes
				function isSymbol(propType, propValue) {
					// Native Symbol.
					if (propType === 'symbol') {
						return true;
					}

					// 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
					if (propValue['@@toStringTag'] === 'Symbol') {
						return true;
					}

					// Fallback for non-spec compliant Symbols which are polyfilled.
					if (typeof Symbol === 'function' && propValue instanceof Symbol) {
						return true;
					}

					return false;
				}

				// Copied from React.PropTypes
				function getPropType(propValue) {
					var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
					if (Array.isArray(propValue)) {
						return 'array';
					}
					if (propValue instanceof RegExp) {
						// Old webkits (at least until Android 4.0) return 'function' rather than
						// 'object' for typeof a RegExp. We'll normalize this here so that /bla/
						// passes PropTypes.object.
						return 'object';
					}
					if (isSymbol(propType, propValue)) {
						return 'symbol';
					}
					return propType;
				}

				// This handles more types than `getPropType`. Only used for error messages.
				// Copied from React.PropTypes
				function getPreciseType(propValue) {
					var propType = getPropType(propValue);
					if (propType === 'object') {
						if (propValue instanceof Date) {
							return 'date';
						} else if (propValue instanceof RegExp) {
							return 'regexp';
						}
					}
					return propType;
				}

				function createObservableTypeCheckerCreator(allowNativeType, mobxType) {
					return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
						return (0, _mobx.untracked)(function () {
							if (allowNativeType) {
								if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;
							}
							var mobxChecker = void 0;
							switch (mobxType) {
								case 'Array':
									mobxChecker = _mobx.isObservableArray;break;
								case 'Object':
									mobxChecker = _mobx.isObservableObject;break;
								case 'Map':
									mobxChecker = _mobx.isObservableMap;break;
								default:
									throw new Error('Unexpected mobxType: ' + mobxType);}

							var propValue = props[propName];
							if (!mobxChecker(propValue)) {
								var preciseType = getPreciseType(propValue);
								var nativeTypeExpectationMessage = allowNativeType ? ' or javascript `' + mobxType.toLowerCase() + '`' : '';
								return new Error('Invalid prop `' + propFullName + '` of type `' + preciseType + '` supplied to' + ' `' + componentName + '`, expected `mobx.Observable' + mobxType + '`' + nativeTypeExpectationMessage + '.');
							}
							return null;
						});
					});
				}

				function createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
					return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
						for (var _len2 = arguments.length, rest = Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
							rest[_key2 - 5] = arguments[_key2];
						}

						return (0, _mobx.untracked)(function () {
							if (typeof typeChecker !== 'function') {
								return new Error('Property `' + propFullName + '` of component `' + componentName + '` has ' + 'invalid PropType notation.');
							}
							var error = createObservableTypeCheckerCreator(allowNativeType, 'Array')(props, propName, componentName);
							if (error instanceof Error) return error;
							var propValue = props[propName];
							for (var i = 0; i < propValue.length; i++) {
								error = typeChecker.apply(undefined, [propValue, i, componentName, location, propFullName + '[' + i + ']'].concat(rest));
								if (error instanceof Error) return error;
							}
							return null;
						});
					});
				}

				var observableArray = exports.observableArray = createObservableTypeCheckerCreator(false, 'Array');
				var observableArrayOf = exports.observableArrayOf = createObservableArrayOfTypeChecker.bind(null, false);
				var observableMap = exports.observableMap = createObservableTypeCheckerCreator(false, 'Map');
				var observableObject = exports.observableObject = createObservableTypeCheckerCreator(false, 'Object');
				var arrayOrObservableArray = exports.arrayOrObservableArray = createObservableTypeCheckerCreator(true, 'Array');
				var arrayOrObservableArrayOf = exports.arrayOrObservableArrayOf = createObservableArrayOfTypeChecker.bind(null, true);
				var objectOrObservableObject = exports.objectOrObservableObject = createObservableTypeCheckerCreator(true, 'Object');

				/***/}
			/******/]));
	});
	;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(215)(module)))

/***/ },
/* 219 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};
	var __extends=undefined&&undefined.__extends||function(d,b){
	for(var p in b){if(b.hasOwnProperty(p))d[p]=b[p];}
	function __(){this.constructor=d;}
	d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());
	};
	registerGlobals();
	exports.extras={
	allowStateChanges:allowStateChanges,
	getAtom:getAtom,
	getDebugName:getDebugName,
	getDependencyTree:getDependencyTree,
	getObserverTree:getObserverTree,
	isComputingDerivation:isComputingDerivation,
	isSpyEnabled:isSpyEnabled,
	resetGlobalState:resetGlobalState,
	spyReport:spyReport,
	spyReportEnd:spyReportEnd,
	spyReportStart:spyReportStart,
	trackTransitions:trackTransitions};

	exports._={
	getAdministration:getAdministration,
	resetGlobalState:resetGlobalState};

	if((typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__==="undefined"?"undefined":_typeof(__MOBX_DEVTOOLS_GLOBAL_HOOK__))==='object'){
	__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx(module.exports);
	}
	var actionFieldDecorator=createClassPropertyDecorator(function(target,key,value,args,originalDescriptor){
	var actionName=args&&args.length===1?args[0]:value.name||key||"<unnamed action>";
	var wrappedAction=action(actionName,value);
	addHiddenProp(target,key,wrappedAction);
	},function(key){
	return this[key];
	},function(){
	invariant(false,"It is not allowed to assign new values to @action fields");
	},false,true);
	function action(arg1,arg2,arg3,arg4){
	if(arguments.length===1&&typeof arg1==="function")
	return createAction(arg1.name||"<unnamed action>",arg1);
	if(arguments.length===2&&typeof arg2==="function")
	return createAction(arg1,arg2);
	if(arguments.length===1&&typeof arg1==="string")
	return namedActionDecorator(arg1);
	return namedActionDecorator(arg2).apply(null,arguments);
	}
	exports.action=action;
	function namedActionDecorator(name){
	return function(target,prop,descriptor){
	if(descriptor&&typeof descriptor.value==="function"){
	descriptor.value=createAction(name,descriptor.value);
	descriptor.enumerable=false;
	descriptor.configurable=true;
	return descriptor;
	}
	return actionFieldDecorator(name).apply(this,arguments);
	};
	}
	function runInAction(arg1,arg2,arg3){
	var actionName=typeof arg1==="string"?arg1:arg1.name||"<unnamed action>";
	var fn=typeof arg1==="function"?arg1:arg2;
	var scope=typeof arg1==="function"?arg2:arg3;
	invariant(typeof fn==="function","`runInAction` expects a function");
	invariant(fn.length===0,"`runInAction` expects a function without arguments");
	invariant(typeof actionName==="string"&&actionName.length>0,"actions should have valid names, got: '"+actionName+"'");
	return executeAction(actionName,fn,scope,undefined);
	}
	exports.runInAction=runInAction;
	function isAction(thing){
	return typeof thing==="function"&&thing.isMobxAction===true;
	}
	exports.isAction=isAction;
	function autorun(arg1,arg2,arg3){
	var name,view,scope;
	if(typeof arg1==="string"){
	name=arg1;
	view=arg2;
	scope=arg3;
	}else
	if(typeof arg1==="function"){
	name=arg1.name||"Autorun@"+getNextId();
	view=arg1;
	scope=arg2;
	}
	assertUnwrapped(view,"autorun methods cannot have modifiers");
	invariant(typeof view==="function","autorun expects a function");
	invariant(isAction(view)===false,"Warning: attempted to pass an action to autorun. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.");
	if(scope)
	view=view.bind(scope);
	var reaction=new Reaction(name,function(){
	this.track(reactionRunner);
	});
	function reactionRunner(){
	view(reaction);
	}
	reaction.schedule();
	return reaction.getDisposer();
	}
	exports.autorun=autorun;
	function when(arg1,arg2,arg3,arg4){
	var name,predicate,effect,scope;
	if(typeof arg1==="string"){
	name=arg1;
	predicate=arg2;
	effect=arg3;
	scope=arg4;
	}else
	if(typeof arg1==="function"){
	name="When@"+getNextId();
	predicate=arg1;
	effect=arg2;
	scope=arg3;
	}
	var disposer=autorun(name,function(r){
	if(predicate.call(scope)){
	r.dispose();
	var prevUntracked=untrackedStart();
	effect.call(scope);
	untrackedEnd(prevUntracked);
	}
	});
	return disposer;
	}
	exports.when=when;
	function autorunUntil(predicate,effect,scope){
	deprecated("`autorunUntil` is deprecated, please use `when`.");
	return when.apply(null,arguments);
	}
	exports.autorunUntil=autorunUntil;
	function autorunAsync(arg1,arg2,arg3,arg4){
	var name,func,delay,scope;
	if(typeof arg1==="string"){
	name=arg1;
	func=arg2;
	delay=arg3;
	scope=arg4;
	}else
	if(typeof arg1==="function"){
	name=arg1.name||"AutorunAsync@"+getNextId();
	func=arg1;
	delay=arg2;
	scope=arg3;
	}
	invariant(isAction(func)===false,"Warning: attempted to pass an action to autorunAsync. Actions are untracked and will not trigger on state changes. Use `reaction` or wrap only your state modification code in an action.");
	if(delay===void 0)
	delay=1;
	if(scope)
	func=func.bind(scope);
	var isScheduled=false;
	var r=new Reaction(name,function(){
	if(!isScheduled){
	isScheduled=true;
	setTimeout(function(){
	isScheduled=false;
	if(!r.isDisposed)
	r.track(reactionRunner);
	},delay);
	}
	});
	function reactionRunner(){func(r);}
	r.schedule();
	return r.getDisposer();
	}
	exports.autorunAsync=autorunAsync;
	function reaction(arg1,arg2,arg3,arg4,arg5,arg6){
	var name,expression,effect,fireImmediately,delay,scope;
	if(typeof arg1==="string"){
	name=arg1;
	expression=arg2;
	effect=arg3;
	fireImmediately=arg4;
	delay=arg5;
	scope=arg6;
	}else
	{
	name=arg1.name||arg2.name||"Reaction@"+getNextId();
	expression=arg1;
	effect=arg2;
	fireImmediately=arg3;
	delay=arg4;
	scope=arg5;
	}
	if(fireImmediately===void 0)
	fireImmediately=false;
	if(delay===void 0)
	delay=0;
	var _a=getValueModeFromValue(expression,ValueMode.Reference),valueMode=_a[0],unwrappedExpression=_a[1];
	var compareStructural=valueMode===ValueMode.Structure;
	if(scope){
	unwrappedExpression=unwrappedExpression.bind(scope);
	effect=action(name,effect.bind(scope));
	}
	var firstTime=true;
	var isScheduled=false;
	var nextValue=undefined;
	var r=new Reaction(name,function(){
	if(delay<1){
	reactionRunner();
	}else
	if(!isScheduled){
	isScheduled=true;
	setTimeout(function(){
	isScheduled=false;
	reactionRunner();
	},delay);
	}
	});
	function reactionRunner(){
	if(r.isDisposed)
	return;
	var changed=false;
	r.track(function(){
	var v=unwrappedExpression(r);
	changed=valueDidChange(compareStructural,nextValue,v);
	nextValue=v;
	});
	if(firstTime&&fireImmediately)
	effect(nextValue,r);
	if(!firstTime&&changed===true)
	effect(nextValue,r);
	if(firstTime)
	firstTime=false;
	}
	r.schedule();
	return r.getDisposer();
	}
	exports.reaction=reaction;
	var computedDecorator=createClassPropertyDecorator(function(target,name,_,decoratorArgs,originalDescriptor){
	invariant(typeof originalDescriptor!=="undefined","@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'. It looks like it was used on a property.");
	var baseValue=originalDescriptor.get;
	var setter=originalDescriptor.set;
	invariant(typeof baseValue==="function","@computed can only be used on getter functions, like: '@computed get myProps() { return ...; }'");
	var compareStructural=false;
	if(decoratorArgs&&decoratorArgs.length===1&&decoratorArgs[0].asStructure===true)
	compareStructural=true;
	var adm=asObservableObject(target,undefined,ValueMode.Recursive);
	defineObservableProperty(adm,name,compareStructural?asStructure(baseValue):baseValue,false,setter);
	},function(name){
	var observable=this.$mobx.values[name];
	if(observable===undefined)
	return undefined;
	return observable.get();
	},function(name,value){
	this.$mobx.values[name].set(value);
	},false,true);
	function computed(targetOrExpr,keyOrScopeOrSetter,baseDescriptor,options){
	if(typeof targetOrExpr==="function"&&arguments.length<3){
	if(typeof keyOrScopeOrSetter==="function")
	return computedExpr(targetOrExpr,keyOrScopeOrSetter,undefined);else

	return computedExpr(targetOrExpr,undefined,keyOrScopeOrSetter);
	}
	return computedDecorator.apply(null,arguments);
	}
	exports.computed=computed;
	function computedExpr(expr,setter,scope){
	var _a=getValueModeFromValue(expr,ValueMode.Recursive),mode=_a[0],value=_a[1];
	return new ComputedValue(value,scope,mode===ValueMode.Structure,value.name,setter);
	}
	function createTransformer(transformer,onCleanup){
	invariant(typeof transformer==="function"&&transformer.length===1,"createTransformer expects a function that accepts one argument");
	var objectCache={};
	var resetId=globalState.resetId;
	var Transformer=function(_super){
	__extends(Transformer,_super);
	function Transformer(sourceIdentifier,sourceObject){
	_super.call(this,function(){return transformer(sourceObject);},null,false,"Transformer-"+transformer.name+"-"+sourceIdentifier,undefined);
	this.sourceIdentifier=sourceIdentifier;
	this.sourceObject=sourceObject;
	}
	Transformer.prototype.onBecomeUnobserved=function(){
	var lastValue=this.value;
	_super.prototype.onBecomeUnobserved.call(this);
	delete objectCache[this.sourceIdentifier];
	if(onCleanup)
	onCleanup(lastValue,this.sourceObject);
	};
	return Transformer;
	}(ComputedValue);
	return function(object){
	if(resetId!==globalState.resetId){
	objectCache={};
	resetId=globalState.resetId;
	}
	var identifier=getMemoizationId(object);
	var reactiveTransformer=objectCache[identifier];
	if(reactiveTransformer)
	return reactiveTransformer.get();
	reactiveTransformer=objectCache[identifier]=new Transformer(identifier,object);
	return reactiveTransformer.get();
	};
	}
	exports.createTransformer=createTransformer;
	function getMemoizationId(object){
	if(object===null||(typeof object==="undefined"?"undefined":_typeof(object))!=="object")
	throw new Error("[mobx] transform expected some kind of object, got: "+object);
	var tid=object.$transformId;
	if(tid===undefined){
	tid=getNextId();
	addHiddenProp(object,"$transformId",tid);
	}
	return tid;
	}
	function expr(expr,scope){
	if(!isComputingDerivation())
	console.warn("[mobx.expr] 'expr' should only be used inside other reactive functions.");
	return computed(expr,scope).get();
	}
	exports.expr=expr;
	function extendObservable(target){
	var properties=[];
	for(var _i=1;_i<arguments.length;_i++){
	properties[_i-1]=arguments[_i];
	}
	invariant(arguments.length>=2,"extendObservable expected 2 or more arguments");
	invariant((typeof target==="undefined"?"undefined":_typeof(target))==="object","extendObservable expects an object as first argument");
	invariant(!isObservableMap(target),"extendObservable should not be used on maps, use map.merge instead");
	properties.forEach(function(propSet){
	invariant((typeof propSet==="undefined"?"undefined":_typeof(propSet))==="object","all arguments of extendObservable should be objects");
	invariant(!isObservable(propSet),"extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540");
	extendObservableHelper(target,propSet,ValueMode.Recursive,null);
	});
	return target;
	}
	exports.extendObservable=extendObservable;
	function extendObservableHelper(target,properties,mode,name){
	var adm=asObservableObject(target,name,mode);
	for(var key in properties){
	if(hasOwnProperty(properties,key)){
	if(target===properties&&!isPropertyConfigurable(target,key))
	continue;
	var descriptor=Object.getOwnPropertyDescriptor(properties,key);
	setObservableObjectInstanceProperty(adm,key,descriptor);
	}}
	return target;
	}
	function getDependencyTree(thing,property){
	return nodeToDependencyTree(getAtom(thing,property));
	}
	function nodeToDependencyTree(node){
	var result={
	name:node.name};

	if(node.observing&&node.observing.length>0)
	result.dependencies=unique(node.observing).map(nodeToDependencyTree);
	return result;
	}
	function getObserverTree(thing,property){
	return nodeToObserverTree(getAtom(thing,property));
	}
	function nodeToObserverTree(node){
	var result={
	name:node.name};

	if(hasObservers(node))
	result.observers=getObservers(node).map(nodeToObserverTree);
	return result;
	}
	function intercept(thing,propOrHandler,handler){
	if(typeof handler==="function")
	return interceptProperty(thing,propOrHandler,handler);else

	return interceptInterceptable(thing,propOrHandler);
	}
	exports.intercept=intercept;
	function interceptInterceptable(thing,handler){
	if(isPlainObject(thing)&&!isObservableObject(thing)){
	deprecated("Passing plain objects to intercept / observe is deprecated and will be removed in 3.0");
	return getAdministration(observable(thing)).intercept(handler);
	}
	return getAdministration(thing).intercept(handler);
	}
	function interceptProperty(thing,property,handler){
	if(isPlainObject(thing)&&!isObservableObject(thing)){
	deprecated("Passing plain objects to intercept / observe is deprecated and will be removed in 3.0");
	extendObservable(thing,{
	property:thing[property]});

	return interceptProperty(thing,property,handler);
	}
	return getAdministration(thing,property).intercept(handler);
	}
	function isComputed(value,property){
	if(value===null||value===undefined)
	return false;
	if(property!==undefined){
	if(isObservableObject(value)===false)
	return false;
	var atom=getAtom(value,property);
	return isComputedValue(atom);
	}
	return isComputedValue(value);
	}
	exports.isComputed=isComputed;
	function isObservable(value,property){
	if(value===null||value===undefined)
	return false;
	if(property!==undefined){
	if(isObservableArray(value)||isObservableMap(value))
	throw new Error("[mobx.isObservable] isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");else
	if(isObservableObject(value)){
	var o=value.$mobx;
	return o.values&&!!o.values[property];
	}
	return false;
	}
	return!!value.$mobx||isAtom(value)||isReaction(value)||isComputedValue(value);
	}
	exports.isObservable=isObservable;
	var decoratorImpl=createClassPropertyDecorator(function(target,name,baseValue){
	var prevA=allowStateChangesStart(true);
	if(typeof baseValue==="function")
	baseValue=asReference(baseValue);
	var adm=asObservableObject(target,undefined,ValueMode.Recursive);
	defineObservableProperty(adm,name,baseValue,true,undefined);
	allowStateChangesEnd(prevA);
	},function(name){
	var observable=this.$mobx.values[name];
	if(observable===undefined)
	return undefined;
	return observable.get();
	},function(name,value){
	setPropertyValue(this,name,value);
	},true,false);
	function observableDecorator(target,key,baseDescriptor){
	invariant(arguments.length>=2&&arguments.length<=3,"Illegal decorator config",key);
	assertPropertyConfigurable(target,key);
	invariant(!baseDescriptor||!baseDescriptor.get,"@observable can not be used on getters, use @computed instead");
	return decoratorImpl.apply(null,arguments);
	}
	function observable(v,keyOrScope){
	if(v===void 0){v=undefined;}
	if(typeof arguments[1]==="string")
	return observableDecorator.apply(null,arguments);
	invariant(arguments.length<3,"observable expects zero, one or two arguments");
	if(isObservable(v))
	return v;
	var _a=getValueModeFromValue(v,ValueMode.Recursive),mode=_a[0],value=_a[1];
	var sourceType=mode===ValueMode.Reference?ValueType.Reference:getTypeOfValue(value);
	switch(sourceType){
	case ValueType.Array:
	case ValueType.PlainObject:
	return makeChildObservable(value,mode);
	case ValueType.Reference:
	case ValueType.ComplexObject:
	return new ObservableValue(value,mode);
	case ValueType.ComplexFunction:
	throw new Error("[mobx.observable] To be able to make a function reactive it should not have arguments. If you need an observable reference to a function, use `observable(asReference(f))`");
	case ValueType.ViewFunction:
	deprecated("Use `computed(expr)` instead of `observable(expr)`");
	return computed(v,keyOrScope);}

	invariant(false,"Illegal State");
	}
	exports.observable=observable;
	var ValueType;
	(function(ValueType){
	ValueType[ValueType["Reference"]=0]="Reference";
	ValueType[ValueType["PlainObject"]=1]="PlainObject";
	ValueType[ValueType["ComplexObject"]=2]="ComplexObject";
	ValueType[ValueType["Array"]=3]="Array";
	ValueType[ValueType["ViewFunction"]=4]="ViewFunction";
	ValueType[ValueType["ComplexFunction"]=5]="ComplexFunction";
	})(ValueType||(ValueType={}));
	function getTypeOfValue(value){
	if(value===null||value===undefined)
	return ValueType.Reference;
	if(typeof value==="function")
	return value.length?ValueType.ComplexFunction:ValueType.ViewFunction;
	if(Array.isArray(value)||isObservableArray(value))
	return ValueType.Array;
	if((typeof value==="undefined"?"undefined":_typeof(value))==="object")
	return isPlainObject(value)?ValueType.PlainObject:ValueType.ComplexObject;
	return ValueType.Reference;
	}
	function observe(thing,propOrCb,cbOrFire,fireImmediately){
	if(typeof cbOrFire==="function")
	return observeObservableProperty(thing,propOrCb,cbOrFire,fireImmediately);else

	return observeObservable(thing,propOrCb,cbOrFire);
	}
	exports.observe=observe;
	function observeObservable(thing,listener,fireImmediately){
	if(isPlainObject(thing)&&!isObservableObject(thing)){
	deprecated("Passing plain objects to intercept / observe is deprecated and will be removed in 3.0");
	return getAdministration(observable(thing)).observe(listener,fireImmediately);
	}
	return getAdministration(thing).observe(listener,fireImmediately);
	}
	function observeObservableProperty(thing,property,listener,fireImmediately){
	if(isPlainObject(thing)&&!isObservableObject(thing)){
	deprecated("Passing plain objects to intercept / observe is deprecated and will be removed in 3.0");
	extendObservable(thing,{
	property:thing[property]});

	return observeObservableProperty(thing,property,listener,fireImmediately);
	}
	return getAdministration(thing,property).observe(listener,fireImmediately);
	}
	function toJS(source,detectCycles,__alreadySeen){
	if(detectCycles===void 0){detectCycles=true;}
	if(__alreadySeen===void 0){__alreadySeen=null;}
	function cache(value){
	if(detectCycles)
	__alreadySeen.push([source,value]);
	return value;
	}
	if(source instanceof Date||source instanceof RegExp)
	return source;
	if(detectCycles&&__alreadySeen===null)
	__alreadySeen=[];
	if(detectCycles&&source!==null&&(typeof source==="undefined"?"undefined":_typeof(source))==="object"){
	for(var i=0,l=__alreadySeen.length;i<l;i++){
	if(__alreadySeen[i][0]===source)
	return __alreadySeen[i][1];}
	}
	if(!source)
	return source;
	if(Array.isArray(source)||isObservableArray(source)){
	var res=cache([]);
	var toAdd=source.map(function(value){return toJS(value,detectCycles,__alreadySeen);});
	res.length=toAdd.length;
	for(var i=0,l=toAdd.length;i<l;i++){
	res[i]=toAdd[i];}
	return res;
	}
	if(isObservableMap(source)){
	var res_1=cache({});
	source.forEach(function(value,key){return res_1[key]=toJS(value,detectCycles,__alreadySeen);});
	return res_1;
	}
	if(isObservableValue(source))
	return toJS(source.get(),detectCycles,__alreadySeen);
	if((typeof source==="undefined"?"undefined":_typeof(source))==="object"){
	var res=cache({});
	for(var key in source){
	res[key]=toJS(source[key],detectCycles,__alreadySeen);}
	return res;
	}
	return source;
	}
	exports.toJS=toJS;
	function toJSON(source,detectCycles,__alreadySeen){
	if(detectCycles===void 0){detectCycles=true;}
	if(__alreadySeen===void 0){__alreadySeen=null;}
	deprecated("toJSON is deprecated. Use toJS instead");
	return toJS.apply(null,arguments);
	}
	exports.toJSON=toJSON;
	function log(msg){
	console.log(msg);
	return msg;
	}
	function whyRun(thing,prop){
	switch(arguments.length){
	case 0:
	thing=globalState.trackingDerivation;
	if(!thing)
	return log("whyRun() can only be used if a derivation is active, or by passing an computed value / reaction explicitly. If you invoked whyRun from inside a computation; the computation is currently suspended but re-evaluating because somebody requested it's value.");
	break;
	case 2:
	thing=getAtom(thing,prop);
	break;}

	thing=getAtom(thing);
	if(isComputedValue(thing))
	return log(thing.whyRun());else
	if(isReaction(thing))
	return log(thing.whyRun());else

	invariant(false,"whyRun can only be used on reactions and computed values");
	}
	exports.whyRun=whyRun;
	function createAction(actionName,fn){
	invariant(typeof fn==="function","`action` can only be invoked on functions");
	invariant(typeof actionName==="string"&&actionName.length>0,"actions should have valid names, got: '"+actionName+"'");
	var res=function res(){
	return executeAction(actionName,fn,this,arguments);
	};
	res.isMobxAction=true;
	return res;
	}
	function executeAction(actionName,fn,scope,args){
	invariant(!isComputedValue(globalState.trackingDerivation),"Computed values or transformers should not invoke actions or trigger other side effects");
	var notifySpy=isSpyEnabled();
	var startTime;
	if(notifySpy){
	startTime=Date.now();
	var l=args&&args.length||0;
	var flattendArgs=new Array(l);
	if(l>0)
	for(var i=0;i<l;i++){
	flattendArgs[i]=args[i];}
	spyReportStart({
	type:"action",
	name:actionName,
	fn:fn,
	target:scope,
	arguments:flattendArgs});

	}
	var prevUntracked=untrackedStart();
	transactionStart(actionName,scope,false);
	var prevAllowStateChanges=allowStateChangesStart(true);
	try{
	return fn.apply(scope,args);
	}finally
	{
	allowStateChangesEnd(prevAllowStateChanges);
	transactionEnd(false);
	untrackedEnd(prevUntracked);
	if(notifySpy)
	spyReportEnd({time:Date.now()-startTime});
	}
	}
	function useStrict(strict){
	if(arguments.length===0){
	deprecated("`useStrict` without arguments is deprecated, use `isStrictModeEnabled()` instead");
	return globalState.strictMode;
	}else
	{
	invariant(globalState.trackingDerivation===null,"It is not allowed to set `useStrict` when a derivation is running");
	globalState.strictMode=strict;
	globalState.allowStateChanges=!strict;
	}
	}
	exports.useStrict=useStrict;
	function isStrictModeEnabled(){
	return globalState.strictMode;
	}
	exports.isStrictModeEnabled=isStrictModeEnabled;
	function allowStateChanges(allowStateChanges,func){
	var prev=allowStateChangesStart(allowStateChanges);
	var res=func();
	allowStateChangesEnd(prev);
	return res;
	}
	function allowStateChangesStart(allowStateChanges){
	var prev=globalState.allowStateChanges;
	globalState.allowStateChanges=allowStateChanges;
	return prev;
	}
	function allowStateChangesEnd(prev){
	globalState.allowStateChanges=prev;
	}
	var BaseAtom=function(){
	function BaseAtom(name){
	if(name===void 0){name="Atom@"+getNextId();}
	this.name=name;
	this.isPendingUnobservation=true;
	this.observers=[];
	this.observersIndexes={};
	this.diffValue=0;
	this.lastAccessedBy=0;
	this.lowestObserverState=IDerivationState.NOT_TRACKING;
	}
	BaseAtom.prototype.onBecomeUnobserved=function(){
	};
	BaseAtom.prototype.reportObserved=function(){
	reportObserved(this);
	};
	BaseAtom.prototype.reportChanged=function(){
	transactionStart("propagatingAtomChange",null,false);
	propagateChanged(this);
	transactionEnd(false);
	};
	BaseAtom.prototype.toString=function(){
	return this.name;
	};
	return BaseAtom;
	}();
	exports.BaseAtom=BaseAtom;
	var Atom=function(_super){
	__extends(Atom,_super);
	function Atom(name,onBecomeObservedHandler,onBecomeUnobservedHandler){
	if(name===void 0){name="Atom@"+getNextId();}
	if(onBecomeObservedHandler===void 0){onBecomeObservedHandler=noop;}
	if(onBecomeUnobservedHandler===void 0){onBecomeUnobservedHandler=noop;}
	_super.call(this,name);
	this.name=name;
	this.onBecomeObservedHandler=onBecomeObservedHandler;
	this.onBecomeUnobservedHandler=onBecomeUnobservedHandler;
	this.isPendingUnobservation=false;
	this.isBeingTracked=false;
	}
	Atom.prototype.reportObserved=function(){
	startBatch();
	_super.prototype.reportObserved.call(this);
	if(!this.isBeingTracked){
	this.isBeingTracked=true;
	this.onBecomeObservedHandler();
	}
	endBatch();
	return!!globalState.trackingDerivation;
	};
	Atom.prototype.onBecomeUnobserved=function(){
	this.isBeingTracked=false;
	this.onBecomeUnobservedHandler();
	};
	return Atom;
	}(BaseAtom);
	exports.Atom=Atom;
	var isAtom=createInstanceofPredicate("Atom",BaseAtom);
	var ComputedValue=function(){
	function ComputedValue(derivation,scope,compareStructural,name,setter){
	this.derivation=derivation;
	this.scope=scope;
	this.compareStructural=compareStructural;
	this.dependenciesState=IDerivationState.NOT_TRACKING;
	this.observing=[];
	this.newObserving=null;
	this.isPendingUnobservation=false;
	this.observers=[];
	this.observersIndexes={};
	this.diffValue=0;
	this.runId=0;
	this.lastAccessedBy=0;
	this.lowestObserverState=IDerivationState.UP_TO_DATE;
	this.unboundDepsCount=0;
	this.__mapid="#"+getNextId();
	this.value=undefined;
	this.isComputing=false;
	this.isRunningSetter=false;
	this.name=name||"ComputedValue@"+getNextId();
	if(setter)
	this.setter=createAction(name+"-setter",setter);
	}
	ComputedValue.prototype.peek=function(){
	this.isComputing=true;
	var prevAllowStateChanges=allowStateChangesStart(false);
	var res=this.derivation.call(this.scope);
	allowStateChangesEnd(prevAllowStateChanges);
	this.isComputing=false;
	return res;
	};
	;
	ComputedValue.prototype.peekUntracked=function(){
	var hasError=true;
	try{
	var res=this.peek();
	hasError=false;
	return res;
	}finally
	{
	if(hasError)
	handleExceptionInDerivation(this);
	}
	};
	ComputedValue.prototype.onBecomeStale=function(){
	propagateMaybeChanged(this);
	};
	ComputedValue.prototype.onBecomeUnobserved=function(){
	invariant(this.dependenciesState!==IDerivationState.NOT_TRACKING,"INTERNAL ERROR only onBecomeUnobserved shouldn't be called twice in a row");
	clearObserving(this);
	this.value=undefined;
	};
	ComputedValue.prototype.get=function(){
	invariant(!this.isComputing,"Cycle detected in computation "+this.name,this.derivation);
	startBatch();
	if(globalState.inBatch===1){
	if(shouldCompute(this))
	this.value=this.peekUntracked();
	}else
	{
	reportObserved(this);
	if(shouldCompute(this))
	if(this.trackAndCompute())
	propagateChangeConfirmed(this);
	}
	var result=this.value;
	endBatch();
	return result;
	};
	ComputedValue.prototype.recoverFromError=function(){
	this.isComputing=false;
	};
	ComputedValue.prototype.set=function(value){
	if(this.setter){
	invariant(!this.isRunningSetter,"The setter of computed value '"+this.name+"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
	this.isRunningSetter=true;
	try{
	this.setter.call(this.scope,value);
	}finally
	{
	this.isRunningSetter=false;
	}
	}else

	invariant(false,"[ComputedValue '"+this.name+"'] It is not possible to assign a new value to a computed value.");
	};
	ComputedValue.prototype.trackAndCompute=function(){
	if(isSpyEnabled()){
	spyReport({
	object:this,
	type:"compute",
	fn:this.derivation,
	target:this.scope});

	}
	var oldValue=this.value;
	var newValue=this.value=trackDerivedFunction(this,this.peek);
	return valueDidChange(this.compareStructural,newValue,oldValue);
	};
	ComputedValue.prototype.observe=function(listener,fireImmediately){
	var _this=this;
	var firstTime=true;
	var prevValue=undefined;
	return autorun(function(){
	var newValue=_this.get();
	if(!firstTime||fireImmediately){
	var prevU=untrackedStart();
	listener(newValue,prevValue);
	untrackedEnd(prevU);
	}
	firstTime=false;
	prevValue=newValue;
	});
	};
	ComputedValue.prototype.toJSON=function(){
	return this.get();
	};
	ComputedValue.prototype.toString=function(){
	return this.name+"["+this.derivation.toString()+"]";
	};
	ComputedValue.prototype.whyRun=function(){
	var isTracking=Boolean(globalState.trackingDerivation);
	var observing=unique(this.isComputing?this.newObserving:this.observing).map(function(dep){return dep.name;});
	var observers=unique(getObservers(this).map(function(dep){return dep.name;}));
	return"\nWhyRun? computation '"+this.name+"':\n * Running because: "+(isTracking?"[active] the value of this computation is needed by a reaction":this.isComputing?"[get] The value of this computed was requested outside a reaction":"[idle] not running at the moment")+"\n"+(
	this.dependenciesState===IDerivationState.NOT_TRACKING?

	" * This computation is suspended (not in use by any reaction) and won't run automatically.\n\tDidn't expect this computation to be suspended at this point?\n\t  1. Make sure this computation is used by a reaction (reaction, autorun, observer).\n\t  2. Check whether you are using this computation synchronously (in the same stack as they reaction that needs it).\n":

	" * This computation will re-run if any of the following observables changes:\n    "+joinStrings(observing)+"\n    "+(this.isComputing&&isTracking?" (... or any observable accessed during the remainder of the current run)":"")+"\n\tMissing items in this list?\n\t  1. Check whether all used values are properly marked as observable (use isObservable to verify)\n\t  2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\n  * If the outcome of this computation changes, the following observers will be re-run:\n    "+joinStrings(observers)+"\n");
	};
	return ComputedValue;
	}();
	var isComputedValue=createInstanceofPredicate("ComputedValue",ComputedValue);
	var IDerivationState;
	(function(IDerivationState){
	IDerivationState[IDerivationState["NOT_TRACKING"]=-1]="NOT_TRACKING";
	IDerivationState[IDerivationState["UP_TO_DATE"]=0]="UP_TO_DATE";
	IDerivationState[IDerivationState["POSSIBLY_STALE"]=1]="POSSIBLY_STALE";
	IDerivationState[IDerivationState["STALE"]=2]="STALE";
	})(IDerivationState||(IDerivationState={}));
	exports.IDerivationState=IDerivationState;
	function shouldCompute(derivation){
	switch(derivation.dependenciesState){
	case IDerivationState.UP_TO_DATE:return false;
	case IDerivationState.NOT_TRACKING:
	case IDerivationState.STALE:return true;
	case IDerivationState.POSSIBLY_STALE:{
	var hasError=true;
	var prevUntracked=untrackedStart();
	try{
	var obs=derivation.observing,l=obs.length;
	for(var i=0;i<l;i++){
	var obj=obs[i];
	if(isComputedValue(obj)){
	obj.get();
	if(derivation.dependenciesState===IDerivationState.STALE){
	hasError=false;
	untrackedEnd(prevUntracked);
	return true;
	}
	}
	}
	hasError=false;
	changeDependenciesStateTo0(derivation);
	untrackedEnd(prevUntracked);
	return false;
	}finally
	{
	if(hasError){
	changeDependenciesStateTo0(derivation);
	}
	}
	}}

	}
	function isComputingDerivation(){
	return globalState.trackingDerivation!==null;
	}
	function checkIfStateModificationsAreAllowed(){
	if(!globalState.allowStateChanges){
	invariant(false,globalState.strictMode?
	"It is not allowed to create or change state outside an `action` when MobX is in strict mode. Wrap the current method in `action` if this state change is intended":
	"It is not allowed to change the state when a computed value or transformer is being evaluated. Use 'autorun' to create reactive functions with side-effects.");
	}
	}
	function trackDerivedFunction(derivation,f){
	changeDependenciesStateTo0(derivation);
	derivation.newObserving=new Array(derivation.observing.length+100);
	derivation.unboundDepsCount=0;
	derivation.runId=++globalState.runId;
	var prevTracking=globalState.trackingDerivation;
	globalState.trackingDerivation=derivation;
	var hasException=true;
	var result;
	try{
	result=f.call(derivation);
	hasException=false;
	}finally
	{
	if(hasException){
	handleExceptionInDerivation(derivation);
	}else
	{
	globalState.trackingDerivation=prevTracking;
	bindDependencies(derivation);
	}
	}
	return result;
	}
	function handleExceptionInDerivation(derivation){
	var message="[mobx] An uncaught exception occurred while calculating your computed value, autorun or transformer. Or inside the render() method of an observer based React component. "+
	"These functions should never throw exceptions as MobX will not always be able to recover from them. "+(
	"Please fix the error reported after this message or enable 'Pause on (caught) exceptions' in your debugger to find the root cause. In: '"+derivation.name+"'. ")+
	"For more details see https://github.com/mobxjs/mobx/issues/462";
	if(isSpyEnabled()){
	spyReport({
	type:"error",
	message:message});

	}
	console.warn(message);
	changeDependenciesStateTo0(derivation);
	derivation.newObserving=null;
	derivation.unboundDepsCount=0;
	derivation.recoverFromError();
	endBatch();
	resetGlobalState();
	}
	function bindDependencies(derivation){
	var prevObserving=derivation.observing;
	var observing=derivation.observing=derivation.newObserving;
	derivation.newObserving=null;
	var i0=0,l=derivation.unboundDepsCount;
	for(var i=0;i<l;i++){
	var dep=observing[i];
	if(dep.diffValue===0){
	dep.diffValue=1;
	if(i0!==i)
	observing[i0]=dep;
	i0++;
	}
	}
	observing.length=i0;
	l=prevObserving.length;
	while(l--){
	var dep=prevObserving[l];
	if(dep.diffValue===0){
	removeObserver(dep,derivation);
	}
	dep.diffValue=0;
	}
	while(i0--){
	var dep=observing[i0];
	if(dep.diffValue===1){
	dep.diffValue=0;
	addObserver(dep,derivation);
	}
	}
	}
	function clearObserving(derivation){
	var obs=derivation.observing;
	var i=obs.length;
	while(i--){
	removeObserver(obs[i],derivation);}
	derivation.dependenciesState=IDerivationState.NOT_TRACKING;
	obs.length=0;
	}
	function untracked(action){
	var prev=untrackedStart();
	var res=action();
	untrackedEnd(prev);
	return res;
	}
	exports.untracked=untracked;
	function untrackedStart(){
	var prev=globalState.trackingDerivation;
	globalState.trackingDerivation=null;
	return prev;
	}
	function untrackedEnd(prev){
	globalState.trackingDerivation=prev;
	}
	function changeDependenciesStateTo0(derivation){
	if(derivation.dependenciesState===IDerivationState.UP_TO_DATE)
	return;
	derivation.dependenciesState=IDerivationState.UP_TO_DATE;
	var obs=derivation.observing;
	var i=obs.length;
	while(i--){
	obs[i].lowestObserverState=IDerivationState.UP_TO_DATE;}
	}
	var persistentKeys=["mobxGuid","resetId","spyListeners","strictMode","runId"];
	var MobXGlobals=function(){
	function MobXGlobals(){
	this.version=4;
	this.trackingDerivation=null;
	this.runId=0;
	this.mobxGuid=0;
	this.inTransaction=0;
	this.isRunningReactions=false;
	this.inBatch=0;
	this.pendingUnobservations=[];
	this.pendingReactions=[];
	this.allowStateChanges=true;
	this.strictMode=false;
	this.resetId=0;
	this.spyListeners=[];
	}
	return MobXGlobals;
	}();
	var globalState=function(){
	var res=new MobXGlobals();
	if(global.__mobservableTrackingStack||global.__mobservableViewStack)
	throw new Error("[mobx] An incompatible version of mobservable is already loaded.");
	if(global.__mobxGlobal&&global.__mobxGlobal.version!==res.version)
	throw new Error("[mobx] An incompatible version of mobx is already loaded.");
	if(global.__mobxGlobal)
	return global.__mobxGlobal;
	return global.__mobxGlobal=res;
	}();
	function registerGlobals(){
	}
	function resetGlobalState(){
	globalState.resetId++;
	var defaultGlobals=new MobXGlobals();
	for(var key in defaultGlobals){
	if(persistentKeys.indexOf(key)===-1)
	globalState[key]=defaultGlobals[key];}
	globalState.allowStateChanges=!globalState.strictMode;
	}
	function hasObservers(observable){
	return observable.observers&&observable.observers.length>0;
	}
	function getObservers(observable){
	return observable.observers;
	}
	function invariantObservers(observable){
	var list=observable.observers;
	var map=observable.observersIndexes;
	var l=list.length;
	for(var i=0;i<l;i++){
	var id=list[i].__mapid;
	if(i){
	invariant(map[id]===i,"INTERNAL ERROR maps derivation.__mapid to index in list");
	}else
	{
	invariant(!(id in map),"INTERNAL ERROR observer on index 0 shouldnt be held in map.");
	}
	}
	invariant(list.length===0||Object.keys(map).length===list.length-1,"INTERNAL ERROR there is no junk in map");
	}
	function addObserver(observable,node){
	var l=observable.observers.length;
	if(l){
	observable.observersIndexes[node.__mapid]=l;
	}
	observable.observers[l]=node;
	if(observable.lowestObserverState>node.dependenciesState)
	observable.lowestObserverState=node.dependenciesState;
	}
	function removeObserver(observable,node){
	if(observable.observers.length===1){
	observable.observers.length=0;
	queueForUnobservation(observable);
	}else
	{
	var list=observable.observers;
	var map_1=observable.observersIndexes;
	var filler=list.pop();
	if(filler!==node){
	var index=map_1[node.__mapid]||0;
	if(index){
	map_1[filler.__mapid]=index;
	}else
	{
	delete map_1[filler.__mapid];
	}
	list[index]=filler;
	}
	delete map_1[node.__mapid];
	}
	}
	function queueForUnobservation(observable){
	if(!observable.isPendingUnobservation){
	observable.isPendingUnobservation=true;
	globalState.pendingUnobservations.push(observable);
	}
	}
	function startBatch(){
	globalState.inBatch++;
	}
	function endBatch(){
	if(globalState.inBatch===1){
	var list=globalState.pendingUnobservations;
	for(var i=0;i<list.length;i++){
	var observable_1=list[i];
	observable_1.isPendingUnobservation=false;
	if(observable_1.observers.length===0){
	observable_1.onBecomeUnobserved();
	}
	}
	globalState.pendingUnobservations=[];
	}
	globalState.inBatch--;
	}
	function reportObserved(observable){
	var derivation=globalState.trackingDerivation;
	if(derivation!==null){
	if(derivation.runId!==observable.lastAccessedBy){
	observable.lastAccessedBy=derivation.runId;
	derivation.newObserving[derivation.unboundDepsCount++]=observable;
	}
	}else
	if(observable.observers.length===0){
	queueForUnobservation(observable);
	}
	}
	function invariantLOS(observable,msg){
	var min=getObservers(observable).reduce(function(a,b){return Math.min(a,b.dependenciesState);},2);
	if(min>=observable.lowestObserverState)
	return;
	throw new Error("lowestObserverState is wrong for "+msg+" because "+min+" < "+observable.lowestObserverState);
	}
	function propagateChanged(observable){
	if(observable.lowestObserverState===IDerivationState.STALE)
	return;
	observable.lowestObserverState=IDerivationState.STALE;
	var observers=observable.observers;
	var i=observers.length;
	while(i--){
	var d=observers[i];
	if(d.dependenciesState===IDerivationState.UP_TO_DATE)
	d.onBecomeStale();
	d.dependenciesState=IDerivationState.STALE;
	}
	}
	function propagateChangeConfirmed(observable){
	if(observable.lowestObserverState===IDerivationState.STALE)
	return;
	observable.lowestObserverState=IDerivationState.STALE;
	var observers=observable.observers;
	var i=observers.length;
	while(i--){
	var d=observers[i];
	if(d.dependenciesState===IDerivationState.POSSIBLY_STALE)
	d.dependenciesState=IDerivationState.STALE;else
	if(d.dependenciesState===IDerivationState.UP_TO_DATE)
	observable.lowestObserverState=IDerivationState.UP_TO_DATE;
	}
	}
	function propagateMaybeChanged(observable){
	if(observable.lowestObserverState!==IDerivationState.UP_TO_DATE)
	return;
	observable.lowestObserverState=IDerivationState.POSSIBLY_STALE;
	var observers=observable.observers;
	var i=observers.length;
	while(i--){
	var d=observers[i];
	if(d.dependenciesState===IDerivationState.UP_TO_DATE){
	d.dependenciesState=IDerivationState.POSSIBLY_STALE;
	d.onBecomeStale();
	}
	}
	}
	var Reaction=function(){
	function Reaction(name,onInvalidate){
	if(name===void 0){name="Reaction@"+getNextId();}
	this.name=name;
	this.onInvalidate=onInvalidate;
	this.observing=[];
	this.newObserving=[];
	this.dependenciesState=IDerivationState.NOT_TRACKING;
	this.diffValue=0;
	this.runId=0;
	this.unboundDepsCount=0;
	this.__mapid="#"+getNextId();
	this.isDisposed=false;
	this._isScheduled=false;
	this._isTrackPending=false;
	this._isRunning=false;
	}
	Reaction.prototype.onBecomeStale=function(){
	this.schedule();
	};
	Reaction.prototype.schedule=function(){
	if(!this._isScheduled){
	this._isScheduled=true;
	globalState.pendingReactions.push(this);
	startBatch();
	runReactions();
	endBatch();
	}
	};
	Reaction.prototype.isScheduled=function(){
	return this._isScheduled;
	};
	Reaction.prototype.runReaction=function(){
	if(!this.isDisposed){
	this._isScheduled=false;
	if(shouldCompute(this)){
	this._isTrackPending=true;
	this.onInvalidate();
	if(this._isTrackPending&&isSpyEnabled()){
	spyReport({
	object:this,
	type:"scheduled-reaction"});

	}
	}
	}
	};
	Reaction.prototype.track=function(fn){
	startBatch();
	var notify=isSpyEnabled();
	var startTime;
	if(notify){
	startTime=Date.now();
	spyReportStart({
	object:this,
	type:"reaction",
	fn:fn});

	}
	this._isRunning=true;
	trackDerivedFunction(this,fn);
	this._isRunning=false;
	this._isTrackPending=false;
	if(this.isDisposed){
	clearObserving(this);
	}
	if(notify){
	spyReportEnd({
	time:Date.now()-startTime});

	}
	endBatch();
	};
	Reaction.prototype.recoverFromError=function(){
	this._isRunning=false;
	this._isTrackPending=false;
	};
	Reaction.prototype.dispose=function(){
	if(!this.isDisposed){
	this.isDisposed=true;
	if(!this._isRunning){
	startBatch();
	clearObserving(this);
	endBatch();
	}
	}
	};
	Reaction.prototype.getDisposer=function(){
	var r=this.dispose.bind(this);
	r.$mobx=this;
	return r;
	};
	Reaction.prototype.toString=function(){
	return"Reaction["+this.name+"]";
	};
	Reaction.prototype.whyRun=function(){
	var observing=unique(this._isRunning?this.newObserving:this.observing).map(function(dep){return dep.name;});
	return"\nWhyRun? reaction '"+this.name+"':\n * Status: ["+(this.isDisposed?"stopped":this._isRunning?"running":this.isScheduled()?"scheduled":"idle")+"]\n * This reaction will re-run if any of the following observables changes:\n    "+joinStrings(observing)+"\n    "+(this._isRunning?" (... or any observable accessed during the remainder of the current run)":"")+"\n\tMissing items in this list?\n\t  1. Check whether all used values are properly marked as observable (use isObservable to verify)\n\t  2. Make sure you didn't dereference values too early. MobX observes props, not primitives. E.g: use 'person.name' instead of 'name' in your computation.\n";
	};
	return Reaction;
	}();
	exports.Reaction=Reaction;
	var MAX_REACTION_ITERATIONS=100;
	function runReactions(){
	if(globalState.isRunningReactions===true||globalState.inTransaction>0)
	return;
	globalState.isRunningReactions=true;
	var allReactions=globalState.pendingReactions;
	var iterations=0;
	while(allReactions.length>0){
	if(++iterations===MAX_REACTION_ITERATIONS){
	resetGlobalState();
	throw new Error("Reaction doesn't converge to a stable state after "+MAX_REACTION_ITERATIONS+" iterations."+(
	" Probably there is a cycle in the reactive function: "+allReactions[0]));
	}
	var remainingReactions=allReactions.splice(0);
	for(var i=0,l=remainingReactions.length;i<l;i++){
	remainingReactions[i].runReaction();}
	}
	globalState.isRunningReactions=false;
	}
	var isReaction=createInstanceofPredicate("Reaction",Reaction);
	function isSpyEnabled(){
	return!!globalState.spyListeners.length;
	}
	function spyReport(event){
	if(!globalState.spyListeners.length)
	return false;
	var listeners=globalState.spyListeners;
	for(var i=0,l=listeners.length;i<l;i++){
	listeners[i](event);}
	}
	function spyReportStart(event){
	var change=objectAssign({},event,{spyReportStart:true});
	spyReport(change);
	}
	var END_EVENT={spyReportEnd:true};
	function spyReportEnd(change){
	if(change)
	spyReport(objectAssign({},change,END_EVENT));else

	spyReport(END_EVENT);
	}
	function spy(listener){
	globalState.spyListeners.push(listener);
	return once(function(){
	var idx=globalState.spyListeners.indexOf(listener);
	if(idx!==-1)
	globalState.spyListeners.splice(idx,1);
	});
	}
	exports.spy=spy;
	function trackTransitions(onReport){
	deprecated("trackTransitions is deprecated. Use mobx.spy instead");
	if(typeof onReport==="boolean"){
	deprecated("trackTransitions only takes a single callback function. If you are using the mobx-react-devtools, please update them first");
	onReport=arguments[1];
	}
	if(!onReport){
	deprecated("trackTransitions without callback has been deprecated and is a no-op now. If you are using the mobx-react-devtools, please update them first");
	return function(){};
	}
	return spy(onReport);
	}
	function transaction(action,thisArg,report){
	if(thisArg===void 0){thisArg=undefined;}
	if(report===void 0){report=true;}
	transactionStart(action.name||"anonymous transaction",thisArg,report);
	var res=action.call(thisArg);
	transactionEnd(report);
	return res;
	}
	exports.transaction=transaction;
	function transactionStart(name,thisArg,report){
	if(thisArg===void 0){thisArg=undefined;}
	if(report===void 0){report=true;}
	startBatch();
	globalState.inTransaction+=1;
	if(report&&isSpyEnabled()){
	spyReportStart({
	type:"transaction",
	target:thisArg,
	name:name});

	}
	}
	function transactionEnd(report){
	if(report===void 0){report=true;}
	if(--globalState.inTransaction===0){
	runReactions();
	}
	if(report&&isSpyEnabled())
	spyReportEnd();
	endBatch();
	}
	function hasInterceptors(interceptable){
	return interceptable.interceptors&&interceptable.interceptors.length>0;
	}
	function registerInterceptor(interceptable,handler){
	var interceptors=interceptable.interceptors||(interceptable.interceptors=[]);
	interceptors.push(handler);
	return once(function(){
	var idx=interceptors.indexOf(handler);
	if(idx!==-1)
	interceptors.splice(idx,1);
	});
	}
	function interceptChange(interceptable,change){
	var prevU=untrackedStart();
	var interceptors=interceptable.interceptors;
	for(var i=0,l=interceptors.length;i<l;i++){
	change=interceptors[i](change);
	invariant(!change||change.type,"Intercept handlers should return nothing or a change object");
	if(!change)
	return null;
	}
	untrackedEnd(prevU);
	return change;
	}
	function hasListeners(listenable){
	return listenable.changeListeners&&listenable.changeListeners.length>0;
	}
	function registerListener(listenable,handler){
	var listeners=listenable.changeListeners||(listenable.changeListeners=[]);
	listeners.push(handler);
	return once(function(){
	var idx=listeners.indexOf(handler);
	if(idx!==-1)
	listeners.splice(idx,1);
	});
	}
	function notifyListeners(listenable,change){
	var prevU=untrackedStart();
	var listeners=listenable.changeListeners;
	if(!listeners)
	return;
	listeners=listeners.slice();
	for(var i=0,l=listeners.length;i<l;i++){
	if(Array.isArray(change)){
	listeners[i].apply(null,change);
	}else
	{
	listeners[i](change);
	}
	}
	untrackedEnd(prevU);
	}
	var ValueMode;
	(function(ValueMode){
	ValueMode[ValueMode["Recursive"]=0]="Recursive";
	ValueMode[ValueMode["Reference"]=1]="Reference";
	ValueMode[ValueMode["Structure"]=2]="Structure";
	ValueMode[ValueMode["Flat"]=3]="Flat";
	})(ValueMode||(ValueMode={}));
	function withModifier(modifier,value){
	assertUnwrapped(value,"Modifiers are not allowed to be nested");
	return{
	mobxModifier:modifier,
	value:value};

	}
	function getModifier(value){
	if(value){
	return value.mobxModifier||null;
	}
	return null;
	}
	function asReference(value){
	return withModifier(ValueMode.Reference,value);
	}
	exports.asReference=asReference;
	asReference.mobxModifier=ValueMode.Reference;
	function asStructure(value){
	return withModifier(ValueMode.Structure,value);
	}
	exports.asStructure=asStructure;
	asStructure.mobxModifier=ValueMode.Structure;
	function asFlat(value){
	return withModifier(ValueMode.Flat,value);
	}
	exports.asFlat=asFlat;
	asFlat.mobxModifier=ValueMode.Flat;
	function asMap(data,modifierFunc){
	return map(data,modifierFunc);
	}
	exports.asMap=asMap;
	function getValueModeFromValue(value,defaultMode){
	var mode=getModifier(value);
	if(mode)
	return[mode,value.value];
	return[defaultMode,value];
	}
	function getValueModeFromModifierFunc(func){
	if(func===undefined)
	return ValueMode.Recursive;
	var mod=getModifier(func);
	invariant(mod!==null,"Cannot determine value mode from function. Please pass in one of these: mobx.asReference, mobx.asStructure or mobx.asFlat, got: "+func);
	return mod;
	}
	function makeChildObservable(value,parentMode,name){
	var childMode;
	if(isObservable(value))
	return value;
	switch(parentMode){
	case ValueMode.Reference:
	return value;
	case ValueMode.Flat:
	assertUnwrapped(value,"Items inside 'asFlat' cannot have modifiers");
	childMode=ValueMode.Reference;
	break;
	case ValueMode.Structure:
	assertUnwrapped(value,"Items inside 'asStructure' cannot have modifiers");
	childMode=ValueMode.Structure;
	break;
	case ValueMode.Recursive:
	_a=getValueModeFromValue(value,ValueMode.Recursive),childMode=_a[0],value=_a[1];
	break;
	default:
	invariant(false,"Illegal State");}

	if(Array.isArray(value))
	return createObservableArray(value,childMode,name);
	if(isPlainObject(value)&&Object.isExtensible(value))
	return extendObservableHelper(value,value,childMode,name);
	return value;
	var _a;
	}
	function assertUnwrapped(value,message){
	if(getModifier(value)!==null)
	throw new Error("[mobx] asStructure / asReference / asFlat cannot be used here. "+message);
	}
	var safariPrototypeSetterInheritanceBug=function(){
	var v=false;
	var p={};
	Object.defineProperty(p,"0",{set:function set(){v=true;}});
	Object.create(p)["0"]=1;
	return v===false;
	}();
	var OBSERVABLE_ARRAY_BUFFER_SIZE=0;
	var StubArray=function(){
	function StubArray(){
	}
	return StubArray;
	}();
	StubArray.prototype=[];
	var ObservableArrayAdministration=function(){
	function ObservableArrayAdministration(name,mode,array,owned){
	this.mode=mode;
	this.array=array;
	this.owned=owned;
	this.lastKnownLength=0;
	this.interceptors=null;
	this.changeListeners=null;
	this.atom=new BaseAtom(name||"ObservableArray@"+getNextId());
	}
	ObservableArrayAdministration.prototype.makeReactiveArrayItem=function(value){
	assertUnwrapped(value,"Array values cannot have modifiers");
	if(this.mode===ValueMode.Flat||this.mode===ValueMode.Reference)
	return value;
	return makeChildObservable(value,this.mode,this.atom.name+"[..]");
	};
	ObservableArrayAdministration.prototype.intercept=function(handler){
	return registerInterceptor(this,handler);
	};
	ObservableArrayAdministration.prototype.observe=function(listener,fireImmediately){
	if(fireImmediately===void 0){fireImmediately=false;}
	if(fireImmediately){
	listener({
	object:this.array,
	type:"splice",
	index:0,
	added:this.values.slice(),
	addedCount:this.values.length,
	removed:[],
	removedCount:0});

	}
	return registerListener(this,listener);
	};
	ObservableArrayAdministration.prototype.getArrayLength=function(){
	this.atom.reportObserved();
	return this.values.length;
	};
	ObservableArrayAdministration.prototype.setArrayLength=function(newLength){
	if(typeof newLength!=="number"||newLength<0)
	throw new Error("[mobx.array] Out of range: "+newLength);
	var currentLength=this.values.length;
	if(newLength===currentLength)
	return;else
	if(newLength>currentLength)
	this.spliceWithArray(currentLength,0,new Array(newLength-currentLength));else

	this.spliceWithArray(newLength,currentLength-newLength);
	};
	ObservableArrayAdministration.prototype.updateArrayLength=function(oldLength,delta){
	if(oldLength!==this.lastKnownLength)
	throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed. Did you use peek() to change it?");
	this.lastKnownLength+=delta;
	if(delta>0&&oldLength+delta+1>OBSERVABLE_ARRAY_BUFFER_SIZE)
	reserveArrayBuffer(oldLength+delta+1);
	};
	ObservableArrayAdministration.prototype.spliceWithArray=function(index,deleteCount,newItems){
	checkIfStateModificationsAreAllowed();
	var length=this.values.length;
	if(index===undefined)
	index=0;else
	if(index>length)
	index=length;else
	if(index<0)
	index=Math.max(0,length+index);
	if(arguments.length===1)
	deleteCount=length-index;else
	if(deleteCount===undefined||deleteCount===null)
	deleteCount=0;else

	deleteCount=Math.max(0,Math.min(deleteCount,length-index));
	if(newItems===undefined)
	newItems=[];
	if(hasInterceptors(this)){
	var change=interceptChange(this,{
	object:this.array,
	type:"splice",
	index:index,
	removedCount:deleteCount,
	added:newItems});

	if(!change)
	return EMPTY_ARRAY;
	deleteCount=change.removedCount;
	newItems=change.added;
	}
	newItems=newItems.map(this.makeReactiveArrayItem,this);
	var lengthDelta=newItems.length-deleteCount;
	this.updateArrayLength(length,lengthDelta);
	var res=(_a=this.values).splice.apply(_a,[index,deleteCount].concat(newItems));
	if(deleteCount!==0||newItems.length!==0)
	this.notifyArraySplice(index,newItems,res);
	return res;
	var _a;
	};
	ObservableArrayAdministration.prototype.notifyArrayChildUpdate=function(index,newValue,oldValue){
	var notifySpy=!this.owned&&isSpyEnabled();
	var notify=hasListeners(this);
	var change=notify||notifySpy?{
	object:this.array,
	type:"update",
	index:index,newValue:newValue,oldValue:oldValue}:
	null;
	if(notifySpy)
	spyReportStart(change);
	this.atom.reportChanged();
	if(notify)
	notifyListeners(this,change);
	if(notifySpy)
	spyReportEnd();
	};
	ObservableArrayAdministration.prototype.notifyArraySplice=function(index,added,removed){
	var notifySpy=!this.owned&&isSpyEnabled();
	var notify=hasListeners(this);
	var change=notify||notifySpy?{
	object:this.array,
	type:"splice",
	index:index,removed:removed,added:added,
	removedCount:removed.length,
	addedCount:added.length}:
	null;
	if(notifySpy)
	spyReportStart(change);
	this.atom.reportChanged();
	if(notify)
	notifyListeners(this,change);
	if(notifySpy)
	spyReportEnd();
	};
	return ObservableArrayAdministration;
	}();
	var ObservableArray=function(_super){
	__extends(ObservableArray,_super);
	function ObservableArray(initialValues,mode,name,owned){
	if(owned===void 0){owned=false;}
	_super.call(this);
	var adm=new ObservableArrayAdministration(name,mode,this,owned);
	addHiddenFinalProp(this,"$mobx",adm);
	if(initialValues&&initialValues.length){
	adm.updateArrayLength(0,initialValues.length);
	adm.values=initialValues.map(adm.makeReactiveArrayItem,adm);
	adm.notifyArraySplice(0,adm.values.slice(),EMPTY_ARRAY);
	}else
	{
	adm.values=[];
	}
	if(safariPrototypeSetterInheritanceBug){
	Object.defineProperty(adm.array,"0",ENTRY_0);
	}
	}
	ObservableArray.prototype.intercept=function(handler){
	return this.$mobx.intercept(handler);
	};
	ObservableArray.prototype.observe=function(listener,fireImmediately){
	if(fireImmediately===void 0){fireImmediately=false;}
	return this.$mobx.observe(listener,fireImmediately);
	};
	ObservableArray.prototype.clear=function(){
	return this.splice(0);
	};
	ObservableArray.prototype.concat=function(){
	var arrays=[];
	for(var _i=0;_i<arguments.length;_i++){
	arrays[_i-0]=arguments[_i];
	}
	this.$mobx.atom.reportObserved();
	return Array.prototype.concat.apply(this.slice(),arrays.map(function(a){return isObservableArray(a)?a.slice():a;}));
	};
	ObservableArray.prototype.replace=function(newItems){
	return this.$mobx.spliceWithArray(0,this.$mobx.values.length,newItems);
	};
	ObservableArray.prototype.toJS=function(){
	return this.slice();
	};
	ObservableArray.prototype.toJSON=function(){
	return this.toJS();
	};
	ObservableArray.prototype.peek=function(){
	return this.$mobx.values;
	};
	ObservableArray.prototype.find=function(predicate,thisArg,fromIndex){
	if(fromIndex===void 0){fromIndex=0;}
	this.$mobx.atom.reportObserved();
	var items=this.$mobx.values,l=items.length;
	for(var i=fromIndex;i<l;i++){
	if(predicate.call(thisArg,items[i],i,this))
	return items[i];}
	return undefined;
	};
	ObservableArray.prototype.splice=function(index,deleteCount){
	var newItems=[];
	for(var _i=2;_i<arguments.length;_i++){
	newItems[_i-2]=arguments[_i];
	}
	switch(arguments.length){
	case 0:
	return[];
	case 1:
	return this.$mobx.spliceWithArray(index);
	case 2:
	return this.$mobx.spliceWithArray(index,deleteCount);}

	return this.$mobx.spliceWithArray(index,deleteCount,newItems);
	};
	ObservableArray.prototype.push=function(){
	var items=[];
	for(var _i=0;_i<arguments.length;_i++){
	items[_i-0]=arguments[_i];
	}
	var adm=this.$mobx;
	adm.spliceWithArray(adm.values.length,0,items);
	return adm.values.length;
	};
	ObservableArray.prototype.pop=function(){
	return this.splice(Math.max(this.$mobx.values.length-1,0),1)[0];
	};
	ObservableArray.prototype.shift=function(){
	return this.splice(0,1)[0];
	};
	ObservableArray.prototype.unshift=function(){
	var items=[];
	for(var _i=0;_i<arguments.length;_i++){
	items[_i-0]=arguments[_i];
	}
	var adm=this.$mobx;
	adm.spliceWithArray(0,0,items);
	return adm.values.length;
	};
	ObservableArray.prototype.reverse=function(){
	this.$mobx.atom.reportObserved();
	var clone=this.slice();
	return clone.reverse.apply(clone,arguments);
	};
	ObservableArray.prototype.sort=function(compareFn){
	this.$mobx.atom.reportObserved();
	var clone=this.slice();
	return clone.sort.apply(clone,arguments);
	};
	ObservableArray.prototype.remove=function(value){
	var idx=this.$mobx.values.indexOf(value);
	if(idx>-1){
	this.splice(idx,1);
	return true;
	}
	return false;
	};
	ObservableArray.prototype.toString=function(){
	return"[mobx.array] "+Array.prototype.toString.apply(this.$mobx.values,arguments);
	};
	ObservableArray.prototype.toLocaleString=function(){
	return"[mobx.array] "+Array.prototype.toLocaleString.apply(this.$mobx.values,arguments);
	};
	return ObservableArray;
	}(StubArray);
	declareIterator(ObservableArray.prototype,function(){
	return arrayAsIterator(this.slice());
	});
	makeNonEnumerable(ObservableArray.prototype,[
	"constructor",
	"intercept",
	"observe",
	"clear",
	"concat",
	"replace",
	"toJS",
	"toJSON",
	"peek",
	"find",
	"splice",
	"push",
	"pop",
	"shift",
	"unshift",
	"reverse",
	"sort",
	"remove",
	"toString",
	"toLocaleString"]);

	Object.defineProperty(ObservableArray.prototype,"length",{
	enumerable:false,
	configurable:true,
	get:function get(){
	return this.$mobx.getArrayLength();
	},
	set:function set(newLength){
	this.$mobx.setArrayLength(newLength);
	}});

	[
	"every",
	"filter",
	"forEach",
	"indexOf",
	"join",
	"lastIndexOf",
	"map",
	"reduce",
	"reduceRight",
	"slice",
	"some"].
	forEach(function(funcName){
	var baseFunc=Array.prototype[funcName];
	invariant(typeof baseFunc==="function","Base function not defined on Array prototype: '"+funcName+"'");
	addHiddenProp(ObservableArray.prototype,funcName,function(){
	this.$mobx.atom.reportObserved();
	return baseFunc.apply(this.$mobx.values,arguments);
	});
	});
	var ENTRY_0={
	configurable:true,
	enumerable:false,
	set:createArraySetter(0),
	get:createArrayGetter(0)};

	function createArrayBufferItem(index){
	var set=createArraySetter(index);
	var get=createArrayGetter(index);
	Object.defineProperty(ObservableArray.prototype,""+index,{
	enumerable:false,
	configurable:true,
	set:set,get:get});

	}
	function createArraySetter(index){
	return function(newValue){
	var adm=this.$mobx;
	var values=adm.values;
	assertUnwrapped(newValue,"Modifiers cannot be used on array values. For non-reactive array values use makeReactive(asFlat(array)).");
	if(index<values.length){
	checkIfStateModificationsAreAllowed();
	var oldValue=values[index];
	if(hasInterceptors(adm)){
	var change=interceptChange(adm,{
	type:"update",
	object:adm.array,
	index:index,newValue:newValue});

	if(!change)
	return;
	newValue=change.newValue;
	}
	newValue=adm.makeReactiveArrayItem(newValue);
	var changed=adm.mode===ValueMode.Structure?!deepEquals(oldValue,newValue):oldValue!==newValue;
	if(changed){
	values[index]=newValue;
	adm.notifyArrayChildUpdate(index,newValue,oldValue);
	}
	}else
	if(index===values.length){
	adm.spliceWithArray(index,0,[newValue]);
	}else

	throw new Error("[mobx.array] Index out of bounds, "+index+" is larger than "+values.length);
	};
	}
	function createArrayGetter(index){
	return function(){
	var impl=this.$mobx;
	if(impl&&index<impl.values.length){
	impl.atom.reportObserved();
	return impl.values[index];
	}
	console.warn("[mobx.array] Attempt to read an array index ("+index+") that is out of bounds ("+impl.values.length+"). Please check length first. Out of bound indices will not be tracked by MobX");
	return undefined;
	};
	}
	function reserveArrayBuffer(max){
	for(var index=OBSERVABLE_ARRAY_BUFFER_SIZE;index<max;index++){
	createArrayBufferItem(index);}
	OBSERVABLE_ARRAY_BUFFER_SIZE=max;
	}
	reserveArrayBuffer(1000);
	function createObservableArray(initialValues,mode,name){
	return new ObservableArray(initialValues,mode,name);
	}
	function fastArray(initialValues){
	deprecated("fastArray is deprecated. Please use `observable(asFlat([]))`");
	return createObservableArray(initialValues,ValueMode.Flat,null);
	}
	exports.fastArray=fastArray;
	var isObservableArrayAdministration=createInstanceofPredicate("ObservableArrayAdministration",ObservableArrayAdministration);
	function isObservableArray(thing){
	return isObject(thing)&&isObservableArrayAdministration(thing.$mobx);
	}
	exports.isObservableArray=isObservableArray;
	var ObservableMapMarker={};
	var ObservableMap=function(){
	function ObservableMap(initialData,valueModeFunc){
	var _this=this;
	this.$mobx=ObservableMapMarker;
	this._data={};
	this._hasMap={};
	this.name="ObservableMap@"+getNextId();
	this._keys=new ObservableArray(null,ValueMode.Reference,this.name+".keys()",true);
	this.interceptors=null;
	this.changeListeners=null;
	this._valueMode=getValueModeFromModifierFunc(valueModeFunc);
	if(this._valueMode===ValueMode.Flat)
	this._valueMode=ValueMode.Reference;
	allowStateChanges(true,function(){
	if(isPlainObject(initialData))
	_this.merge(initialData);else
	if(Array.isArray(initialData))
	initialData.forEach(function(_a){
	var key=_a[0],value=_a[1];
	return _this.set(key,value);
	});
	});
	}
	ObservableMap.prototype._has=function(key){
	return typeof this._data[key]!=="undefined";
	};
	ObservableMap.prototype.has=function(key){
	if(!this.isValidKey(key))
	return false;
	key=""+key;
	if(this._hasMap[key])
	return this._hasMap[key].get();
	return this._updateHasMapEntry(key,false).get();
	};
	ObservableMap.prototype.set=function(key,value){
	this.assertValidKey(key);
	key=""+key;
	var hasKey=this._has(key);
	assertUnwrapped(value,"[mobx.map.set] Expected unwrapped value to be inserted to key '"+key+"'. If you need to use modifiers pass them as second argument to the constructor");
	if(hasInterceptors(this)){
	var change=interceptChange(this,{
	type:hasKey?"update":"add",
	object:this,
	newValue:value,
	name:key});

	if(!change)
	return;
	value=change.newValue;
	}
	if(hasKey){
	this._updateValue(key,value);
	}else
	{
	this._addValue(key,value);
	}
	};
	ObservableMap.prototype.delete=function(key){
	var _this=this;
	this.assertValidKey(key);
	key=""+key;
	if(hasInterceptors(this)){
	var change=interceptChange(this,{
	type:"delete",
	object:this,
	name:key});

	if(!change)
	return false;
	}
	if(this._has(key)){
	var notifySpy=isSpyEnabled();
	var notify=hasListeners(this);
	var change=notify||notifySpy?{
	type:"delete",
	object:this,
	oldValue:this._data[key].value,
	name:key}:
	null;
	if(notifySpy)
	spyReportStart(change);
	transaction(function(){
	_this._keys.remove(key);
	_this._updateHasMapEntry(key,false);
	var observable=_this._data[key];
	observable.setNewValue(undefined);
	_this._data[key]=undefined;
	},undefined,false);
	if(notify)
	notifyListeners(this,change);
	if(notifySpy)
	spyReportEnd();
	return true;
	}
	return false;
	};
	ObservableMap.prototype._updateHasMapEntry=function(key,value){
	var entry=this._hasMap[key];
	if(entry){
	entry.setNewValue(value);
	}else
	{
	entry=this._hasMap[key]=new ObservableValue(value,ValueMode.Reference,this.name+"."+key+"?",false);
	}
	return entry;
	};
	ObservableMap.prototype._updateValue=function(name,newValue){
	var observable=this._data[name];
	newValue=observable.prepareNewValue(newValue);
	if(newValue!==UNCHANGED){
	var notifySpy=isSpyEnabled();
	var notify=hasListeners(this);
	var change=notify||notifySpy?{
	type:"update",
	object:this,
	oldValue:observable.value,
	name:name,newValue:newValue}:
	null;
	if(notifySpy)
	spyReportStart(change);
	observable.setNewValue(newValue);
	if(notify)
	notifyListeners(this,change);
	if(notifySpy)
	spyReportEnd();
	}
	};
	ObservableMap.prototype._addValue=function(name,newValue){
	var _this=this;
	transaction(function(){
	var observable=_this._data[name]=new ObservableValue(newValue,_this._valueMode,_this.name+"."+name,false);
	newValue=observable.value;
	_this._updateHasMapEntry(name,true);
	_this._keys.push(name);
	},undefined,false);
	var notifySpy=isSpyEnabled();
	var notify=hasListeners(this);
	var change=notify||notifySpy?{
	type:"add",
	object:this,
	name:name,newValue:newValue}:
	null;
	if(notifySpy)
	spyReportStart(change);
	if(notify)
	notifyListeners(this,change);
	if(notifySpy)
	spyReportEnd();
	};
	ObservableMap.prototype.get=function(key){
	key=""+key;
	if(this.has(key))
	return this._data[key].get();
	return undefined;
	};
	ObservableMap.prototype.keys=function(){
	return arrayAsIterator(this._keys.slice());
	};
	ObservableMap.prototype.values=function(){
	return arrayAsIterator(this._keys.map(this.get,this));
	};
	ObservableMap.prototype.entries=function(){
	var _this=this;
	return arrayAsIterator(this._keys.map(function(key){return[key,_this.get(key)];}));
	};
	ObservableMap.prototype.forEach=function(callback,thisArg){
	var _this=this;
	this.keys().forEach(function(key){return callback.call(thisArg,_this.get(key),key);});
	};
	ObservableMap.prototype.merge=function(other){
	var _this=this;
	transaction(function(){
	if(isObservableMap(other))
	other.keys().forEach(function(key){return _this.set(key,other.get(key));});else

	Object.keys(other).forEach(function(key){return _this.set(key,other[key]);});
	},undefined,false);
	return this;
	};
	ObservableMap.prototype.clear=function(){
	var _this=this;
	transaction(function(){
	untracked(function(){
	_this.keys().forEach(_this.delete,_this);
	});
	},undefined,false);
	};
	Object.defineProperty(ObservableMap.prototype,"size",{
	get:function get(){
	return this._keys.length;
	},
	enumerable:true,
	configurable:true});

	ObservableMap.prototype.toJS=function(){
	var _this=this;
	var res={};
	this.keys().forEach(function(key){return res[key]=_this.get(key);});
	return res;
	};
	ObservableMap.prototype.toJs=function(){
	deprecated("toJs is deprecated, use toJS instead");
	return this.toJS();
	};
	ObservableMap.prototype.toJSON=function(){
	return this.toJS();
	};
	ObservableMap.prototype.isValidKey=function(key){
	if(key===null||key===undefined)
	return false;
	if(typeof key!=="string"&&typeof key!=="number"&&typeof key!=="boolean")
	return false;
	return true;
	};
	ObservableMap.prototype.assertValidKey=function(key){
	if(!this.isValidKey(key))
	throw new Error("[mobx.map] Invalid key: '"+key+"'");
	};
	ObservableMap.prototype.toString=function(){
	var _this=this;
	return this.name+"[{ "+this.keys().map(function(key){return key+": "+(""+_this.get(key));}).join(", ")+" }]";
	};
	ObservableMap.prototype.observe=function(listener,fireImmediately){
	invariant(fireImmediately!==true,"`observe` doesn't support the fire immediately property for observable maps.");
	return registerListener(this,listener);
	};
	ObservableMap.prototype.intercept=function(handler){
	return registerInterceptor(this,handler);
	};
	return ObservableMap;
	}();
	exports.ObservableMap=ObservableMap;
	declareIterator(ObservableMap.prototype,function(){
	return this.entries();
	});
	function map(initialValues,valueModifier){
	return new ObservableMap(initialValues,valueModifier);
	}
	exports.map=map;
	var isObservableMap=createInstanceofPredicate("ObservableMap",ObservableMap);
	exports.isObservableMap=isObservableMap;
	var ObservableObjectAdministration=function(){
	function ObservableObjectAdministration(target,name,mode){
	this.target=target;
	this.name=name;
	this.mode=mode;
	this.values={};
	this.changeListeners=null;
	this.interceptors=null;
	}
	ObservableObjectAdministration.prototype.observe=function(callback,fireImmediately){
	invariant(fireImmediately!==true,"`observe` doesn't support the fire immediately property for observable objects.");
	return registerListener(this,callback);
	};
	ObservableObjectAdministration.prototype.intercept=function(handler){
	return registerInterceptor(this,handler);
	};
	return ObservableObjectAdministration;
	}();
	function asObservableObject(target,name,mode){
	if(mode===void 0){mode=ValueMode.Recursive;}
	if(isObservableObject(target))
	return target.$mobx;
	if(!isPlainObject(target))
	name=target.constructor.name+"@"+getNextId();
	if(!name)
	name="ObservableObject@"+getNextId();
	var adm=new ObservableObjectAdministration(target,name,mode);
	addHiddenFinalProp(target,"$mobx",adm);
	return adm;
	}
	function setObservableObjectInstanceProperty(adm,propName,descriptor){
	if(adm.values[propName]){
	invariant("value"in descriptor,"cannot redefine property "+propName);
	adm.target[propName]=descriptor.value;
	}else
	{
	if("value"in descriptor)
	defineObservableProperty(adm,propName,descriptor.value,true,undefined);else

	defineObservableProperty(adm,propName,descriptor.get,true,descriptor.set);
	}
	}
	function defineObservableProperty(adm,propName,newValue,asInstanceProperty,setter){
	if(asInstanceProperty)
	assertPropertyConfigurable(adm.target,propName);
	var observable;
	var name=adm.name+"."+propName;
	var isComputed=true;
	if(isComputedValue(newValue)){
	observable=newValue;
	newValue.name=name;
	if(!newValue.scope)
	newValue.scope=adm.target;
	}else
	if(typeof newValue==="function"&&newValue.length===0&&!isAction(newValue)){
	observable=new ComputedValue(newValue,adm.target,false,name,setter);
	}else
	if(getModifier(newValue)===ValueMode.Structure&&typeof newValue.value==="function"&&newValue.value.length===0){
	observable=new ComputedValue(newValue.value,adm.target,true,name,setter);
	}else
	{
	isComputed=false;
	if(hasInterceptors(adm)){
	var change=interceptChange(adm,{
	object:adm.target,
	name:propName,
	type:"add",
	newValue:newValue});

	if(!change)
	return;
	newValue=change.newValue;
	}
	observable=new ObservableValue(newValue,adm.mode,name,false);
	newValue=observable.value;
	}
	adm.values[propName]=observable;
	if(asInstanceProperty){
	Object.defineProperty(adm.target,propName,isComputed?generateComputedPropConfig(propName):generateObservablePropConfig(propName));
	}
	if(!isComputed)
	notifyPropertyAddition(adm,adm.target,propName,newValue);
	}
	var observablePropertyConfigs={};
	var computedPropertyConfigs={};
	function generateObservablePropConfig(propName){
	var config=observablePropertyConfigs[propName];
	if(config)
	return config;
	return observablePropertyConfigs[propName]={
	configurable:true,
	enumerable:true,
	get:function get(){
	return this.$mobx.values[propName].get();
	},
	set:function set(v){
	setPropertyValue(this,propName,v);
	}};

	}
	function generateComputedPropConfig(propName){
	var config=computedPropertyConfigs[propName];
	if(config)
	return config;
	return computedPropertyConfigs[propName]={
	configurable:true,
	enumerable:false,
	get:function get(){
	return this.$mobx.values[propName].get();
	},
	set:function set(v){
	return this.$mobx.values[propName].set(v);
	}};

	}
	function setPropertyValue(instance,name,newValue){
	var adm=instance.$mobx;
	var observable=adm.values[name];
	if(hasInterceptors(adm)){
	var change=interceptChange(adm,{
	type:"update",
	object:instance,
	name:name,newValue:newValue});

	if(!change)
	return;
	newValue=change.newValue;
	}
	newValue=observable.prepareNewValue(newValue);
	if(newValue!==UNCHANGED){
	var notify=hasListeners(adm);
	var notifySpy=isSpyEnabled();
	var change=notify||notifySpy?{
	type:"update",
	object:instance,
	oldValue:observable.value,
	name:name,newValue:newValue}:
	null;
	if(notifySpy)
	spyReportStart(change);
	observable.setNewValue(newValue);
	if(notify)
	notifyListeners(adm,change);
	if(notifySpy)
	spyReportEnd();
	}
	}
	function notifyPropertyAddition(adm,object,name,newValue){
	var notify=hasListeners(adm);
	var notifySpy=isSpyEnabled();
	var change=notify||notifySpy?{
	type:"add",
	object:object,name:name,newValue:newValue}:
	null;
	if(notifySpy)
	spyReportStart(change);
	if(notify)
	notifyListeners(adm,change);
	if(notifySpy)
	spyReportEnd();
	}
	var isObservableObjectAdministration=createInstanceofPredicate("ObservableObjectAdministration",ObservableObjectAdministration);
	function isObservableObject(thing){
	if(isObject(thing)){
	runLazyInitializers(thing);
	return isObservableObjectAdministration(thing.$mobx);
	}
	return false;
	}
	exports.isObservableObject=isObservableObject;
	var UNCHANGED={};
	var ObservableValue=function(_super){
	__extends(ObservableValue,_super);
	function ObservableValue(value,mode,name,notifySpy){
	if(name===void 0){name="ObservableValue@"+getNextId();}
	if(notifySpy===void 0){notifySpy=true;}
	_super.call(this,name);
	this.mode=mode;
	this.hasUnreportedChange=false;
	this.value=undefined;
	var _a=getValueModeFromValue(value,ValueMode.Recursive),childmode=_a[0],unwrappedValue=_a[1];
	if(this.mode===ValueMode.Recursive)
	this.mode=childmode;
	this.value=makeChildObservable(unwrappedValue,this.mode,this.name);
	if(notifySpy&&isSpyEnabled()){
	spyReport({type:"create",object:this,newValue:this.value});
	}
	}
	ObservableValue.prototype.set=function(newValue){
	var oldValue=this.value;
	newValue=this.prepareNewValue(newValue);
	if(newValue!==UNCHANGED){
	var notifySpy=isSpyEnabled();
	if(notifySpy){
	spyReportStart({
	type:"update",
	object:this,
	newValue:newValue,oldValue:oldValue});

	}
	this.setNewValue(newValue);
	if(notifySpy)
	spyReportEnd();
	}
	};
	ObservableValue.prototype.prepareNewValue=function(newValue){
	assertUnwrapped(newValue,"Modifiers cannot be used on non-initial values.");
	checkIfStateModificationsAreAllowed();
	if(hasInterceptors(this)){
	var change=interceptChange(this,{object:this,type:"update",newValue:newValue});
	if(!change)
	return UNCHANGED;
	newValue=change.newValue;
	}
	var changed=valueDidChange(this.mode===ValueMode.Structure,this.value,newValue);
	if(changed)
	return makeChildObservable(newValue,this.mode,this.name);
	return UNCHANGED;
	};
	ObservableValue.prototype.setNewValue=function(newValue){
	var oldValue=this.value;
	this.value=newValue;
	this.reportChanged();
	if(hasListeners(this))
	notifyListeners(this,[newValue,oldValue]);
	};
	ObservableValue.prototype.get=function(){
	this.reportObserved();
	return this.value;
	};
	ObservableValue.prototype.intercept=function(handler){
	return registerInterceptor(this,handler);
	};
	ObservableValue.prototype.observe=function(listener,fireImmediately){
	if(fireImmediately)
	listener(this.value,undefined);
	return registerListener(this,listener);
	};
	ObservableValue.prototype.toJSON=function(){
	return this.get();
	};
	ObservableValue.prototype.toString=function(){
	return this.name+"["+this.value+"]";
	};
	return ObservableValue;
	}(BaseAtom);
	var isObservableValue=createInstanceofPredicate("ObservableValue",ObservableValue);
	function getAtom(thing,property){
	if((typeof thing==="undefined"?"undefined":_typeof(thing))==="object"&&thing!==null){
	if(isObservableArray(thing)){
	invariant(property===undefined,"It is not possible to get index atoms from arrays");
	return thing.$mobx.atom;
	}
	if(isObservableMap(thing)){
	if(property===undefined)
	return getAtom(thing._keys);
	var observable_2=thing._data[property]||thing._hasMap[property];
	invariant(!!observable_2,"the entry '"+property+"' does not exist in the observable map '"+getDebugName(thing)+"'");
	return observable_2;
	}
	runLazyInitializers(thing);
	if(isObservableObject(thing)){
	invariant(!!property,"please specify a property");
	var observable_3=thing.$mobx.values[property];
	invariant(!!observable_3,"no observable property '"+property+"' found on the observable object '"+getDebugName(thing)+"'");
	return observable_3;
	}
	if(isAtom(thing)||isComputedValue(thing)||isReaction(thing)){
	return thing;
	}
	}else
	if(typeof thing==="function"){
	if(isReaction(thing.$mobx)){
	return thing.$mobx;
	}
	}
	invariant(false,"Cannot obtain atom from "+thing);
	}
	function getAdministration(thing,property){
	invariant(thing,"Expection some object");
	if(property!==undefined)
	return getAdministration(getAtom(thing,property));
	if(isAtom(thing)||isComputedValue(thing)||isReaction(thing))
	return thing;
	if(isObservableMap(thing))
	return thing;
	runLazyInitializers(thing);
	if(thing.$mobx)
	return thing.$mobx;
	invariant(false,"Cannot obtain administration from "+thing);
	}
	function getDebugName(thing,property){
	var named;
	if(property!==undefined)
	named=getAtom(thing,property);else
	if(isObservableObject(thing)||isObservableMap(thing))
	named=getAdministration(thing);else

	named=getAtom(thing);
	return named.name;
	}
	function createClassPropertyDecorator(onInitialize,_get,_set,enumerable,allowCustomArguments){
	function classPropertyDecorator(target,key,descriptor,customArgs,argLen){
	invariant(allowCustomArguments||quacksLikeADecorator(arguments),"This function is a decorator, but it wasn't invoked like a decorator");
	if(!descriptor){
	var newDescriptor={
	enumerable:enumerable,
	configurable:true,
	get:function get(){
	if(!this.__mobxInitializedProps||this.__mobxInitializedProps[key]!==true)
	typescriptInitializeProperty(this,key,undefined,onInitialize,customArgs,descriptor);
	return _get.call(this,key);
	},
	set:function set(v){
	if(!this.__mobxInitializedProps||this.__mobxInitializedProps[key]!==true){
	typescriptInitializeProperty(this,key,v,onInitialize,customArgs,descriptor);
	}else
	{
	_set.call(this,key,v);
	}
	}};

	if(arguments.length<3||arguments.length===5&&argLen<3){
	Object.defineProperty(target,key,newDescriptor);
	}
	return newDescriptor;
	}else
	{
	if(!hasOwnProperty(target,"__mobxLazyInitializers")){
	addHiddenProp(target,"__mobxLazyInitializers",target.__mobxLazyInitializers&&target.__mobxLazyInitializers.slice()||[]);
	}
	var value_1=descriptor.value,initializer_1=descriptor.initializer;
	target.__mobxLazyInitializers.push(function(instance){
	onInitialize(instance,key,initializer_1?initializer_1.call(instance):value_1,customArgs,descriptor);
	});
	return{
	enumerable:enumerable,configurable:true,
	get:function get(){
	if(this.__mobxDidRunLazyInitializers!==true)
	runLazyInitializers(this);
	return _get.call(this,key);
	},
	set:function set(v){
	if(this.__mobxDidRunLazyInitializers!==true)
	runLazyInitializers(this);
	_set.call(this,key,v);
	}};

	}
	}
	if(allowCustomArguments){
	return function(){
	if(quacksLikeADecorator(arguments))
	return classPropertyDecorator.apply(null,arguments);
	var outerArgs=arguments;
	var argLen=arguments.length;
	return function(target,key,descriptor){return classPropertyDecorator(target,key,descriptor,outerArgs,argLen);};
	};
	}
	return classPropertyDecorator;
	}
	function typescriptInitializeProperty(instance,key,v,onInitialize,customArgs,baseDescriptor){
	if(!hasOwnProperty(instance,"__mobxInitializedProps"))
	addHiddenProp(instance,"__mobxInitializedProps",{});
	instance.__mobxInitializedProps[key]=true;
	onInitialize(instance,key,v,customArgs,baseDescriptor);
	}
	function runLazyInitializers(instance){
	if(instance.__mobxDidRunLazyInitializers===true)
	return;
	if(instance.__mobxLazyInitializers){
	addHiddenProp(instance,"__mobxDidRunLazyInitializers",true);
	instance.__mobxDidRunLazyInitializers&&instance.__mobxLazyInitializers.forEach(function(initializer){return initializer(instance);});
	}
	}
	function quacksLikeADecorator(args){
	return(args.length===2||args.length===3)&&typeof args[1]==="string";
	}
	function iteratorSymbol(){
	return typeof Symbol==="function"&&Symbol.iterator||"@@iterator";
	}
	var IS_ITERATING_MARKER="__$$iterating";
	function arrayAsIterator(array){
	invariant(array[IS_ITERATING_MARKER]!==true,"Illegal state: cannot recycle array as iterator");
	addHiddenFinalProp(array,IS_ITERATING_MARKER,true);
	var idx=-1;
	addHiddenFinalProp(array,"next",function next(){
	idx++;
	return{
	done:idx>=this.length,
	value:idx<this.length?this[idx]:undefined};

	});
	return array;
	}
	function declareIterator(prototType,iteratorFactory){
	addHiddenFinalProp(prototType,iteratorSymbol(),iteratorFactory);
	}
	var SimpleEventEmitter=function(){
	function SimpleEventEmitter(){
	this.listeners=[];
	deprecated("extras.SimpleEventEmitter is deprecated and will be removed in the next major release");
	}
	SimpleEventEmitter.prototype.emit=function(){
	var listeners=this.listeners.slice();
	for(var i=0,l=listeners.length;i<l;i++){
	listeners[i].apply(null,arguments);}
	};
	SimpleEventEmitter.prototype.on=function(listener){
	var _this=this;
	this.listeners.push(listener);
	return once(function(){
	var idx=_this.listeners.indexOf(listener);
	if(idx!==-1)
	_this.listeners.splice(idx,1);
	});
	};
	SimpleEventEmitter.prototype.once=function(listener){
	var subscription=this.on(function(){
	subscription();
	listener.apply(this,arguments);
	});
	return subscription;
	};
	return SimpleEventEmitter;
	}();
	exports.SimpleEventEmitter=SimpleEventEmitter;
	var EMPTY_ARRAY=[];
	Object.freeze(EMPTY_ARRAY);
	function getNextId(){
	return++globalState.mobxGuid;
	}
	function invariant(check,message,thing){
	if(!check)
	throw new Error("[mobx] Invariant failed: "+message+(thing?" in '"+thing+"'":""));
	}
	var deprecatedMessages=[];
	function deprecated(msg){
	if(deprecatedMessages.indexOf(msg)!==-1)
	return;
	deprecatedMessages.push(msg);
	console.error("[mobx] Deprecated: "+msg);
	}
	function once(func){
	var invoked=false;
	return function(){
	if(invoked)
	return;
	invoked=true;
	return func.apply(this,arguments);
	};
	}
	var noop=function noop(){};
	function unique(list){
	var res=[];
	list.forEach(function(item){
	if(res.indexOf(item)===-1)
	res.push(item);
	});
	return res;
	}
	function joinStrings(things,limit,separator){
	if(limit===void 0){limit=100;}
	if(separator===void 0){separator=" - ";}
	if(!things)
	return"";
	var sliced=things.slice(0,limit);
	return""+sliced.join(separator)+(things.length>limit?" (... and "+(things.length-limit)+"more)":"");
	}
	function isObject(value){
	return value!==null&&(typeof value==="undefined"?"undefined":_typeof(value))==="object";
	}
	function isPlainObject(value){
	if(value===null||(typeof value==="undefined"?"undefined":_typeof(value))!=="object")
	return false;
	var proto=Object.getPrototypeOf(value);
	return proto===Object.prototype||proto===null;
	}
	function objectAssign(){
	var res=arguments[0];
	for(var i=1,l=arguments.length;i<l;i++){
	var source=arguments[i];
	for(var key in source){
	if(hasOwnProperty(source,key)){
	res[key]=source[key];
	}}
	}
	return res;
	}
	function valueDidChange(compareStructural,oldValue,newValue){
	return compareStructural?
	!deepEquals(oldValue,newValue):
	oldValue!==newValue;
	}
	var prototypeHasOwnProperty=Object.prototype.hasOwnProperty;
	function hasOwnProperty(object,propName){
	return prototypeHasOwnProperty.call(object,propName);
	}
	function makeNonEnumerable(object,propNames){
	for(var i=0;i<propNames.length;i++){
	addHiddenProp(object,propNames[i],object[propNames[i]]);
	}
	}
	function addHiddenProp(object,propName,value){
	Object.defineProperty(object,propName,{
	enumerable:false,
	writable:true,
	configurable:true,
	value:value});

	}
	function addHiddenFinalProp(object,propName,value){
	Object.defineProperty(object,propName,{
	enumerable:false,
	writable:false,
	configurable:true,
	value:value});

	}
	function isPropertyConfigurable(object,prop){
	var descriptor=Object.getOwnPropertyDescriptor(object,prop);
	return!descriptor||descriptor.configurable!==false&&descriptor.writable!==false;
	}
	function assertPropertyConfigurable(object,prop){
	invariant(isPropertyConfigurable(object,prop),"Cannot make property '"+prop+"' observable, it is not configurable and writable in the target object");
	}
	function getEnumerableKeys(obj){
	var res=[];
	for(var key in obj){
	res.push(key);}
	return res;
	}
	function deepEquals(a,b){
	if(a===null&&b===null)
	return true;
	if(a===undefined&&b===undefined)
	return true;
	var aIsArray=Array.isArray(a)||isObservableArray(a);
	if(aIsArray!==(Array.isArray(b)||isObservableArray(b))){
	return false;
	}else
	if(aIsArray){
	if(a.length!==b.length)
	return false;
	for(var i=a.length-1;i>=0;i--){
	if(!deepEquals(a[i],b[i]))
	return false;}
	return true;
	}else
	if((typeof a==="undefined"?"undefined":_typeof(a))==="object"&&(typeof b==="undefined"?"undefined":_typeof(b))==="object"){
	if(a===null||b===null)
	return false;
	if(getEnumerableKeys(a).length!==getEnumerableKeys(b).length)
	return false;
	for(var prop in a){
	if(!(prop in b))
	return false;
	if(!deepEquals(a[prop],b[prop]))
	return false;
	}
	return true;
	}
	return a===b;
	}
	function createInstanceofPredicate(name,clazz){
	var propName="isMobX"+name;
	clazz.prototype[propName]=true;
	return function(x){
	return isObject(x)&&x[propName]===true;
	};
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(221);

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(158);
	var ExecutionEnvironment = __webpack_require__(222);
	var ModalPortal = React.createFactory(__webpack_require__(224));
	var ariaAppHider = __webpack_require__(239);
	var elementClass = __webpack_require__(240);
	var renderSubtreeIntoContainer = __webpack_require__(158).unstable_renderSubtreeIntoContainer;
	var Assign = __webpack_require__(228);

	var SafeHTMLElement = ExecutionEnvironment.canUseDOM ? window.HTMLElement : {};
	var AppElement = ExecutionEnvironment.canUseDOM ? document.body : { appendChild: function appendChild() {} };

	var Modal = React.createClass({

	  displayName: 'Modal',
	  statics: {
	    setAppElement: function setAppElement(element) {
	      AppElement = ariaAppHider.setElement(element);
	    },
	    injectCSS: function injectCSS() {
	      "production" !== process.env.NODE_ENV && console.warn('React-Modal: injectCSS has been deprecated ' + 'and no longer has any effect. It will be removed in a later version');
	    }
	  },

	  propTypes: {
	    isOpen: React.PropTypes.bool.isRequired,
	    style: React.PropTypes.shape({
	      content: React.PropTypes.object,
	      overlay: React.PropTypes.object
	    }),
	    portalClassName: React.PropTypes.string,
	    appElement: React.PropTypes.instanceOf(SafeHTMLElement),
	    onAfterOpen: React.PropTypes.func,
	    onRequestClose: React.PropTypes.func,
	    closeTimeoutMS: React.PropTypes.number,
	    ariaHideApp: React.PropTypes.bool,
	    shouldCloseOnOverlayClick: React.PropTypes.bool,
	    role: React.PropTypes.string
	  },

	  getDefaultProps: function getDefaultProps() {
	    return {
	      isOpen: false,
	      portalClassName: 'ReactModalPortal',
	      ariaHideApp: true,
	      closeTimeoutMS: 0,
	      shouldCloseOnOverlayClick: true
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    this.node = document.createElement('div');
	    this.node.className = this.props.portalClassName;
	    document.body.appendChild(this.node);
	    this.renderPortal(this.props);
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
	    this.renderPortal(newProps);
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    ReactDOM.unmountComponentAtNode(this.node);
	    document.body.removeChild(this.node);
	    elementClass(document.body).remove('ReactModal__Body--open');
	  },

	  renderPortal: function renderPortal(props) {
	    if (props.isOpen) {
	      elementClass(document.body).add('ReactModal__Body--open');
	    } else {
	      elementClass(document.body).remove('ReactModal__Body--open');
	    }

	    if (props.ariaHideApp) {
	      ariaAppHider.toggle(props.isOpen, props.appElement);
	    }

	    this.portal = renderSubtreeIntoContainer(this, ModalPortal(Assign({}, props, { defaultStyles: Modal.defaultStyles })), this.node);
	  },

	  render: function render() {
	    return React.DOM.noscript();
	  }
	});

	Modal.defaultStyles = {
	  overlay: {
	    position: 'fixed',
	    top: 0,
	    left: 0,
	    right: 0,
	    bottom: 0,
	    backgroundColor: 'rgba(255, 255, 255, 0.75)'
	  },
	  content: {
	    position: 'absolute',
	    top: '40px',
	    left: '40px',
	    right: '40px',
	    bottom: '40px',
	    border: '1px solid #ccc',
	    background: '#fff',
	    overflow: 'auto',
	    WebkitOverflowScrolling: 'touch',
	    borderRadius: '4px',
	    outline: 'none',
	    padding: '20px'
	  }
	};

	module.exports = Modal;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*!
	  Copyright (c) 2015 Jed Watson.
	  Based on code that is Copyright 2013-2015, Facebook, Inc.
	  All rights reserved.
	*/

	(function () {
		'use strict';

		var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

		var ExecutionEnvironment = {

			canUseDOM: canUseDOM,

			canUseWorkers: typeof Worker !== 'undefined',

			canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

			canUseViewport: canUseDOM && !!window.screen

		};

		if ("function" === 'function' && _typeof(__webpack_require__(223)) === 'object' && __webpack_require__(223)) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return ExecutionEnvironment;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module !== 'undefined' && module.exports) {
			module.exports = ExecutionEnvironment;
		} else {
			window.ExecutionEnvironment = ExecutionEnvironment;
		}
	})();

/***/ },
/* 223 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(1);
	var div = React.DOM.div;
	var focusManager = __webpack_require__(225);
	var scopeTab = __webpack_require__(227);
	var Assign = __webpack_require__(228);

	// so that our CSS is statically analyzable
	var CLASS_NAMES = {
	  overlay: {
	    base: 'ReactModal__Overlay',
	    afterOpen: 'ReactModal__Overlay--after-open',
	    beforeClose: 'ReactModal__Overlay--before-close'
	  },
	  content: {
	    base: 'ReactModal__Content',
	    afterOpen: 'ReactModal__Content--after-open',
	    beforeClose: 'ReactModal__Content--before-close'
	  }
	};

	var ModalPortal = module.exports = React.createClass({

	  displayName: 'ModalPortal',
	  shouldClose: null,

	  getDefaultProps: function getDefaultProps() {
	    return {
	      style: {
	        overlay: {},
	        content: {}
	      }
	    };
	  },

	  getInitialState: function getInitialState() {
	    return {
	      afterOpen: false,
	      beforeClose: false
	    };
	  },

	  componentDidMount: function componentDidMount() {
	    // Focus needs to be set when mounting and already open
	    if (this.props.isOpen) {
	      this.setFocusAfterRender(true);
	      this.open();
	    }
	  },

	  componentWillUnmount: function componentWillUnmount() {
	    clearTimeout(this.closeTimer);
	  },

	  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
	    // Focus only needs to be set once when the modal is being opened
	    if (!this.props.isOpen && newProps.isOpen) {
	      this.setFocusAfterRender(true);
	      this.open();
	    } else if (this.props.isOpen && !newProps.isOpen) {
	      this.close();
	    }
	  },

	  componentDidUpdate: function componentDidUpdate() {
	    if (this.focusAfterRender) {
	      this.focusContent();
	      this.setFocusAfterRender(false);
	    }
	  },

	  setFocusAfterRender: function setFocusAfterRender(focus) {
	    this.focusAfterRender = focus;
	  },

	  open: function open() {
	    if (this.state.afterOpen && this.state.beforeClose) {
	      clearTimeout(this.closeTimer);
	      this.setState({ beforeClose: false });
	    } else {
	      focusManager.setupScopedFocus(this.node);
	      focusManager.markForFocusLater();
	      this.setState({ isOpen: true }, function () {
	        this.setState({ afterOpen: true });

	        if (this.props.isOpen && this.props.onAfterOpen) {
	          this.props.onAfterOpen();
	        }
	      }.bind(this));
	    }
	  },

	  close: function close() {
	    if (!this.ownerHandlesClose()) return;
	    if (this.props.closeTimeoutMS > 0) this.closeWithTimeout();else this.closeWithoutTimeout();
	  },

	  focusContent: function focusContent() {
	    // Don't steal focus from inner elements
	    if (!this.contentHasFocus()) {
	      this.refs.content.focus();
	    }
	  },

	  closeWithTimeout: function closeWithTimeout() {
	    this.setState({ beforeClose: true }, function () {
	      this.closeTimer = setTimeout(this.closeWithoutTimeout, this.props.closeTimeoutMS);
	    }.bind(this));
	  },

	  closeWithoutTimeout: function closeWithoutTimeout() {
	    this.setState({
	      beforeClose: false,
	      isOpen: false,
	      afterOpen: false
	    }, this.afterClose);
	  },

	  afterClose: function afterClose() {
	    focusManager.returnFocus();
	    focusManager.teardownScopedFocus();
	  },

	  handleKeyDown: function handleKeyDown(event) {
	    if (event.keyCode == 9 /*tab*/) scopeTab(this.refs.content, event);
	    if (event.keyCode == 27 /*esc*/) {
	        event.preventDefault();
	        this.requestClose(event);
	      }
	  },

	  handleOverlayMouseDown: function handleOverlayMouseDown(event) {
	    if (this.shouldClose === null) {
	      this.shouldClose = true;
	    }
	  },

	  handleOverlayMouseUp: function handleOverlayMouseUp(event) {
	    if (this.shouldClose && this.props.shouldCloseOnOverlayClick) {
	      if (this.ownerHandlesClose()) this.requestClose(event);else this.focusContent();
	    }
	    this.shouldClose = null;
	  },

	  handleContentMouseDown: function handleContentMouseDown(event) {
	    this.shouldClose = false;
	  },

	  handleContentMouseUp: function handleContentMouseUp(event) {
	    this.shouldClose = false;
	  },

	  requestClose: function requestClose(event) {
	    if (this.ownerHandlesClose()) this.props.onRequestClose(event);
	  },

	  ownerHandlesClose: function ownerHandlesClose() {
	    return this.props.onRequestClose;
	  },

	  shouldBeClosed: function shouldBeClosed() {
	    return !this.props.isOpen && !this.state.beforeClose;
	  },

	  contentHasFocus: function contentHasFocus() {
	    return document.activeElement === this.refs.content || this.refs.content.contains(document.activeElement);
	  },

	  buildClassName: function buildClassName(which, additional) {
	    var className = CLASS_NAMES[which].base;
	    if (this.state.afterOpen) className += ' ' + CLASS_NAMES[which].afterOpen;
	    if (this.state.beforeClose) className += ' ' + CLASS_NAMES[which].beforeClose;
	    return additional ? className + ' ' + additional : className;
	  },

	  render: function render() {
	    var contentStyles = this.props.className ? {} : this.props.defaultStyles.content;
	    var overlayStyles = this.props.overlayClassName ? {} : this.props.defaultStyles.overlay;

	    return this.shouldBeClosed() ? div() : div({
	      ref: "overlay",
	      className: this.buildClassName('overlay', this.props.overlayClassName),
	      style: Assign({}, overlayStyles, this.props.style.overlay || {}),
	      onMouseDown: this.handleOverlayMouseDown,
	      onMouseUp: this.handleOverlayMouseUp
	    }, div({
	      ref: "content",
	      style: Assign({}, contentStyles, this.props.style.content || {}),
	      className: this.buildClassName('content', this.props.className),
	      tabIndex: "-1",
	      onKeyDown: this.handleKeyDown,
	      onMouseDown: this.handleContentMouseDown,
	      onMouseUp: this.handleContentMouseUp,
	      role: this.props.role
	    }, this.props.children));
	  }
	});

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var findTabbable = __webpack_require__(226);
	var modalElement = null;
	var focusLaterElement = null;
	var needToFocus = false;

	function handleBlur(event) {
	  needToFocus = true;
	}

	function handleFocus(event) {
	  if (needToFocus) {
	    needToFocus = false;
	    if (!modalElement) {
	      return;
	    }
	    // need to see how jQuery shims document.on('focusin') so we don't need the
	    // setTimeout, firefox doesn't support focusin, if it did, we could focus
	    // the element outside of a setTimeout. Side-effect of this implementation 
	    // is that the document.body gets focus, and then we focus our element right 
	    // after, seems fine.
	    setTimeout(function () {
	      if (modalElement.contains(document.activeElement)) return;
	      var el = findTabbable(modalElement)[0] || modalElement;
	      el.focus();
	    }, 0);
	  }
	}

	exports.markForFocusLater = function () {
	  focusLaterElement = document.activeElement;
	};

	exports.returnFocus = function () {
	  try {
	    focusLaterElement.focus();
	  } catch (e) {
	    console.warn('You tried to return focus to ' + focusLaterElement + ' but it is not in the DOM anymore');
	  }
	  focusLaterElement = null;
	};

	exports.setupScopedFocus = function (element) {
	  modalElement = element;

	  if (window.addEventListener) {
	    window.addEventListener('blur', handleBlur, false);
	    document.addEventListener('focus', handleFocus, true);
	  } else {
	    window.attachEvent('onBlur', handleBlur);
	    document.attachEvent('onFocus', handleFocus);
	  }
	};

	exports.teardownScopedFocus = function () {
	  modalElement = null;

	  if (window.addEventListener) {
	    window.removeEventListener('blur', handleBlur);
	    document.removeEventListener('focus', handleFocus);
	  } else {
	    window.detachEvent('onBlur', handleBlur);
	    document.detachEvent('onFocus', handleFocus);
	  }
	};

/***/ },
/* 226 */
/***/ function(module, exports) {

	'use strict';

	/*!
	 * Adapted from jQuery UI core
	 *
	 * http://jqueryui.com
	 *
	 * Copyright 2014 jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/category/ui-core/
	 */

	function focusable(element, isTabIndexNotNaN) {
	  var nodeName = element.nodeName.toLowerCase();
	  return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
	}

	function hidden(el) {
	  return el.offsetWidth <= 0 && el.offsetHeight <= 0 || el.style.display === 'none';
	}

	function visible(element) {
	  while (element) {
	    if (element === document.body) break;
	    if (hidden(element)) return false;
	    element = element.parentNode;
	  }
	  return true;
	}

	function tabbable(element) {
	  var tabIndex = element.getAttribute('tabindex');
	  if (tabIndex === null) tabIndex = undefined;
	  var isTabIndexNaN = isNaN(tabIndex);
	  return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
	}

	function findTabbableDescendants(element) {
	  return [].slice.call(element.querySelectorAll('*'), 0).filter(function (el) {
	    return tabbable(el);
	  });
	}

	module.exports = findTabbableDescendants;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var findTabbable = __webpack_require__(226);

	module.exports = function (node, event) {
	  var tabbable = findTabbable(node);
	  if (!tabbable.length) {
	    event.preventDefault();
	    return;
	  }
	  var finalTabbable = tabbable[event.shiftKey ? 0 : tabbable.length - 1];
	  var leavingFinalTabbable = finalTabbable === document.activeElement ||
	  // handle immediate shift+tab after opening with mouse
	  node === document.activeElement;
	  if (!leavingFinalTabbable) return;
	  event.preventDefault();
	  var target = tabbable[event.shiftKey ? tabbable.length - 1 : 0];
	  target.focus();
	};

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * lodash 3.2.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var baseAssign = __webpack_require__(229),
	    createAssigner = __webpack_require__(235),
	    keys = __webpack_require__(231);

	/**
	 * A specialized version of `_.assign` for customizing assigned values without
	 * support for argument juggling, multiple sources, and `this` binding `customizer`
	 * functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 */
	function assignWith(object, source, customizer) {
	    var index = -1,
	        props = keys(source),
	        length = props.length;

	    while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? result !== value : value === value) || value === undefined && !(key in object)) {
	            object[key] = result;
	        }
	    }
	    return object;
	}

	/**
	 * Assigns own enumerable properties of source object(s) to the destination
	 * object. Subsequent sources overwrite property assignments of previous sources.
	 * If `customizer` is provided it is invoked to produce the assigned values.
	 * The `customizer` is bound to `thisArg` and invoked with five arguments:
	 * (objectValue, sourceValue, key, object, source).
	 *
	 * **Note:** This method mutates `object` and is based on
	 * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).
	 *
	 * @static
	 * @memberOf _
	 * @alias extend
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	 * // => { 'user': 'fred', 'age': 40 }
	 *
	 * // using a customizer callback
	 * var defaults = _.partialRight(_.assign, function(value, other) {
	 *   return _.isUndefined(value) ? other : value;
	 * });
	 *
	 * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var assign = createAssigner(function (object, source, customizer) {
	    return customizer ? assignWith(object, source, customizer) : baseAssign(object, source);
	});

	module.exports = assign;

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * lodash 3.2.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var baseCopy = __webpack_require__(230),
	    keys = __webpack_require__(231);

	/**
	 * The base implementation of `_.assign` without support for argument juggling,
	 * multiple sources, and `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return source == null ? object : baseCopy(source, keys(source), object);
	}

	module.exports = baseAssign;

/***/ },
/* 230 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * lodash 3.0.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property names to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @returns {Object} Returns `object`.
	 */
	function baseCopy(source, props, object) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];
	    object[key] = source[key];
	  }
	  return object;
	}

	module.exports = baseCopy;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * lodash 3.1.2 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var getNative = __webpack_require__(232),
	    isArguments = __webpack_require__(233),
	    isArray = __webpack_require__(234);

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function (object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = typeof value == 'number' || reIsUint.test(value) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) && (isArray(object) || isArguments(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if (allowIndexes && isIndex(key, length) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function (object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if (typeof Ctor == 'function' && Ctor.prototype === object || typeof object != 'function' && isArrayLike(object)) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = length && isLength(length) && (isArray(object) || isArguments(object)) && length || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;

	  while (++index < length) {
	    result[index] = index + '';
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keys;

/***/ },
/* 232 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * lodash 3.9.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	}

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = getNative;

/***/ },
/* 233 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	}

	module.exports = isArguments;

/***/ },
/* 234 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * lodash 3.0.4 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]',
	    funcTag = '[object Function]';

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	}

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function (value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = isArray;

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	 * lodash 3.1.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var bindCallback = __webpack_require__(236),
	    isIterateeCall = __webpack_require__(237),
	    restParam = __webpack_require__(238);

	/**
	 * Creates a function that assigns properties of source object(s) to a given
	 * destination object.
	 *
	 * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return restParam(function (object, sources) {
	    var index = -1,
	        length = object == null ? 0 : sources.length,
	        customizer = length > 2 ? sources[length - 2] : undefined,
	        guard = length > 2 ? sources[2] : undefined,
	        thisArg = length > 1 ? sources[length - 1] : undefined;

	    if (typeof customizer == 'function') {
	      customizer = bindCallback(customizer, thisArg, 5);
	      length -= 2;
	    } else {
	      customizer = typeof thisArg == 'function' ? thisArg : undefined;
	      length -= customizer ? 1 : 0;
	    }
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;

/***/ },
/* 236 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * lodash 3.0.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1:
	      return function (value) {
	        return func.call(thisArg, value);
	      };
	    case 3:
	      return function (value, index, collection) {
	        return func.call(thisArg, value, index, collection);
	      };
	    case 4:
	      return function (accumulator, value, index, collection) {
	        return func.call(thisArg, accumulator, value, index, collection);
	      };
	    case 5:
	      return function (value, other, key, object, source) {
	        return func.call(thisArg, value, other, key, object, source);
	      };
	  }
	  return function () {
	    return func.apply(thisArg, arguments);
	  };
	}

	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = bindCallback;

/***/ },
/* 237 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * lodash 3.0.9 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/**
	 * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function (object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = typeof value == 'number' || reIsUint.test(value) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	/**
	 * Checks if the provided arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index === 'undefined' ? 'undefined' : _typeof(index);
	  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
	    var other = object[index];
	    return value === value ? value === other : other !== other;
	  }
	  return false;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isIterateeCall;

/***/ },
/* 238 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * lodash 3.6.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? func.length - 1 : +start || 0, 0);
	  return function () {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);

	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0:
	        return func.call(this, rest);
	      case 1:
	        return func.call(this, args[0], rest);
	      case 2:
	        return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}

	module.exports = restParam;

/***/ },
/* 239 */
/***/ function(module, exports) {

	'use strict';

	var _element = typeof document !== 'undefined' ? document.body : null;

	function setElement(element) {
	  if (typeof element === 'string') {
	    var el = document.querySelectorAll(element);
	    element = 'length' in el ? el[0] : el;
	  }
	  _element = element || _element;
	  return _element;
	}

	function hide(appElement) {
	  validateElement(appElement);
	  (appElement || _element).setAttribute('aria-hidden', 'true');
	}

	function show(appElement) {
	  validateElement(appElement);
	  (appElement || _element).removeAttribute('aria-hidden');
	}

	function toggle(shouldHide, appElement) {
	  if (shouldHide) hide(appElement);else show(appElement);
	}

	function validateElement(appElement) {
	  if (!appElement && !_element) throw new Error('react-modal: You must set an element with `Modal.setAppElement(el)` to make this accessible');
	}

	function resetForTesting() {
	  _element = document.body;
	}

	exports.toggle = toggle;
	exports.setElement = setElement;
	exports.show = show;
	exports.hide = hide;
	exports.resetForTesting = resetForTesting;

/***/ },
/* 240 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	module.exports = function (opts) {
	  return new ElementClass(opts);
	};

	function indexOf(arr, prop) {
	  if (arr.indexOf) return arr.indexOf(prop);
	  for (var i = 0, len = arr.length; i < len; i++) {
	    if (arr[i] === prop) return i;
	  }return -1;
	}

	function ElementClass(opts) {
	  if (!(this instanceof ElementClass)) return new ElementClass(opts);
	  var self = this;
	  if (!opts) opts = {};

	  // similar doing instanceof HTMLElement but works in IE8
	  if (opts.nodeType) opts = { el: opts };

	  this.opts = opts;
	  this.el = opts.el || document.body;
	  if (_typeof(this.el) !== 'object') this.el = document.querySelector(this.el);
	}

	ElementClass.prototype.add = function (className) {
	  var el = this.el;
	  if (!el) return;
	  if (el.className === "") return el.className = className;
	  var classes = el.className.split(' ');
	  if (indexOf(classes, className) > -1) return classes;
	  classes.push(className);
	  el.className = classes.join(' ');
	  return classes;
	};

	ElementClass.prototype.remove = function (className) {
	  var el = this.el;
	  if (!el) return;
	  if (el.className === "") return;
	  var classes = el.className.split(' ');
	  var idx = indexOf(classes, className);
	  if (idx > -1) classes.splice(idx, 1);
	  el.className = classes.join(' ');
	  return classes;
	};

	ElementClass.prototype.has = function (className) {
	  var el = this.el;
	  if (!el) return;
	  var classes = el.className.split(' ');
	  return indexOf(classes, className) > -1;
	};

	ElementClass.prototype.toggle = function (className) {
	  var el = this.el;
	  if (!el) return;
	  if (this.has(className)) this.remove(className);else this.add(className);
	};

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.ModalWrapper = exports.customModalStyles = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _class;var _react = __webpack_require__(1);var React = _interopRequireWildcard(_react);
	var _reactDom = __webpack_require__(158);var ReactDOM = _interopRequireWildcard(_reactDom);
	var _jquery = __webpack_require__(214);var _jquery2 = _interopRequireDefault(_jquery);
	var _reactModal = __webpack_require__(220);var _reactModal2 = _interopRequireDefault(_reactModal);
	var _mobxReact = __webpack_require__(218);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var customModalStyles = exports.customModalStyles = {
	    content: {
	        top: '50%',
	        left: '50%',
	        right: 'auto',
	        bottom: 'auto',
	        marginRight: '-50%',
	        transform: 'translate(-50%, -50%)',
	        maxWidth: '50%' } };



	function isFunction(functionToCheck) {
	    var getType = {};
	    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	}var


	ModalWrapper = exports.ModalWrapper = (0, _mobxReact.observer)(_class = function (_React$Component) {_inherits(ModalWrapper, _React$Component);function ModalWrapper() {_classCallCheck(this, ModalWrapper);return _possibleConstructorReturn(this, (ModalWrapper.__proto__ || Object.getPrototypeOf(ModalWrapper)).apply(this, arguments));}_createClass(ModalWrapper, [{ key: 'render', value: function render()
	        {var _props =
	            this.props,scriptsStore = _props.scriptsStore,projectsStore = _props.projectsStore,tablesStore = _props.tablesStore,modalStore = _props.modalStore;
	            return (
	                React.createElement(_reactModal2.default, {
	                        isOpen: modalStore.modal,
	                        style: customModalStyles,
	                        onRequestClose: function onRequestClose() {
	                            modalStore.modal = false;
	                            projectsStore.editing = null;
	                            scriptsStore.editing = null;
	                            tablesStore.editing = null;
	                        },
	                        onAfterOpen: function onAfterOpen() {
	                            projectsStore.resetCreating();
	                            scriptsStore.resetCreating();
	                            tablesStore.resetCreating();
	                        } },
	                    isFunction(modalStore.component) ?
	                    modalStore.component ?
	                    React.createElement(
	                    modalStore.component,
	                    this.props) :

	                    '' :
	                    modalStore.component));



	        } }]);return ModalWrapper;}(React.Component)) || _class;

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/react-select
	*/

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	Object.defineProperty(exports, '__esModule', {
		value: true });


	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}

	function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(158);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactInputAutosize = __webpack_require__(243);

	var _reactInputAutosize2 = _interopRequireDefault(_reactInputAutosize);

	var _classnames = __webpack_require__(244);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _utilsDefaultArrowRenderer = __webpack_require__(245);

	var _utilsDefaultArrowRenderer2 = _interopRequireDefault(_utilsDefaultArrowRenderer);

	var _utilsDefaultFilterOptions = __webpack_require__(246);

	var _utilsDefaultFilterOptions2 = _interopRequireDefault(_utilsDefaultFilterOptions);

	var _utilsDefaultMenuRenderer = __webpack_require__(248);

	var _utilsDefaultMenuRenderer2 = _interopRequireDefault(_utilsDefaultMenuRenderer);

	var _Async = __webpack_require__(249);

	var _Async2 = _interopRequireDefault(_Async);

	var _AsyncCreatable = __webpack_require__(250);

	var _AsyncCreatable2 = _interopRequireDefault(_AsyncCreatable);

	var _Creatable = __webpack_require__(251);

	var _Creatable2 = _interopRequireDefault(_Creatable);

	var _Option = __webpack_require__(252);

	var _Option2 = _interopRequireDefault(_Option);

	var _Value = __webpack_require__(253);

	var _Value2 = _interopRequireDefault(_Value);

	function stringifyValue(value) {
		var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);
		if (valueType === 'string') {
			return value;
		} else if (valueType === 'object') {
			return JSON.stringify(value);
		} else if (valueType === 'number' || valueType === 'boolean') {
			return String(value);
		} else {
			return '';
		}
	}

	var stringOrNode = _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.node]);

	var instanceId = 1;

	var Select = _react2['default'].createClass({

		displayName: 'Select',

		propTypes: {
			addLabelText: _react2['default'].PropTypes.string, // placeholder displayed when you want to add a label on a multi-value input
			'aria-label': _react2['default'].PropTypes.string, // Aria label (for assistive tech)
			'aria-labelledby': _react2['default'].PropTypes.string, // HTML ID of an element that should be used as the label (for assistive tech)
			arrowRenderer: _react2['default'].PropTypes.func, // Create drop-down caret element
			autoBlur: _react2['default'].PropTypes.bool, // automatically blur the component when an option is selected
			autofocus: _react2['default'].PropTypes.bool, // autofocus the component on mount
			autosize: _react2['default'].PropTypes.bool, // whether to enable autosizing or not
			backspaceRemoves: _react2['default'].PropTypes.bool, // whether backspace removes an item if there is no text input
			backspaceToRemoveMessage: _react2['default'].PropTypes.string, // Message to use for screenreaders to press backspace to remove the current item - {label} is replaced with the item label
			className: _react2['default'].PropTypes.string, // className for the outer element
			clearAllText: stringOrNode, // title for the "clear" control when multi: true
			clearValueText: stringOrNode, // title for the "clear" control
			clearable: _react2['default'].PropTypes.bool, // should it be possible to reset value
			delimiter: _react2['default'].PropTypes.string, // delimiter to use to join multiple values for the hidden field value
			disabled: _react2['default'].PropTypes.bool, // whether the Select is disabled or not
			escapeClearsValue: _react2['default'].PropTypes.bool, // whether escape clears the value when the menu is closed
			filterOption: _react2['default'].PropTypes.func, // method to filter a single option (option, filterString)
			filterOptions: _react2['default'].PropTypes.any, // boolean to enable default filtering or function to filter the options array ([options], filterString, [values])
			ignoreAccents: _react2['default'].PropTypes.bool, // whether to strip diacritics when filtering
			ignoreCase: _react2['default'].PropTypes.bool, // whether to perform case-insensitive filtering
			inputProps: _react2['default'].PropTypes.object, // custom attributes for the Input
			inputRenderer: _react2['default'].PropTypes.func, // returns a custom input component
			instanceId: _react2['default'].PropTypes.string, // set the components instanceId
			isLoading: _react2['default'].PropTypes.bool, // whether the Select is loading externally or not (such as options being loaded)
			joinValues: _react2['default'].PropTypes.bool, // joins multiple values into a single form field with the delimiter (legacy mode)
			labelKey: _react2['default'].PropTypes.string, // path of the label value in option objects
			matchPos: _react2['default'].PropTypes.string, // (any|start) match the start or entire string when filtering
			matchProp: _react2['default'].PropTypes.string, // (any|label|value) which option property to filter on
			menuBuffer: _react2['default'].PropTypes.number, // optional buffer (in px) between the bottom of the viewport and the bottom of the menu
			menuContainerStyle: _react2['default'].PropTypes.object, // optional style to apply to the menu container
			menuRenderer: _react2['default'].PropTypes.func, // renders a custom menu with options
			menuStyle: _react2['default'].PropTypes.object, // optional style to apply to the menu
			multi: _react2['default'].PropTypes.bool, // multi-value input
			name: _react2['default'].PropTypes.string, // generates a hidden <input /> tag with this field name for html forms
			noResultsText: stringOrNode, // placeholder displayed when there are no matching search results
			onBlur: _react2['default'].PropTypes.func, // onBlur handler: function (event) {}
			onBlurResetsInput: _react2['default'].PropTypes.bool, // whether input is cleared on blur
			onChange: _react2['default'].PropTypes.func, // onChange handler: function (newValue) {}
			onClose: _react2['default'].PropTypes.func, // fires when the menu is closed
			onCloseResetsInput: _react2['default'].PropTypes.bool, // whether input is cleared when menu is closed through the arrow
			onFocus: _react2['default'].PropTypes.func, // onFocus handler: function (event) {}
			onInputChange: _react2['default'].PropTypes.func, // onInputChange handler: function (inputValue) {}
			onInputKeyDown: _react2['default'].PropTypes.func, // input keyDown handler: function (event) {}
			onMenuScrollToBottom: _react2['default'].PropTypes.func, // fires when the menu is scrolled to the bottom; can be used to paginate options
			onOpen: _react2['default'].PropTypes.func, // fires when the menu is opened
			onValueClick: _react2['default'].PropTypes.func, // onClick handler for value labels: function (value, event) {}
			openAfterFocus: _react2['default'].PropTypes.bool, // boolean to enable opening dropdown when focused
			openOnFocus: _react2['default'].PropTypes.bool, // always open options menu on focus
			optionClassName: _react2['default'].PropTypes.string, // additional class(es) to apply to the <Option /> elements
			optionComponent: _react2['default'].PropTypes.func, // option component to render in dropdown
			optionRenderer: _react2['default'].PropTypes.func, // optionRenderer: function (option) {}
			options: _react2['default'].PropTypes.array, // array of options
			pageSize: _react2['default'].PropTypes.number, // number of entries to page when using page up/down keys
			placeholder: stringOrNode, // field placeholder, displayed when there's no value
			required: _react2['default'].PropTypes.bool, // applies HTML5 required attribute when needed
			resetValue: _react2['default'].PropTypes.any, // value to use when you clear the control
			scrollMenuIntoView: _react2['default'].PropTypes.bool, // boolean to enable the viewport to shift so that the full menu fully visible when engaged
			searchable: _react2['default'].PropTypes.bool, // whether to enable searching feature or not
			simpleValue: _react2['default'].PropTypes.bool, // pass the value to onChange as a simple value (legacy pre 1.0 mode), defaults to false
			style: _react2['default'].PropTypes.object, // optional style to apply to the control
			tabIndex: _react2['default'].PropTypes.string, // optional tab index of the control
			tabSelectsValue: _react2['default'].PropTypes.bool, // whether to treat tabbing out while focused to be value selection
			value: _react2['default'].PropTypes.any, // initial field value
			valueComponent: _react2['default'].PropTypes.func, // value component to render
			valueKey: _react2['default'].PropTypes.string, // path of the label value in option objects
			valueRenderer: _react2['default'].PropTypes.func, // valueRenderer: function (option) {}
			wrapperStyle: _react2['default'].PropTypes.object },

		// optional style to apply to the component wrapper
		statics: { Async: _Async2['default'], AsyncCreatable: _AsyncCreatable2['default'], Creatable: _Creatable2['default'] },

		getDefaultProps: function getDefaultProps() {
			return {
				addLabelText: 'Add "{label}"?',
				arrowRenderer: _utilsDefaultArrowRenderer2['default'],
				autosize: true,
				backspaceRemoves: true,
				backspaceToRemoveMessage: 'Press backspace to remove {label}',
				clearable: true,
				clearAllText: 'Clear all',
				clearValueText: 'Clear value',
				delimiter: ',',
				disabled: false,
				escapeClearsValue: true,
				filterOptions: _utilsDefaultFilterOptions2['default'],
				ignoreAccents: true,
				ignoreCase: true,
				inputProps: {},
				isLoading: false,
				joinValues: false,
				labelKey: 'label',
				matchPos: 'any',
				matchProp: 'any',
				menuBuffer: 0,
				menuRenderer: _utilsDefaultMenuRenderer2['default'],
				multi: false,
				noResultsText: 'No results found',
				onBlurResetsInput: true,
				onCloseResetsInput: true,
				openAfterFocus: false,
				optionComponent: _Option2['default'],
				pageSize: 5,
				placeholder: 'Select...',
				required: false,
				scrollMenuIntoView: true,
				searchable: true,
				simpleValue: false,
				tabSelectsValue: true,
				valueComponent: _Value2['default'],
				valueKey: 'value' };

		},

		getInitialState: function getInitialState() {
			return {
				inputValue: '',
				isFocused: false,
				isOpen: false,
				isPseudoFocused: false,
				required: false };

		},

		componentWillMount: function componentWillMount() {
			this._instancePrefix = 'react-select-' + (this.props.instanceId || ++instanceId) + '-';
			var valueArray = this.getValueArray(this.props.value);

			if (this.props.required) {
				this.setState({
					required: this.handleRequired(valueArray[0], this.props.multi) });

			}
		},

		componentDidMount: function componentDidMount() {
			if (this.props.autofocus) {
				this.focus();
			}
		},

		componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
			var valueArray = this.getValueArray(nextProps.value, nextProps);

			if (nextProps.required) {
				this.setState({
					required: this.handleRequired(valueArray[0], nextProps.multi) });

			}
		},

		componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
			if (nextState.isOpen !== this.state.isOpen) {
				this.toggleTouchOutsideEvent(nextState.isOpen);
				var handler = nextState.isOpen ? nextProps.onOpen : nextProps.onClose;
				handler && handler();
			}
		},

		componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
			// focus to the selected option
			if (this.menu && this.focused && this.state.isOpen && !this.hasScrolledToOption) {
				var focusedOptionNode = _reactDom2['default'].findDOMNode(this.focused);
				var menuNode = _reactDom2['default'].findDOMNode(this.menu);
				menuNode.scrollTop = focusedOptionNode.offsetTop;
				this.hasScrolledToOption = true;
			} else if (!this.state.isOpen) {
				this.hasScrolledToOption = false;
			}

			if (this._scrollToFocusedOptionOnUpdate && this.focused && this.menu) {
				this._scrollToFocusedOptionOnUpdate = false;
				var focusedDOM = _reactDom2['default'].findDOMNode(this.focused);
				var menuDOM = _reactDom2['default'].findDOMNode(this.menu);
				var focusedRect = focusedDOM.getBoundingClientRect();
				var menuRect = menuDOM.getBoundingClientRect();
				if (focusedRect.bottom > menuRect.bottom || focusedRect.top < menuRect.top) {
					menuDOM.scrollTop = focusedDOM.offsetTop + focusedDOM.clientHeight - menuDOM.offsetHeight;
				}
			}
			if (this.props.scrollMenuIntoView && this.menuContainer) {
				var menuContainerRect = this.menuContainer.getBoundingClientRect();
				if (window.innerHeight < menuContainerRect.bottom + this.props.menuBuffer) {
					window.scrollBy(0, menuContainerRect.bottom + this.props.menuBuffer - window.innerHeight);
				}
			}
			if (prevProps.disabled !== this.props.disabled) {
				this.setState({ isFocused: false }); // eslint-disable-line react/no-did-update-set-state
				this.closeMenu();
			}
		},

		componentWillUnmount: function componentWillUnmount() {
			document.removeEventListener('touchstart', this.handleTouchOutside);
		},

		toggleTouchOutsideEvent: function toggleTouchOutsideEvent(enabled) {
			if (enabled) {
				document.addEventListener('touchstart', this.handleTouchOutside);
			} else {
				document.removeEventListener('touchstart', this.handleTouchOutside);
			}
		},

		handleTouchOutside: function handleTouchOutside(event) {
			// handle touch outside on ios to dismiss menu
			if (this.wrapper && !this.wrapper.contains(event.target)) {
				this.closeMenu();
			}
		},

		focus: function focus() {
			if (!this.input) return;
			this.input.focus();

			if (this.props.openAfterFocus) {
				this.setState({
					isOpen: true });

			}
		},

		blurInput: function blurInput() {
			if (!this.input) return;
			this.input.blur();
		},

		handleTouchMove: function handleTouchMove(event) {
			// Set a flag that the view is being dragged
			this.dragging = true;
		},

		handleTouchStart: function handleTouchStart(event) {
			// Set a flag that the view is not being dragged
			this.dragging = false;
		},

		handleTouchEnd: function handleTouchEnd(event) {
			// Check if the view is being dragged, In this case
			// we don't want to fire the click event (because the user only wants to scroll)
			if (this.dragging) return;

			// Fire the mouse events
			this.handleMouseDown(event);
		},

		handleTouchEndClearValue: function handleTouchEndClearValue(event) {
			// Check if the view is being dragged, In this case
			// we don't want to fire the click event (because the user only wants to scroll)
			if (this.dragging) return;

			// Clear the value
			this.clearValue(event);
		},

		handleMouseDown: function handleMouseDown(event) {
			// if the event was triggered by a mousedown and not the primary
			// button, or if the component is disabled, ignore it.
			if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {
				return;
			}

			if (event.target.tagName === 'INPUT') {
				return;
			}

			// prevent default event handlers
			event.stopPropagation();
			event.preventDefault();

			// for the non-searchable select, toggle the menu
			if (!this.props.searchable) {
				this.focus();
				return this.setState({
					isOpen: !this.state.isOpen });

			}

			if (this.state.isFocused) {
				// On iOS, we can get into a state where we think the input is focused but it isn't really,
				// since iOS ignores programmatic calls to input.focus() that weren't triggered by a click event.
				// Call focus() again here to be safe.
				this.focus();

				var input = this.input;
				if (typeof input.getInput === 'function') {
					// Get the actual DOM input if the ref is an <AutosizeInput /> component
					input = input.getInput();
				}

				// clears the value so that the cursor will be at the end of input when the component re-renders
				input.value = '';

				// if the input is focused, ensure the menu is open
				this.setState({
					isOpen: true,
					isPseudoFocused: false });

			} else {
				// otherwise, focus the input and open the menu
				this._openAfterFocus = true;
				this.focus();
			}
		},

		handleMouseDownOnArrow: function handleMouseDownOnArrow(event) {
			// if the event was triggered by a mousedown and not the primary
			// button, or if the component is disabled, ignore it.
			if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {
				return;
			}
			// If the menu isn't open, let the event bubble to the main handleMouseDown
			if (!this.state.isOpen) {
				return;
			}
			// prevent default event handlers
			event.stopPropagation();
			event.preventDefault();
			// close the menu
			this.closeMenu();
		},

		handleMouseDownOnMenu: function handleMouseDownOnMenu(event) {
			// if the event was triggered by a mousedown and not the primary
			// button, or if the component is disabled, ignore it.
			if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {
				return;
			}
			event.stopPropagation();
			event.preventDefault();

			this._openAfterFocus = true;
			this.focus();
		},

		closeMenu: function closeMenu() {
			if (this.props.onCloseResetsInput) {
				this.setState({
					isOpen: false,
					isPseudoFocused: this.state.isFocused && !this.props.multi,
					inputValue: '' });

			} else {
				this.setState({
					isOpen: false,
					isPseudoFocused: this.state.isFocused && !this.props.multi,
					inputValue: this.state.inputValue });

			}
			this.hasScrolledToOption = false;
		},

		handleInputFocus: function handleInputFocus(event) {
			if (this.props.disabled) return;
			var isOpen = this.state.isOpen || this._openAfterFocus || this.props.openOnFocus;
			if (this.props.onFocus) {
				this.props.onFocus(event);
			}
			this.setState({
				isFocused: true,
				isOpen: isOpen });

			this._openAfterFocus = false;
		},

		handleInputBlur: function handleInputBlur(event) {
			// The check for menu.contains(activeElement) is necessary to prevent IE11's scrollbar from closing the menu in certain contexts.
			if (this.menu && (this.menu === document.activeElement || this.menu.contains(document.activeElement))) {
				this.focus();
				return;
			}

			if (this.props.onBlur) {
				this.props.onBlur(event);
			}
			var onBlurredState = {
				isFocused: false,
				isOpen: false,
				isPseudoFocused: false };

			if (this.props.onBlurResetsInput) {
				onBlurredState.inputValue = '';
			}
			this.setState(onBlurredState);
		},

		handleInputChange: function handleInputChange(event) {
			var newInputValue = event.target.value;

			if (this.state.inputValue !== event.target.value && this.props.onInputChange) {
				var nextState = this.props.onInputChange(newInputValue);
				// Note: != used deliberately here to catch undefined and null
				if (nextState != null && (typeof nextState === 'undefined' ? 'undefined' : _typeof(nextState)) !== 'object') {
					newInputValue = '' + nextState;
				}
			}

			this.setState({
				isOpen: true,
				isPseudoFocused: false,
				inputValue: newInputValue });

		},

		handleKeyDown: function handleKeyDown(event) {
			if (this.props.disabled) return;

			if (typeof this.props.onInputKeyDown === 'function') {
				this.props.onInputKeyDown(event);
				if (event.defaultPrevented) {
					return;
				}
			}

			switch (event.keyCode) {
				case 8:
					// backspace
					if (!this.state.inputValue && this.props.backspaceRemoves) {
						event.preventDefault();
						this.popValue();
					}
					return;
				case 9:
					// tab
					if (event.shiftKey || !this.state.isOpen || !this.props.tabSelectsValue) {
						return;
					}
					this.selectFocusedOption();
					return;
				case 13:
					// enter
					if (!this.state.isOpen) return;
					event.stopPropagation();
					this.selectFocusedOption();
					break;
				case 27:
					// escape
					if (this.state.isOpen) {
						this.closeMenu();
						event.stopPropagation();
					} else if (this.props.clearable && this.props.escapeClearsValue) {
						this.clearValue(event);
						event.stopPropagation();
					}
					break;
				case 38:
					// up
					this.focusPreviousOption();
					break;
				case 40:
					// down
					this.focusNextOption();
					break;
				case 33:
					// page up
					this.focusPageUpOption();
					break;
				case 34:
					// page down
					this.focusPageDownOption();
					break;
				case 35:
					// end key
					if (event.shiftKey) {
						return;
					}
					this.focusEndOption();
					break;
				case 36:
					// home key
					if (event.shiftKey) {
						return;
					}
					this.focusStartOption();
					break;
				default:
					return;}

			event.preventDefault();
		},

		handleValueClick: function handleValueClick(option, event) {
			if (!this.props.onValueClick) return;
			this.props.onValueClick(option, event);
		},

		handleMenuScroll: function handleMenuScroll(event) {
			if (!this.props.onMenuScrollToBottom) return;
			var target = event.target;

			if (target.scrollHeight > target.offsetHeight && !(target.scrollHeight - target.offsetHeight - target.scrollTop)) {
				this.props.onMenuScrollToBottom();
			}
		},

		handleRequired: function handleRequired(value, multi) {
			if (!value) return true;
			return multi ? value.length === 0 : Object.keys(value).length === 0;
		},

		getOptionLabel: function getOptionLabel(op) {
			return op[this.props.labelKey];
		},

		/**
	     * Turns a value into an array from the given options
	     * @param	{String|Number|Array}	value		- the value of the select input
	     * @param	{Object}		nextProps	- optionally specify the nextProps so the returned array uses the latest configuration
	     * @returns	{Array}	the value of the select represented in an array
	     */
		getValueArray: function getValueArray(value, nextProps) {
			var _this = this;

			/** support optionally passing in the `nextProps` so `componentWillReceiveProps` updates will function as expected */
			var props = (typeof nextProps === 'undefined' ? 'undefined' : _typeof(nextProps)) === 'object' ? nextProps : this.props;
			if (props.multi) {
				if (typeof value === 'string') value = value.split(props.delimiter);
				if (!Array.isArray(value)) {
					if (value === null || value === undefined) return [];
					value = [value];
				}
				return value.map(function (value) {
					return _this.expandValue(value, props);
				}).filter(function (i) {
					return i;
				});
			}
			var expandedValue = this.expandValue(value, props);
			return expandedValue ? [expandedValue] : [];
		},

		/**
	     * Retrieve a value from the given options and valueKey
	     * @param	{String|Number|Array}	value	- the selected value(s)
	     * @param	{Object}		props	- the Select component's props (or nextProps)
	     */
		expandValue: function expandValue(value, props) {
			var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);
			if (valueType !== 'string' && valueType !== 'number' && valueType !== 'boolean') return value;
			var options = props.options;
			var valueKey = props.valueKey;

			if (!options) return;
			for (var i = 0; i < options.length; i++) {
				if (options[i][valueKey] === value) return options[i];
			}
		},

		setValue: function setValue(value) {
			var _this2 = this;

			if (this.props.autoBlur) {
				this.blurInput();
			}
			if (!this.props.onChange) return;
			if (this.props.required) {
				var required = this.handleRequired(value, this.props.multi);
				this.setState({ required: required });
			}
			if (this.props.simpleValue && value) {
				value = this.props.multi ? value.map(function (i) {
					return i[_this2.props.valueKey];
				}).join(this.props.delimiter) : value[this.props.valueKey];
			}
			this.props.onChange(value);
		},

		selectValue: function selectValue(value) {
			var _this3 = this;

			//NOTE: update value in the callback to make sure the input value is empty so that there are no styling issues (Chrome had issue otherwise)
			this.hasScrolledToOption = false;
			if (this.props.multi) {
				this.setState({
					inputValue: '',
					focusedIndex: null },
				function () {
					_this3.addValue(value);
				});
			} else {
				this.setState({
					isOpen: false,
					inputValue: '',
					isPseudoFocused: this.state.isFocused },
				function () {
					_this3.setValue(value);
				});
			}
		},

		addValue: function addValue(value) {
			var valueArray = this.getValueArray(this.props.value);
			this.setValue(valueArray.concat(value));
		},

		popValue: function popValue() {
			var valueArray = this.getValueArray(this.props.value);
			if (!valueArray.length) return;
			if (valueArray[valueArray.length - 1].clearableValue === false) return;
			this.setValue(valueArray.slice(0, valueArray.length - 1));
		},

		removeValue: function removeValue(value) {
			var valueArray = this.getValueArray(this.props.value);
			this.setValue(valueArray.filter(function (i) {
				return i !== value;
			}));
			this.focus();
		},

		clearValue: function clearValue(event) {
			// if the event was triggered by a mousedown and not the primary
			// button, ignore it.
			if (event && event.type === 'mousedown' && event.button !== 0) {
				return;
			}
			event.stopPropagation();
			event.preventDefault();
			this.setValue(this.getResetValue());
			this.setState({
				isOpen: false,
				inputValue: '' },
			this.focus);
		},

		getResetValue: function getResetValue() {
			if (this.props.resetValue !== undefined) {
				return this.props.resetValue;
			} else if (this.props.multi) {
				return [];
			} else {
				return null;
			}
		},

		focusOption: function focusOption(option) {
			this.setState({
				focusedOption: option });

		},

		focusNextOption: function focusNextOption() {
			this.focusAdjacentOption('next');
		},

		focusPreviousOption: function focusPreviousOption() {
			this.focusAdjacentOption('previous');
		},

		focusPageUpOption: function focusPageUpOption() {
			this.focusAdjacentOption('page_up');
		},

		focusPageDownOption: function focusPageDownOption() {
			this.focusAdjacentOption('page_down');
		},

		focusStartOption: function focusStartOption() {
			this.focusAdjacentOption('start');
		},

		focusEndOption: function focusEndOption() {
			this.focusAdjacentOption('end');
		},

		focusAdjacentOption: function focusAdjacentOption(dir) {
			var options = this._visibleOptions.map(function (option, index) {
				return { option: option, index: index };
			}).filter(function (option) {
				return !option.option.disabled;
			});
			this._scrollToFocusedOptionOnUpdate = true;
			if (!this.state.isOpen) {
				this.setState({
					isOpen: true,
					inputValue: '',
					focusedOption: this._focusedOption || options[dir === 'next' ? 0 : options.length - 1].option });

				return;
			}
			if (!options.length) return;
			var focusedIndex = -1;
			for (var i = 0; i < options.length; i++) {
				if (this._focusedOption === options[i].option) {
					focusedIndex = i;
					break;
				}
			}
			if (dir === 'next' && focusedIndex !== -1) {
				focusedIndex = (focusedIndex + 1) % options.length;
			} else if (dir === 'previous') {
				if (focusedIndex > 0) {
					focusedIndex = focusedIndex - 1;
				} else {
					focusedIndex = options.length - 1;
				}
			} else if (dir === 'start') {
				focusedIndex = 0;
			} else if (dir === 'end') {
				focusedIndex = options.length - 1;
			} else if (dir === 'page_up') {
				var potentialIndex = focusedIndex - this.props.pageSize;
				if (potentialIndex < 0) {
					focusedIndex = 0;
				} else {
					focusedIndex = potentialIndex;
				}
			} else if (dir === 'page_down') {
				var potentialIndex = focusedIndex + this.props.pageSize;
				if (potentialIndex > options.length - 1) {
					focusedIndex = options.length - 1;
				} else {
					focusedIndex = potentialIndex;
				}
			}

			if (focusedIndex === -1) {
				focusedIndex = 0;
			}

			this.setState({
				focusedIndex: options[focusedIndex].index,
				focusedOption: options[focusedIndex].option });

		},

		getFocusedOption: function getFocusedOption() {
			return this._focusedOption;
		},

		getInputValue: function getInputValue() {
			return this.state.inputValue;
		},

		selectFocusedOption: function selectFocusedOption() {
			if (this._focusedOption) {
				return this.selectValue(this._focusedOption);
			}
		},

		renderLoading: function renderLoading() {
			if (!this.props.isLoading) return;
			return _react2['default'].createElement(
			'span',
			{ className: 'Select-loading-zone', 'aria-hidden': 'true' },
			_react2['default'].createElement('span', { className: 'Select-loading' }));

		},

		renderValue: function renderValue(valueArray, isOpen) {
			var _this4 = this;

			var renderLabel = this.props.valueRenderer || this.getOptionLabel;
			var ValueComponent = this.props.valueComponent;
			if (!valueArray.length) {
				return !this.state.inputValue ? _react2['default'].createElement(
				'div',
				{ className: 'Select-placeholder' },
				this.props.placeholder) :
				null;
			}
			var onClick = this.props.onValueClick ? this.handleValueClick : null;
			if (this.props.multi) {
				return valueArray.map(function (value, i) {
					return _react2['default'].createElement(
					ValueComponent,
					{
						id: _this4._instancePrefix + '-value-' + i,
						instancePrefix: _this4._instancePrefix,
						disabled: _this4.props.disabled || value.clearableValue === false,
						key: 'value-' + i + '-' + value[_this4.props.valueKey],
						onClick: onClick,
						onRemove: _this4.removeValue,
						value: value },

					renderLabel(value, i),
					_react2['default'].createElement(
					'span',
					{ className: 'Select-aria-only' },
					' '));


				});
			} else if (!this.state.inputValue) {
				if (isOpen) onClick = null;
				return _react2['default'].createElement(
				ValueComponent,
				{
					id: this._instancePrefix + '-value-item',
					disabled: this.props.disabled,
					instancePrefix: this._instancePrefix,
					onClick: onClick,
					value: valueArray[0] },

				renderLabel(valueArray[0]));

			}
		},

		renderInput: function renderInput(valueArray, focusedOptionIndex) {
			var _this5 = this;

			if (this.props.inputRenderer) {
				return this.props.inputRenderer();
			} else {
				var _classNames;

				var className = (0, _classnames2['default'])('Select-input', this.props.inputProps.className);
				var isOpen = !!this.state.isOpen;

				var ariaOwns = (0, _classnames2['default'])((_classNames = {}, _defineProperty(_classNames, this._instancePrefix + '-list', isOpen), _defineProperty(_classNames, this._instancePrefix + '-backspace-remove-message', this.props.multi && !this.props.disabled && this.state.isFocused && !this.state.inputValue), _classNames));

				// TODO: Check how this project includes Object.assign()
				var inputProps = _extends({}, this.props.inputProps, {
					role: 'combobox',
					'aria-expanded': '' + isOpen,
					'aria-owns': ariaOwns,
					'aria-haspopup': '' + isOpen,
					'aria-activedescendant': isOpen ? this._instancePrefix + '-option-' + focusedOptionIndex : this._instancePrefix + '-value',
					'aria-labelledby': this.props['aria-labelledby'],
					'aria-label': this.props['aria-label'],
					className: className,
					tabIndex: this.props.tabIndex,
					onBlur: this.handleInputBlur,
					onChange: this.handleInputChange,
					onFocus: this.handleInputFocus,
					ref: function ref(_ref) {
						return _this5.input = _ref;
					},
					required: this.state.required,
					value: this.state.inputValue });


				if (this.props.disabled || !this.props.searchable) {
					var _props$inputProps = this.props.inputProps;
					var inputClassName = _props$inputProps.inputClassName;

					var divProps = _objectWithoutProperties(_props$inputProps, ['inputClassName']);

					return _react2['default'].createElement('div', _extends({}, divProps, {
						role: 'combobox',
						'aria-expanded': isOpen,
						'aria-owns': isOpen ? this._instancePrefix + '-list' : this._instancePrefix + '-value',
						'aria-activedescendant': isOpen ? this._instancePrefix + '-option-' + focusedOptionIndex : this._instancePrefix + '-value',
						className: className,
						tabIndex: this.props.tabIndex || 0,
						onBlur: this.handleInputBlur,
						onFocus: this.handleInputFocus,
						ref: function ref(_ref2) {
							return _this5.input = _ref2;
						},
						'aria-readonly': '' + !!this.props.disabled,
						style: { border: 0, width: 1, display: 'inline-block' } }));
				}

				if (this.props.autosize) {
					return _react2['default'].createElement(_reactInputAutosize2['default'], _extends({}, inputProps, { minWidth: '5px' }));
				}
				return _react2['default'].createElement(
				'div',
				{ className: className },
				_react2['default'].createElement('input', inputProps));

			}
		},

		renderClear: function renderClear() {
			if (!this.props.clearable || !this.props.value || this.props.value === 0 || this.props.multi && !this.props.value.length || this.props.disabled || this.props.isLoading) return;
			return _react2['default'].createElement(
			'span',
			{ className: 'Select-clear-zone', title: this.props.multi ? this.props.clearAllText : this.props.clearValueText,
				'aria-label': this.props.multi ? this.props.clearAllText : this.props.clearValueText,
				onMouseDown: this.clearValue,
				onTouchStart: this.handleTouchStart,
				onTouchMove: this.handleTouchMove,
				onTouchEnd: this.handleTouchEndClearValue },

			_react2['default'].createElement('span', { className: 'Select-clear', dangerouslySetInnerHTML: { __html: '&times;' } }));

		},

		renderArrow: function renderArrow() {
			var onMouseDown = this.handleMouseDownOnArrow;
			var arrow = this.props.arrowRenderer({ onMouseDown: onMouseDown });

			return _react2['default'].createElement(
			'span',
			{
				className: 'Select-arrow-zone',
				onMouseDown: onMouseDown },

			arrow);

		},

		filterOptions: function filterOptions(excludeOptions) {
			var filterValue = this.state.inputValue;
			var options = this.props.options || [];
			if (this.props.filterOptions) {
				// Maintain backwards compatibility with boolean attribute
				var filterOptions = typeof this.props.filterOptions === 'function' ? this.props.filterOptions : _utilsDefaultFilterOptions2['default'];

				return filterOptions(options, filterValue, excludeOptions, {
					filterOption: this.props.filterOption,
					ignoreAccents: this.props.ignoreAccents,
					ignoreCase: this.props.ignoreCase,
					labelKey: this.props.labelKey,
					matchPos: this.props.matchPos,
					matchProp: this.props.matchProp,
					valueKey: this.props.valueKey });

			} else {
				return options;
			}
		},

		onOptionRef: function onOptionRef(ref, isFocused) {
			if (isFocused) {
				this.focused = ref;
			}
		},

		renderMenu: function renderMenu(options, valueArray, focusedOption) {
			if (options && options.length) {
				return this.props.menuRenderer({
					focusedOption: focusedOption,
					focusOption: this.focusOption,
					instancePrefix: this._instancePrefix,
					labelKey: this.props.labelKey,
					onFocus: this.focusOption,
					onSelect: this.selectValue,
					optionClassName: this.props.optionClassName,
					optionComponent: this.props.optionComponent,
					optionRenderer: this.props.optionRenderer || this.getOptionLabel,
					options: options,
					selectValue: this.selectValue,
					valueArray: valueArray,
					valueKey: this.props.valueKey,
					onOptionRef: this.onOptionRef });

			} else if (this.props.noResultsText) {
				return _react2['default'].createElement(
				'div',
				{ className: 'Select-noresults' },
				this.props.noResultsText);

			} else {
				return null;
			}
		},

		renderHiddenField: function renderHiddenField(valueArray) {
			var _this6 = this;

			if (!this.props.name) return;
			if (this.props.joinValues) {
				var value = valueArray.map(function (i) {
					return stringifyValue(i[_this6.props.valueKey]);
				}).join(this.props.delimiter);
				return _react2['default'].createElement('input', {
					type: 'hidden',
					ref: function ref(_ref3) {
						return _this6.value = _ref3;
					},
					name: this.props.name,
					value: value,
					disabled: this.props.disabled });
			}
			return valueArray.map(function (item, index) {
				return _react2['default'].createElement('input', { key: 'hidden.' + index,
					type: 'hidden',
					ref: 'value' + index,
					name: _this6.props.name,
					value: stringifyValue(item[_this6.props.valueKey]),
					disabled: _this6.props.disabled });
			});
		},

		getFocusableOptionIndex: function getFocusableOptionIndex(selectedOption) {
			var options = this._visibleOptions;
			if (!options.length) return null;

			var focusedOption = this.state.focusedOption || selectedOption;
			if (focusedOption && !focusedOption.disabled) {
				var focusedOptionIndex = options.indexOf(focusedOption);
				if (focusedOptionIndex !== -1) {
					return focusedOptionIndex;
				}
			}

			for (var i = 0; i < options.length; i++) {
				if (!options[i].disabled) return i;
			}
			return null;
		},

		renderOuter: function renderOuter(options, valueArray, focusedOption) {
			var _this7 = this;

			var menu = this.renderMenu(options, valueArray, focusedOption);
			if (!menu) {
				return null;
			}

			return _react2['default'].createElement(
			'div',
			{ ref: function ref(_ref4) {
					return _this7.menuContainer = _ref4;
				}, className: 'Select-menu-outer', style: this.props.menuContainerStyle },
			_react2['default'].createElement(
			'div',
			{ ref: function ref(_ref5) {
					return _this7.menu = _ref5;
				}, role: 'listbox', className: 'Select-menu', id: this._instancePrefix + '-list',
				style: this.props.menuStyle,
				onScroll: this.handleMenuScroll,
				onMouseDown: this.handleMouseDownOnMenu },
			menu));


		},

		render: function render() {
			var _this8 = this;

			var valueArray = this.getValueArray(this.props.value);
			var options = this._visibleOptions = this.filterOptions(this.props.multi ? this.getValueArray(this.props.value) : null);
			var isOpen = this.state.isOpen;
			if (this.props.multi && !options.length && valueArray.length && !this.state.inputValue) isOpen = false;
			var focusedOptionIndex = this.getFocusableOptionIndex(valueArray[0]);

			var focusedOption = null;
			if (focusedOptionIndex !== null) {
				focusedOption = this._focusedOption = options[focusedOptionIndex];
			} else {
				focusedOption = this._focusedOption = null;
			}
			var className = (0, _classnames2['default'])('Select', this.props.className, {
				'Select--multi': this.props.multi,
				'Select--single': !this.props.multi,
				'is-disabled': this.props.disabled,
				'is-focused': this.state.isFocused,
				'is-loading': this.props.isLoading,
				'is-open': isOpen,
				'is-pseudo-focused': this.state.isPseudoFocused,
				'is-searchable': this.props.searchable,
				'has-value': valueArray.length });


			var removeMessage = null;
			if (this.props.multi && !this.props.disabled && valueArray.length && !this.state.inputValue && this.state.isFocused && this.props.backspaceRemoves) {
				removeMessage = _react2['default'].createElement(
				'span',
				{ id: this._instancePrefix + '-backspace-remove-message', className: 'Select-aria-only', 'aria-live': 'assertive' },
				this.props.backspaceToRemoveMessage.replace('{label}', valueArray[valueArray.length - 1][this.props.labelKey]));

			}

			return _react2['default'].createElement(
			'div',
			{ ref: function ref(_ref6) {
					return _this8.wrapper = _ref6;
				},
				className: className,
				style: this.props.wrapperStyle },
			this.renderHiddenField(valueArray),
			_react2['default'].createElement(
			'div',
			{ ref: function ref(_ref7) {
					return _this8.control = _ref7;
				},
				className: 'Select-control',
				style: this.props.style,
				onKeyDown: this.handleKeyDown,
				onMouseDown: this.handleMouseDown,
				onTouchEnd: this.handleTouchEnd,
				onTouchStart: this.handleTouchStart,
				onTouchMove: this.handleTouchMove },

			_react2['default'].createElement(
			'span',
			{ className: 'Select-multi-value-wrapper', id: this._instancePrefix + '-value' },
			this.renderValue(valueArray, isOpen),
			this.renderInput(valueArray, focusedOptionIndex)),

			removeMessage,
			this.renderLoading(),
			this.renderClear(),
			this.renderArrow()),

			isOpen ? this.renderOuter(options, !this.props.multi ? valueArray : null, focusedOption) : null);

		} });



	exports['default'] = Select;
	module.exports = exports['default'];

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	var React = __webpack_require__(1);

	var sizerStyle = { position: 'absolute', top: 0, left: 0, visibility: 'hidden', height: 0, overflow: 'scroll', whiteSpace: 'pre' };

	var AutosizeInput = React.createClass({
		displayName: 'AutosizeInput',

		propTypes: {
			className: React.PropTypes.string, // className for the outer element
			defaultValue: React.PropTypes.any, // default field value
			inputClassName: React.PropTypes.string, // className for the input element
			inputStyle: React.PropTypes.object, // css styles for the input element
			minWidth: React.PropTypes.oneOfType([// minimum width for input element
			React.PropTypes.number, React.PropTypes.string]),
			onChange: React.PropTypes.func, // onChange handler: function(newValue) {}
			placeholder: React.PropTypes.string, // placeholder text
			placeholderIsMinWidth: React.PropTypes.bool, // don't collapse size to less than the placeholder
			style: React.PropTypes.object, // css styles for the outer element
			value: React.PropTypes.any },
		// field value
		getDefaultProps: function getDefaultProps() {
			return {
				minWidth: 1 };

		},
		getInitialState: function getInitialState() {
			return {
				inputWidth: this.props.minWidth };

		},
		componentDidMount: function componentDidMount() {
			this.copyInputStyles();
			this.updateInputWidth();
		},
		componentDidUpdate: function componentDidUpdate() {
			this.updateInputWidth();
		},
		copyInputStyles: function copyInputStyles() {
			if (!this.isMounted() || !window.getComputedStyle) {
				return;
			}
			var inputStyle = window.getComputedStyle(this.refs.input);
			if (!inputStyle) {
				return;
			}
			var widthNode = this.refs.sizer;
			widthNode.style.fontSize = inputStyle.fontSize;
			widthNode.style.fontFamily = inputStyle.fontFamily;
			widthNode.style.fontWeight = inputStyle.fontWeight;
			widthNode.style.fontStyle = inputStyle.fontStyle;
			widthNode.style.letterSpacing = inputStyle.letterSpacing;
			if (this.props.placeholder) {
				var placeholderNode = this.refs.placeholderSizer;
				placeholderNode.style.fontSize = inputStyle.fontSize;
				placeholderNode.style.fontFamily = inputStyle.fontFamily;
				placeholderNode.style.fontWeight = inputStyle.fontWeight;
				placeholderNode.style.fontStyle = inputStyle.fontStyle;
				placeholderNode.style.letterSpacing = inputStyle.letterSpacing;
			}
		},
		updateInputWidth: function updateInputWidth() {
			if (!this.isMounted() || typeof this.refs.sizer.scrollWidth === 'undefined') {
				return;
			}
			var newInputWidth = undefined;
			if (this.props.placeholder && (!this.props.value || this.props.value && this.props.placeholderIsMinWidth)) {
				newInputWidth = Math.max(this.refs.sizer.scrollWidth, this.refs.placeholderSizer.scrollWidth) + 2;
			} else {
				newInputWidth = this.refs.sizer.scrollWidth + 2;
			}
			if (newInputWidth < this.props.minWidth) {
				newInputWidth = this.props.minWidth;
			}
			if (newInputWidth !== this.state.inputWidth) {
				this.setState({
					inputWidth: newInputWidth });

			}
		},
		getInput: function getInput() {
			return this.refs.input;
		},
		focus: function focus() {
			this.refs.input.focus();
		},
		blur: function blur() {
			this.refs.input.blur();
		},
		select: function select() {
			this.refs.input.select();
		},
		render: function render() {
			var sizerValue = this.props.defaultValue || this.props.value || '';
			var wrapperStyle = this.props.style || {};
			if (!wrapperStyle.display) wrapperStyle.display = 'inline-block';
			var inputStyle = _extends({}, this.props.inputStyle);
			inputStyle.width = this.state.inputWidth + 'px';
			inputStyle.boxSizing = 'content-box';
			var inputProps = _extends({}, this.props);
			inputProps.className = this.props.inputClassName;
			inputProps.style = inputStyle;
			// ensure props meant for `AutosizeInput` don't end up on the `input`
			delete inputProps.inputClassName;
			delete inputProps.inputStyle;
			delete inputProps.minWidth;
			delete inputProps.placeholderIsMinWidth;
			return React.createElement(
			'div',
			{ className: this.props.className, style: wrapperStyle },
			React.createElement('input', _extends({}, inputProps, { ref: 'input' })),
			React.createElement(
			'div',
			{ ref: 'sizer', style: sizerStyle },
			sizerValue),

			this.props.placeholder ? React.createElement(
			'div',
			{ ref: 'placeholderSizer', style: sizerStyle },
			this.props.placeholder) :
			null);

		} });


	module.exports = AutosizeInput;

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}; /*!
	                                                                                                                                                                                                                                                                                         Copyright (c) 2016 Jed Watson.
	                                                                                                                                                                                                                                                                                         Licensed under the MIT License (MIT), see
	                                                                                                                                                                                                                                                                                         http://jedwatson.github.io/classnames
	                                                                                                                                                                                                                                                                                       */
	/* global define */

	(function () {
		'use strict';

		var hasOwn = {}.hasOwnProperty;

		function classNames() {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if ("function" === 'function' && _typeof(__webpack_require__(223)) === 'object' && __webpack_require__(223)) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	})();

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true });

	exports["default"] = arrowRenderer;

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function arrowRenderer(_ref) {
		var onMouseDown = _ref.onMouseDown;

		return _react2["default"].createElement("span", {
			className: "Select-arrow",
			onMouseDown: onMouseDown });

	}

	;
	module.exports = exports["default"];

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _stripDiacritics = __webpack_require__(247);

	var _stripDiacritics2 = _interopRequireDefault(_stripDiacritics);

	function filterOptions(options, filterValue, excludeOptions, props) {
		var _this = this;

		if (props.ignoreAccents) {
			filterValue = (0, _stripDiacritics2['default'])(filterValue);
		}

		if (props.ignoreCase) {
			filterValue = filterValue.toLowerCase();
		}

		if (excludeOptions) excludeOptions = excludeOptions.map(function (i) {
			return i[props.valueKey];
		});

		return options.filter(function (option) {
			if (excludeOptions && excludeOptions.indexOf(option[props.valueKey]) > -1) return false;
			if (props.filterOption) return props.filterOption.call(_this, option, filterValue);
			if (!filterValue) return true;
			var valueTest = String(option[props.valueKey]);
			var labelTest = String(option[props.labelKey]);
			if (props.ignoreAccents) {
				if (props.matchProp !== 'label') valueTest = (0, _stripDiacritics2['default'])(valueTest);
				if (props.matchProp !== 'value') labelTest = (0, _stripDiacritics2['default'])(labelTest);
			}
			if (props.ignoreCase) {
				if (props.matchProp !== 'label') valueTest = valueTest.toLowerCase();
				if (props.matchProp !== 'value') labelTest = labelTest.toLowerCase();
			}
			return props.matchPos === 'start' ? props.matchProp !== 'label' && valueTest.substr(0, filterValue.length) === filterValue || props.matchProp !== 'value' && labelTest.substr(0, filterValue.length) === filterValue : props.matchProp !== 'label' && valueTest.indexOf(filterValue) >= 0 || props.matchProp !== 'value' && labelTest.indexOf(filterValue) >= 0;
		});
	}

	module.exports = filterOptions;

/***/ },
/* 247 */
/***/ function(module, exports) {

	'use strict';

	var map = [{ 'base': 'A', 'letters': /[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F]/g }, { 'base': 'AA', 'letters': /[\uA732]/g }, { 'base': 'AE', 'letters': /[\u00C6\u01FC\u01E2]/g }, { 'base': 'AO', 'letters': /[\uA734]/g }, { 'base': 'AU', 'letters': /[\uA736]/g }, { 'base': 'AV', 'letters': /[\uA738\uA73A]/g }, { 'base': 'AY', 'letters': /[\uA73C]/g }, { 'base': 'B', 'letters': /[\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181]/g }, { 'base': 'C', 'letters': /[\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E]/g }, { 'base': 'D', 'letters': /[\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779]/g }, { 'base': 'DZ', 'letters': /[\u01F1\u01C4]/g }, { 'base': 'Dz', 'letters': /[\u01F2\u01C5]/g }, { 'base': 'E', 'letters': /[\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E]/g }, { 'base': 'F', 'letters': /[\u0046\u24BB\uFF26\u1E1E\u0191\uA77B]/g }, { 'base': 'G', 'letters': /[\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E]/g }, { 'base': 'H', 'letters': /[\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D]/g }, { 'base': 'I', 'letters': /[\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197]/g }, { 'base': 'J', 'letters': /[\u004A\u24BF\uFF2A\u0134\u0248]/g }, { 'base': 'K', 'letters': /[\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2]/g }, { 'base': 'L', 'letters': /[\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780]/g }, { 'base': 'LJ', 'letters': /[\u01C7]/g }, { 'base': 'Lj', 'letters': /[\u01C8]/g }, { 'base': 'M', 'letters': /[\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C]/g }, { 'base': 'N', 'letters': /[\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4]/g }, { 'base': 'NJ', 'letters': /[\u01CA]/g }, { 'base': 'Nj', 'letters': /[\u01CB]/g }, { 'base': 'O', 'letters': /[\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C]/g }, { 'base': 'OI', 'letters': /[\u01A2]/g }, { 'base': 'OO', 'letters': /[\uA74E]/g }, { 'base': 'OU', 'letters': /[\u0222]/g }, { 'base': 'P', 'letters': /[\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754]/g }, { 'base': 'Q', 'letters': /[\u0051\u24C6\uFF31\uA756\uA758\u024A]/g }, { 'base': 'R', 'letters': /[\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782]/g }, { 'base': 'S', 'letters': /[\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784]/g }, { 'base': 'T', 'letters': /[\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786]/g }, { 'base': 'TZ', 'letters': /[\uA728]/g }, { 'base': 'U', 'letters': /[\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244]/g }, { 'base': 'V', 'letters': /[\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245]/g }, { 'base': 'VY', 'letters': /[\uA760]/g }, { 'base': 'W', 'letters': /[\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72]/g }, { 'base': 'X', 'letters': /[\u0058\u24CD\uFF38\u1E8A\u1E8C]/g }, { 'base': 'Y', 'letters': /[\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE]/g }, { 'base': 'Z', 'letters': /[\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762]/g }, { 'base': 'a', 'letters': /[\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250]/g }, { 'base': 'aa', 'letters': /[\uA733]/g }, { 'base': 'ae', 'letters': /[\u00E6\u01FD\u01E3]/g }, { 'base': 'ao', 'letters': /[\uA735]/g }, { 'base': 'au', 'letters': /[\uA737]/g }, { 'base': 'av', 'letters': /[\uA739\uA73B]/g }, { 'base': 'ay', 'letters': /[\uA73D]/g }, { 'base': 'b', 'letters': /[\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253]/g }, { 'base': 'c', 'letters': /[\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184]/g }, { 'base': 'd', 'letters': /[\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A]/g }, { 'base': 'dz', 'letters': /[\u01F3\u01C6]/g }, { 'base': 'e', 'letters': /[\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD]/g }, { 'base': 'f', 'letters': /[\u0066\u24D5\uFF46\u1E1F\u0192\uA77C]/g }, { 'base': 'g', 'letters': /[\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F]/g }, { 'base': 'h', 'letters': /[\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265]/g }, { 'base': 'hv', 'letters': /[\u0195]/g }, { 'base': 'i', 'letters': /[\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131]/g }, { 'base': 'j', 'letters': /[\u006A\u24D9\uFF4A\u0135\u01F0\u0249]/g }, { 'base': 'k', 'letters': /[\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3]/g }, { 'base': 'l', 'letters': /[\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747]/g }, { 'base': 'lj', 'letters': /[\u01C9]/g }, { 'base': 'm', 'letters': /[\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F]/g }, { 'base': 'n', 'letters': /[\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5]/g }, { 'base': 'nj', 'letters': /[\u01CC]/g }, { 'base': 'o', 'letters': /[\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275]/g }, { 'base': 'oi', 'letters': /[\u01A3]/g }, { 'base': 'ou', 'letters': /[\u0223]/g }, { 'base': 'oo', 'letters': /[\uA74F]/g }, { 'base': 'p', 'letters': /[\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755]/g }, { 'base': 'q', 'letters': /[\u0071\u24E0\uFF51\u024B\uA757\uA759]/g }, { 'base': 'r', 'letters': /[\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783]/g }, { 'base': 's', 'letters': /[\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B]/g }, { 'base': 't', 'letters': /[\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787]/g }, { 'base': 'tz', 'letters': /[\uA729]/g }, { 'base': 'u', 'letters': /[\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289]/g }, { 'base': 'v', 'letters': /[\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C]/g }, { 'base': 'vy', 'letters': /[\uA761]/g }, { 'base': 'w', 'letters': /[\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73]/g }, { 'base': 'x', 'letters': /[\u0078\u24E7\uFF58\u1E8B\u1E8D]/g }, { 'base': 'y', 'letters': /[\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF]/g }, { 'base': 'z', 'letters': /[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763]/g }];

	module.exports = function stripDiacritics(str) {
		for (var i = 0; i < map.length; i++) {
			str = str.replace(map[i].letters, map[i].base);
		}
		return str;
	};

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _classnames = __webpack_require__(244);

	var _classnames2 = _interopRequireDefault(_classnames);

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function menuRenderer(_ref) {
		var focusedOption = _ref.focusedOption;
		var instancePrefix = _ref.instancePrefix;
		var labelKey = _ref.labelKey;
		var onFocus = _ref.onFocus;
		var onSelect = _ref.onSelect;
		var optionClassName = _ref.optionClassName;
		var optionComponent = _ref.optionComponent;
		var optionRenderer = _ref.optionRenderer;
		var options = _ref.options;
		var valueArray = _ref.valueArray;
		var valueKey = _ref.valueKey;
		var onOptionRef = _ref.onOptionRef;

		var Option = optionComponent;

		return options.map(function (option, i) {
			var isSelected = valueArray && valueArray.indexOf(option) > -1;
			var isFocused = option === focusedOption;
			var optionClass = (0, _classnames2['default'])(optionClassName, {
				'Select-option': true,
				'is-selected': isSelected,
				'is-focused': isFocused,
				'is-disabled': option.disabled });


			return _react2['default'].createElement(
			Option,
			{
				className: optionClass,
				instancePrefix: instancePrefix,
				isDisabled: option.disabled,
				isFocused: isFocused,
				isSelected: isSelected,
				key: 'option-' + i + '-' + option[valueKey],
				onFocus: onFocus,
				onSelect: onSelect,
				option: option,
				optionIndex: i,
				ref: function ref(_ref2) {
					onOptionRef(_ref2, isFocused);
				} },

			optionRenderer(option, i));

		});
	}

	module.exports = menuRenderer;

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	Object.defineProperty(exports, '__esModule', {
		value: true });


	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();

	var _get = function get(_x, _x2, _x3) {var _again = true;_function: while (_again) {var object = _x,property = _x2,receiver = _x3;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}} else if ('value' in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}}};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}

	function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Select = __webpack_require__(242);

	var _Select2 = _interopRequireDefault(_Select);

	var _utilsStripDiacritics = __webpack_require__(247);

	var _utilsStripDiacritics2 = _interopRequireDefault(_utilsStripDiacritics);

	var propTypes = {
		autoload: _react2['default'].PropTypes.bool.isRequired, // automatically call the `loadOptions` prop on-mount; defaults to true
		cache: _react2['default'].PropTypes.any, // object to use to cache results; set to null/false to disable caching
		children: _react2['default'].PropTypes.func.isRequired, // Child function responsible for creating the inner Select component; (props: Object): PropTypes.element
		ignoreAccents: _react2['default'].PropTypes.bool, // strip diacritics when filtering; defaults to true
		ignoreCase: _react2['default'].PropTypes.bool, // perform case-insensitive filtering; defaults to true
		loadingPlaceholder: _react.PropTypes.string.isRequired, // replaces the placeholder while options are loading
		loadOptions: _react2['default'].PropTypes.func.isRequired, // callback to load options asynchronously; (inputValue: string, callback: Function): ?Promise
		options: _react.PropTypes.array.isRequired, // array of options
		placeholder: _react2['default'].PropTypes.oneOfType([// field placeholder, displayed when there's no value (shared with Select)
		_react2['default'].PropTypes.string, _react2['default'].PropTypes.node]),
		searchPromptText: _react2['default'].PropTypes.oneOfType([// label to prompt for search input
		_react2['default'].PropTypes.string, _react2['default'].PropTypes.node]) };


	var defaultProps = {
		autoload: true,
		cache: {},
		children: defaultChildren,
		ignoreAccents: true,
		ignoreCase: true,
		loadingPlaceholder: 'Loading...',
		options: [],
		searchPromptText: 'Type to search' };


	var Async = function (_Component) {
		_inherits(Async, _Component);

		function Async(props, context) {
			_classCallCheck(this, Async);

			_get(Object.getPrototypeOf(Async.prototype), 'constructor', this).call(this, props, context);

			this.state = {
				isLoading: false,
				options: props.options };


			this._onInputChange = this._onInputChange.bind(this);
		}

		_createClass(Async, [{
			key: 'componentDidMount',
			value: function componentDidMount() {
				var autoload = this.props.autoload;

				if (autoload) {
					this.loadOptions('');
				}
			} },
		{
			key: 'componentWillUpdate',
			value: function componentWillUpdate(nextProps, nextState) {
				var _this = this;

				var propertiesToSync = ['options'];
				propertiesToSync.forEach(function (prop) {
					if (_this.props[prop] !== nextProps[prop]) {
						_this.setState(_defineProperty({}, prop, nextProps[prop]));
					}
				});
			} },
		{
			key: 'loadOptions',
			value: function loadOptions(inputValue) {
				var _this2 = this;

				var _props = this.props;
				var cache = _props.cache;
				var loadOptions = _props.loadOptions;

				if (cache && cache.hasOwnProperty(inputValue)) {
					this.setState({
						options: cache[inputValue] });


					return;
				}

				var callback = function callback(error, data) {
					if (callback === _this2._callback) {
						_this2._callback = null;

						var options = data && data.options || [];

						if (cache) {
							cache[inputValue] = options;
						}

						_this2.setState({
							isLoading: false,
							options: options });

					}
				};

				// Ignore all but the most recent request
				this._callback = callback;

				var promise = loadOptions(inputValue, callback);
				if (promise) {
					promise.then(function (data) {
						return callback(null, data);
					}, function (error) {
						return callback(error);
					});
				}

				if (this._callback && !this.state.isLoading) {
					this.setState({
						isLoading: true });

				}

				return inputValue;
			} },
		{
			key: '_onInputChange',
			value: function _onInputChange(inputValue) {
				var _props2 = this.props;
				var ignoreAccents = _props2.ignoreAccents;
				var ignoreCase = _props2.ignoreCase;

				if (ignoreAccents) {
					inputValue = (0, _utilsStripDiacritics2['default'])(inputValue);
				}

				if (ignoreCase) {
					inputValue = inputValue.toLowerCase();
				}

				return this.loadOptions(inputValue);
			} },
		{
			key: 'render',
			value: function render() {
				var _props3 = this.props;
				var children = _props3.children;
				var loadingPlaceholder = _props3.loadingPlaceholder;
				var placeholder = _props3.placeholder;
				var searchPromptText = _props3.searchPromptText;
				var _state = this.state;
				var isLoading = _state.isLoading;
				var options = _state.options;

				var props = {
					noResultsText: isLoading ? loadingPlaceholder : searchPromptText,
					placeholder: isLoading ? loadingPlaceholder : placeholder,
					options: isLoading ? [] : options };


				return children(_extends({}, this.props, props, {
					isLoading: isLoading,
					onInputChange: this._onInputChange }));

			} }]);


		return Async;
	}(_react.Component);

	exports['default'] = Async;

	Async.propTypes = propTypes;
	Async.defaultProps = defaultProps;

	function defaultChildren(props) {
		return _react2['default'].createElement(_Select2['default'], props);
	};
	module.exports = exports['default'];

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Select = __webpack_require__(242);

	var _Select2 = _interopRequireDefault(_Select);

	var AsyncCreatable = _react2['default'].createClass({
		displayName: 'AsyncCreatableSelect',

		render: function render() {
			var _this = this;

			return _react2['default'].createElement(
			_Select2['default'].Async,
			this.props,
			function (asyncProps) {
				return _react2['default'].createElement(
				_Select2['default'].Creatable,
				_this.props,
				function (creatableProps) {
					return _react2['default'].createElement(_Select2['default'], _extends({}, asyncProps, creatableProps, {
						onInputChange: function onInputChange(input) {
							creatableProps.onInputChange(input);
							return asyncProps.onInputChange(input);
						} }));

				});

			});

		} });


	module.exports = AsyncCreatable;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _Select = __webpack_require__(242);

	var _Select2 = _interopRequireDefault(_Select);

	var _utilsDefaultFilterOptions = __webpack_require__(246);

	var _utilsDefaultFilterOptions2 = _interopRequireDefault(_utilsDefaultFilterOptions);

	var _utilsDefaultMenuRenderer = __webpack_require__(248);

	var _utilsDefaultMenuRenderer2 = _interopRequireDefault(_utilsDefaultMenuRenderer);

	var Creatable = _react2['default'].createClass({
		displayName: 'CreatableSelect',

		propTypes: {
			// Child function responsible for creating the inner Select component
			// This component can be used to compose HOCs (eg Creatable and Async)
			// (props: Object): PropTypes.element
			children: _react2['default'].PropTypes.func,

			// See Select.propTypes.filterOptions
			filterOptions: _react2['default'].PropTypes.any,

			// Searches for any matching option within the set of options.
			// This function prevents duplicate options from being created.
			// ({ option: Object, options: Array, labelKey: string, valueKey: string }): boolean
			isOptionUnique: _react2['default'].PropTypes.func,

			// Determines if the current input text represents a valid option.
			// ({ label: string }): boolean
			isValidNewOption: _react2['default'].PropTypes.func,

			// See Select.propTypes.menuRenderer
			menuRenderer: _react2['default'].PropTypes.any,

			// Factory to create new option.
			// ({ label: string, labelKey: string, valueKey: string }): Object
			newOptionCreator: _react2['default'].PropTypes.func,

			// See Select.propTypes.options
			options: _react2['default'].PropTypes.array,

			// Creates prompt/placeholder option text.
			// (filterText: string): string
			promptTextCreator: _react2['default'].PropTypes.func,

			// Decides if a keyDown event (eg its `keyCode`) should result in the creation of a new option.
			shouldKeyDownEventCreateNewOption: _react2['default'].PropTypes.func },


		// Default prop methods
		statics: {
			isOptionUnique: isOptionUnique,
			isValidNewOption: isValidNewOption,
			newOptionCreator: newOptionCreator,
			promptTextCreator: promptTextCreator,
			shouldKeyDownEventCreateNewOption: shouldKeyDownEventCreateNewOption },


		getDefaultProps: function getDefaultProps() {
			return {
				filterOptions: _utilsDefaultFilterOptions2['default'],
				isOptionUnique: isOptionUnique,
				isValidNewOption: isValidNewOption,
				menuRenderer: _utilsDefaultMenuRenderer2['default'],
				newOptionCreator: newOptionCreator,
				promptTextCreator: promptTextCreator,
				shouldKeyDownEventCreateNewOption: shouldKeyDownEventCreateNewOption };

		},

		createNewOption: function createNewOption() {
			var _props = this.props;
			var isValidNewOption = _props.isValidNewOption;
			var newOptionCreator = _props.newOptionCreator;
			var _props$options = _props.options;
			var options = _props$options === undefined ? [] : _props$options;
			var shouldKeyDownEventCreateNewOption = _props.shouldKeyDownEventCreateNewOption;

			if (isValidNewOption({ label: this.inputValue })) {
				var option = newOptionCreator({ label: this.inputValue, labelKey: this.labelKey, valueKey: this.valueKey });
				var _isOptionUnique = this.isOptionUnique({ option: option });

				// Don't add the same option twice.
				if (_isOptionUnique) {
					options.unshift(option);

					this.select.selectValue(option);
				}
			}
		},

		filterOptions: function filterOptions() {
			var _props2 = this.props;
			var filterOptions = _props2.filterOptions;
			var isValidNewOption = _props2.isValidNewOption;
			var options = _props2.options;
			var promptTextCreator = _props2.promptTextCreator;

			// TRICKY Check currently selected options as well.
			// Don't display a create-prompt for a value that's selected.
			// This covers async edge-cases where a newly-created Option isn't yet in the async-loaded array.
			var excludeOptions = arguments[2] || [];

			var filteredOptions = filterOptions.apply(undefined, arguments) || [];

			if (isValidNewOption({ label: this.inputValue })) {
				var _newOptionCreator = this.props.newOptionCreator;

				var option = _newOptionCreator({
					label: this.inputValue,
					labelKey: this.labelKey,
					valueKey: this.valueKey });


				// TRICKY Compare to all options (not just filtered options) in case option has already been selected).
				// For multi-selects, this would remove it from the filtered list.
				var _isOptionUnique2 = this.isOptionUnique({
					option: option,
					options: excludeOptions.concat(filteredOptions) });


				if (_isOptionUnique2) {
					var _prompt = promptTextCreator(this.inputValue);

					this._createPlaceholderOption = _newOptionCreator({
						label: _prompt,
						labelKey: this.labelKey,
						valueKey: this.valueKey });


					filteredOptions.unshift(this._createPlaceholderOption);
				}
			}

			return filteredOptions;
		},

		isOptionUnique: function isOptionUnique(_ref2) {
			var option = _ref2.option;
			var options = _ref2.options;
			var isOptionUnique = this.props.isOptionUnique;

			options = options || this.select.filterOptions();

			return isOptionUnique({
				labelKey: this.labelKey,
				option: option,
				options: options,
				valueKey: this.valueKey });

		},

		menuRenderer: function menuRenderer(params) {
			var menuRenderer = this.props.menuRenderer;

			return menuRenderer(_extends({}, params, {
				onSelect: this.onOptionSelect }));

		},

		onInputChange: function onInputChange(input) {
			// This value may be needed in between Select mounts (when this.select is null)
			this.inputValue = input;
		},

		onInputKeyDown: function onInputKeyDown(event) {
			var shouldKeyDownEventCreateNewOption = this.props.shouldKeyDownEventCreateNewOption;

			var focusedOption = this.select.getFocusedOption();

			if (focusedOption && focusedOption === this._createPlaceholderOption && shouldKeyDownEventCreateNewOption({ keyCode: event.keyCode })) {
				this.createNewOption();

				// Prevent decorated Select from doing anything additional with this keyDown event
				event.preventDefault();
			}
		},

		onOptionSelect: function onOptionSelect(option, event) {
			if (option === this._createPlaceholderOption) {
				this.createNewOption();
			} else {
				this.select.selectValue(option);
			}
		},

		render: function render() {
			var _this = this;

			var _props3 = this.props;
			var _props3$children = _props3.children;
			var children = _props3$children === undefined ? defaultChildren : _props3$children;
			var newOptionCreator = _props3.newOptionCreator;
			var shouldKeyDownEventCreateNewOption = _props3.shouldKeyDownEventCreateNewOption;

			var restProps = _objectWithoutProperties(_props3, ['children', 'newOptionCreator', 'shouldKeyDownEventCreateNewOption']);

			var props = _extends({}, restProps, {
				allowCreate: true,
				filterOptions: this.filterOptions,
				menuRenderer: this.menuRenderer,
				onInputChange: this.onInputChange,
				onInputKeyDown: this.onInputKeyDown,
				ref: function ref(_ref) {
					_this.select = _ref;

					// These values may be needed in between Select mounts (when this.select is null)
					if (_ref) {
						_this.labelKey = _ref.props.labelKey;
						_this.valueKey = _ref.props.valueKey;
					}
				} });


			return children(props);
		} });


	function defaultChildren(props) {
		return _react2['default'].createElement(_Select2['default'], props);
	};

	function isOptionUnique(_ref3) {
		var option = _ref3.option;
		var options = _ref3.options;
		var labelKey = _ref3.labelKey;
		var valueKey = _ref3.valueKey;

		return options.filter(function (existingOption) {
			return existingOption[labelKey] === option[labelKey] || existingOption[valueKey] === option[valueKey];
		}).length === 0;
	};

	function isValidNewOption(_ref4) {
		var label = _ref4.label;

		return !!label;
	};

	function newOptionCreator(_ref5) {
		var label = _ref5.label;
		var labelKey = _ref5.labelKey;
		var valueKey = _ref5.valueKey;

		var option = {};
		option[valueKey] = label;
		option[labelKey] = label;
		option.className = 'Select-create-option-placeholder';
		return option;
	};

	function promptTextCreator(label) {
		return 'Create option "' + label + '"';
	}

	function shouldKeyDownEventCreateNewOption(_ref6) {
		var keyCode = _ref6.keyCode;

		switch (keyCode) {
			case 9: // TAB
			case 13: // ENTER
			case 188:
				// COMMA
				return true;}


		return false;
	};

	module.exports = Creatable;

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(244);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Option = _react2['default'].createClass({
		displayName: 'Option',

		propTypes: {
			children: _react2['default'].PropTypes.node,
			className: _react2['default'].PropTypes.string, // className (based on mouse position)
			instancePrefix: _react2['default'].PropTypes.string.isRequired, // unique prefix for the ids (used for aria)
			isDisabled: _react2['default'].PropTypes.bool, // the option is disabled
			isFocused: _react2['default'].PropTypes.bool, // the option is focused
			isSelected: _react2['default'].PropTypes.bool, // the option is selected
			onFocus: _react2['default'].PropTypes.func, // method to handle mouseEnter on option element
			onSelect: _react2['default'].PropTypes.func, // method to handle click on option element
			onUnfocus: _react2['default'].PropTypes.func, // method to handle mouseLeave on option element
			option: _react2['default'].PropTypes.object.isRequired, // object that is base for that option
			optionIndex: _react2['default'].PropTypes.number },
		// index of the option, used to generate unique ids for aria
		blockEvent: function blockEvent(event) {
			event.preventDefault();
			event.stopPropagation();
			if (event.target.tagName !== 'A' || !('href' in event.target)) {
				return;
			}
			if (event.target.target) {
				window.open(event.target.href, event.target.target);
			} else {
				window.location.href = event.target.href;
			}
		},

		handleMouseDown: function handleMouseDown(event) {
			event.preventDefault();
			event.stopPropagation();
			this.props.onSelect(this.props.option, event);
		},

		handleMouseEnter: function handleMouseEnter(event) {
			this.onFocus(event);
		},

		handleMouseMove: function handleMouseMove(event) {
			this.onFocus(event);
		},

		handleTouchEnd: function handleTouchEnd(event) {
			// Check if the view is being dragged, In this case
			// we don't want to fire the click event (because the user only wants to scroll)
			if (this.dragging) return;

			this.handleMouseDown(event);
		},

		handleTouchMove: function handleTouchMove(event) {
			// Set a flag that the view is being dragged
			this.dragging = true;
		},

		handleTouchStart: function handleTouchStart(event) {
			// Set a flag that the view is not being dragged
			this.dragging = false;
		},

		onFocus: function onFocus(event) {
			if (!this.props.isFocused) {
				this.props.onFocus(this.props.option, event);
			}
		},
		render: function render() {
			var _props = this.props;
			var option = _props.option;
			var instancePrefix = _props.instancePrefix;
			var optionIndex = _props.optionIndex;

			var className = (0, _classnames2['default'])(this.props.className, option.className);

			return option.disabled ? _react2['default'].createElement(
			'div',
			{ className: className,
				onMouseDown: this.blockEvent,
				onClick: this.blockEvent },
			this.props.children) :
			_react2['default'].createElement(
			'div',
			{ className: className,
				style: option.style,
				role: 'option',
				onMouseDown: this.handleMouseDown,
				onMouseEnter: this.handleMouseEnter,
				onMouseMove: this.handleMouseMove,
				onTouchStart: this.handleTouchStart,
				onTouchMove: this.handleTouchMove,
				onTouchEnd: this.handleTouchEnd,
				id: instancePrefix + '-option-' + optionIndex,
				title: option.title },
			this.props.children);

		} });


	module.exports = Option;

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _classnames = __webpack_require__(244);

	var _classnames2 = _interopRequireDefault(_classnames);

	var Value = _react2['default'].createClass({

		displayName: 'Value',

		propTypes: {
			children: _react2['default'].PropTypes.node,
			disabled: _react2['default'].PropTypes.bool, // disabled prop passed to ReactSelect
			id: _react2['default'].PropTypes.string, // Unique id for the value - used for aria
			onClick: _react2['default'].PropTypes.func, // method to handle click on value label
			onRemove: _react2['default'].PropTypes.func, // method to handle removal of the value
			value: _react2['default'].PropTypes.object.isRequired },

		// the option object for this value
		handleMouseDown: function handleMouseDown(event) {
			if (event.type === 'mousedown' && event.button !== 0) {
				return;
			}
			if (this.props.onClick) {
				event.stopPropagation();
				this.props.onClick(this.props.value, event);
				return;
			}
			if (this.props.value.href) {
				event.stopPropagation();
			}
		},

		onRemove: function onRemove(event) {
			event.preventDefault();
			event.stopPropagation();
			this.props.onRemove(this.props.value);
		},

		handleTouchEndRemove: function handleTouchEndRemove(event) {
			// Check if the view is being dragged, In this case
			// we don't want to fire the click event (because the user only wants to scroll)
			if (this.dragging) return;

			// Fire the mouse events
			this.onRemove(event);
		},

		handleTouchMove: function handleTouchMove(event) {
			// Set a flag that the view is being dragged
			this.dragging = true;
		},

		handleTouchStart: function handleTouchStart(event) {
			// Set a flag that the view is not being dragged
			this.dragging = false;
		},

		renderRemoveIcon: function renderRemoveIcon() {
			if (this.props.disabled || !this.props.onRemove) return;
			return _react2['default'].createElement(
			'span',
			{ className: 'Select-value-icon',
				'aria-hidden': 'true',
				onMouseDown: this.onRemove,
				onTouchEnd: this.handleTouchEndRemove,
				onTouchStart: this.handleTouchStart,
				onTouchMove: this.handleTouchMove },
			'×');

		},

		renderLabel: function renderLabel() {
			var className = 'Select-value-label';
			return this.props.onClick || this.props.value.href ? _react2['default'].createElement(
			'a',
			{ className: className, href: this.props.value.href, target: this.props.value.target, onMouseDown: this.handleMouseDown, onTouchEnd: this.handleMouseDown },
			this.props.children) :
			_react2['default'].createElement(
			'span',
			{ className: className, role: 'option', 'aria-selected': 'true', id: this.props.id },
			this.props.children);

		},

		render: function render() {
			return _react2['default'].createElement(
			'div',
			{ className: (0, _classnames2['default'])('Select-value', this.props.value.className),
				style: this.props.value.style,
				title: this.props.value.title },

			this.renderRemoveIcon(),
			this.renderLabel());

		} });



	module.exports = Value;

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default =








































	function (confirmation) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    // You can pass whatever you want to the component. These arguments will be your Component's props
	    return confirm({ confirmation: confirmation, options: options });
	};var _react = __webpack_require__(1);var _react2 = _interopRequireDefault(_react);var _reactConfirm = __webpack_require__(255);var _reactModal = __webpack_require__(220);var _reactModal2 = _interopRequireDefault(_reactModal);var _modal = __webpack_require__(241);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var Dialog = function Dialog(_ref) {var show = _ref.show,proceed = _ref.proceed,dismiss = _ref.dismiss,cancel = _ref.cancel,confirmation = _ref.confirmation,options = _ref.options;return _react2.default.createElement(_reactModal2.default, { isOpen: show, style: _modal.customModalStyles, onRequestClose: dismiss }, _react2.default.createElement('div', { className: 'row row-centered modal_block' }, _react2.default.createElement('div', { className: 'col-md-12 col-centered modal_header' }, confirmation), _react2.default.createElement('div', { className: 'col-md-12 col-centered modal_body' }, _react2.default.createElement('div', { className: 'col-md-3 col-centered' }, _react2.default.createElement('button', { className: 'btn btn-danger', onClick: function onClick() {return cancel('arguments will be passed to the callback');} }, '\u041E\u0442\u043C\u0435\u043D\u0430')), _react2.default.createElement('div', { className: 'col-md-3 col-centered' }, _react2.default.createElement('button', { className: 'btn btn-success', onClick: function onClick() {return proceed('same as cancel');} }, '\u041F\u0440\u0438\u043D\u044F\u0442\u044C')))));};Dialog.propTypes = { show: _react.PropTypes.bool, // from confirmable. indicates if the dialog is shown or not.
	    proceed: _react.PropTypes.func, // from confirmable. call to close the dialog with promise resolved.
	    cancel: _react.PropTypes.func, // from confirmable. call to close the dialog with promise rejected.
	    dismiss: _react.PropTypes.func, // from confirmable. call to only close the dialog.
	    confirmation: _react.PropTypes.string, // arguments of your confirm function
	    options: _react.PropTypes.object // arguments of your confirm function
	}; // create confirm function
	var confirm = (0, _reactConfirm.createConfirmation)((0, _reactConfirm.confirmable)(Dialog)); // This is optional. But I recommend to define your confirm function easy to call.

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true });

	exports.createConfirmation = exports.confirmable = undefined;

	var _confirmable = __webpack_require__(256);

	var _confirmable2 = _interopRequireDefault(_confirmable);

	var _createConfirmation = __webpack_require__(257);

	var _createConfirmation2 = _interopRequireDefault(_createConfirmation);

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

	exports.confirmable = _confirmable2.default;
	exports.createConfirmation = _createConfirmation2.default;

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	Object.defineProperty(exports, "__esModule", {
	  value: true });


	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;}

	function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var confirmable = function confirmable(Component) {
	  return function (_React$Component) {
	    _inherits(_class, _React$Component);

	    function _class(props) {
	      _classCallCheck(this, _class);

	      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(_class).call(this, props));

	      _this.state = {
	        show: true };

	      return _this;
	    }

	    _createClass(_class, [{
	      key: 'dismiss',
	      value: function dismiss() {
	        var _this2 = this;

	        this.setState({
	          show: false },
	        function () {
	          _this2.props.dispose();
	        });
	      } },
	    {
	      key: 'cancel',
	      value: function cancel(value) {
	        var _this3 = this;

	        this.setState({
	          show: false },
	        function () {
	          _this3.props.reject(value);
	        });
	      } },
	    {
	      key: 'proceed',
	      value: function proceed(value) {
	        var _this4 = this;

	        this.setState({
	          show: false },
	        function () {
	          _this4.props.resolve(value);
	        });
	      } },
	    {
	      key: 'render',
	      value: function render() {
	        return _react2.default.createElement(Component, _extends({ proceed: this.proceed.bind(this), cancel: this.cancel.bind(this), dismiss: this.dismiss.bind(this), show: this.state.show }, this.props));
	      } }]);


	    return _class;
	  }(_react2.default.Component);
	};

	exports.default = confirmable;

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true });


	var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(158);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

	var createConfirmation = function createConfirmation(Component) {
	  return function (props) {
	    var wrapper = document.body.appendChild(document.createElement('div'));

	    var promise = new Promise(function (resolve, reject) {
	      try {
	        _reactDom2.default.render(_react2.default.createElement(Component, _extends({
	          reject: reject,
	          resolve: resolve,
	          dispose: dispose },
	        props)), wrapper);
	      } catch (e) {
	        console.error(e);
	        throw e;
	      }
	    });

	    function dispose() {
	      setTimeout(function () {
	        _reactDom2.default.unmountComponentAtNode(wrapper);
	        setTimeout(function () {
	          return wrapper.remove();
	        });
	      }, 1000);
	    }

	    return promise.then(function (result) {
	      dispose();
	      return result;
	    }, function (result) {
	      dispose();
	      return Promise.reject(result);
	    });
	  };
	};

	exports.default = createConfirmation;

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.Projects = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _class, _class2, _class3;var _react = __webpack_require__(1);var React = _interopRequireWildcard(_react);
	var _reactDom = __webpack_require__(158);var ReactDOM = _interopRequireWildcard(_reactDom);
	var _jquery = __webpack_require__(214);var _jquery2 = _interopRequireDefault(_jquery);
	var _reactAddonsUpdate = __webpack_require__(216);var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);
	var _mobxReact = __webpack_require__(218);
	var _projectsStore = __webpack_require__(259);var _projectsStore2 = _interopRequireDefault(_projectsStore);
	var _modal = __webpack_require__(241);
	var _confirm = __webpack_require__(254);var _confirm2 = _interopRequireDefault(_confirm);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var


	Projects = exports.Projects = (0, _mobxReact.observer)(_class = function (_React$Component) {_inherits(Projects, _React$Component);function Projects() {_classCallCheck(this, Projects);return _possibleConstructorReturn(this, (Projects.__proto__ || Object.getPrototypeOf(Projects)).apply(this, arguments));}_createClass(Projects, [{ key: 'createProject', value: function createProject(
	        e) {var _props =
	            this.props,projectsStore = _props.projectsStore,modalStore = _props.modalStore,usersStore = _props.usersStore;
	            e.preventDefault();
	            _jquery2.default.ajax({
	                method: 'POST',
	                url: document.body.getAttribute('data-projects-url'),
	                data: JSON.stringify({ name: projectsStore.creating_name, owner: usersStore.session_user }),
	                success: function success(res) {
	                    projectsStore.createProjects(res.projects);
	                    modalStore.modal = false;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'deleteProject', value: function deleteProject(
	        project) {var _props2 =
	            this.props,projectsStore = _props2.projectsStore,scriptsStore = _props2.scriptsStore;
	            (0, _confirm2.default)("Вы действительно хотите удалить проект: " + project.name).then(
	            function (result) {
	                _jquery2.default.ajax({
	                    method: 'DELETE',
	                    url: document.body.getAttribute('data-projects-url'),
	                    data: JSON.stringify({ id: project.id }),
	                    success: function success(res) {
	                        projectsStore.createProjects(res.projects);
	                        scriptsStore.scripts = res.scripts;
	                    },
	                    error: function error(res) {
	                        console.log(res);
	                    } });

	            },
	            function (result) {
	                console.log('cancel called');
	            });

	        } }, { key: 'updateProject', value: function updateProject(
	        e) {var _props3 =
	            this.props,scriptsStore = _props3.scriptsStore,projectsStore = _props3.projectsStore,modalStore = _props3.modalStore;
	            e.preventDefault();
	            _jquery2.default.ajax({
	                method: 'PUT',
	                url: document.body.getAttribute('data-projects-url'),
	                data: JSON.stringify(projectsStore.editing),
	                success: function success(res) {
	                    projectsStore.createProjects(res.projects);
	                    scriptsStore.scripts = res.scripts;
	                    modalStore.modal = false;
	                    projectsStore.editing = null;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'render', value: function render()
	        {var _this2 = this;var
	            filteredProjects = this.props.projectsStore.filteredProjects;var _props4 =
	            this.props,projectsStore = _props4.projectsStore,modalStore = _props4.modalStore;
	            return (
	                React.createElement('div', { className: 'col-md-12' },
	                    React.createElement('div', { className: 'col-md-2' },
	                        React.createElement('button', { onClick: function onClick() {
	                                    modalStore.modal = true;
	                                    modalStore.component = CreatingProject;
	                                }, className: 'btn btn-success' }, '+ \u0421\u043E\u0437\u0434\u0430\u0442\u044C \u043F\u0440\u043E\u0435\u043A\u0442')),

	                    React.createElement('div', { className: 'col-md-3' },
	                        React.createElement('div', { className: 'form-group' },
	                            React.createElement('input', { onChange: function onChange(e) {return projectsStore.filter_by_name = e.target.value;}, className: 'form-control', type: 'text', placeholder: '\u041F\u043E\u0438\u0441\u043A \u043F\u043E \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u044E' }))),


	                    React.createElement('div', { className: 'col-md-3 pull-right' },
	                        React.createElement('button', { className: 'btn btn-success' }, '\u0417\u0430\u043A\u0430\u0437\u0430\u0442\u044C \u0440\u0430\u0437\u0440\u0430\u0431\u043E\u0442\u043A\u0443 \u0441\u043A\u0440\u0438\u043F\u0442\u0430')),

	                    React.createElement('div', { className: 'row' },
	                        React.createElement('div', { className: 'col-md-12' },
	                            React.createElement('table', { className: 'table' },
	                                React.createElement('thead', null,
	                                    React.createElement('tr', null,
	                                        React.createElement('td', null, '\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435'))),


	                                React.createElement('tbody', null,
	                                    filteredProjects.map(function (project, key) {
	                                        return (
	                                            React.createElement('tr', { key: key },
	                                                React.createElement('td', null, project.name),
	                                                React.createElement('td', { className: 'text-right' },
	                                                    React.createElement('button', { className: 'btn btn-default', onClick: function onClick() {
	                                                                projectsStore.editing = project;
	                                                                modalStore.modal = true;
	                                                                modalStore.component = EditingProject;
	                                                            } }, '\u0420\u0435\u0434.')),

	                                                React.createElement('td', { className: 'text-right' },
	                                                    React.createElement('button', { className: 'btn btn-danger', onClick: function onClick() {_this2.deleteProject(project);} }, '\u0423\u0434\u0430\u043B\u0438\u0442\u044C'))));



	                                    }))))),




	                    React.createElement(_modal.ModalWrapper, { projectsStore: projectsStore, modalStore: modalStore, createProject: this.createProject.bind(this), updateProject: this.updateProject.bind(this) })));


	        } }]);return Projects;}(React.Component)) || _class;var



	CreatingProject = (0, _mobxReact.observer)(_class2 = function (_React$Component2) {_inherits(CreatingProject, _React$Component2);function CreatingProject() {_classCallCheck(this, CreatingProject);return _possibleConstructorReturn(this, (CreatingProject.__proto__ || Object.getPrototypeOf(CreatingProject)).apply(this, arguments));}_createClass(CreatingProject, [{ key: 'render', value: function render()
	        {var _this4 = this;var
	            projectsStore = this.props.projectsStore;
	            return (
	                React.createElement('div', { className: 'row' },
	                    React.createElement('form', { action: '', onSubmit: function onSubmit(e) {return _this4.props.createProject(e);} },
	                        React.createElement('div', { className: 'col-md-12' },
	                            React.createElement('div', { className: 'form-group' },
	                                React.createElement('input', { className: 'form-control', onChange: function onChange(e) {return projectsStore.creating_name = e.target.value;}, value: projectsStore.creating_name, type: 'text', name: 'name', placeholder: '\u0418\u043C\u044F \u043F\u0440\u043E\u0435\u043A\u0442\u0430' }))),


	                        React.createElement('div', { className: 'col-md-12' },
	                            React.createElement('div', { className: 'form-group' },
	                                React.createElement('button', { className: 'btn btn-success', type: 'submit' }, '\u0421\u043E\u0437\u0434\u0430\u0442\u044C'))))));





	        } }]);return CreatingProject;}(React.Component)) || _class2;var



	EditingProject = (0, _mobxReact.observer)(_class3 = function (_React$Component3) {_inherits(EditingProject, _React$Component3);function EditingProject() {_classCallCheck(this, EditingProject);return _possibleConstructorReturn(this, (EditingProject.__proto__ || Object.getPrototypeOf(EditingProject)).apply(this, arguments));}_createClass(EditingProject, [{ key: 'render', value: function render()
	        {var _this6 = this;var
	            projectsStore = this.props.projectsStore;
	            if (projectsStore.editing) {
	                return (
	                    React.createElement('div', { className: 'row' },
	                        React.createElement('form', { action: '', onSubmit: function onSubmit(e) {_this6.props.updateProject(e);} },
	                            React.createElement('div', { className: 'col-md-12' },
	                                React.createElement('div', { className: 'form-group' },
	                                    React.createElement('input', { className: 'form-control', onChange: function onChange(e) {projectsStore.editing.name = e.target.value;}, value: projectsStore.editing.name, type: 'text', name: 'name', placeholder: '\u0418\u043C\u044F \u043F\u0440\u043E\u0435\u043A\u0442\u0430' }))),


	                            React.createElement('div', { className: 'col-md-12' },
	                                React.createElement('div', { className: 'form-group' },
	                                    React.createElement('button', { className: 'btn btn-success', type: 'submit' }, '\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C'))))));





	            }
	            return React.createElement('div', null);
	        } }]);return EditingProject;}(React.Component)) || _class3;

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.ProjectsStore = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;var _mobx = __webpack_require__(219);function _initDefineProp(target, property, descriptor, context) {if (!descriptor) return;Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 });}function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {var desc = {};Object['ke' + 'ys'](descriptor).forEach(function (key) {desc[key] = descriptor[key];});desc.enumerable = !!desc.enumerable;desc.configurable = !!desc.configurable;if ('value' in desc || desc.initializer) {desc.writable = true;}desc = decorators.slice().reverse().reduce(function (desc, decorator) {return decorator(target, property, desc) || desc;}, desc);if (context && desc.initializer !== void 0) {desc.value = desc.initializer ? desc.initializer.call(context) : void 0;desc.initializer = undefined;}if (desc.initializer === void 0) {Object['define' + 'Property'](target, property, desc);desc = null;}return desc;}function _initializerWarningHelper(descriptor, context) {throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var

	Project =
	function Project(project) {_classCallCheck(this, Project);
	    this.__proto__ = Object.create(project);
	};var


	ProjectsStore = exports.ProjectsStore = (_class = function () {function ProjectsStore() {_classCallCheck(this, ProjectsStore);_initDefineProp(this, 'projects', _descriptor, this);_initDefineProp(this, 'filter_by_name', _descriptor2, this);_initDefineProp(this, 'creating_name', _descriptor3, this);_initDefineProp(this, 'editing', _descriptor4, this);}_createClass(ProjectsStore, [{ key: 'project', value: function project(












	        id) {
	            return this.projects.find(function (project) {return parseInt(project.id) === parseInt(id);});
	        } }, { key: 'createProjects', value: function createProjects(
	        projects) {
	            //this.projects = [];
	            //projects.map(project => this.projects.push(new Project(project)));
	            this.projects = projects;
	        } }, { key: 'resetCreating', value: function resetCreating()
	        {
	            this.creating_name = '';
	        } }, { key: 'filteredProjects', get: function get() {var _this = this;var matches_by_name = new RegExp(this.filter_by_name, 'i');return this.projects.filter(function (project) {return !_this.filter_by_name || matches_by_name.test(project.name);});} }, { key: 'owner', get: function get() {return this.projects.length > 0 ? this.projects[0].owner : parseInt(document.body.getAttribute('data-user-id'));} }]);return ProjectsStore;}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'projects', [_mobx.observable], { enumerable: true, initializer: function initializer() {return [];} }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'filter_by_name', [_mobx.observable], { enumerable: true, initializer: function initializer() {return '';} }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'creating_name', [_mobx.observable], { enumerable: true, initializer: function initializer() {return '';} }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'editing', [_mobx.observable], { enumerable: true, initializer: function initializer() {return null;} }), _applyDecoratedDescriptor(_class.prototype, 'filteredProjects', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'filteredProjects'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'owner', [_mobx.computed], Object.getOwnPropertyDescriptor(_class.prototype, 'owner'), _class.prototype)), _class);exports.default =


	new ProjectsStore();

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.AvailableTables = exports.Tables = undefined;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _class, _class2, _class3, _class4;var _react = __webpack_require__(1);var React = _interopRequireWildcard(_react);
	var _reactDom = __webpack_require__(158);var ReactDOM = _interopRequireWildcard(_reactDom);
	var _jquery = __webpack_require__(214);var _jquery2 = _interopRequireDefault(_jquery);
	var _reactAddonsUpdate = __webpack_require__(216);var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);
	var _mobxReact = __webpack_require__(218);
	var _modal = __webpack_require__(241);
	var _tablesStore = __webpack_require__(261);
	var _reactRouter = __webpack_require__(159);
	var _sort = __webpack_require__(262);
	var _access = __webpack_require__(263);
	var _confirm = __webpack_require__(254);var _confirm2 = _interopRequireDefault(_confirm);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var


	Tables = exports.Tables = (0, _mobxReact.observer)(_class = function (_AccessableComponent) {_inherits(Tables, _AccessableComponent);function Tables() {_classCallCheck(this, Tables);return _possibleConstructorReturn(this, (Tables.__proto__ || Object.getPrototypeOf(Tables)).apply(this, arguments));}_createClass(Tables, [{ key: 'componentWillMount', value: function componentWillMount()
	        {var
	            tablesStore = this.props.tablesStore;
	            tablesStore.pullTables(this.props.params.script);
	        } }, { key: 'createTable', value: function createTable(
	        e) {var _props =
	            this.props,modalStore = _props.modalStore,tablesStore = _props.tablesStore,scriptsStore = _props.scriptsStore;
	            e.preventDefault();
	            _jquery2.default.ajax({
	                method: 'POST',
	                url: document.body.getAttribute('data-tables-url'),
	                data: JSON.stringify({
	                    name: tablesStore.creating_name,
	                    colls: tablesStore.creating_colls,
	                    text_coll_name: tablesStore.creating_text_coll_name,
	                    text_coll_size: tablesStore.creating_text_coll_size,
	                    text_coll_position: tablesStore.creating_text_coll_position,
	                    script: tablesStore.creating_script ? tablesStore.creating_script : parseInt(this.props.params.script)
	                    //script: scriptsStore.script((tablesStore.creating_script ? tablesStore.creating_script : parseInt(this.props.params.script)))
	                }),
	                success: function success(res) {
	                    tablesStore.tables = res.tables;
	                    modalStore.modal = false;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'deleteTable', value: function deleteTable(
	        table) {var
	            tablesStore = this.props.tablesStore;
	            (0, _confirm2.default)("Вы действительно хотите удалить таблицу: " + table.name).then(
	            function (result) {
	                _jquery2.default.ajax({
	                    method: 'DELETE',
	                    url: document.body.getAttribute('data-tables-url'),
	                    data: JSON.stringify(table),
	                    success: function success(res) {
	                        tablesStore.tables = res.tables;
	                    },
	                    error: function error(res) {
	                        console.log(res);
	                    } });

	            },
	            function (result) {
	                console.log('cancel called');
	            });

	        } }, { key: 'render', value: function render()
	        {var _this2 = this;var _props2 =
	            this.props,projectsStore = _props2.projectsStore,scriptsStore = _props2.scriptsStore,tablesStore = _props2.tablesStore,modalStore = _props2.modalStore,usersStore = _props2.usersStore;
	            if (usersStore.session_user) {var _ret = function () {
	                    var script = scriptsStore.script(_this2.props.params.script);
	                    var access = _this2.access(usersStore, script);
	                    if (script && access) {
	                        return { v:
	                            React.createElement('div', { className: 'col-md-12' },
	                                access.edit ?
	                                React.createElement('div', { className: 'row row-centered' },
	                                    React.createElement('div', { className: 'col-md-2 col-centered' },
	                                        React.createElement('button', { onClick: function onClick() {
	                                                    modalStore.modal = true;
	                                                    modalStore.component = CreatingTable;
	                                                }, className: 'btn btn-success' }, '+ \u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0442\u0430\u0431\u043B\u0438\u0446\u0443')),

	                                    React.createElement('div', { className: 'col-md-7 col-centered' },
	                                        React.createElement('h4', null, script.name)),

	                                    React.createElement('div', { className: 'col-md-3 col-centered' },
	                                        React.createElement('button', { className: 'btn btn-success' }, '\u0417\u0430\u043A\u0430\u0437\u0430\u0442\u044C \u0440\u0430\u0437\u0440\u0430\u0431\u043E\u0442\u043A\u0443 \u0441\u043A\u0440\u0438\u043F\u0442\u0430'))) :


	                                null,
	                                React.createElement('div', { className: 'row' },
	                                    React.createElement('div', { className: 'col-md-12' },
	                                        React.createElement('table', { className: 'table' },
	                                            React.createElement('thead', null,
	                                                React.createElement('tr', null,
	                                                    React.createElement('td', null, '\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u0442\u0430\u0431\u043B\u0438\u0446\u044B'))),


	                                            React.createElement('tbody', null,
	                                                tablesStore.tables.map(function (table, key) {
	                                                    return (
	                                                        React.createElement('tr', { key: key },
	                                                            React.createElement('td', null,
	                                                                React.createElement(_reactRouter.Link, { to:
	                                                                        '/tables/' + _this2.props.params.script +
	                                                                        '/table/' + table.id + (
	                                                                        access.edit ? '/edit' : '/share/') },
	                                                                    table.name)),

	                                                            React.createElement('td', { className: 'text-right' },
	                                                                access.edit ?
	                                                                React.createElement('button', { className: 'btn btn-default', onClick: function onClick() {
	                                                                            tablesStore.editing = table;
	                                                                            modalStore.modal = true;
	                                                                            modalStore.component = EditingTable;
	                                                                        } }, '\u0420\u0435\u0434.') :
	                                                                null),

	                                                            React.createElement('td', { className: 'text-right' },
	                                                                access.edit ?
	                                                                React.createElement('button', { className: 'btn btn-danger', onClick: function onClick() {_this2.deleteTable(table);} }, '\u0423\u0434\u0430\u043B\u0438\u0442\u044C') :
	                                                                null)));



	                                                }))))),




	                                React.createElement(_modal.ModalWrapper, { scriptsStore: scriptsStore, tablesStore: tablesStore, projectsStore: projectsStore, modalStore: modalStore, createTable: _this2.createTable.bind(_this2), updateTable: function updateTable(e) {tablesStore.updateTable(e, modalStore);} })) };


	                    }
	                    return { v: null };}();if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	            }
	            return null;
	        } }]);return Tables;}(_access.AccessableComponent)) || _class;var



	CreatingTable = (0, _mobxReact.observer)(_class2 = function (_React$Component) {_inherits(CreatingTable, _React$Component);function CreatingTable() {_classCallCheck(this, CreatingTable);return _possibleConstructorReturn(this, (CreatingTable.__proto__ || Object.getPrototypeOf(CreatingTable)).apply(this, arguments));}_createClass(CreatingTable, [{ key: 'render', value: function render()
	        {var _this4 = this;var
	            tablesStore = this.props.tablesStore;
	            return (
	                React.createElement('div', { className: 'row' },
	                    React.createElement('form', { action: '', onSubmit: function onSubmit(e) {return _this4.props.createTable(e);} },
	                        React.createElement('div', { className: 'col-md-12' },
	                            React.createElement('div', { className: 'form-group' },
	                                React.createElement('input', { className: 'form-control', onChange: function onChange(e) {return tablesStore.creating_name = e.target.value;}, value: tablesStore.creating_name, type: 'text', name: 'name', placeholder: '\u0418\u043C\u044F \u0442\u0430\u0431\u043B\u0438\u0446\u044B' }))),



	                        React.createElement(CollsCreating, { tablesStore: tablesStore }),

	                        React.createElement('div', { className: 'col-md-12' },
	                            React.createElement('div', { className: 'form-group' },
	                                React.createElement('button', { className: 'btn btn-success', type: 'submit' }, '\u0421\u043E\u0437\u0434\u0430\u0442\u044C'))))));





	        } }]);return CreatingTable;}(React.Component)) || _class2;var



	EditingTable = (0, _mobxReact.observer)(_class3 = function (_React$Component2) {_inherits(EditingTable, _React$Component2);function EditingTable() {_classCallCheck(this, EditingTable);return _possibleConstructorReturn(this, (EditingTable.__proto__ || Object.getPrototypeOf(EditingTable)).apply(this, arguments));}_createClass(EditingTable, [{ key: 'render', value: function render()
	        {var _this6 = this;var
	            tablesStore = this.props.tablesStore;
	            if (tablesStore.editing) {
	                return (
	                    React.createElement('div', { className: 'row' },
	                        React.createElement('form', { action: '', onSubmit: function onSubmit(e) {return _this6.props.updateTable(e);} },
	                            React.createElement('div', { className: 'col-md-12' },
	                                React.createElement('div', { className: 'form-group' },
	                                    React.createElement('input', { className: 'form-control', onChange: function onChange(e) {return tablesStore.editing.name = e.target.value;}, value: tablesStore.editing.name, type: 'text', name: 'name', placeholder: '\u0418\u043C\u044F \u0442\u0430\u0431\u043B\u0438\u0446\u044B' }))),



	                            React.createElement(CollsCreating, { tablesStore: tablesStore }),

	                            React.createElement('div', { className: 'col-md-12' },
	                                React.createElement('div', { className: 'form-group' },
	                                    React.createElement('button', { className: 'btn btn-success', type: 'submit' }, '\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C'))))));





	            }
	            return null;
	        } }]);return EditingTable;}(React.Component)) || _class3;var



	CollsCreating = (0, _mobxReact.observer)(_class4 = function (_React$Component3) {_inherits(CollsCreating, _React$Component3);function CollsCreating() {_classCallCheck(this, CollsCreating);return _possibleConstructorReturn(this, (CollsCreating.__proto__ || Object.getPrototypeOf(CollsCreating)).apply(this, arguments));}_createClass(CollsCreating, [{ key: 'deleteColl', value: function deleteColl(
	        colls, coll, i) {var
	            tablesStore = this.props.tablesStore;
	            (0, _confirm2.default)("Вы действительно хотите удалить столбец: " + coll.name).then(
	            function (result) {
	                _jquery2.default.ajax({
	                    method: 'DELETE',
	                    url: document.body.getAttribute('data-colls-url'),
	                    data: JSON.stringify(coll),
	                    success: function success(res) {
	                        tablesStore.tables = res.tables;
	                        colls.splice(i, 1);
	                    },
	                    error: function error(res) {
	                        console.log(res);
	                    } });

	            },
	            function (result) {
	                console.log('cancel called');
	            });

	        } }, { key: 'onSort', value: function onSort(
	        items) {var
	            tablesStore = this.props.tablesStore;
	            items.map(function (item, key) {
	                if (item.props.text) {
	                    if (tablesStore.editing) {
	                        tablesStore.editing.text_coll_position = key;
	                    } else {
	                        tablesStore.creating_text_coll_position = key;
	                    }
	                } else {
	                    item.props.coll.position = key;
	                }
	            });
	            tablesStore.updateTable(null, false);
	        } }, { key: 'render', value: function render()
	        {var _this8 = this;var
	            tablesStore = this.props.tablesStore;
	            var colls = tablesStore.editing ? tablesStore.editing.colls : tablesStore.creating_colls;
	            var text_coll_name = tablesStore.editing ? tablesStore.editing.text_coll_name : tablesStore.creating_text_coll_name;
	            var text_coll_size = tablesStore.editing ? tablesStore.editing.text_coll_size : tablesStore.creating_text_coll_size;
	            var text_coll_position = tablesStore.editing ? tablesStore.editing.text_coll_position : tablesStore.creating_text_coll_position;

	            var colls_inputs = colls.map(function (coll, key) {
	                return (
	                    React.createElement(CollInput, {
	                        key: key,
	                        name: coll.name,
	                        size: coll.size,
	                        position: coll.position,
	                        index: key,
	                        text: false,
	                        coll: coll,
	                        colls: colls,
	                        deleteColl: _this8.deleteColl.bind(_this8),
	                        onChangeSize: function onChangeSize(e) {coll.size = e.target.value;},
	                        onChangeName: function onChangeName(e) {coll.name = e.target.value;} }));

	            });
	            colls_inputs.push(
	            React.createElement(CollInput, {
	                key: colls_inputs.length,
	                name: text_coll_name,
	                size: text_coll_size,
	                position: text_coll_position,
	                text: true,
	                onChangeSize: function onChangeSize(e) {
	                    if (tablesStore.editing) {
	                        tablesStore.editing.text_coll_size = e.target.value;
	                    } else {
	                        tablesStore.creating_text_coll_size = e.target.value;
	                    }
	                },
	                onChangeName: function onChangeName(e) {
	                    if (tablesStore.editing) {
	                        tablesStore.editing.text_coll_name = e.target.value;
	                    } else {
	                        tablesStore.creating_text_coll_name = e.target.value;
	                    }
	                } }));

	            colls_inputs = colls_inputs.sort(function (a, b) {
	                if (a.props.position > b.props.position) {return 1;}
	                if (a.props.position < b.props.position) {return -1;}
	                return 0;
	            });


	            return (
	                React.createElement('div', { className: 'col-md-12' },
	                    React.createElement(_sort.Sort, { onSort: this.onSort.bind(this) },
	                        colls_inputs.map(function (coll, key) {
	                            return coll;
	                        })),

	                    React.createElement('div', { className: 'form-group' },
	                        React.createElement('button', { className: 'btn btn-success', onClick: function onClick(e) {e.preventDefault();colls.push(new _tablesStore.Coll(tablesStore.editing));} }, '+ \u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0441\u0442\u043E\u043B\u0431\u0435\u0446'))));



	        } }]);return CollsCreating;}(React.Component)) || _class4;var


	CollInput = function (_React$Component4) {_inherits(CollInput, _React$Component4);function CollInput() {_classCallCheck(this, CollInput);return _possibleConstructorReturn(this, (CollInput.__proto__ || Object.getPrototypeOf(CollInput)).apply(this, arguments));}_createClass(CollInput, [{ key: 'render', value: function render()
	        {var _this10 = this;var
	            coll = this.props.coll;
	            var links = [];
	            if (coll && coll.categories && coll.categories.length > 0) {
	                coll.categories.map(function (category) {
	                    if (category.links.length > 0) {
	                        category.links.map(function (link) {
	                            links.push(link);
	                        });
	                    }
	                });
	            }
	            return (
	                React.createElement('div', { className: 'form-inline coll_form' },
	                    React.createElement('div', { className: 'form-group' },
	                        React.createElement('input', {
	                            type: 'text',
	                            className: 'form-control',
	                            placeholder: '\u041D\u0430\u0437\u0432\u0430\u043D\u0438\u0435 \u0441\u0442\u043E\u043B\u0431\u0446\u0430',
	                            onChange: this.props.onChangeName.bind(this),
	                            value: this.props.name })),

	                    React.createElement('div', { className: 'form-group' },
	                        React.createElement('input', {
	                            type: 'text',
	                            className: 'form-control',
	                            placeholder: '\u0420\u0430\u0437\u043C\u0435\u0440 \u0441\u0442\u043E\u043B\u0431\u0446\u0430 (\u0432 %)',
	                            onChange: this.props.onChangeSize.bind(this),
	                            value: this.props.size })),


	                    !this.props.text ?
	                    React.createElement('div', { className: 'form-group' },
	                        'Ссылки: ' + links.length) :

	                    null,

	                    !this.props.text ?
	                    React.createElement('div', { className: 'form-group' },
	                        React.createElement('i', {
	                            className: 'glyphicon glyphicon-remove icon red_icon',
	                            'aria-hidden': 'true',
	                            onClick: function onClick(e) {
	                                e.preventDefault();
	                                if (_this10.props.coll.id) {
	                                    _this10.props.deleteColl(_this10.props.colls, _this10.props.coll, _this10.props.index);
	                                } else {
	                                    _this10.props.colls.splice(_this10.props.index, 1);
	                                }
	                            } })) :

	                    null));


	        } }]);return CollInput;}(React.Component);var


	AvailableTables = exports.AvailableTables = function (_React$Component5) {_inherits(AvailableTables, _React$Component5);function AvailableTables() {_classCallCheck(this, AvailableTables);return _possibleConstructorReturn(this, (AvailableTables.__proto__ || Object.getPrototypeOf(AvailableTables)).apply(this, arguments));}_createClass(AvailableTables, [{ key: 'render', value: function render()
	        {
	            return React.cloneElement(React.createElement(Tables, this.props), { available: true });
	        } }]);return AvailableTables;}(React.Component);

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.TablesStore = exports.Coll = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _desc2, _value2, _class3, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;var _mobx = __webpack_require__(219);
	var _jquery = __webpack_require__(214);var _jquery2 = _interopRequireDefault(_jquery);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _initDefineProp(target, property, descriptor, context) {if (!descriptor) return;Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 });}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {var desc = {};Object['ke' + 'ys'](descriptor).forEach(function (key) {desc[key] = descriptor[key];});desc.enumerable = !!desc.enumerable;desc.configurable = !!desc.configurable;if ('value' in desc || desc.initializer) {desc.writable = true;}desc = decorators.slice().reverse().reduce(function (desc, decorator) {return decorator(target, property, desc) || desc;}, desc);if (context && desc.initializer !== void 0) {desc.value = desc.initializer ? desc.initializer.call(context) : void 0;desc.initializer = undefined;}if (desc.initializer === void 0) {Object['define' + 'Property'](target, property, desc);desc = null;}return desc;}function _initializerWarningHelper(descriptor, context) {throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');}var

	Coll = exports.Coll = (_class =





	function Coll(table) {_classCallCheck(this, Coll);_initDefineProp(this, 'name', _descriptor, this);_initDefineProp(this, 'size', _descriptor2, this);_initDefineProp(this, 'position', _descriptor3, this);_initDefineProp(this, 'table', _descriptor4, this);
	    if (table) {
	        this.table = table.id;
	    }
	}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'name', [_mobx.observable], { enumerable: true, initializer: function initializer() {return 'Колонка с сылками';} }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'size', [_mobx.observable], { enumerable: true, initializer: function initializer() {return 50;} }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'position', [_mobx.observable], { enumerable: true, initializer: function initializer() {return 0;} }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'table', [_mobx.observable], { enumerable: true, initializer: null })), _class);


	var defaults = {
	    text_coll_name: 'Колонка с текстами ссылок',
	    text_coll_size: 50,
	    text_coll_position: 0 };var


	TablesStore = exports.TablesStore = (_class3 = function () {function TablesStore() {_classCallCheck(this, TablesStore);_initDefineProp(this, 'tables', _descriptor5, this);_initDefineProp(this, 'creating_name', _descriptor6, this);_initDefineProp(this, 'creating_colls', _descriptor7, this);_initDefineProp(this, 'creating_text_coll_name', _descriptor8, this);_initDefineProp(this, 'creating_text_coll_size', _descriptor9, this);_initDefineProp(this, 'creating_text_coll_position', _descriptor10, this);_initDefineProp(this, 'creating_script', _descriptor11, this);_initDefineProp(this, 'editing', _descriptor12, this);_initDefineProp(this, 'active_link', _descriptor13, this);_initDefineProp(this, 'pressed_key', _descriptor14, this);}_createClass(TablesStore, [{ key: 'pullTables', value: function pullTables(














	        script) {var _this = this;
	            _jquery2.default.ajax({
	                method: 'GET',
	                url: document.body.getAttribute('data-tables-url'),
	                data: { id: script },
	                success: function success(res) {
	                    _this.tables = res.tables;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'updateTable', value: function updateTable(

	        e, modalStore) {var _this2 = this;
	            if (e) {e.preventDefault();}
	            _jquery2.default.ajax({
	                method: 'PUT',
	                url: document.body.getAttribute('data-tables-url'),
	                data: JSON.stringify(this.editing),
	                success: function success(res) {
	                    _this2.tables = res.tables;
	                    if (modalStore) {
	                        _this2.editing = null;
	                        modalStore.modal = false;
	                    }
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'setLink', value: function setLink(

	        table_id, link_id) {
	            this.active_link = this.link(table_id, link_id);
	        } }, { key: 'table', value: function table(

	        id) {
	            return this.tables.find(function (table) {return parseInt(table.id) === parseInt(id);});
	        } }, { key: 'script_tables', value: function script_tables(

	        script_id) {
	            return this.tables.filter(function (table) {return parseInt(table.script) === parseInt(script_id);});
	        } }, { key: 'link', value: function link(

	        table_id, link_id) {
	            var table = this.table(table_id);
	            var all_links = [];
	            if (table) {
	                table.colls.map(function (coll) {
	                    coll.categories.map(function (category) {
	                        category.links.map(function (link) {
	                            all_links.push(link);
	                        });
	                    });
	                });
	                return all_links.find(function (link) {return parseInt(link.id) === parseInt(link_id);});
	            }
	        } }, { key: 'resetCreating', value: function resetCreating()

	        {
	            this.creating_name = '';
	            this.creating_colls = [new Coll()];
	            this.creating_text_coll_name = defaults.text_coll_name;
	            this.creating_text_coll_size = defaults.text_coll_size;
	            this.creating_text_coll_position = defaults.text_coll_position;
	            this.creating_script = null;
	        } }]);return TablesStore;}(), (_descriptor5 = _applyDecoratedDescriptor(_class3.prototype, 'tables', [_mobx.observable], { enumerable: true, initializer: function initializer() {return [];} }), _descriptor6 = _applyDecoratedDescriptor(_class3.prototype, 'creating_name', [_mobx.observable], { enumerable: true, initializer: function initializer() {return '';} }), _descriptor7 = _applyDecoratedDescriptor(_class3.prototype, 'creating_colls', [_mobx.observable], { enumerable: true, initializer: function initializer() {return [new Coll()];} }), _descriptor8 = _applyDecoratedDescriptor(_class3.prototype, 'creating_text_coll_name', [_mobx.observable], { enumerable: true, initializer: function initializer() {return defaults.text_coll_name;} }), _descriptor9 = _applyDecoratedDescriptor(_class3.prototype, 'creating_text_coll_size', [_mobx.observable], { enumerable: true, initializer: function initializer() {return defaults.text_coll_size;} }), _descriptor10 = _applyDecoratedDescriptor(_class3.prototype, 'creating_text_coll_position', [_mobx.observable], { enumerable: true, initializer: function initializer() {return defaults.text_coll_position;} }), _descriptor11 = _applyDecoratedDescriptor(_class3.prototype, 'creating_script', [_mobx.observable], { enumerable: true, initializer: function initializer() {return null;} }), _descriptor12 = _applyDecoratedDescriptor(_class3.prototype, 'editing', [_mobx.observable], { enumerable: true, initializer: function initializer() {return null;} }), _descriptor13 = _applyDecoratedDescriptor(_class3.prototype, 'active_link', [_mobx.observable], { enumerable: true, initializer: function initializer() {return null;} }), _descriptor14 = _applyDecoratedDescriptor(_class3.prototype, 'pressed_key', [_mobx.observable], { enumerable: true, initializer: function initializer() {return null;} }), _applyDecoratedDescriptor(_class3.prototype, 'pullTables', [_mobx.action], Object.getOwnPropertyDescriptor(_class3.prototype, 'pullTables'), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, 'updateTable', [_mobx.action], Object.getOwnPropertyDescriptor(_class3.prototype, 'updateTable'), _class3.prototype), _applyDecoratedDescriptor(_class3.prototype, 'setLink', [_mobx.action], Object.getOwnPropertyDescriptor(_class3.prototype, 'setLink'), _class3.prototype)), _class3);exports.default =


	new TablesStore();

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.Sort = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _react = __webpack_require__(1);var _react2 = _interopRequireDefault(_react);
	var _reactAddonsUpdate = __webpack_require__(216);var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	function moveInArray(arr, old_index, new_index) {
	    if (new_index >= arr.length) {
	        var k = new_index - arr.length;
	        while (k-- + 1) {
	            arr.push(undefined);
	        }
	    }
	    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);
	    return arr;
	};var

	Sort = exports.Sort = function (_React$Component) {_inherits(Sort, _React$Component);
	    function Sort(props) {_classCallCheck(this, Sort);var _this = _possibleConstructorReturn(this, (Sort.__proto__ || Object.getPrototypeOf(Sort)).call(this,
	        props));
	        _this.state = {
	            items: props.children };return _this;

	    }_createClass(Sort, [{ key: 'componentWillReceiveProps', value: function componentWillReceiveProps(
	        props) {
	            this.setState((0, _reactAddonsUpdate2.default)(this.state, { items: { $set: props.children } }));
	        } }, { key: 'moveItem', value: function moveItem(
	        index, new_index) {var _this2 = this;var
	            items = this.state.items;
	            items = moveInArray(items, index, new_index);
	            this.setState((0, _reactAddonsUpdate2.default)(this.state, { items: { $set: items } }), function () {
	                return _this2.props.onSort(items);
	            });
	        } }, { key: 'render', value: function render()
	        {var _this3 = this;var
	            items = this.state.items;
	            return (
	                _react2.default.createElement('div', null,
	                    items.map(function (item, key) {
	                        return (
	                            _react2.default.createElement('div', { key: key, className: 'sort_block' },
	                                !_this3.props.left ?
	                                _react2.default.createElement('div', { className: 'sort_item' },
	                                    item) :
	                                '',

	                                _react2.default.createElement('div', { className: 'sort_icons' },
	                                    key !== 0 ?
	                                    _react2.default.createElement('i', {
	                                        className: 'glyphicon glyphicon-triangle-top',
	                                        'aria-hidden': 'true',
	                                        onClick: function onClick() {_this3.moveItem(key, key - 1);} }) : '',
	                                    key + 1 !== _this3.props.children.length ?
	                                    _react2.default.createElement('i', {
	                                        className: 'glyphicon glyphicon-triangle-bottom',
	                                        'aria-hidden': 'true',
	                                        onClick: function onClick() {_this3.moveItem(key, key + 1);} }) : ''),

	                                _this3.props.left ?
	                                _react2.default.createElement('div', { className: 'sort_item' },
	                                    item) :
	                                ''));



	                    })));


	        } }]);return Sort;}(_react2.default.Component);

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.AccessableComponent = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _class;var _react = __webpack_require__(1);var React = _interopRequireWildcard(_react);
	var _reactDom = __webpack_require__(158);var ReactDOM = _interopRequireWildcard(_reactDom);
	var _jquery = __webpack_require__(214);var _jquery2 = _interopRequireDefault(_jquery);
	var _reactAddonsUpdate = __webpack_require__(216);var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);
	var _mobxReact = __webpack_require__(218);
	var _modal = __webpack_require__(241);
	var _tablesStore = __webpack_require__(261);
	var _reactRouter = __webpack_require__(159);
	var _sort = __webpack_require__(262);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var


	AccessableComponent = exports.AccessableComponent = (0, _mobxReact.observer)(_class = function (_React$Component) {_inherits(AccessableComponent, _React$Component);function AccessableComponent() {_classCallCheck(this, AccessableComponent);return _possibleConstructorReturn(this, (AccessableComponent.__proto__ || Object.getPrototypeOf(AccessableComponent)).apply(this, arguments));}_createClass(AccessableComponent, [{ key: 'access', value: function access(
	        usersStore, script) {
	            if (script && usersStore) {
	                var access = void 0;
	                var script_access = script.accesses.find(function (access) {return access.user.id === usersStore.session_user.id;});
	                if (usersStore.session_user.id === script.owner.id) {
	                    access = { edit: true };
	                } else if (script_access) {
	                    access = script_access;
	                }
	                return access;
	            }
	            return false;
	        } }]);return AccessableComponent;}(React.Component)) || _class;

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.TableShare = exports.TableEdit = exports.Table = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _class, _class2, _class3;var _react = __webpack_require__(1);var React = _interopRequireWildcard(_react);
	var _reactDom = __webpack_require__(158);var ReactDOM = _interopRequireWildcard(_reactDom);
	var _jquery = __webpack_require__(214);var _jquery2 = _interopRequireDefault(_jquery);
	var _reactAddonsUpdate = __webpack_require__(216);var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);
	var _mobxReact = __webpack_require__(218);
	var _modal = __webpack_require__(241);
	var _tablesStore = __webpack_require__(261);
	var _editor = __webpack_require__(265);
	var _reactRouter = __webpack_require__(159);
	var _clipboard = __webpack_require__(425);var _clipboard2 = _interopRequireDefault(_clipboard);
	var _draftJs = __webpack_require__(266);
	var _draftJsExportHtml = __webpack_require__(406);
	var _sort = __webpack_require__(262);
	var _access = __webpack_require__(263);
	var _confirm = __webpack_require__(254);var _confirm2 = _interopRequireDefault(_confirm);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var



	Table = exports.Table = (0, _mobxReact.observer)(_class = function (_AccessableComponent) {_inherits(Table, _AccessableComponent);
	    function Table(props) {_classCallCheck(this, Table);var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this,
	        props));

	        _this.state = {
	            key: null };return _this;

	    }_createClass(Table, [{ key: 'componentWillMount', value: function componentWillMount()
	        {var
	            tablesStore = this.props.tablesStore;
	            tablesStore.pullTables(this.props.params.script);
	        } }, { key: 'componentWillReceiveProps', value: function componentWillReceiveProps(
	        props) {var
	            tablesStore = props.tablesStore;
	            tablesStore.pullTables(props.params.script);
	        } }, { key: 'componentDidMount', value: function componentDidMount()
	        {var
	            tablesStore = this.props.tablesStore;
	            new _clipboard2.default('.copy_icon', {
	                text: function text(trigger) {
	                    if (tablesStore.pressed_key === 17) {
	                        return trigger.getAttribute('data-link');
	                    } else {
	                        return '';
	                    }
	                } });

	            (0, _jquery2.default)(document.body).on('keydown', this.handleKeyDown.bind(this));
	            (0, _jquery2.default)(document.body).on('keyup', this.handleKeyUp.bind(this));
	        } }, { key: 'componentWillUnmount', value: function componentWillUnmount()

	        {
	            (0, _jquery2.default)(document.body).off('keydown', this.handleKeyDown.bind(this));
	            (0, _jquery2.default)(document.body).off('keyup', this.handleKeyUp.bind(this));
	        } }, { key: 'handleKeyDown', value: function handleKeyDown(

	        e) {var
	            tablesStore = this.props.tablesStore;
	            if (e.keyCode === 17) {
	                tablesStore.pressed_key = e.keyCode;
	            }
	        } }, { key: 'handleKeyUp', value: function handleKeyUp(

	        e) {var
	            tablesStore = this.props.tablesStore;
	            tablesStore.pressed_key = null;
	        } }, { key: 'componentDidUpdate', value: function componentDidUpdate()

	        {
	            var content_height = screen.height - 200;
	            var scroll_links = [].slice.call(document.getElementsByClassName('scroll_links'));
	            scroll_links.map(function (el) {
	                (0, _jquery2.default)(el).css('min-height', content_height + 'px');
	                (0, _jquery2.default)(el).css('max-height', content_height + 'px');
	            });
	        } }, { key: 'updateTableLinksColl', value: function updateTableLinksColl(

	        coll) {var
	            tablesStore = this.props.tablesStore;
	            _jquery2.default.ajax({
	                method: 'PUT',
	                url: document.body.getAttribute('data-colls-url'),
	                data: JSON.stringify(coll),
	                success: function success(res) {
	                    tablesStore.tables = res.tables;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'createLinkCategory', value: function createLinkCategory(

	        coll, hidden) {var
	            tablesStore = this.props.tablesStore;
	            _jquery2.default.ajax({
	                method: 'POST',
	                url: document.body.getAttribute('data-link-categories-url'),
	                data: JSON.stringify({ name: 'Пустой раздел', table: coll.id, hidden: hidden }),
	                success: function success(res) {
	                    tablesStore.tables = res.tables;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'deleteLinkCategory', value: function deleteLinkCategory(

	        category) {var _this2 = this;var
	            tablesStore = this.props.tablesStore;
	            (0, _confirm2.default)("Вы действительно хотите удалить категорию: " + category.name).then(
	            function (result) {
	                _jquery2.default.ajax({
	                    method: 'DELETE',
	                    url: document.body.getAttribute('data-link-categories-url'),
	                    data: JSON.stringify({ category: category.id, table: _this2.props.params.table }),
	                    success: function success(res) {
	                        tablesStore.tables = res.tables;
	                    },
	                    error: function error(res) {
	                        console.log(res);
	                    } });

	            },
	            function (result) {
	                console.log('cancel called');
	            });

	        } }, { key: 'updateLinkCategory', value: function updateLinkCategory(

	        category) {var
	            tablesStore = this.props.tablesStore;
	            _jquery2.default.ajax({
	                method: 'PUT',
	                url: document.body.getAttribute('data-link-categories-url'),
	                data: JSON.stringify(category),
	                success: function success(res) {
	                    tablesStore.tables = res.tables;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'createLink', value: function createLink(

	        category) {var
	            tablesStore = this.props.tablesStore;
	            _jquery2.default.ajax({
	                method: 'POST',
	                url: document.body.getAttribute('data-links-url'),
	                data: JSON.stringify({ name: 'Ссылка', category: category.id, text: 'Текст ссылки' }),
	                success: function success(res) {
	                    tablesStore.tables = res.tables;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'deleteLink', value: function deleteLink(

	        link) {var _this3 = this;var
	            tablesStore = this.props.tablesStore;
	            (0, _confirm2.default)("Вы действительно хотите удалить ссылку: " + link.name).then(
	            function (result) {
	                _jquery2.default.ajax({
	                    method: 'DELETE',
	                    url: document.body.getAttribute('data-links-url'),
	                    data: JSON.stringify({ link: link.id, table: _this3.props.params.table }),
	                    success: function success(res) {
	                        tablesStore.tables = res.tables;
	                    },
	                    error: function error(res) {
	                        console.log(res);
	                    } });

	            },
	            function (result) {
	                console.log('cancel called');
	            });

	        } }, { key: 'updateLink', value: function updateLink(

	        link) {var
	            tablesStore = this.props.tablesStore;
	            _jquery2.default.ajax({
	                method: 'PUT',
	                url: document.body.getAttribute('data-links-url'),
	                data: JSON.stringify(link),
	                success: function success(res) {
	                    tablesStore.tables = res.tables;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'sortedColls', value: function sortedColls()

	        {var
	            tablesStore = this.props.tablesStore;
	            var table = tablesStore.table(this.props.params.table);
	            if (table) {
	                var sorted_colls = [];
	                sorted_colls.push({ position: table.text_coll_position, text: true });
	                table.colls.map(function (coll) {
	                    sorted_colls.push({ coll: coll, position: coll.position, text: false });
	                });
	                return sorted_colls.sort(
	                function (a, b) {
	                    if (a.position > b.position) {
	                        return 1;
	                    }
	                    if (a.position < b.position) {
	                        return -1;
	                    }
	                    return 0;
	                });

	            }
	        } }, { key: 'copyLink', value: function copyLink(

	        link) {
	            return (
	                '/#/tables/' + this.props.params.script +
	                '/table/' + this.props.params.table +
	                '/link/' + link.id +
	                '/share/');

	        } }, { key: 'onCategorySort', value: function onCategorySort(

	        items) {
	            items.map(function (item, key) {
	                item.props.category.order = key;
	            });
	            return this.updateTableLinksColl(items[0].props.coll);
	        } }, { key: 'onLinkSort', value: function onLinkSort(
	        items) {
	            items.map(function (item, key) {
	                item.props.link.order = key;
	            });
	            return this.updateLinkCategory(items[0].props.category);
	        } }]);return Table;}(_access.AccessableComponent)) || _class;var



	TableEdit = exports.TableEdit = (0, _mobxReact.observer)(_class2 = function (_Table) {_inherits(TableEdit, _Table);function TableEdit() {_classCallCheck(this, TableEdit);return _possibleConstructorReturn(this, (TableEdit.__proto__ || Object.getPrototypeOf(TableEdit)).apply(this, arguments));}_createClass(TableEdit, [{ key: 'render', value: function render()
	        {var _this5 = this;var _props =
	            this.props,projectsStore = _props.projectsStore,scriptsStore = _props.scriptsStore,tablesStore = _props.tablesStore,modalStore = _props.modalStore,usersStore = _props.usersStore;
	            var table = tablesStore.table(this.props.params.table);
	            var active_link = tablesStore.link(this.props.params.table, this.props.params.link);
	            var sorted_colls = this.sortedColls();
	            var coll_name, coll_size;

	            if (usersStore.session_user) {
	                var script = scriptsStore.script(this.props.params.script);
	                var access = this.access(usersStore, script);
	                if (table && access.edit) {
	                    return (
	                        React.createElement('div', { className: 'scrollable_panel' },
	                            React.createElement('div', { className: 'scroll_block' },
	                                sorted_colls.map(function (coll, key) {
	                                    if (coll.text) {
	                                        return (
	                                            React.createElement('div', { className: 'scroll_links', key: key, style: { width: table.text_coll_size + '%' } },
	                                                active_link ?
	                                                React.createElement('div', null,
	                                                    React.createElement('div', { className: 'row' },
	                                                        React.createElement('div', { className: 'col-md-6' },
	                                                            React.createElement('h4', { className: 'table_header_text' }, active_link.name)),

	                                                        React.createElement('div', { className: 'col-md-4 pull-right' },
	                                                            React.createElement('button', { className: 'btn btn-success', onClick: function onClick() {_this5.updateLink(active_link);} }, '\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C'))),


	                                                    React.createElement('div', { className: 'link_text_editor' },
	                                                        React.createElement(_editor.CustomEditor, { object: active_link, value: active_link.text, onChange: function onChange(value) {
	                                                                active_link.text = value;
	                                                                _this5.updateLink(active_link);
	                                                            } }))) :



	                                                ''));



	                                    } else if (!coll.text) {
	                                        coll = coll.coll;
	                                        return (
	                                            React.createElement('div', { className: 'scroll_links', key: key, style: { width: coll.size + '%' } },
	                                                React.createElement('div', { className: 'row' },
	                                                    React.createElement('div', { className: 'col-md-1' },
	                                                        React.createElement('i', { className: 'icon add_icon glyphicon glyphicon-plus', onClick: function onClick() {_this5.createLinkCategory(coll, false);} })),

	                                                    React.createElement('div', { className: 'col-md-1' },
	                                                        React.createElement('i', { className: 'icon red_icon glyphicon glyphicon-plus', onClick: function onClick() {_this5.createLinkCategory(coll, true);} }))),


	                                                React.createElement(_sort.Sort, { onSort: _this5.onCategorySort.bind(_this5), left: true, child: true },
	                                                    coll.categories.map(function (category, key) {
	                                                        return (
	                                                            React.createElement('div', { key: key, category: category, coll: coll, className: category.hidden ? 'hidden_links' : '' },
	                                                                React.createElement('div', { className: 'row' },
	                                                                    React.createElement('div', { className: 'col-md-9' },
	                                                                        React.createElement('h4', { className: 'table_header_text' },
	                                                                            React.createElement(EditableText, {
	                                                                                text: category.name,
	                                                                                field: 'name',
	                                                                                submitHandler: function submitHandler(category) {return _this5.updateLinkCategory(category);},
	                                                                                object: category,
	                                                                                settings: {
	                                                                                    placeholder: 'Имя категории',
	                                                                                    name: 'name' } }))),




	                                                                    React.createElement('div', { className: 'col-md-1' },
	                                                                        React.createElement('i', { className: 'icon add_icon icon_vertical_centre glyphicon glyphicon-plus', onClick: function onClick() {_this5.createLink(category);} })),

	                                                                    React.createElement('div', { className: 'col-md-1' },
	                                                                        React.createElement('i', { className: 'glyphicon glyphicon-remove icon icon_vertical_centre red_icon', 'aria-hidden': 'true', onClick: function onClick() {_this5.deleteLinkCategory(category);} }))),


	                                                                React.createElement(_sort.Sort, { onSort: _this5.onLinkSort.bind(_this5), left: true },
	                                                                    category.links.map(function (link, key) {
	                                                                        return (
	                                                                            React.createElement('div', { key: key, category: category, link: link },
	                                                                                React.createElement('div', { className: 'row' },
	                                                                                    React.createElement('div', { className: 'col-md-9 link_name' },
	                                                                                        React.createElement(EditableText, {
	                                                                                            text: link.name,
	                                                                                            field: 'name',
	                                                                                            onClick: function onClick(link, e) {
	                                                                                                if (!tablesStore.pressed_key) {
	                                                                                                    window.location = '/#/' +
	                                                                                                    '/tables/' + _this5.props.params.script +
	                                                                                                    '/table/' + _this5.props.params.table +
	                                                                                                    '/link/' + link.id +
	                                                                                                    '/edit/';
	                                                                                                }
	                                                                                            },
	                                                                                            data_link: _this5.copyLink(link),
	                                                                                            submitHandler: function submitHandler(link) {return _this5.updateLink(link);},
	                                                                                            object: link,
	                                                                                            settings: {
	                                                                                                placeholder: 'Имя ссылки',
	                                                                                                name: 'name' } })),


	                                                                                    React.createElement('div', { className: 'col-md-1' }),
	                                                                                    React.createElement('div', { className: 'col-md-1' },
	                                                                                        React.createElement('span', { className: 'glyphicon glyphicon-remove icon red_icon', 'aria-hidden': 'true', onClick: function onClick() {_this5.deleteLink(link);} })))));




	                                                                    }))));



	                                                    }))));



	                                    }
	                                }))));



	                }
	                return null;
	            }
	            return null;
	        } }]);return TableEdit;}(Table)) || _class2;var



	TableShare = exports.TableShare = (0, _mobxReact.observer)(_class3 = function (_Table2) {_inherits(TableShare, _Table2);function TableShare() {_classCallCheck(this, TableShare);return _possibleConstructorReturn(this, (TableShare.__proto__ || Object.getPrototypeOf(TableShare)).apply(this, arguments));}_createClass(TableShare, [{ key: 'render', value: function render()
	        {var _this7 = this;var _props2 =
	            this.props,projectsStore = _props2.projectsStore,scriptsStore = _props2.scriptsStore,tablesStore = _props2.tablesStore,modalStore = _props2.modalStore,usersStore = _props2.usersStore;
	            var table = tablesStore.table(this.props.params.table);
	            var active_link = tablesStore.link(this.props.params.table, this.props.params.link);
	            var sorted_colls = this.sortedColls();
	            var coll_name, coll_size;
	            if (usersStore.session_user) {
	                var script = scriptsStore.script(this.props.params.script);
	                var access = this.access(usersStore, script);
	                if (table && access) {
	                    return (
	                        React.createElement('div', { className: 'scrollable_panel' },
	                            React.createElement('div', { className: 'scroll_block' },
	                                sorted_colls.map(function (coll, key) {
	                                    if (coll.text) {
	                                        var text = void 0;
	                                        try {
	                                            var options = {
	                                                inlineStyles: {
	                                                    red: { style: _editor.styleMap.red },
	                                                    gray: { style: _editor.styleMap.gray } } };


	                                            text = (0, _draftJsExportHtml.stateToHTML)((0, _draftJs.convertFromRaw)(JSON.parse(active_link.text)), options);
	                                        } catch (err) {
	                                            console.log(err);
	                                            text = '';
	                                        }
	                                        return (
	                                            React.createElement('div', { className: 'scroll_links', key: key, style: { width: table.text_coll_size + '%' } },
	                                                active_link ?
	                                                React.createElement('div', null,
	                                                    React.createElement('h4', { className: 'table_header_text' }, active_link.name),
	                                                    React.createElement('div', { dangerouslySetInnerHTML: { __html: text } })) :


	                                                ''));



	                                    } else if (!coll.text) {
	                                        coll = coll.coll;
	                                        return (
	                                            React.createElement('div', { className: 'scroll_links', key: key, style: { width: coll.size + '%' } },
	                                                coll.categories.map(function (category, key) {
	                                                    if (!category.hidden) {
	                                                        return (
	                                                            React.createElement('div', { key: key, className: category.hidden ? 'hidden_links' : '' },
	                                                                React.createElement('h4', { className: 'table_header_text' },
	                                                                    React.createElement('div', { className: 'row' },
	                                                                        React.createElement('div', { className: 'col-md-12' },
	                                                                            category.name))),



	                                                                category.links.map(function (link, key) {
	                                                                    return (
	                                                                        React.createElement('div', { key: key },
	                                                                            React.createElement('div', { className: 'row' },
	                                                                                React.createElement('div', { className: 'col-md-12 link_name' },
	                                                                                    React.createElement(_reactRouter.Link, { to:
	                                                                                            '/tables/' + _this7.props.params.script +
	                                                                                            '/table/' + _this7.props.params.table +
	                                                                                            '/link/' + link.id +
	                                                                                            '/share/' },
	                                                                                        link.name)))));




	                                                                })));


	                                                    }
	                                                })));


	                                    }
	                                }))));



	                }
	                return null;
	            }
	            return null;
	        } }]);return TableShare;}(Table)) || _class3;var


	EditableText = function (_React$Component) {_inherits(EditableText, _React$Component);
	    function EditableText(props) {_classCallCheck(this, EditableText);var _this8 = _possibleConstructorReturn(this, (EditableText.__proto__ || Object.getPrototypeOf(EditableText)).call(this,
	        props));
	        _this8.state = {
	            text: _this8.props.text,
	            edit: false,
	            key: null };return _this8;

	    }_createClass(EditableText, [{ key: 'componentWillReceiveProps', value: function componentWillReceiveProps(
	        props) {
	            this.setState({ text: props.text, edit: false });
	        } }, { key: 'submitHandler', value: function submitHandler(
	        e) {
	            e.preventDefault();
	            var object = this.props.object;
	            object[this.props.field] = this.state.text;
	            this.setEdit(false);
	            return this.props.submitHandler(object);
	        } }, { key: 'setEdit', value: function setEdit(
	        edit) {
	            this.setState((0, _reactAddonsUpdate2.default)(this.state, { edit: { $set: edit } }));
	        } }, { key: 'render', value: function render()
	        {var _this9 = this;var
	            settings = this.props.settings;
	            return (
	                React.createElement('div', null,
	                    !this.state.edit ?
	                    React.createElement('span', { className: 'copy_icon',
	                            'data-link': this.props.data_link,
	                            onClick: function onClick(e) {
	                                if (_this9.props.onClick) {
	                                    _this9.props.onClick(_this9.props.object, e);
	                                }
	                            },
	                            onDoubleClick: function onDoubleClick() {_this9.setEdit(true);} },
	                        this.props.text) :

	                    React.createElement('form', { onSubmit: this.submitHandler.bind(this) },
	                        React.createElement('input', {
	                            onChange: function onChange(e) {_this9.setState((0, _reactAddonsUpdate2.default)(_this9.state, { text: { $set: e.target.value } }));},
	                            placeholder: settings.placeholder,
	                            name: settings.name,
	                            value: this.state.text,
	                            type: 'text' }))));




	        } }]);return EditableText;}(React.Component);

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.styleMap = exports.CustomEditor = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _class;var _react = __webpack_require__(1);var React = _interopRequireWildcard(_react);
	var _reactDom = __webpack_require__(158);var ReactDOM = _interopRequireWildcard(_reactDom);
	var _jquery = __webpack_require__(214);var _jquery2 = _interopRequireDefault(_jquery);
	var _reactAddonsUpdate = __webpack_require__(216);var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);
	var _mobxReact = __webpack_require__(218);
	var _modal = __webpack_require__(241);
	var _tablesStore = __webpack_require__(261);
	var _draftJs = __webpack_require__(266);
	var _draftJsExportHtml = __webpack_require__(406);
	var _draftJsImportHtml = __webpack_require__(418);
	var _DraftPasteProcessor = __webpack_require__(385);var _DraftPasteProcessor2 = _interopRequireDefault(_DraftPasteProcessor);
	var _immutable = __webpack_require__(414);var _immutable2 = _interopRequireDefault(_immutable);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var


	CustomEditor = exports.CustomEditor = (0, _mobxReact.observer)(_class = function (_React$Component) {_inherits(CustomEditor, _React$Component);
	    function CustomEditor(props) {_classCallCheck(this, CustomEditor);var _this = _possibleConstructorReturn(this, (CustomEditor.__proto__ || Object.getPrototypeOf(CustomEditor)).call(this,
	        props));

	        _this.decorator = new _draftJs.CompositeDecorator([
	        {
	            strategy: findLinkEntities,
	            component: Link }]);



	        _this.state = {
	            object: props.object,
	            editorState: _this.getEditorState(props),
	            showURLInput: false,
	            urlValue: '' };


	        _this.focus = function () {return _this.refs.editor.focus();};
	        _this.onChange = function (editorState) {
	            _this.setState((0, _reactAddonsUpdate2.default)(_this.state, { editorState: { $set: editorState } }), function () {
	                _this.props.onChange(JSON.stringify((0, _draftJs.convertToRaw)(editorState.getCurrentContent())));
	            });
	        };

	        _this.onBlur = function (e) {
	            return _this.onChange(_this.state.editorState);
	        };

	        _this.handleKeyCommand = function (command) {return _this._handleKeyCommand(command);};
	        _this.onTab = function (e) {return _this._onTab(e);};
	        _this.toggleBlockType = function (type) {return _this._toggleBlockType(type);};
	        _this.toggleInlineStyle = function (style) {return _this._toggleInlineStyle(style);};
	        _this.promptForLink = _this._promptForLink.bind(_this);
	        _this.onURLChange = function (e) {return _this.setState({ urlValue: e.target.value });};
	        _this.confirmLink = _this._confirmLink.bind(_this);
	        _this.cancelLink = _this._cancelLink.bind(_this);
	        _this.onLinkInputKeyDown = _this._onLinkInputKeyDown.bind(_this);
	        _this.removeLink = _this._removeLink.bind(_this);
	        _this.toggleColor = function (toggledColor) {return _this._toggleColor(toggledColor);};return _this;
	    }_createClass(CustomEditor, [{ key: 'getEditorState', value: function getEditorState(

	        props) {
	            var editorState = void 0;
	            if (props.value) {
	                try {
	                    editorState = _draftJs.EditorState.createWithContent((0, _draftJs.convertFromRaw)(JSON.parse(props.value)), this.decorator);
	                    editorState = _draftJs.EditorState.moveFocusToEnd(editorState);
	                } catch (err) {
	                    console.log(err);
	                    editorState = _draftJs.EditorState.createEmpty(this.decorator);
	                }
	            } else {
	                editorState = _draftJs.EditorState.createEmpty(this.decorator);
	            }
	            return editorState;
	        } }, { key: 'componentWillReceiveProps', value: function componentWillReceiveProps(

	        props) {var _this2 = this;
	            if (this.state.object.id !== props.object.id) {
	                this.setState((0, _reactAddonsUpdate2.default)(this.state, { object: { $set: props.object } }), function () {
	                    _this2.onChange(_this2.getEditorState(props));
	                });
	            }
	        } }, { key: '_handleKeyCommand', value: function _handleKeyCommand(

	        command) {var
	            editorState = this.state.editorState;
	            var newState = _draftJs.RichUtils.handleKeyCommand(editorState, command);
	            if (newState) {
	                this.onChange(newState);
	                return true;
	            }
	            return false;
	        } }, { key: '_onTab', value: function _onTab(

	        e) {
	            var maxDepth = 4;
	            this.onChange(_draftJs.RichUtils.onTab(e, this.state.editorState, maxDepth));
	        } }, { key: '_toggleBlockType', value: function _toggleBlockType(

	        blockType) {
	            this.onChange(_draftJs.RichUtils.toggleBlockType(
	            this.state.editorState,
	            blockType));


	        } }, { key: '_toggleInlineStyle', value: function _toggleInlineStyle(

	        inlineStyle) {
	            this.onChange(_draftJs.RichUtils.toggleInlineStyle(
	            this.state.editorState,
	            inlineStyle));


	        } }, { key: '_promptForLink', value: function _promptForLink(

	        e) {var _this3 = this;
	            e.preventDefault();var
	            editorState = this.state.editorState;
	            var selection = editorState.getSelection();
	            if (!selection.isCollapsed()) {
	                this.setState((0, _reactAddonsUpdate2.default)(this.state, { showURLInput: { $set: true }, urlValue: { $set: '' } }), function () {
	                    setTimeout(function () {return _this3.refs.url.focus();}, 0);
	                });
	            }
	        } }, { key: '_confirmLink', value: function _confirmLink(

	        e) {var _this4 = this;
	            e.preventDefault();var _state =
	            this.state,editorState = _state.editorState,urlValue = _state.urlValue;
	            var contentState = editorState.getCurrentContent();
	            var entityKey = _draftJs.Entity.create('LINK', 'MUTABLE', { url: urlValue });
	            var contentStateWithEntity = _draftJs.Modifier.applyEntity(
	            contentState,
	            editorState.getSelection(),
	            entityKey);

	            var newEditorState = _draftJs.EditorState.push(editorState, contentStateWithEntity, entityKey);
	            this.setState((0, _reactAddonsUpdate2.default)(this.state, {
	                editorState: { $set: _draftJs.RichUtils.toggleLink(
	                    newEditorState,
	                    newEditorState.getSelection(),
	                    entityKey) },

	                showURLInput: { $set: false },
	                urlValue: { $set: '' } }),
	            function () {
	                setTimeout(function () {return _this4.refs.editor.focus();}, 0);
	            });
	        } }, { key: '_cancelLink', value: function _cancelLink(

	        e) {
	            e.preventDefault();
	            this.setState((0, _reactAddonsUpdate2.default)(this.state, {
	                showURLInput: { $set: false },
	                urlValue: { $set: '' } }));

	        } }, { key: '_onLinkInputKeyDown', value: function _onLinkInputKeyDown(

	        e) {
	            if (e.which === 13) {
	                this._confirmLink(e);
	            }
	        } }, { key: '_removeLink', value: function _removeLink(

	        e) {
	            e.preventDefault();var
	            editorState = this.state.editorState;
	            var selection = editorState.getSelection();
	            if (!selection.isCollapsed()) {
	                this.setState((0, _reactAddonsUpdate2.default)(this.state, {
	                    editorState: { $set: _draftJs.RichUtils.toggleLink(editorState, selection, null) } }));

	            }
	        } }, { key: '_toggleColor', value: function _toggleColor(

	        toggledColor) {var
	            editorState = this.state.editorState;
	            var selection = editorState.getSelection();

	            // Let's just allow one color at a time. Turn off all active colors.
	            var nextContentState = Object.keys(styleMap).reduce(function (contentState, color) {
	                return _draftJs.Modifier.removeInlineStyle(contentState, selection, color);
	            }, editorState.getCurrentContent());

	            var nextEditorState = _draftJs.EditorState.push(
	            editorState,
	            nextContentState,
	            'change-inline-style');


	            var currentStyle = editorState.getCurrentInlineStyle();

	            // Unset style override for current color.
	            if (selection.isCollapsed()) {
	                nextEditorState = currentStyle.reduce(function (state, color) {
	                    return _draftJs.RichUtils.toggleInlineStyle(state, color);
	                }, nextEditorState);
	            }

	            // If the color is being toggled on, apply it.
	            if (!currentStyle.has(toggledColor)) {
	                nextEditorState = _draftJs.RichUtils.toggleInlineStyle(
	                nextEditorState,
	                toggledColor);

	            }

	            this.onChange(nextEditorState);
	        } }, { key: 'render', value: function render()

	        {var
	            editorState = this.state.editorState;
	            // If the user changes block type before entering any text, we can
	            // either style the placeholder or hide it. Let's just hide it now.
	            var className = 'RichEditor-editor';
	            var contentState = editorState.getCurrentContent();
	            if (!contentState.hasText()) {
	                if (contentState.getBlockMap().first().getType() !== 'unstyled') {
	                    className += ' RichEditor-hidePlaceholder';
	                }
	            }

	            var urlInput = void 0;
	            if (this.state.showURLInput) {
	                urlInput =
	                React.createElement('div', { style: styles.urlInputContainer },
	                    React.createElement('input', {
	                        onChange: this.onURLChange,
	                        ref: 'url',
	                        style: styles.urlInput,
	                        type: 'text',
	                        value: this.state.urlValue,
	                        onKeyDown: this.onLinkInputKeyDown }),
	                    React.createElement('button', { onMouseDown: this.confirmLink }, '\u041F\u043E\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044C'),
	                    React.createElement('button', { onMouseDown: this.cancelLink }, '\u041E\u0442\u043C\u0435\u043D\u0430'));

	            }

	            return (
	                React.createElement('div', { className: 'RichEditor-root' },
	                    React.createElement('div', { className: 'row editor_tools' },
	                        React.createElement('div', { className: 'col-md-12' },
	                            React.createElement('div', { className: 'btn-toolbar', role: 'toolbar', 'aria-label': '...' },
	                                React.createElement('div', { className: 'btn-group', role: 'group', 'aria-label': '...' },
	                                    React.createElement(ColorControls, {
	                                        editorState: editorState,
	                                        onToggle: this.toggleColor })),

	                                React.createElement('div', { className: 'btn-group', role: 'group', 'aria-label': '...' },
	                                    React.createElement(InlineStyleControls, {
	                                        editorState: editorState,
	                                        onToggle: this.toggleInlineStyle })),

	                                React.createElement('div', { className: 'btn-group', role: 'group', 'aria-label': '...' },
	                                    React.createElement(BlockStyleControls, {
	                                        editorState: editorState,
	                                        onToggle: this.toggleBlockType })),

	                                React.createElement('div', { className: 'btn-group', role: 'group', 'aria-label': '...' },
	                                    React.createElement('button', { onMouseDown: this.promptForLink, style: { marginRight: 10 }, className: 'btn btn-default' },
	                                        React.createElement('i', { className: 'glyphicon glyphicon-link' })),

	                                    React.createElement('button', { onMouseDown: this.removeLink, className: 'btn btn-default strikethrough' },
	                                        React.createElement('strike', null,
	                                            React.createElement('i', { className: 'glyphicon glyphicon-link' })))))),





	                        React.createElement('div', { className: 'col-md-12' },
	                            urlInput)),



	                    React.createElement('div', { className: className, onClick: this.focus },
	                        React.createElement(_draftJs.Editor, {
	                            blockStyleFn: getBlockStyle,
	                            customStyleMap: styleMap,
	                            blockRenderMap: blockRenderMap,
	                            editorState: editorState,
	                            handleKeyCommand: this.handleKeyCommand,
	                            onChange: this.onChange,
	                            onTab: this.onTab,
	                            onBlur: this.onBlur,
	                            placeholder: 'Tell a story...',
	                            ref: 'editor',
	                            spellCheck: true }))));








	        } }]);return CustomEditor;}(React.Component)) || _class;


	var styleMap = exports.styleMap = {
	    red: { color: 'rgba(255, 0, 0, 1.0)' },
	    gray: { color: 'rgba(160, 160, 160, 1.0)' } };


	var COLORS = [
	{ label: 'Красный', style: 'red', icon: 'glyphicon glyphicon-stop' },
	{ label: 'Серый', style: 'gray', icon: 'glyphicon glyphicon-stop' }];


	var ColorControls = function ColorControls(props) {
	    var currentStyle = props.editorState.getCurrentInlineStyle();
	    return (
	        React.createElement('div', null,
	            COLORS.map(function (type, key) {return (
	                    React.createElement(StyleButton, {
	                        key: key,
	                        active: currentStyle.has(type.style),
	                        label: type.label,
	                        icon: type.icon,
	                        color: styleMap[type.style].color,
	                        onToggle: props.onToggle,
	                        style: type.style }));})));



	};

	function getBlockStyle(block) {
	    switch (block.getType()) {
	        case 'center':return 'RichEditor-align-center';
	        case 'right':return 'RichEditor-align-right';
	        case 'left':return 'RichEditor-align-left';
	        case 'justify':return 'RichEditor-align-justify';
	        default:return null;}

	}var

	StyleButton = function (_React$Component2) {_inherits(StyleButton, _React$Component2);
	    function StyleButton(props) {_classCallCheck(this, StyleButton);var _this5 = _possibleConstructorReturn(this, (StyleButton.__proto__ || Object.getPrototypeOf(StyleButton)).call(this,
	        props));

	        _this5.onToggle = function (e) {
	            e.preventDefault();
	            _this5.props.onToggle(_this5.props.style);
	        };return _this5;
	    }_createClass(StyleButton, [{ key: 'render', value: function render()

	        {
	            var className = 'RichEditor-styleButton';
	            if (this.props.active) {
	                className += ' RichEditor-activeButton';
	            }

	            return (
	                React.createElement('button', { onMouseDown: this.onToggle, style: { marginRight: 10, backgroundColor: this.props.color }, className:
	                        'btn btn-default ' + (
	                        this.props.color ? 'colored_button ' : '') + (
	                        this.props.active ? 'active' : '') },

	                    this.props.icon ?
	                    this.props.color ?
	                    React.createElement('i', { className: this.props.icon, style: { color: this.props.color }, 'aria-hidden': 'true' }) :

	                    React.createElement('i', { className: this.props.icon, 'aria-hidden': 'true' }) :

	                    this.props.label));


	        } }]);return StyleButton;}(React.Component);


	var blockRenderMap = _immutable2.default.Map({
	    'center': {
	        element: 'div' },

	    'left': {
	        element: 'div' },

	    'right': {
	        element: 'div' },

	    'justify': {
	        element: 'div' },

	    unstyled: {
	        element: 'span' } });




	var BLOCK_TYPES = [
	{ label: 'Left', style: 'left', icon: 'glyphicon glyphicon-align-left' },
	{ label: 'Justify', style: 'justify', icon: 'glyphicon glyphicon-align-justify' }];




	var BlockStyleControls = function BlockStyleControls(props) {var
	    editorState = props.editorState;
	    var selection = editorState.getSelection();
	    var blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();

	    return (
	        React.createElement('div', null,
	            BLOCK_TYPES.map(function (type) {return (
	                    React.createElement(StyleButton, {
	                        key: type.label,
	                        active: type.style === blockType,
	                        label: type.label,
	                        icon: type.icon,
	                        onToggle: props.onToggle,
	                        style: type.style }));})));



	};

	var INLINE_STYLES = [
	{ label: 'Жирный', style: 'BOLD', icon: 'glyphicon glyphicon-bold' },
	{ label: 'Курсив', style: 'ITALIC', icon: 'glyphicon glyphicon-italic' },
	{ label: 'Подчеркивание', style: 'UNDERLINE', icon: 'glyphicon glyphicon-text-color' }];


	var InlineStyleControls = function InlineStyleControls(props) {
	    var currentStyle = props.editorState.getCurrentInlineStyle();
	    return (
	        React.createElement('div', null,
	            INLINE_STYLES.map(function (type) {return (
	                    React.createElement(StyleButton, {
	                        key: type.label,
	                        active: currentStyle.has(type.style),
	                        label: type.label,
	                        icon: type.icon,
	                        onToggle: props.onToggle,
	                        style: type.style }));})));



	};


	function findLinkEntities(contentBlock, callback) {
	    contentBlock.findEntityRanges(function (character) {
	        var entityKey = character.getEntity();
	        return (
	            entityKey !== null
	            //&& contentState.getEntity(entityKey).getType() === 'LINK'
	        );
	    },
	    callback);

	}

	var Link = function Link(props) {var
	    url = props.decoratedText.url;
	    return (
	        React.createElement('a', { href: url, style: styles.link }, props.children));

	};

	var styles = {
	    root: {
	        fontFamily: '\'Georgia\', serif',
	        fontSize: 14,
	        padding: 20,
	        width: 600 },

	    editor: {
	        borderTop: '1px solid #ddd',
	        cursor: 'text',
	        fontSize: 16,
	        marginTop: 20,
	        minHeight: 400,
	        paddingTop: 20,
	        border: '1px solid #ccc',
	        padding: 10 },

	    styleButton: {
	        color: '#999',
	        cursor: 'pointer',
	        marginRight: 16,
	        padding: '2px 0' },

	    buttons: {
	        marginBottom: 10 },

	    urlInputContainer: {
	        marginBottom: 10,
	        marginTop: 10 },

	    urlInput: {
	        fontFamily: '\'Georgia\', serif',
	        marginRight: 10,
	        padding: 3 },

	    button: {
	        marginTop: 10,
	        textAlign: 'center' },

	    link: {
	        color: '#3b5998',
	        textDecoration: 'underline' } };

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Draft
	 */

	'use strict';

	var AtomicBlockUtils = __webpack_require__(267);
	var BlockMapBuilder = __webpack_require__(268);
	var CharacterMetadata = __webpack_require__(270);
	var CompositeDraftDecorator = __webpack_require__(304);
	var ContentBlock = __webpack_require__(271);
	var ContentState = __webpack_require__(296);
	var DefaultDraftBlockRenderMap = __webpack_require__(305);
	var DefaultDraftInlineStyle = __webpack_require__(307);
	var DraftEditor = __webpack_require__(308);
	var DraftEditorBlock = __webpack_require__(314);
	var DraftModifier = __webpack_require__(273);
	var DraftEntity = __webpack_require__(278);
	var DraftEntityInstance = __webpack_require__(280);
	var EditorState = __webpack_require__(293);
	var KeyBindingUtil = __webpack_require__(363);
	var RichTextEditorUtil = __webpack_require__(394);
	var SelectionState = __webpack_require__(297);

	var convertFromDraftStateToRaw = __webpack_require__(396);
	var convertFromHTMLToContentBlocks = __webpack_require__(386);
	var convertFromRawToDraftState = __webpack_require__(400);
	var generateRandomKey = __webpack_require__(285);
	var getDefaultKeyBinding = __webpack_require__(393);
	var getVisibleSelectionRect = __webpack_require__(404);

	var DraftPublic = {
	  Editor: DraftEditor,
	  EditorBlock: DraftEditorBlock,
	  EditorState: EditorState,

	  CompositeDecorator: CompositeDraftDecorator,
	  Entity: DraftEntity,
	  EntityInstance: DraftEntityInstance,

	  BlockMapBuilder: BlockMapBuilder,
	  CharacterMetadata: CharacterMetadata,
	  ContentBlock: ContentBlock,
	  ContentState: ContentState,
	  SelectionState: SelectionState,

	  AtomicBlockUtils: AtomicBlockUtils,
	  KeyBindingUtil: KeyBindingUtil,
	  Modifier: DraftModifier,
	  RichUtils: RichTextEditorUtil,

	  DefaultDraftBlockRenderMap: DefaultDraftBlockRenderMap,
	  DefaultDraftInlineStyle: DefaultDraftInlineStyle,

	  convertFromHTML: convertFromHTMLToContentBlocks,
	  convertFromRaw: convertFromRawToDraftState,
	  convertToRaw: convertFromDraftStateToRaw,
	  genKey: generateRandomKey,
	  getDefaultKeyBinding: getDefaultKeyBinding,
	  getVisibleSelectionRect: getVisibleSelectionRect };


	module.exports = DraftPublic;

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AtomicBlockUtils
	 * @typechecks
	 * 
	 */

	'use strict';

	var BlockMapBuilder = __webpack_require__(268);
	var CharacterMetadata = __webpack_require__(270);
	var ContentBlock = __webpack_require__(271);
	var DraftModifier = __webpack_require__(273);
	var EditorState = __webpack_require__(293);
	var Immutable = __webpack_require__(269);

	var generateRandomKey = __webpack_require__(285);

	var List = Immutable.List;
	var Repeat = Immutable.Repeat;


	var AtomicBlockUtils = {
	  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {
	    var contentState = editorState.getCurrentContent();
	    var selectionState = editorState.getSelection();

	    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');

	    var targetSelection = afterRemoval.getSelectionAfter();
	    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);
	    var insertionTarget = afterSplit.getSelectionAfter();

	    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');

	    var charData = CharacterMetadata.create({ entity: entityKey });

	    var fragmentArray = [new ContentBlock({
	      key: generateRandomKey(),
	      type: 'atomic',
	      text: character,
	      characterList: List(Repeat(charData, character.length)) }),
	    new ContentBlock({
	      key: generateRandomKey(),
	      type: 'unstyled',
	      text: '',
	      characterList: List() })];


	    var fragment = BlockMapBuilder.createFromArray(fragmentArray);

	    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);

	    var newContent = withAtomicBlock.merge({
	      selectionBefore: selectionState,
	      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true) });


	    return EditorState.push(editorState, newContent, 'insert-fragment');
	  } };


	module.exports = AtomicBlockUtils;

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BlockMapBuilder
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(269);

	var OrderedMap = Immutable.OrderedMap;


	var BlockMapBuilder = {
	  createFromArray: function createFromArray(blocks) {
	    return OrderedMap(blocks.map(function (block) {
	      return [block.getKey(), block];
	    }));
	  } };


	module.exports = BlockMapBuilder;

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/**
	 *  Copyright (c) 2014-2015, Facebook, Inc.
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree. An additional grant
	 *  of patent rights can be found in the PATENTS file in the same directory.
	 */

	(function(global,factory){
	( false?'undefined':_typeof(exports))==='object'&&typeof module!=='undefined'?module.exports=factory():
	 true?!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):
	global.Immutable=factory();
	})(undefined,function(){'use strict';var SLICE$0=Array.prototype.slice;

	function createClass(ctor,superClass){
	if(superClass){
	ctor.prototype=Object.create(superClass.prototype);
	}
	ctor.prototype.constructor=ctor;
	}

	function Iterable(value){
	return isIterable(value)?value:Seq(value);
	}


	createClass(KeyedIterable,Iterable);
	function KeyedIterable(value){
	return isKeyed(value)?value:KeyedSeq(value);
	}


	createClass(IndexedIterable,Iterable);
	function IndexedIterable(value){
	return isIndexed(value)?value:IndexedSeq(value);
	}


	createClass(SetIterable,Iterable);
	function SetIterable(value){
	return isIterable(value)&&!isAssociative(value)?value:SetSeq(value);
	}



	function isIterable(maybeIterable){
	return!!(maybeIterable&&maybeIterable[IS_ITERABLE_SENTINEL]);
	}

	function isKeyed(maybeKeyed){
	return!!(maybeKeyed&&maybeKeyed[IS_KEYED_SENTINEL]);
	}

	function isIndexed(maybeIndexed){
	return!!(maybeIndexed&&maybeIndexed[IS_INDEXED_SENTINEL]);
	}

	function isAssociative(maybeAssociative){
	return isKeyed(maybeAssociative)||isIndexed(maybeAssociative);
	}

	function isOrdered(maybeOrdered){
	return!!(maybeOrdered&&maybeOrdered[IS_ORDERED_SENTINEL]);
	}

	Iterable.isIterable=isIterable;
	Iterable.isKeyed=isKeyed;
	Iterable.isIndexed=isIndexed;
	Iterable.isAssociative=isAssociative;
	Iterable.isOrdered=isOrdered;

	Iterable.Keyed=KeyedIterable;
	Iterable.Indexed=IndexedIterable;
	Iterable.Set=SetIterable;


	var IS_ITERABLE_SENTINEL='@@__IMMUTABLE_ITERABLE__@@';
	var IS_KEYED_SENTINEL='@@__IMMUTABLE_KEYED__@@';
	var IS_INDEXED_SENTINEL='@@__IMMUTABLE_INDEXED__@@';
	var IS_ORDERED_SENTINEL='@@__IMMUTABLE_ORDERED__@@';

	// Used for setting prototype methods that IE8 chokes on.
	var DELETE='delete';

	// Constants describing the size of trie nodes.
	var SHIFT=5;// Resulted in best performance after ______?
	var SIZE=1<<SHIFT;
	var MASK=SIZE-1;

	// A consistent shared value representing "not set" which equals nothing other
	// than itself, and nothing that could be provided externally.
	var NOT_SET={};

	// Boolean references, Rough equivalent of `bool &`.
	var CHANGE_LENGTH={value:false};
	var DID_ALTER={value:false};

	function MakeRef(ref){
	ref.value=false;
	return ref;
	}

	function SetRef(ref){
	ref&&(ref.value=true);
	}

	// A function which returns a value representing an "owner" for transient writes
	// to tries. The return value will only ever equal itself, and will not equal
	// the return of any subsequent call of this function.
	function OwnerID(){}

	// http://jsperf.com/copy-array-inline
	function arrCopy(arr,offset){
	offset=offset||0;
	var len=Math.max(0,arr.length-offset);
	var newArr=new Array(len);
	for(var ii=0;ii<len;ii++){
	newArr[ii]=arr[ii+offset];
	}
	return newArr;
	}

	function ensureSize(iter){
	if(iter.size===undefined){
	iter.size=iter.__iterate(returnTrue);
	}
	return iter.size;
	}

	function wrapIndex(iter,index){
	// This implements "is array index" which the ECMAString spec defines as:
	//
	//     A String property name P is an array index if and only if
	//     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
	//     to 2^32−1.
	//
	// http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
	if(typeof index!=='number'){
	var uint32Index=index>>>0;// N >>> 0 is shorthand for ToUint32
	if(''+uint32Index!==index||uint32Index===4294967295){
	return NaN;
	}
	index=uint32Index;
	}
	return index<0?ensureSize(iter)+index:index;
	}

	function returnTrue(){
	return true;
	}

	function wholeSlice(begin,end,size){
	return(begin===0||size!==undefined&&begin<=-size)&&(
	end===undefined||size!==undefined&&end>=size);
	}

	function resolveBegin(begin,size){
	return resolveIndex(begin,size,0);
	}

	function resolveEnd(end,size){
	return resolveIndex(end,size,size);
	}

	function resolveIndex(index,size,defaultIndex){
	return index===undefined?
	defaultIndex:
	index<0?
	Math.max(0,size+index):
	size===undefined?
	index:
	Math.min(size,index);
	}

	/* global Symbol */

	var ITERATE_KEYS=0;
	var ITERATE_VALUES=1;
	var ITERATE_ENTRIES=2;

	var REAL_ITERATOR_SYMBOL=typeof Symbol==='function'&&Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL='@@iterator';

	var ITERATOR_SYMBOL=REAL_ITERATOR_SYMBOL||FAUX_ITERATOR_SYMBOL;


	function Iterator(next){
	this.next=next;
	}

	Iterator.prototype.toString=function(){
	return'[Iterator]';
	};


	Iterator.KEYS=ITERATE_KEYS;
	Iterator.VALUES=ITERATE_VALUES;
	Iterator.ENTRIES=ITERATE_ENTRIES;

	Iterator.prototype.inspect=
	Iterator.prototype.toSource=function(){return this.toString();};
	Iterator.prototype[ITERATOR_SYMBOL]=function(){
	return this;
	};


	function iteratorValue(type,k,v,iteratorResult){
	var value=type===0?k:type===1?v:[k,v];
	iteratorResult?iteratorResult.value=value:iteratorResult={
	value:value,done:false};

	return iteratorResult;
	}

	function iteratorDone(){
	return{value:undefined,done:true};
	}

	function hasIterator(maybeIterable){
	return!!getIteratorFn(maybeIterable);
	}

	function isIterator(maybeIterator){
	return maybeIterator&&typeof maybeIterator.next==='function';
	}

	function getIterator(iterable){
	var iteratorFn=getIteratorFn(iterable);
	return iteratorFn&&iteratorFn.call(iterable);
	}

	function getIteratorFn(iterable){
	var iteratorFn=iterable&&(
	REAL_ITERATOR_SYMBOL&&iterable[REAL_ITERATOR_SYMBOL]||
	iterable[FAUX_ITERATOR_SYMBOL]);

	if(typeof iteratorFn==='function'){
	return iteratorFn;
	}
	}

	function isArrayLike(value){
	return value&&typeof value.length==='number';
	}

	createClass(Seq,Iterable);
	function Seq(value){
	return value===null||value===undefined?emptySequence():
	isIterable(value)?value.toSeq():seqFromValue(value);
	}

	Seq.of=function()/*...values*/{
	return Seq(arguments);
	};

	Seq.prototype.toSeq=function(){
	return this;
	};

	Seq.prototype.toString=function(){
	return this.__toString('Seq {','}');
	};

	Seq.prototype.cacheResult=function(){
	if(!this._cache&&this.__iterateUncached){
	this._cache=this.entrySeq().toArray();
	this.size=this._cache.length;
	}
	return this;
	};

	// abstract __iterateUncached(fn, reverse)

	Seq.prototype.__iterate=function(fn,reverse){
	return seqIterate(this,fn,reverse,true);
	};

	// abstract __iteratorUncached(type, reverse)

	Seq.prototype.__iterator=function(type,reverse){
	return seqIterator(this,type,reverse,true);
	};



	createClass(KeyedSeq,Seq);
	function KeyedSeq(value){
	return value===null||value===undefined?
	emptySequence().toKeyedSeq():
	isIterable(value)?
	isKeyed(value)?value.toSeq():value.fromEntrySeq():
	keyedSeqFromValue(value);
	}

	KeyedSeq.prototype.toKeyedSeq=function(){
	return this;
	};



	createClass(IndexedSeq,Seq);
	function IndexedSeq(value){
	return value===null||value===undefined?emptySequence():
	!isIterable(value)?indexedSeqFromValue(value):
	isKeyed(value)?value.entrySeq():value.toIndexedSeq();
	}

	IndexedSeq.of=function()/*...values*/{
	return IndexedSeq(arguments);
	};

	IndexedSeq.prototype.toIndexedSeq=function(){
	return this;
	};

	IndexedSeq.prototype.toString=function(){
	return this.__toString('Seq [',']');
	};

	IndexedSeq.prototype.__iterate=function(fn,reverse){
	return seqIterate(this,fn,reverse,false);
	};

	IndexedSeq.prototype.__iterator=function(type,reverse){
	return seqIterator(this,type,reverse,false);
	};



	createClass(SetSeq,Seq);
	function SetSeq(value){
	return(
	value===null||value===undefined?emptySequence():
	!isIterable(value)?indexedSeqFromValue(value):
	isKeyed(value)?value.entrySeq():value).
	toSetSeq();
	}

	SetSeq.of=function()/*...values*/{
	return SetSeq(arguments);
	};

	SetSeq.prototype.toSetSeq=function(){
	return this;
	};



	Seq.isSeq=isSeq;
	Seq.Keyed=KeyedSeq;
	Seq.Set=SetSeq;
	Seq.Indexed=IndexedSeq;

	var IS_SEQ_SENTINEL='@@__IMMUTABLE_SEQ__@@';

	Seq.prototype[IS_SEQ_SENTINEL]=true;



	createClass(ArraySeq,IndexedSeq);
	function ArraySeq(array){
	this._array=array;
	this.size=array.length;
	}

	ArraySeq.prototype.get=function(index,notSetValue){
	return this.has(index)?this._array[wrapIndex(this,index)]:notSetValue;
	};

	ArraySeq.prototype.__iterate=function(fn,reverse){
	var array=this._array;
	var maxIndex=array.length-1;
	for(var ii=0;ii<=maxIndex;ii++){
	if(fn(array[reverse?maxIndex-ii:ii],ii,this)===false){
	return ii+1;
	}
	}
	return ii;
	};

	ArraySeq.prototype.__iterator=function(type,reverse){
	var array=this._array;
	var maxIndex=array.length-1;
	var ii=0;
	return new Iterator(function()
	{return ii>maxIndex?
	iteratorDone():
	iteratorValue(type,ii,array[reverse?maxIndex-ii++:ii++]);});

	};



	createClass(ObjectSeq,KeyedSeq);
	function ObjectSeq(object){
	var keys=Object.keys(object);
	this._object=object;
	this._keys=keys;
	this.size=keys.length;
	}

	ObjectSeq.prototype.get=function(key,notSetValue){
	if(notSetValue!==undefined&&!this.has(key)){
	return notSetValue;
	}
	return this._object[key];
	};

	ObjectSeq.prototype.has=function(key){
	return this._object.hasOwnProperty(key);
	};

	ObjectSeq.prototype.__iterate=function(fn,reverse){
	var object=this._object;
	var keys=this._keys;
	var maxIndex=keys.length-1;
	for(var ii=0;ii<=maxIndex;ii++){
	var key=keys[reverse?maxIndex-ii:ii];
	if(fn(object[key],key,this)===false){
	return ii+1;
	}
	}
	return ii;
	};

	ObjectSeq.prototype.__iterator=function(type,reverse){
	var object=this._object;
	var keys=this._keys;
	var maxIndex=keys.length-1;
	var ii=0;
	return new Iterator(function(){
	var key=keys[reverse?maxIndex-ii:ii];
	return ii++>maxIndex?
	iteratorDone():
	iteratorValue(type,key,object[key]);
	});
	};

	ObjectSeq.prototype[IS_ORDERED_SENTINEL]=true;


	createClass(IterableSeq,IndexedSeq);
	function IterableSeq(iterable){
	this._iterable=iterable;
	this.size=iterable.length||iterable.size;
	}

	IterableSeq.prototype.__iterateUncached=function(fn,reverse){
	if(reverse){
	return this.cacheResult().__iterate(fn,reverse);
	}
	var iterable=this._iterable;
	var iterator=getIterator(iterable);
	var iterations=0;
	if(isIterator(iterator)){
	var step;
	while(!(step=iterator.next()).done){
	if(fn(step.value,iterations++,this)===false){
	break;
	}
	}
	}
	return iterations;
	};

	IterableSeq.prototype.__iteratorUncached=function(type,reverse){
	if(reverse){
	return this.cacheResult().__iterator(type,reverse);
	}
	var iterable=this._iterable;
	var iterator=getIterator(iterable);
	if(!isIterator(iterator)){
	return new Iterator(iteratorDone);
	}
	var iterations=0;
	return new Iterator(function(){
	var step=iterator.next();
	return step.done?step:iteratorValue(type,iterations++,step.value);
	});
	};



	createClass(IteratorSeq,IndexedSeq);
	function IteratorSeq(iterator){
	this._iterator=iterator;
	this._iteratorCache=[];
	}

	IteratorSeq.prototype.__iterateUncached=function(fn,reverse){
	if(reverse){
	return this.cacheResult().__iterate(fn,reverse);
	}
	var iterator=this._iterator;
	var cache=this._iteratorCache;
	var iterations=0;
	while(iterations<cache.length){
	if(fn(cache[iterations],iterations++,this)===false){
	return iterations;
	}
	}
	var step;
	while(!(step=iterator.next()).done){
	var val=step.value;
	cache[iterations]=val;
	if(fn(val,iterations++,this)===false){
	break;
	}
	}
	return iterations;
	};

	IteratorSeq.prototype.__iteratorUncached=function(type,reverse){
	if(reverse){
	return this.cacheResult().__iterator(type,reverse);
	}
	var iterator=this._iterator;
	var cache=this._iteratorCache;
	var iterations=0;
	return new Iterator(function(){
	if(iterations>=cache.length){
	var step=iterator.next();
	if(step.done){
	return step;
	}
	cache[iterations]=step.value;
	}
	return iteratorValue(type,iterations,cache[iterations++]);
	});
	};




	// # pragma Helper functions

	function isSeq(maybeSeq){
	return!!(maybeSeq&&maybeSeq[IS_SEQ_SENTINEL]);
	}

	var EMPTY_SEQ;

	function emptySequence(){
	return EMPTY_SEQ||(EMPTY_SEQ=new ArraySeq([]));
	}

	function keyedSeqFromValue(value){
	var seq=
	Array.isArray(value)?new ArraySeq(value).fromEntrySeq():
	isIterator(value)?new IteratorSeq(value).fromEntrySeq():
	hasIterator(value)?new IterableSeq(value).fromEntrySeq():
	(typeof value==='undefined'?'undefined':_typeof(value))==='object'?new ObjectSeq(value):
	undefined;
	if(!seq){
	throw new TypeError(
	'Expected Array or iterable object of [k, v] entries, '+
	'or keyed object: '+value);

	}
	return seq;
	}

	function indexedSeqFromValue(value){
	var seq=maybeIndexedSeqFromValue(value);
	if(!seq){
	throw new TypeError(
	'Expected Array or iterable object of values: '+value);

	}
	return seq;
	}

	function seqFromValue(value){
	var seq=maybeIndexedSeqFromValue(value)||
	(typeof value==='undefined'?'undefined':_typeof(value))==='object'&&new ObjectSeq(value);
	if(!seq){
	throw new TypeError(
	'Expected Array or iterable object of values, or keyed object: '+value);

	}
	return seq;
	}

	function maybeIndexedSeqFromValue(value){
	return(
	isArrayLike(value)?new ArraySeq(value):
	isIterator(value)?new IteratorSeq(value):
	hasIterator(value)?new IterableSeq(value):
	undefined);

	}

	function seqIterate(seq,fn,reverse,useKeys){
	var cache=seq._cache;
	if(cache){
	var maxIndex=cache.length-1;
	for(var ii=0;ii<=maxIndex;ii++){
	var entry=cache[reverse?maxIndex-ii:ii];
	if(fn(entry[1],useKeys?entry[0]:ii,seq)===false){
	return ii+1;
	}
	}
	return ii;
	}
	return seq.__iterateUncached(fn,reverse);
	}

	function seqIterator(seq,type,reverse,useKeys){
	var cache=seq._cache;
	if(cache){
	var maxIndex=cache.length-1;
	var ii=0;
	return new Iterator(function(){
	var entry=cache[reverse?maxIndex-ii:ii];
	return ii++>maxIndex?
	iteratorDone():
	iteratorValue(type,useKeys?entry[0]:ii-1,entry[1]);
	});
	}
	return seq.__iteratorUncached(type,reverse);
	}

	function fromJS(json,converter){
	return converter?
	fromJSWith(converter,json,'',{'':json}):
	fromJSDefault(json);
	}

	function fromJSWith(converter,json,key,parentJSON){
	if(Array.isArray(json)){
	return converter.call(parentJSON,key,IndexedSeq(json).map(function(v,k){return fromJSWith(converter,v,k,json);}));
	}
	if(isPlainObj(json)){
	return converter.call(parentJSON,key,KeyedSeq(json).map(function(v,k){return fromJSWith(converter,v,k,json);}));
	}
	return json;
	}

	function fromJSDefault(json){
	if(Array.isArray(json)){
	return IndexedSeq(json).map(fromJSDefault).toList();
	}
	if(isPlainObj(json)){
	return KeyedSeq(json).map(fromJSDefault).toMap();
	}
	return json;
	}

	function isPlainObj(value){
	return value&&(value.constructor===Object||value.constructor===undefined);
	}

	/**
	   * An extension of the "same-value" algorithm as [described for use by ES6 Map
	   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
	   *
	   * NaN is considered the same as NaN, however -0 and 0 are considered the same
	   * value, which is different from the algorithm described by
	   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
	   *
	   * This is extended further to allow Objects to describe the values they
	   * represent, by way of `valueOf` or `equals` (and `hashCode`).
	   *
	   * Note: because of this extension, the key equality of Immutable.Map and the
	   * value equality of Immutable.Set will differ from ES6 Map and Set.
	   *
	   * ### Defining custom values
	   *
	   * The easiest way to describe the value an object represents is by implementing
	   * `valueOf`. For example, `Date` represents a value by returning a unix
	   * timestamp for `valueOf`:
	   *
	   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
	   *     var date2 = new Date(1234567890000);
	   *     date1.valueOf(); // 1234567890000
	   *     assert( date1 !== date2 );
	   *     assert( Immutable.is( date1, date2 ) );
	   *
	   * Note: overriding `valueOf` may have other implications if you use this object
	   * where JavaScript expects a primitive, such as implicit string coercion.
	   *
	   * For more complex types, especially collections, implementing `valueOf` may
	   * not be performant. An alternative is to implement `equals` and `hashCode`.
	   *
	   * `equals` takes another object, presumably of similar type, and returns true
	   * if the it is equal. Equality is symmetrical, so the same result should be
	   * returned if this and the argument are flipped.
	   *
	   *     assert( a.equals(b) === b.equals(a) );
	   *
	   * `hashCode` returns a 32bit integer number representing the object which will
	   * be used to determine how to store the value object in a Map or Set. You must
	   * provide both or neither methods, one must not exist without the other.
	   *
	   * Also, an important relationship between these methods must be upheld: if two
	   * values are equal, they *must* return the same hashCode. If the values are not
	   * equal, they might have the same hashCode; this is called a hash collision,
	   * and while undesirable for performance reasons, it is acceptable.
	   *
	   *     if (a.equals(b)) {
	   *       assert( a.hashCode() === b.hashCode() );
	   *     }
	   *
	   * All Immutable collections implement `equals` and `hashCode`.
	   *
	   */
	function is(valueA,valueB){
	if(valueA===valueB||valueA!==valueA&&valueB!==valueB){
	return true;
	}
	if(!valueA||!valueB){
	return false;
	}
	if(typeof valueA.valueOf==='function'&&
	typeof valueB.valueOf==='function'){
	valueA=valueA.valueOf();
	valueB=valueB.valueOf();
	if(valueA===valueB||valueA!==valueA&&valueB!==valueB){
	return true;
	}
	if(!valueA||!valueB){
	return false;
	}
	}
	if(typeof valueA.equals==='function'&&
	typeof valueB.equals==='function'&&
	valueA.equals(valueB)){
	return true;
	}
	return false;
	}

	function deepEqual(a,b){
	if(a===b){
	return true;
	}

	if(
	!isIterable(b)||
	a.size!==undefined&&b.size!==undefined&&a.size!==b.size||
	a.__hash!==undefined&&b.__hash!==undefined&&a.__hash!==b.__hash||
	isKeyed(a)!==isKeyed(b)||
	isIndexed(a)!==isIndexed(b)||
	isOrdered(a)!==isOrdered(b))
	{
	return false;
	}

	if(a.size===0&&b.size===0){
	return true;
	}

	var notAssociative=!isAssociative(a);

	if(isOrdered(a)){
	var entries=a.entries();
	return b.every(function(v,k){
	var entry=entries.next().value;
	return entry&&is(entry[1],v)&&(notAssociative||is(entry[0],k));
	})&&entries.next().done;
	}

	var flipped=false;

	if(a.size===undefined){
	if(b.size===undefined){
	if(typeof a.cacheResult==='function'){
	a.cacheResult();
	}
	}else{
	flipped=true;
	var _=a;
	a=b;
	b=_;
	}
	}

	var allEqual=true;
	var bSize=b.__iterate(function(v,k){
	if(notAssociative?!a.has(v):
	flipped?!is(v,a.get(k,NOT_SET)):!is(a.get(k,NOT_SET),v)){
	allEqual=false;
	return false;
	}
	});

	return allEqual&&a.size===bSize;
	}

	createClass(Repeat,IndexedSeq);

	function Repeat(value,times){
	if(!(this instanceof Repeat)){
	return new Repeat(value,times);
	}
	this._value=value;
	this.size=times===undefined?Infinity:Math.max(0,times);
	if(this.size===0){
	if(EMPTY_REPEAT){
	return EMPTY_REPEAT;
	}
	EMPTY_REPEAT=this;
	}
	}

	Repeat.prototype.toString=function(){
	if(this.size===0){
	return'Repeat []';
	}
	return'Repeat [ '+this._value+' '+this.size+' times ]';
	};

	Repeat.prototype.get=function(index,notSetValue){
	return this.has(index)?this._value:notSetValue;
	};

	Repeat.prototype.includes=function(searchValue){
	return is(this._value,searchValue);
	};

	Repeat.prototype.slice=function(begin,end){
	var size=this.size;
	return wholeSlice(begin,end,size)?this:
	new Repeat(this._value,resolveEnd(end,size)-resolveBegin(begin,size));
	};

	Repeat.prototype.reverse=function(){
	return this;
	};

	Repeat.prototype.indexOf=function(searchValue){
	if(is(this._value,searchValue)){
	return 0;
	}
	return-1;
	};

	Repeat.prototype.lastIndexOf=function(searchValue){
	if(is(this._value,searchValue)){
	return this.size;
	}
	return-1;
	};

	Repeat.prototype.__iterate=function(fn,reverse){
	for(var ii=0;ii<this.size;ii++){
	if(fn(this._value,ii,this)===false){
	return ii+1;
	}
	}
	return ii;
	};

	Repeat.prototype.__iterator=function(type,reverse){var this$0=this;
	var ii=0;
	return new Iterator(function()
	{return ii<this$0.size?iteratorValue(type,ii++,this$0._value):iteratorDone();});

	};

	Repeat.prototype.equals=function(other){
	return other instanceof Repeat?
	is(this._value,other._value):
	deepEqual(other);
	};


	var EMPTY_REPEAT;

	function invariant(condition,error){
	if(!condition)throw new Error(error);
	}

	createClass(Range,IndexedSeq);

	function Range(start,end,step){
	if(!(this instanceof Range)){
	return new Range(start,end,step);
	}
	invariant(step!==0,'Cannot step a Range by 0');
	start=start||0;
	if(end===undefined){
	end=Infinity;
	}
	step=step===undefined?1:Math.abs(step);
	if(end<start){
	step=-step;
	}
	this._start=start;
	this._end=end;
	this._step=step;
	this.size=Math.max(0,Math.ceil((end-start)/step-1)+1);
	if(this.size===0){
	if(EMPTY_RANGE){
	return EMPTY_RANGE;
	}
	EMPTY_RANGE=this;
	}
	}

	Range.prototype.toString=function(){
	if(this.size===0){
	return'Range []';
	}
	return'Range [ '+
	this._start+'...'+this._end+(
	this._step>1?' by '+this._step:'')+
	' ]';
	};

	Range.prototype.get=function(index,notSetValue){
	return this.has(index)?
	this._start+wrapIndex(this,index)*this._step:
	notSetValue;
	};

	Range.prototype.includes=function(searchValue){
	var possibleIndex=(searchValue-this._start)/this._step;
	return possibleIndex>=0&&
	possibleIndex<this.size&&
	possibleIndex===Math.floor(possibleIndex);
	};

	Range.prototype.slice=function(begin,end){
	if(wholeSlice(begin,end,this.size)){
	return this;
	}
	begin=resolveBegin(begin,this.size);
	end=resolveEnd(end,this.size);
	if(end<=begin){
	return new Range(0,0);
	}
	return new Range(this.get(begin,this._end),this.get(end,this._end),this._step);
	};

	Range.prototype.indexOf=function(searchValue){
	var offsetValue=searchValue-this._start;
	if(offsetValue%this._step===0){
	var index=offsetValue/this._step;
	if(index>=0&&index<this.size){
	return index;
	}
	}
	return-1;
	};

	Range.prototype.lastIndexOf=function(searchValue){
	return this.indexOf(searchValue);
	};

	Range.prototype.__iterate=function(fn,reverse){
	var maxIndex=this.size-1;
	var step=this._step;
	var value=reverse?this._start+maxIndex*step:this._start;
	for(var ii=0;ii<=maxIndex;ii++){
	if(fn(value,ii,this)===false){
	return ii+1;
	}
	value+=reverse?-step:step;
	}
	return ii;
	};

	Range.prototype.__iterator=function(type,reverse){
	var maxIndex=this.size-1;
	var step=this._step;
	var value=reverse?this._start+maxIndex*step:this._start;
	var ii=0;
	return new Iterator(function(){
	var v=value;
	value+=reverse?-step:step;
	return ii>maxIndex?iteratorDone():iteratorValue(type,ii++,v);
	});
	};

	Range.prototype.equals=function(other){
	return other instanceof Range?
	this._start===other._start&&
	this._end===other._end&&
	this._step===other._step:
	deepEqual(this,other);
	};


	var EMPTY_RANGE;

	createClass(Collection,Iterable);
	function Collection(){
	throw TypeError('Abstract');
	}


	createClass(KeyedCollection,Collection);function KeyedCollection(){}

	createClass(IndexedCollection,Collection);function IndexedCollection(){}

	createClass(SetCollection,Collection);function SetCollection(){}


	Collection.Keyed=KeyedCollection;
	Collection.Indexed=IndexedCollection;
	Collection.Set=SetCollection;

	var imul=
	typeof Math.imul==='function'&&Math.imul(0xffffffff,2)===-2?
	Math.imul:
	function imul(a,b){
	a=a|0;// int
	b=b|0;// int
	var c=a&0xffff;
	var d=b&0xffff;
	// Shift by 0 fixes the sign on the high part.
	return c*d+((a>>>16)*d+c*(b>>>16)<<16>>>0)|0;// int
	};

	// v8 has an optimization for storing 31-bit signed numbers.
	// Values which have either 00 or 11 as the high order bits qualify.
	// This function drops the highest order bit in a signed number, maintaining
	// the sign bit.
	function smi(i32){
	return i32>>>1&0x40000000|i32&0xBFFFFFFF;
	}

	function hash(o){
	if(o===false||o===null||o===undefined){
	return 0;
	}
	if(typeof o.valueOf==='function'){
	o=o.valueOf();
	if(o===false||o===null||o===undefined){
	return 0;
	}
	}
	if(o===true){
	return 1;
	}
	var type=typeof o==='undefined'?'undefined':_typeof(o);
	if(type==='number'){
	var h=o|0;
	if(h!==o){
	h^=o*0xFFFFFFFF;
	}
	while(o>0xFFFFFFFF){
	o/=0xFFFFFFFF;
	h^=o;
	}
	return smi(h);
	}
	if(type==='string'){
	return o.length>STRING_HASH_CACHE_MIN_STRLEN?cachedHashString(o):hashString(o);
	}
	if(typeof o.hashCode==='function'){
	return o.hashCode();
	}
	if(type==='object'){
	return hashJSObj(o);
	}
	if(typeof o.toString==='function'){
	return hashString(o.toString());
	}
	throw new Error('Value type '+type+' cannot be hashed.');
	}

	function cachedHashString(string){
	var hash=stringHashCache[string];
	if(hash===undefined){
	hash=hashString(string);
	if(STRING_HASH_CACHE_SIZE===STRING_HASH_CACHE_MAX_SIZE){
	STRING_HASH_CACHE_SIZE=0;
	stringHashCache={};
	}
	STRING_HASH_CACHE_SIZE++;
	stringHashCache[string]=hash;
	}
	return hash;
	}

	// http://jsperf.com/hashing-strings
	function hashString(string){
	// This is the hash from JVM
	// The hash code for a string is computed as
	// s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	// where s[i] is the ith character of the string and n is the length of
	// the string. We "mod" the result to make it between 0 (inclusive) and 2^31
	// (exclusive) by dropping high bits.
	var hash=0;
	for(var ii=0;ii<string.length;ii++){
	hash=31*hash+string.charCodeAt(ii)|0;
	}
	return smi(hash);
	}

	function hashJSObj(obj){
	var hash;
	if(usingWeakMap){
	hash=weakMap.get(obj);
	if(hash!==undefined){
	return hash;
	}
	}

	hash=obj[UID_HASH_KEY];
	if(hash!==undefined){
	return hash;
	}

	if(!canDefineProperty){
	hash=obj.propertyIsEnumerable&&obj.propertyIsEnumerable[UID_HASH_KEY];
	if(hash!==undefined){
	return hash;
	}

	hash=getIENodeHash(obj);
	if(hash!==undefined){
	return hash;
	}
	}

	hash=++objHashUID;
	if(objHashUID&0x40000000){
	objHashUID=0;
	}

	if(usingWeakMap){
	weakMap.set(obj,hash);
	}else if(isExtensible!==undefined&&isExtensible(obj)===false){
	throw new Error('Non-extensible objects are not allowed as keys.');
	}else if(canDefineProperty){
	Object.defineProperty(obj,UID_HASH_KEY,{
	'enumerable':false,
	'configurable':false,
	'writable':false,
	'value':hash});

	}else if(obj.propertyIsEnumerable!==undefined&&
	obj.propertyIsEnumerable===obj.constructor.prototype.propertyIsEnumerable){
	// Since we can't define a non-enumerable property on the object
	// we'll hijack one of the less-used non-enumerable properties to
	// save our hash on it. Since this is a function it will not show up in
	// `JSON.stringify` which is what we want.
	obj.propertyIsEnumerable=function(){
	return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments);
	};
	obj.propertyIsEnumerable[UID_HASH_KEY]=hash;
	}else if(obj.nodeType!==undefined){
	// At this point we couldn't get the IE `uniqueID` to use as a hash
	// and we couldn't use a non-enumerable property to exploit the
	// dontEnum bug so we simply add the `UID_HASH_KEY` on the node
	// itself.
	obj[UID_HASH_KEY]=hash;
	}else{
	throw new Error('Unable to set a non-enumerable property on object.');
	}

	return hash;
	}

	// Get references to ES5 object methods.
	var isExtensible=Object.isExtensible;

	// True if Object.defineProperty works as expected. IE8 fails this test.
	var canDefineProperty=function(){
	try{
	Object.defineProperty({},'@',{});
	return true;
	}catch(e){
	return false;
	}
	}();

	// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
	// and avoid memory leaks from the IE cloneNode bug.
	function getIENodeHash(node){
	if(node&&node.nodeType>0){
	switch(node.nodeType){
	case 1:// Element
	return node.uniqueID;
	case 9:// Document
	return node.documentElement&&node.documentElement.uniqueID;}

	}
	}

	// If possible, use a WeakMap.
	var usingWeakMap=typeof WeakMap==='function';
	var weakMap;
	if(usingWeakMap){
	weakMap=new WeakMap();
	}

	var objHashUID=0;

	var UID_HASH_KEY='__immutablehash__';
	if(typeof Symbol==='function'){
	UID_HASH_KEY=Symbol(UID_HASH_KEY);
	}

	var STRING_HASH_CACHE_MIN_STRLEN=16;
	var STRING_HASH_CACHE_MAX_SIZE=255;
	var STRING_HASH_CACHE_SIZE=0;
	var stringHashCache={};

	function assertNotInfinite(size){
	invariant(
	size!==Infinity,
	'Cannot perform this action with an infinite size.');

	}

	createClass(Map,KeyedCollection);

	// @pragma Construction

	function Map(value){
	return value===null||value===undefined?emptyMap():
	isMap(value)&&!isOrdered(value)?value:
	emptyMap().withMutations(function(map){
	var iter=KeyedIterable(value);
	assertNotInfinite(iter.size);
	iter.forEach(function(v,k){return map.set(k,v);});
	});
	}

	Map.prototype.toString=function(){
	return this.__toString('Map {','}');
	};

	// @pragma Access

	Map.prototype.get=function(k,notSetValue){
	return this._root?
	this._root.get(0,undefined,k,notSetValue):
	notSetValue;
	};

	// @pragma Modification

	Map.prototype.set=function(k,v){
	return updateMap(this,k,v);
	};

	Map.prototype.setIn=function(keyPath,v){
	return this.updateIn(keyPath,NOT_SET,function(){return v;});
	};

	Map.prototype.remove=function(k){
	return updateMap(this,k,NOT_SET);
	};

	Map.prototype.deleteIn=function(keyPath){
	return this.updateIn(keyPath,function(){return NOT_SET;});
	};

	Map.prototype.update=function(k,notSetValue,updater){
	return arguments.length===1?
	k(this):
	this.updateIn([k],notSetValue,updater);
	};

	Map.prototype.updateIn=function(keyPath,notSetValue,updater){
	if(!updater){
	updater=notSetValue;
	notSetValue=undefined;
	}
	var updatedValue=updateInDeepMap(
	this,
	forceIterator(keyPath),
	notSetValue,
	updater);

	return updatedValue===NOT_SET?undefined:updatedValue;
	};

	Map.prototype.clear=function(){
	if(this.size===0){
	return this;
	}
	if(this.__ownerID){
	this.size=0;
	this._root=null;
	this.__hash=undefined;
	this.__altered=true;
	return this;
	}
	return emptyMap();
	};

	// @pragma Composition

	Map.prototype.merge=function()/*...iters*/{
	return mergeIntoMapWith(this,undefined,arguments);
	};

	Map.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);
	return mergeIntoMapWith(this,merger,iters);
	};

	Map.prototype.mergeIn=function(keyPath){var iters=SLICE$0.call(arguments,1);
	return this.updateIn(
	keyPath,
	emptyMap(),
	function(m){return typeof m.merge==='function'?
	m.merge.apply(m,iters):
	iters[iters.length-1];});

	};

	Map.prototype.mergeDeep=function()/*...iters*/{
	return mergeIntoMapWith(this,deepMerger,arguments);
	};

	Map.prototype.mergeDeepWith=function(merger){var iters=SLICE$0.call(arguments,1);
	return mergeIntoMapWith(this,deepMergerWith(merger),iters);
	};

	Map.prototype.mergeDeepIn=function(keyPath){var iters=SLICE$0.call(arguments,1);
	return this.updateIn(
	keyPath,
	emptyMap(),
	function(m){return typeof m.mergeDeep==='function'?
	m.mergeDeep.apply(m,iters):
	iters[iters.length-1];});

	};

	Map.prototype.sort=function(comparator){
	// Late binding
	return OrderedMap(sortFactory(this,comparator));
	};

	Map.prototype.sortBy=function(mapper,comparator){
	// Late binding
	return OrderedMap(sortFactory(this,comparator,mapper));
	};

	// @pragma Mutability

	Map.prototype.withMutations=function(fn){
	var mutable=this.asMutable();
	fn(mutable);
	return mutable.wasAltered()?mutable.__ensureOwner(this.__ownerID):this;
	};

	Map.prototype.asMutable=function(){
	return this.__ownerID?this:this.__ensureOwner(new OwnerID());
	};

	Map.prototype.asImmutable=function(){
	return this.__ensureOwner();
	};

	Map.prototype.wasAltered=function(){
	return this.__altered;
	};

	Map.prototype.__iterator=function(type,reverse){
	return new MapIterator(this,type,reverse);
	};

	Map.prototype.__iterate=function(fn,reverse){var this$0=this;
	var iterations=0;
	this._root&&this._root.iterate(function(entry){
	iterations++;
	return fn(entry[1],entry[0],this$0);
	},reverse);
	return iterations;
	};

	Map.prototype.__ensureOwner=function(ownerID){
	if(ownerID===this.__ownerID){
	return this;
	}
	if(!ownerID){
	this.__ownerID=ownerID;
	this.__altered=false;
	return this;
	}
	return makeMap(this.size,this._root,ownerID,this.__hash);
	};


	function isMap(maybeMap){
	return!!(maybeMap&&maybeMap[IS_MAP_SENTINEL]);
	}

	Map.isMap=isMap;

	var IS_MAP_SENTINEL='@@__IMMUTABLE_MAP__@@';

	var MapPrototype=Map.prototype;
	MapPrototype[IS_MAP_SENTINEL]=true;
	MapPrototype[DELETE]=MapPrototype.remove;
	MapPrototype.removeIn=MapPrototype.deleteIn;


	// #pragma Trie Nodes



	function ArrayMapNode(ownerID,entries){
	this.ownerID=ownerID;
	this.entries=entries;
	}

	ArrayMapNode.prototype.get=function(shift,keyHash,key,notSetValue){
	var entries=this.entries;
	for(var ii=0,len=entries.length;ii<len;ii++){
	if(is(key,entries[ii][0])){
	return entries[ii][1];
	}
	}
	return notSetValue;
	};

	ArrayMapNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){
	var removed=value===NOT_SET;

	var entries=this.entries;
	var idx=0;
	for(var len=entries.length;idx<len;idx++){
	if(is(key,entries[idx][0])){
	break;
	}
	}
	var exists=idx<len;

	if(exists?entries[idx][1]===value:removed){
	return this;
	}

	SetRef(didAlter);
	(removed||!exists)&&SetRef(didChangeSize);

	if(removed&&entries.length===1){
	return;// undefined
	}

	if(!exists&&!removed&&entries.length>=MAX_ARRAY_MAP_SIZE){
	return createNodes(ownerID,entries,key,value);
	}

	var isEditable=ownerID&&ownerID===this.ownerID;
	var newEntries=isEditable?entries:arrCopy(entries);

	if(exists){
	if(removed){
	idx===len-1?newEntries.pop():newEntries[idx]=newEntries.pop();
	}else{
	newEntries[idx]=[key,value];
	}
	}else{
	newEntries.push([key,value]);
	}

	if(isEditable){
	this.entries=newEntries;
	return this;
	}

	return new ArrayMapNode(ownerID,newEntries);
	};




	function BitmapIndexedNode(ownerID,bitmap,nodes){
	this.ownerID=ownerID;
	this.bitmap=bitmap;
	this.nodes=nodes;
	}

	BitmapIndexedNode.prototype.get=function(shift,keyHash,key,notSetValue){
	if(keyHash===undefined){
	keyHash=hash(key);
	}
	var bit=1<<((shift===0?keyHash:keyHash>>>shift)&MASK);
	var bitmap=this.bitmap;
	return(bitmap&bit)===0?notSetValue:
	this.nodes[popCount(bitmap&bit-1)].get(shift+SHIFT,keyHash,key,notSetValue);
	};

	BitmapIndexedNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){
	if(keyHash===undefined){
	keyHash=hash(key);
	}
	var keyHashFrag=(shift===0?keyHash:keyHash>>>shift)&MASK;
	var bit=1<<keyHashFrag;
	var bitmap=this.bitmap;
	var exists=(bitmap&bit)!==0;

	if(!exists&&value===NOT_SET){
	return this;
	}

	var idx=popCount(bitmap&bit-1);
	var nodes=this.nodes;
	var node=exists?nodes[idx]:undefined;
	var newNode=updateNode(node,ownerID,shift+SHIFT,keyHash,key,value,didChangeSize,didAlter);

	if(newNode===node){
	return this;
	}

	if(!exists&&newNode&&nodes.length>=MAX_BITMAP_INDEXED_SIZE){
	return expandNodes(ownerID,nodes,bitmap,keyHashFrag,newNode);
	}

	if(exists&&!newNode&&nodes.length===2&&isLeafNode(nodes[idx^1])){
	return nodes[idx^1];
	}

	if(exists&&newNode&&nodes.length===1&&isLeafNode(newNode)){
	return newNode;
	}

	var isEditable=ownerID&&ownerID===this.ownerID;
	var newBitmap=exists?newNode?bitmap:bitmap^bit:bitmap|bit;
	var newNodes=exists?newNode?
	setIn(nodes,idx,newNode,isEditable):
	spliceOut(nodes,idx,isEditable):
	spliceIn(nodes,idx,newNode,isEditable);

	if(isEditable){
	this.bitmap=newBitmap;
	this.nodes=newNodes;
	return this;
	}

	return new BitmapIndexedNode(ownerID,newBitmap,newNodes);
	};




	function HashArrayMapNode(ownerID,count,nodes){
	this.ownerID=ownerID;
	this.count=count;
	this.nodes=nodes;
	}

	HashArrayMapNode.prototype.get=function(shift,keyHash,key,notSetValue){
	if(keyHash===undefined){
	keyHash=hash(key);
	}
	var idx=(shift===0?keyHash:keyHash>>>shift)&MASK;
	var node=this.nodes[idx];
	return node?node.get(shift+SHIFT,keyHash,key,notSetValue):notSetValue;
	};

	HashArrayMapNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){
	if(keyHash===undefined){
	keyHash=hash(key);
	}
	var idx=(shift===0?keyHash:keyHash>>>shift)&MASK;
	var removed=value===NOT_SET;
	var nodes=this.nodes;
	var node=nodes[idx];

	if(removed&&!node){
	return this;
	}

	var newNode=updateNode(node,ownerID,shift+SHIFT,keyHash,key,value,didChangeSize,didAlter);
	if(newNode===node){
	return this;
	}

	var newCount=this.count;
	if(!node){
	newCount++;
	}else if(!newNode){
	newCount--;
	if(newCount<MIN_HASH_ARRAY_MAP_SIZE){
	return packNodes(ownerID,nodes,newCount,idx);
	}
	}

	var isEditable=ownerID&&ownerID===this.ownerID;
	var newNodes=setIn(nodes,idx,newNode,isEditable);

	if(isEditable){
	this.count=newCount;
	this.nodes=newNodes;
	return this;
	}

	return new HashArrayMapNode(ownerID,newCount,newNodes);
	};




	function HashCollisionNode(ownerID,keyHash,entries){
	this.ownerID=ownerID;
	this.keyHash=keyHash;
	this.entries=entries;
	}

	HashCollisionNode.prototype.get=function(shift,keyHash,key,notSetValue){
	var entries=this.entries;
	for(var ii=0,len=entries.length;ii<len;ii++){
	if(is(key,entries[ii][0])){
	return entries[ii][1];
	}
	}
	return notSetValue;
	};

	HashCollisionNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){
	if(keyHash===undefined){
	keyHash=hash(key);
	}

	var removed=value===NOT_SET;

	if(keyHash!==this.keyHash){
	if(removed){
	return this;
	}
	SetRef(didAlter);
	SetRef(didChangeSize);
	return mergeIntoNode(this,ownerID,shift,keyHash,[key,value]);
	}

	var entries=this.entries;
	var idx=0;
	for(var len=entries.length;idx<len;idx++){
	if(is(key,entries[idx][0])){
	break;
	}
	}
	var exists=idx<len;

	if(exists?entries[idx][1]===value:removed){
	return this;
	}

	SetRef(didAlter);
	(removed||!exists)&&SetRef(didChangeSize);

	if(removed&&len===2){
	return new ValueNode(ownerID,this.keyHash,entries[idx^1]);
	}

	var isEditable=ownerID&&ownerID===this.ownerID;
	var newEntries=isEditable?entries:arrCopy(entries);

	if(exists){
	if(removed){
	idx===len-1?newEntries.pop():newEntries[idx]=newEntries.pop();
	}else{
	newEntries[idx]=[key,value];
	}
	}else{
	newEntries.push([key,value]);
	}

	if(isEditable){
	this.entries=newEntries;
	return this;
	}

	return new HashCollisionNode(ownerID,this.keyHash,newEntries);
	};




	function ValueNode(ownerID,keyHash,entry){
	this.ownerID=ownerID;
	this.keyHash=keyHash;
	this.entry=entry;
	}

	ValueNode.prototype.get=function(shift,keyHash,key,notSetValue){
	return is(key,this.entry[0])?this.entry[1]:notSetValue;
	};

	ValueNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){
	var removed=value===NOT_SET;
	var keyMatch=is(key,this.entry[0]);
	if(keyMatch?value===this.entry[1]:removed){
	return this;
	}

	SetRef(didAlter);

	if(removed){
	SetRef(didChangeSize);
	return;// undefined
	}

	if(keyMatch){
	if(ownerID&&ownerID===this.ownerID){
	this.entry[1]=value;
	return this;
	}
	return new ValueNode(ownerID,this.keyHash,[key,value]);
	}

	SetRef(didChangeSize);
	return mergeIntoNode(this,ownerID,shift,hash(key),[key,value]);
	};



	// #pragma Iterators

	ArrayMapNode.prototype.iterate=
	HashCollisionNode.prototype.iterate=function(fn,reverse){
	var entries=this.entries;
	for(var ii=0,maxIndex=entries.length-1;ii<=maxIndex;ii++){
	if(fn(entries[reverse?maxIndex-ii:ii])===false){
	return false;
	}
	}
	};

	BitmapIndexedNode.prototype.iterate=
	HashArrayMapNode.prototype.iterate=function(fn,reverse){
	var nodes=this.nodes;
	for(var ii=0,maxIndex=nodes.length-1;ii<=maxIndex;ii++){
	var node=nodes[reverse?maxIndex-ii:ii];
	if(node&&node.iterate(fn,reverse)===false){
	return false;
	}
	}
	};

	ValueNode.prototype.iterate=function(fn,reverse){
	return fn(this.entry);
	};

	createClass(MapIterator,Iterator);

	function MapIterator(map,type,reverse){
	this._type=type;
	this._reverse=reverse;
	this._stack=map._root&&mapIteratorFrame(map._root);
	}

	MapIterator.prototype.next=function(){
	var type=this._type;
	var stack=this._stack;
	while(stack){
	var node=stack.node;
	var index=stack.index++;
	var maxIndex;
	if(node.entry){
	if(index===0){
	return mapIteratorValue(type,node.entry);
	}
	}else if(node.entries){
	maxIndex=node.entries.length-1;
	if(index<=maxIndex){
	return mapIteratorValue(type,node.entries[this._reverse?maxIndex-index:index]);
	}
	}else{
	maxIndex=node.nodes.length-1;
	if(index<=maxIndex){
	var subNode=node.nodes[this._reverse?maxIndex-index:index];
	if(subNode){
	if(subNode.entry){
	return mapIteratorValue(type,subNode.entry);
	}
	stack=this._stack=mapIteratorFrame(subNode,stack);
	}
	continue;
	}
	}
	stack=this._stack=this._stack.__prev;
	}
	return iteratorDone();
	};


	function mapIteratorValue(type,entry){
	return iteratorValue(type,entry[0],entry[1]);
	}

	function mapIteratorFrame(node,prev){
	return{
	node:node,
	index:0,
	__prev:prev};

	}

	function makeMap(size,root,ownerID,hash){
	var map=Object.create(MapPrototype);
	map.size=size;
	map._root=root;
	map.__ownerID=ownerID;
	map.__hash=hash;
	map.__altered=false;
	return map;
	}

	var EMPTY_MAP;
	function emptyMap(){
	return EMPTY_MAP||(EMPTY_MAP=makeMap(0));
	}

	function updateMap(map,k,v){
	var newRoot;
	var newSize;
	if(!map._root){
	if(v===NOT_SET){
	return map;
	}
	newSize=1;
	newRoot=new ArrayMapNode(map.__ownerID,[[k,v]]);
	}else{
	var didChangeSize=MakeRef(CHANGE_LENGTH);
	var didAlter=MakeRef(DID_ALTER);
	newRoot=updateNode(map._root,map.__ownerID,0,undefined,k,v,didChangeSize,didAlter);
	if(!didAlter.value){
	return map;
	}
	newSize=map.size+(didChangeSize.value?v===NOT_SET?-1:1:0);
	}
	if(map.__ownerID){
	map.size=newSize;
	map._root=newRoot;
	map.__hash=undefined;
	map.__altered=true;
	return map;
	}
	return newRoot?makeMap(newSize,newRoot):emptyMap();
	}

	function updateNode(node,ownerID,shift,keyHash,key,value,didChangeSize,didAlter){
	if(!node){
	if(value===NOT_SET){
	return node;
	}
	SetRef(didAlter);
	SetRef(didChangeSize);
	return new ValueNode(ownerID,keyHash,[key,value]);
	}
	return node.update(ownerID,shift,keyHash,key,value,didChangeSize,didAlter);
	}

	function isLeafNode(node){
	return node.constructor===ValueNode||node.constructor===HashCollisionNode;
	}

	function mergeIntoNode(node,ownerID,shift,keyHash,entry){
	if(node.keyHash===keyHash){
	return new HashCollisionNode(ownerID,keyHash,[node.entry,entry]);
	}

	var idx1=(shift===0?node.keyHash:node.keyHash>>>shift)&MASK;
	var idx2=(shift===0?keyHash:keyHash>>>shift)&MASK;

	var newNode;
	var nodes=idx1===idx2?
	[mergeIntoNode(node,ownerID,shift+SHIFT,keyHash,entry)]:(
	newNode=new ValueNode(ownerID,keyHash,entry),idx1<idx2?[node,newNode]:[newNode,node]);

	return new BitmapIndexedNode(ownerID,1<<idx1|1<<idx2,nodes);
	}

	function createNodes(ownerID,entries,key,value){
	if(!ownerID){
	ownerID=new OwnerID();
	}
	var node=new ValueNode(ownerID,hash(key),[key,value]);
	for(var ii=0;ii<entries.length;ii++){
	var entry=entries[ii];
	node=node.update(ownerID,0,undefined,entry[0],entry[1]);
	}
	return node;
	}

	function packNodes(ownerID,nodes,count,excluding){
	var bitmap=0;
	var packedII=0;
	var packedNodes=new Array(count);
	for(var ii=0,bit=1,len=nodes.length;ii<len;ii++,bit<<=1){
	var node=nodes[ii];
	if(node!==undefined&&ii!==excluding){
	bitmap|=bit;
	packedNodes[packedII++]=node;
	}
	}
	return new BitmapIndexedNode(ownerID,bitmap,packedNodes);
	}

	function expandNodes(ownerID,nodes,bitmap,including,node){
	var count=0;
	var expandedNodes=new Array(SIZE);
	for(var ii=0;bitmap!==0;ii++,bitmap>>>=1){
	expandedNodes[ii]=bitmap&1?nodes[count++]:undefined;
	}
	expandedNodes[including]=node;
	return new HashArrayMapNode(ownerID,count+1,expandedNodes);
	}

	function mergeIntoMapWith(map,merger,iterables){
	var iters=[];
	for(var ii=0;ii<iterables.length;ii++){
	var value=iterables[ii];
	var iter=KeyedIterable(value);
	if(!isIterable(value)){
	iter=iter.map(function(v){return fromJS(v);});
	}
	iters.push(iter);
	}
	return mergeIntoCollectionWith(map,merger,iters);
	}

	function deepMerger(existing,value,key){
	return existing&&existing.mergeDeep&&isIterable(value)?
	existing.mergeDeep(value):
	is(existing,value)?existing:value;
	}

	function deepMergerWith(merger){
	return function(existing,value,key){
	if(existing&&existing.mergeDeepWith&&isIterable(value)){
	return existing.mergeDeepWith(merger,value);
	}
	var nextValue=merger(existing,value,key);
	return is(existing,nextValue)?existing:nextValue;
	};
	}

	function mergeIntoCollectionWith(collection,merger,iters){
	iters=iters.filter(function(x){return x.size!==0;});
	if(iters.length===0){
	return collection;
	}
	if(collection.size===0&&!collection.__ownerID&&iters.length===1){
	return collection.constructor(iters[0]);
	}
	return collection.withMutations(function(collection){
	var mergeIntoMap=merger?
	function(value,key){
	collection.update(key,NOT_SET,function(existing)
	{return existing===NOT_SET?value:merger(existing,value,key);});

	}:
	function(value,key){
	collection.set(key,value);
	};
	for(var ii=0;ii<iters.length;ii++){
	iters[ii].forEach(mergeIntoMap);
	}
	});
	}

	function updateInDeepMap(existing,keyPathIter,notSetValue,updater){
	var isNotSet=existing===NOT_SET;
	var step=keyPathIter.next();
	if(step.done){
	var existingValue=isNotSet?notSetValue:existing;
	var newValue=updater(existingValue);
	return newValue===existingValue?existing:newValue;
	}
	invariant(
	isNotSet||existing&&existing.set,
	'invalid keyPath');

	var key=step.value;
	var nextExisting=isNotSet?NOT_SET:existing.get(key,NOT_SET);
	var nextUpdated=updateInDeepMap(
	nextExisting,
	keyPathIter,
	notSetValue,
	updater);

	return nextUpdated===nextExisting?existing:
	nextUpdated===NOT_SET?existing.remove(key):
	(isNotSet?emptyMap():existing).set(key,nextUpdated);
	}

	function popCount(x){
	x=x-(x>>1&0x55555555);
	x=(x&0x33333333)+(x>>2&0x33333333);
	x=x+(x>>4)&0x0f0f0f0f;
	x=x+(x>>8);
	x=x+(x>>16);
	return x&0x7f;
	}

	function setIn(array,idx,val,canEdit){
	var newArray=canEdit?array:arrCopy(array);
	newArray[idx]=val;
	return newArray;
	}

	function spliceIn(array,idx,val,canEdit){
	var newLen=array.length+1;
	if(canEdit&&idx+1===newLen){
	array[idx]=val;
	return array;
	}
	var newArray=new Array(newLen);
	var after=0;
	for(var ii=0;ii<newLen;ii++){
	if(ii===idx){
	newArray[ii]=val;
	after=-1;
	}else{
	newArray[ii]=array[ii+after];
	}
	}
	return newArray;
	}

	function spliceOut(array,idx,canEdit){
	var newLen=array.length-1;
	if(canEdit&&idx===newLen){
	array.pop();
	return array;
	}
	var newArray=new Array(newLen);
	var after=0;
	for(var ii=0;ii<newLen;ii++){
	if(ii===idx){
	after=1;
	}
	newArray[ii]=array[ii+after];
	}
	return newArray;
	}

	var MAX_ARRAY_MAP_SIZE=SIZE/4;
	var MAX_BITMAP_INDEXED_SIZE=SIZE/2;
	var MIN_HASH_ARRAY_MAP_SIZE=SIZE/4;

	createClass(List,IndexedCollection);

	// @pragma Construction

	function List(value){
	var empty=emptyList();
	if(value===null||value===undefined){
	return empty;
	}
	if(isList(value)){
	return value;
	}
	var iter=IndexedIterable(value);
	var size=iter.size;
	if(size===0){
	return empty;
	}
	assertNotInfinite(size);
	if(size>0&&size<SIZE){
	return makeList(0,size,SHIFT,null,new VNode(iter.toArray()));
	}
	return empty.withMutations(function(list){
	list.setSize(size);
	iter.forEach(function(v,i){return list.set(i,v);});
	});
	}

	List.of=function()/*...values*/{
	return this(arguments);
	};

	List.prototype.toString=function(){
	return this.__toString('List [',']');
	};

	// @pragma Access

	List.prototype.get=function(index,notSetValue){
	index=wrapIndex(this,index);
	if(index>=0&&index<this.size){
	index+=this._origin;
	var node=listNodeFor(this,index);
	return node&&node.array[index&MASK];
	}
	return notSetValue;
	};

	// @pragma Modification

	List.prototype.set=function(index,value){
	return updateList(this,index,value);
	};

	List.prototype.remove=function(index){
	return!this.has(index)?this:
	index===0?this.shift():
	index===this.size-1?this.pop():
	this.splice(index,1);
	};

	List.prototype.insert=function(index,value){
	return this.splice(index,0,value);
	};

	List.prototype.clear=function(){
	if(this.size===0){
	return this;
	}
	if(this.__ownerID){
	this.size=this._origin=this._capacity=0;
	this._level=SHIFT;
	this._root=this._tail=null;
	this.__hash=undefined;
	this.__altered=true;
	return this;
	}
	return emptyList();
	};

	List.prototype.push=function()/*...values*/{
	var values=arguments;
	var oldSize=this.size;
	return this.withMutations(function(list){
	setListBounds(list,0,oldSize+values.length);
	for(var ii=0;ii<values.length;ii++){
	list.set(oldSize+ii,values[ii]);
	}
	});
	};

	List.prototype.pop=function(){
	return setListBounds(this,0,-1);
	};

	List.prototype.unshift=function()/*...values*/{
	var values=arguments;
	return this.withMutations(function(list){
	setListBounds(list,-values.length);
	for(var ii=0;ii<values.length;ii++){
	list.set(ii,values[ii]);
	}
	});
	};

	List.prototype.shift=function(){
	return setListBounds(this,1);
	};

	// @pragma Composition

	List.prototype.merge=function()/*...iters*/{
	return mergeIntoListWith(this,undefined,arguments);
	};

	List.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);
	return mergeIntoListWith(this,merger,iters);
	};

	List.prototype.mergeDeep=function()/*...iters*/{
	return mergeIntoListWith(this,deepMerger,arguments);
	};

	List.prototype.mergeDeepWith=function(merger){var iters=SLICE$0.call(arguments,1);
	return mergeIntoListWith(this,deepMergerWith(merger),iters);
	};

	List.prototype.setSize=function(size){
	return setListBounds(this,0,size);
	};

	// @pragma Iteration

	List.prototype.slice=function(begin,end){
	var size=this.size;
	if(wholeSlice(begin,end,size)){
	return this;
	}
	return setListBounds(
	this,
	resolveBegin(begin,size),
	resolveEnd(end,size));

	};

	List.prototype.__iterator=function(type,reverse){
	var index=0;
	var values=iterateList(this,reverse);
	return new Iterator(function(){
	var value=values();
	return value===DONE?
	iteratorDone():
	iteratorValue(type,index++,value);
	});
	};

	List.prototype.__iterate=function(fn,reverse){
	var index=0;
	var values=iterateList(this,reverse);
	var value;
	while((value=values())!==DONE){
	if(fn(value,index++,this)===false){
	break;
	}
	}
	return index;
	};

	List.prototype.__ensureOwner=function(ownerID){
	if(ownerID===this.__ownerID){
	return this;
	}
	if(!ownerID){
	this.__ownerID=ownerID;
	return this;
	}
	return makeList(this._origin,this._capacity,this._level,this._root,this._tail,ownerID,this.__hash);
	};


	function isList(maybeList){
	return!!(maybeList&&maybeList[IS_LIST_SENTINEL]);
	}

	List.isList=isList;

	var IS_LIST_SENTINEL='@@__IMMUTABLE_LIST__@@';

	var ListPrototype=List.prototype;
	ListPrototype[IS_LIST_SENTINEL]=true;
	ListPrototype[DELETE]=ListPrototype.remove;
	ListPrototype.setIn=MapPrototype.setIn;
	ListPrototype.deleteIn=
	ListPrototype.removeIn=MapPrototype.removeIn;
	ListPrototype.update=MapPrototype.update;
	ListPrototype.updateIn=MapPrototype.updateIn;
	ListPrototype.mergeIn=MapPrototype.mergeIn;
	ListPrototype.mergeDeepIn=MapPrototype.mergeDeepIn;
	ListPrototype.withMutations=MapPrototype.withMutations;
	ListPrototype.asMutable=MapPrototype.asMutable;
	ListPrototype.asImmutable=MapPrototype.asImmutable;
	ListPrototype.wasAltered=MapPrototype.wasAltered;



	function VNode(array,ownerID){
	this.array=array;
	this.ownerID=ownerID;
	}

	// TODO: seems like these methods are very similar

	VNode.prototype.removeBefore=function(ownerID,level,index){
	if(index===level?1<<level:0||this.array.length===0){
	return this;
	}
	var originIndex=index>>>level&MASK;
	if(originIndex>=this.array.length){
	return new VNode([],ownerID);
	}
	var removingFirst=originIndex===0;
	var newChild;
	if(level>0){
	var oldChild=this.array[originIndex];
	newChild=oldChild&&oldChild.removeBefore(ownerID,level-SHIFT,index);
	if(newChild===oldChild&&removingFirst){
	return this;
	}
	}
	if(removingFirst&&!newChild){
	return this;
	}
	var editable=editableVNode(this,ownerID);
	if(!removingFirst){
	for(var ii=0;ii<originIndex;ii++){
	editable.array[ii]=undefined;
	}
	}
	if(newChild){
	editable.array[originIndex]=newChild;
	}
	return editable;
	};

	VNode.prototype.removeAfter=function(ownerID,level,index){
	if(index===(level?1<<level:0)||this.array.length===0){
	return this;
	}
	var sizeIndex=index-1>>>level&MASK;
	if(sizeIndex>=this.array.length){
	return this;
	}

	var newChild;
	if(level>0){
	var oldChild=this.array[sizeIndex];
	newChild=oldChild&&oldChild.removeAfter(ownerID,level-SHIFT,index);
	if(newChild===oldChild&&sizeIndex===this.array.length-1){
	return this;
	}
	}

	var editable=editableVNode(this,ownerID);
	editable.array.splice(sizeIndex+1);
	if(newChild){
	editable.array[sizeIndex]=newChild;
	}
	return editable;
	};



	var DONE={};

	function iterateList(list,reverse){
	var left=list._origin;
	var right=list._capacity;
	var tailPos=getTailOffset(right);
	var tail=list._tail;

	return iterateNodeOrLeaf(list._root,list._level,0);

	function iterateNodeOrLeaf(node,level,offset){
	return level===0?
	iterateLeaf(node,offset):
	iterateNode(node,level,offset);
	}

	function iterateLeaf(node,offset){
	var array=offset===tailPos?tail&&tail.array:node&&node.array;
	var from=offset>left?0:left-offset;
	var to=right-offset;
	if(to>SIZE){
	to=SIZE;
	}
	return function(){
	if(from===to){
	return DONE;
	}
	var idx=reverse?--to:from++;
	return array&&array[idx];
	};
	}

	function iterateNode(node,level,offset){
	var values;
	var array=node&&node.array;
	var from=offset>left?0:left-offset>>level;
	var to=(right-offset>>level)+1;
	if(to>SIZE){
	to=SIZE;
	}
	return function(){
	do{
	if(values){
	var value=values();
	if(value!==DONE){
	return value;
	}
	values=null;
	}
	if(from===to){
	return DONE;
	}
	var idx=reverse?--to:from++;
	values=iterateNodeOrLeaf(
	array&&array[idx],level-SHIFT,offset+(idx<<level));

	}while(true);
	};
	}
	}

	function makeList(origin,capacity,level,root,tail,ownerID,hash){
	var list=Object.create(ListPrototype);
	list.size=capacity-origin;
	list._origin=origin;
	list._capacity=capacity;
	list._level=level;
	list._root=root;
	list._tail=tail;
	list.__ownerID=ownerID;
	list.__hash=hash;
	list.__altered=false;
	return list;
	}

	var EMPTY_LIST;
	function emptyList(){
	return EMPTY_LIST||(EMPTY_LIST=makeList(0,0,SHIFT));
	}

	function updateList(list,index,value){
	index=wrapIndex(list,index);

	if(index!==index){
	return list;
	}

	if(index>=list.size||index<0){
	return list.withMutations(function(list){
	index<0?
	setListBounds(list,index).set(0,value):
	setListBounds(list,0,index+1).set(index,value);
	});
	}

	index+=list._origin;

	var newTail=list._tail;
	var newRoot=list._root;
	var didAlter=MakeRef(DID_ALTER);
	if(index>=getTailOffset(list._capacity)){
	newTail=updateVNode(newTail,list.__ownerID,0,index,value,didAlter);
	}else{
	newRoot=updateVNode(newRoot,list.__ownerID,list._level,index,value,didAlter);
	}

	if(!didAlter.value){
	return list;
	}

	if(list.__ownerID){
	list._root=newRoot;
	list._tail=newTail;
	list.__hash=undefined;
	list.__altered=true;
	return list;
	}
	return makeList(list._origin,list._capacity,list._level,newRoot,newTail);
	}

	function updateVNode(node,ownerID,level,index,value,didAlter){
	var idx=index>>>level&MASK;
	var nodeHas=node&&idx<node.array.length;
	if(!nodeHas&&value===undefined){
	return node;
	}

	var newNode;

	if(level>0){
	var lowerNode=node&&node.array[idx];
	var newLowerNode=updateVNode(lowerNode,ownerID,level-SHIFT,index,value,didAlter);
	if(newLowerNode===lowerNode){
	return node;
	}
	newNode=editableVNode(node,ownerID);
	newNode.array[idx]=newLowerNode;
	return newNode;
	}

	if(nodeHas&&node.array[idx]===value){
	return node;
	}

	SetRef(didAlter);

	newNode=editableVNode(node,ownerID);
	if(value===undefined&&idx===newNode.array.length-1){
	newNode.array.pop();
	}else{
	newNode.array[idx]=value;
	}
	return newNode;
	}

	function editableVNode(node,ownerID){
	if(ownerID&&node&&ownerID===node.ownerID){
	return node;
	}
	return new VNode(node?node.array.slice():[],ownerID);
	}

	function listNodeFor(list,rawIndex){
	if(rawIndex>=getTailOffset(list._capacity)){
	return list._tail;
	}
	if(rawIndex<1<<list._level+SHIFT){
	var node=list._root;
	var level=list._level;
	while(node&&level>0){
	node=node.array[rawIndex>>>level&MASK];
	level-=SHIFT;
	}
	return node;
	}
	}

	function setListBounds(list,begin,end){
	// Sanitize begin & end using this shorthand for ToInt32(argument)
	// http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	if(begin!==undefined){
	begin=begin|0;
	}
	if(end!==undefined){
	end=end|0;
	}
	var owner=list.__ownerID||new OwnerID();
	var oldOrigin=list._origin;
	var oldCapacity=list._capacity;
	var newOrigin=oldOrigin+begin;
	var newCapacity=end===undefined?oldCapacity:end<0?oldCapacity+end:oldOrigin+end;
	if(newOrigin===oldOrigin&&newCapacity===oldCapacity){
	return list;
	}

	// If it's going to end after it starts, it's empty.
	if(newOrigin>=newCapacity){
	return list.clear();
	}

	var newLevel=list._level;
	var newRoot=list._root;

	// New origin might need creating a higher root.
	var offsetShift=0;
	while(newOrigin+offsetShift<0){
	newRoot=new VNode(newRoot&&newRoot.array.length?[undefined,newRoot]:[],owner);
	newLevel+=SHIFT;
	offsetShift+=1<<newLevel;
	}
	if(offsetShift){
	newOrigin+=offsetShift;
	oldOrigin+=offsetShift;
	newCapacity+=offsetShift;
	oldCapacity+=offsetShift;
	}

	var oldTailOffset=getTailOffset(oldCapacity);
	var newTailOffset=getTailOffset(newCapacity);

	// New size might need creating a higher root.
	while(newTailOffset>=1<<newLevel+SHIFT){
	newRoot=new VNode(newRoot&&newRoot.array.length?[newRoot]:[],owner);
	newLevel+=SHIFT;
	}

	// Locate or create the new tail.
	var oldTail=list._tail;
	var newTail=newTailOffset<oldTailOffset?
	listNodeFor(list,newCapacity-1):
	newTailOffset>oldTailOffset?new VNode([],owner):oldTail;

	// Merge Tail into tree.
	if(oldTail&&newTailOffset>oldTailOffset&&newOrigin<oldCapacity&&oldTail.array.length){
	newRoot=editableVNode(newRoot,owner);
	var node=newRoot;
	for(var level=newLevel;level>SHIFT;level-=SHIFT){
	var idx=oldTailOffset>>>level&MASK;
	node=node.array[idx]=editableVNode(node.array[idx],owner);
	}
	node.array[oldTailOffset>>>SHIFT&MASK]=oldTail;
	}

	// If the size has been reduced, there's a chance the tail needs to be trimmed.
	if(newCapacity<oldCapacity){
	newTail=newTail&&newTail.removeAfter(owner,0,newCapacity);
	}

	// If the new origin is within the tail, then we do not need a root.
	if(newOrigin>=newTailOffset){
	newOrigin-=newTailOffset;
	newCapacity-=newTailOffset;
	newLevel=SHIFT;
	newRoot=null;
	newTail=newTail&&newTail.removeBefore(owner,0,newOrigin);

	// Otherwise, if the root has been trimmed, garbage collect.
	}else if(newOrigin>oldOrigin||newTailOffset<oldTailOffset){
	offsetShift=0;

	// Identify the new top root node of the subtree of the old root.
	while(newRoot){
	var beginIndex=newOrigin>>>newLevel&MASK;
	if(beginIndex!==newTailOffset>>>newLevel&MASK){
	break;
	}
	if(beginIndex){
	offsetShift+=(1<<newLevel)*beginIndex;
	}
	newLevel-=SHIFT;
	newRoot=newRoot.array[beginIndex];
	}

	// Trim the new sides of the new root.
	if(newRoot&&newOrigin>oldOrigin){
	newRoot=newRoot.removeBefore(owner,newLevel,newOrigin-offsetShift);
	}
	if(newRoot&&newTailOffset<oldTailOffset){
	newRoot=newRoot.removeAfter(owner,newLevel,newTailOffset-offsetShift);
	}
	if(offsetShift){
	newOrigin-=offsetShift;
	newCapacity-=offsetShift;
	}
	}

	if(list.__ownerID){
	list.size=newCapacity-newOrigin;
	list._origin=newOrigin;
	list._capacity=newCapacity;
	list._level=newLevel;
	list._root=newRoot;
	list._tail=newTail;
	list.__hash=undefined;
	list.__altered=true;
	return list;
	}
	return makeList(newOrigin,newCapacity,newLevel,newRoot,newTail);
	}

	function mergeIntoListWith(list,merger,iterables){
	var iters=[];
	var maxSize=0;
	for(var ii=0;ii<iterables.length;ii++){
	var value=iterables[ii];
	var iter=IndexedIterable(value);
	if(iter.size>maxSize){
	maxSize=iter.size;
	}
	if(!isIterable(value)){
	iter=iter.map(function(v){return fromJS(v);});
	}
	iters.push(iter);
	}
	if(maxSize>list.size){
	list=list.setSize(maxSize);
	}
	return mergeIntoCollectionWith(list,merger,iters);
	}

	function getTailOffset(size){
	return size<SIZE?0:size-1>>>SHIFT<<SHIFT;
	}

	createClass(OrderedMap,Map);

	// @pragma Construction

	function OrderedMap(value){
	return value===null||value===undefined?emptyOrderedMap():
	isOrderedMap(value)?value:
	emptyOrderedMap().withMutations(function(map){
	var iter=KeyedIterable(value);
	assertNotInfinite(iter.size);
	iter.forEach(function(v,k){return map.set(k,v);});
	});
	}

	OrderedMap.of=function()/*...values*/{
	return this(arguments);
	};

	OrderedMap.prototype.toString=function(){
	return this.__toString('OrderedMap {','}');
	};

	// @pragma Access

	OrderedMap.prototype.get=function(k,notSetValue){
	var index=this._map.get(k);
	return index!==undefined?this._list.get(index)[1]:notSetValue;
	};

	// @pragma Modification

	OrderedMap.prototype.clear=function(){
	if(this.size===0){
	return this;
	}
	if(this.__ownerID){
	this.size=0;
	this._map.clear();
	this._list.clear();
	return this;
	}
	return emptyOrderedMap();
	};

	OrderedMap.prototype.set=function(k,v){
	return updateOrderedMap(this,k,v);
	};

	OrderedMap.prototype.remove=function(k){
	return updateOrderedMap(this,k,NOT_SET);
	};

	OrderedMap.prototype.wasAltered=function(){
	return this._map.wasAltered()||this._list.wasAltered();
	};

	OrderedMap.prototype.__iterate=function(fn,reverse){var this$0=this;
	return this._list.__iterate(
	function(entry){return entry&&fn(entry[1],entry[0],this$0);},
	reverse);

	};

	OrderedMap.prototype.__iterator=function(type,reverse){
	return this._list.fromEntrySeq().__iterator(type,reverse);
	};

	OrderedMap.prototype.__ensureOwner=function(ownerID){
	if(ownerID===this.__ownerID){
	return this;
	}
	var newMap=this._map.__ensureOwner(ownerID);
	var newList=this._list.__ensureOwner(ownerID);
	if(!ownerID){
	this.__ownerID=ownerID;
	this._map=newMap;
	this._list=newList;
	return this;
	}
	return makeOrderedMap(newMap,newList,ownerID,this.__hash);
	};


	function isOrderedMap(maybeOrderedMap){
	return isMap(maybeOrderedMap)&&isOrdered(maybeOrderedMap);
	}

	OrderedMap.isOrderedMap=isOrderedMap;

	OrderedMap.prototype[IS_ORDERED_SENTINEL]=true;
	OrderedMap.prototype[DELETE]=OrderedMap.prototype.remove;



	function makeOrderedMap(map,list,ownerID,hash){
	var omap=Object.create(OrderedMap.prototype);
	omap.size=map?map.size:0;
	omap._map=map;
	omap._list=list;
	omap.__ownerID=ownerID;
	omap.__hash=hash;
	return omap;
	}

	var EMPTY_ORDERED_MAP;
	function emptyOrderedMap(){
	return EMPTY_ORDERED_MAP||(EMPTY_ORDERED_MAP=makeOrderedMap(emptyMap(),emptyList()));
	}

	function updateOrderedMap(omap,k,v){
	var map=omap._map;
	var list=omap._list;
	var i=map.get(k);
	var has=i!==undefined;
	var newMap;
	var newList;
	if(v===NOT_SET){// removed
	if(!has){
	return omap;
	}
	if(list.size>=SIZE&&list.size>=map.size*2){
	newList=list.filter(function(entry,idx){return entry!==undefined&&i!==idx;});
	newMap=newList.toKeyedSeq().map(function(entry){return entry[0];}).flip().toMap();
	if(omap.__ownerID){
	newMap.__ownerID=newList.__ownerID=omap.__ownerID;
	}
	}else{
	newMap=map.remove(k);
	newList=i===list.size-1?list.pop():list.set(i,undefined);
	}
	}else{
	if(has){
	if(v===list.get(i)[1]){
	return omap;
	}
	newMap=map;
	newList=list.set(i,[k,v]);
	}else{
	newMap=map.set(k,list.size);
	newList=list.set(list.size,[k,v]);
	}
	}
	if(omap.__ownerID){
	omap.size=newMap.size;
	omap._map=newMap;
	omap._list=newList;
	omap.__hash=undefined;
	return omap;
	}
	return makeOrderedMap(newMap,newList);
	}

	createClass(ToKeyedSequence,KeyedSeq);
	function ToKeyedSequence(indexed,useKeys){
	this._iter=indexed;
	this._useKeys=useKeys;
	this.size=indexed.size;
	}

	ToKeyedSequence.prototype.get=function(key,notSetValue){
	return this._iter.get(key,notSetValue);
	};

	ToKeyedSequence.prototype.has=function(key){
	return this._iter.has(key);
	};

	ToKeyedSequence.prototype.valueSeq=function(){
	return this._iter.valueSeq();
	};

	ToKeyedSequence.prototype.reverse=function(){var this$0=this;
	var reversedSequence=reverseFactory(this,true);
	if(!this._useKeys){
	reversedSequence.valueSeq=function(){return this$0._iter.toSeq().reverse();};
	}
	return reversedSequence;
	};

	ToKeyedSequence.prototype.map=function(mapper,context){var this$0=this;
	var mappedSequence=mapFactory(this,mapper,context);
	if(!this._useKeys){
	mappedSequence.valueSeq=function(){return this$0._iter.toSeq().map(mapper,context);};
	}
	return mappedSequence;
	};

	ToKeyedSequence.prototype.__iterate=function(fn,reverse){var this$0=this;
	var ii;
	return this._iter.__iterate(
	this._useKeys?
	function(v,k){return fn(v,k,this$0);}:(
	ii=reverse?resolveSize(this):0,
	function(v){return fn(v,reverse?--ii:ii++,this$0);}),
	reverse);

	};

	ToKeyedSequence.prototype.__iterator=function(type,reverse){
	if(this._useKeys){
	return this._iter.__iterator(type,reverse);
	}
	var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);
	var ii=reverse?resolveSize(this):0;
	return new Iterator(function(){
	var step=iterator.next();
	return step.done?step:
	iteratorValue(type,reverse?--ii:ii++,step.value,step);
	});
	};

	ToKeyedSequence.prototype[IS_ORDERED_SENTINEL]=true;


	createClass(ToIndexedSequence,IndexedSeq);
	function ToIndexedSequence(iter){
	this._iter=iter;
	this.size=iter.size;
	}

	ToIndexedSequence.prototype.includes=function(value){
	return this._iter.includes(value);
	};

	ToIndexedSequence.prototype.__iterate=function(fn,reverse){var this$0=this;
	var iterations=0;
	return this._iter.__iterate(function(v){return fn(v,iterations++,this$0);},reverse);
	};

	ToIndexedSequence.prototype.__iterator=function(type,reverse){
	var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);
	var iterations=0;
	return new Iterator(function(){
	var step=iterator.next();
	return step.done?step:
	iteratorValue(type,iterations++,step.value,step);
	});
	};



	createClass(ToSetSequence,SetSeq);
	function ToSetSequence(iter){
	this._iter=iter;
	this.size=iter.size;
	}

	ToSetSequence.prototype.has=function(key){
	return this._iter.includes(key);
	};

	ToSetSequence.prototype.__iterate=function(fn,reverse){var this$0=this;
	return this._iter.__iterate(function(v){return fn(v,v,this$0);},reverse);
	};

	ToSetSequence.prototype.__iterator=function(type,reverse){
	var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);
	return new Iterator(function(){
	var step=iterator.next();
	return step.done?step:
	iteratorValue(type,step.value,step.value,step);
	});
	};



	createClass(FromEntriesSequence,KeyedSeq);
	function FromEntriesSequence(entries){
	this._iter=entries;
	this.size=entries.size;
	}

	FromEntriesSequence.prototype.entrySeq=function(){
	return this._iter.toSeq();
	};

	FromEntriesSequence.prototype.__iterate=function(fn,reverse){var this$0=this;
	return this._iter.__iterate(function(entry){
	// Check if entry exists first so array access doesn't throw for holes
	// in the parent iteration.
	if(entry){
	validateEntry(entry);
	var indexedIterable=isIterable(entry);
	return fn(
	indexedIterable?entry.get(1):entry[1],
	indexedIterable?entry.get(0):entry[0],
	this$0);

	}
	},reverse);
	};

	FromEntriesSequence.prototype.__iterator=function(type,reverse){
	var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);
	return new Iterator(function(){
	while(true){
	var step=iterator.next();
	if(step.done){
	return step;
	}
	var entry=step.value;
	// Check if entry exists first so array access doesn't throw for holes
	// in the parent iteration.
	if(entry){
	validateEntry(entry);
	var indexedIterable=isIterable(entry);
	return iteratorValue(
	type,
	indexedIterable?entry.get(0):entry[0],
	indexedIterable?entry.get(1):entry[1],
	step);

	}
	}
	});
	};


	ToIndexedSequence.prototype.cacheResult=
	ToKeyedSequence.prototype.cacheResult=
	ToSetSequence.prototype.cacheResult=
	FromEntriesSequence.prototype.cacheResult=
	cacheResultThrough;


	function flipFactory(iterable){
	var flipSequence=makeSequence(iterable);
	flipSequence._iter=iterable;
	flipSequence.size=iterable.size;
	flipSequence.flip=function(){return iterable;};
	flipSequence.reverse=function(){
	var reversedSequence=iterable.reverse.apply(this);// super.reverse()
	reversedSequence.flip=function(){return iterable.reverse();};
	return reversedSequence;
	};
	flipSequence.has=function(key){return iterable.includes(key);};
	flipSequence.includes=function(key){return iterable.has(key);};
	flipSequence.cacheResult=cacheResultThrough;
	flipSequence.__iterateUncached=function(fn,reverse){var this$0=this;
	return iterable.__iterate(function(v,k){return fn(k,v,this$0)!==false;},reverse);
	};
	flipSequence.__iteratorUncached=function(type,reverse){
	if(type===ITERATE_ENTRIES){
	var iterator=iterable.__iterator(type,reverse);
	return new Iterator(function(){
	var step=iterator.next();
	if(!step.done){
	var k=step.value[0];
	step.value[0]=step.value[1];
	step.value[1]=k;
	}
	return step;
	});
	}
	return iterable.__iterator(
	type===ITERATE_VALUES?ITERATE_KEYS:ITERATE_VALUES,
	reverse);

	};
	return flipSequence;
	}


	function mapFactory(iterable,mapper,context){
	var mappedSequence=makeSequence(iterable);
	mappedSequence.size=iterable.size;
	mappedSequence.has=function(key){return iterable.has(key);};
	mappedSequence.get=function(key,notSetValue){
	var v=iterable.get(key,NOT_SET);
	return v===NOT_SET?
	notSetValue:
	mapper.call(context,v,key,iterable);
	};
	mappedSequence.__iterateUncached=function(fn,reverse){var this$0=this;
	return iterable.__iterate(
	function(v,k,c){return fn(mapper.call(context,v,k,c),k,this$0)!==false;},
	reverse);

	};
	mappedSequence.__iteratorUncached=function(type,reverse){
	var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);
	return new Iterator(function(){
	var step=iterator.next();
	if(step.done){
	return step;
	}
	var entry=step.value;
	var key=entry[0];
	return iteratorValue(
	type,
	key,
	mapper.call(context,entry[1],key,iterable),
	step);

	});
	};
	return mappedSequence;
	}


	function reverseFactory(iterable,useKeys){
	var reversedSequence=makeSequence(iterable);
	reversedSequence._iter=iterable;
	reversedSequence.size=iterable.size;
	reversedSequence.reverse=function(){return iterable;};
	if(iterable.flip){
	reversedSequence.flip=function(){
	var flipSequence=flipFactory(iterable);
	flipSequence.reverse=function(){return iterable.flip();};
	return flipSequence;
	};
	}
	reversedSequence.get=function(key,notSetValue)
	{return iterable.get(useKeys?key:-1-key,notSetValue);};
	reversedSequence.has=function(key)
	{return iterable.has(useKeys?key:-1-key);};
	reversedSequence.includes=function(value){return iterable.includes(value);};
	reversedSequence.cacheResult=cacheResultThrough;
	reversedSequence.__iterate=function(fn,reverse){var this$0=this;
	return iterable.__iterate(function(v,k){return fn(v,k,this$0);},!reverse);
	};
	reversedSequence.__iterator=
	function(type,reverse){return iterable.__iterator(type,!reverse);};
	return reversedSequence;
	}


	function filterFactory(iterable,predicate,context,useKeys){
	var filterSequence=makeSequence(iterable);
	if(useKeys){
	filterSequence.has=function(key){
	var v=iterable.get(key,NOT_SET);
	return v!==NOT_SET&&!!predicate.call(context,v,key,iterable);
	};
	filterSequence.get=function(key,notSetValue){
	var v=iterable.get(key,NOT_SET);
	return v!==NOT_SET&&predicate.call(context,v,key,iterable)?
	v:notSetValue;
	};
	}
	filterSequence.__iterateUncached=function(fn,reverse){var this$0=this;
	var iterations=0;
	iterable.__iterate(function(v,k,c){
	if(predicate.call(context,v,k,c)){
	iterations++;
	return fn(v,useKeys?k:iterations-1,this$0);
	}
	},reverse);
	return iterations;
	};
	filterSequence.__iteratorUncached=function(type,reverse){
	var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);
	var iterations=0;
	return new Iterator(function(){
	while(true){
	var step=iterator.next();
	if(step.done){
	return step;
	}
	var entry=step.value;
	var key=entry[0];
	var value=entry[1];
	if(predicate.call(context,value,key,iterable)){
	return iteratorValue(type,useKeys?key:iterations++,value,step);
	}
	}
	});
	};
	return filterSequence;
	}


	function countByFactory(iterable,grouper,context){
	var groups=Map().asMutable();
	iterable.__iterate(function(v,k){
	groups.update(
	grouper.call(context,v,k,iterable),
	0,
	function(a){return a+1;});

	});
	return groups.asImmutable();
	}


	function groupByFactory(iterable,grouper,context){
	var isKeyedIter=isKeyed(iterable);
	var groups=(isOrdered(iterable)?OrderedMap():Map()).asMutable();
	iterable.__iterate(function(v,k){
	groups.update(
	grouper.call(context,v,k,iterable),
	function(a){return a=a||[],a.push(isKeyedIter?[k,v]:v),a;});

	});
	var coerce=iterableClass(iterable);
	return groups.map(function(arr){return reify(iterable,coerce(arr));});
	}


	function sliceFactory(iterable,begin,end,useKeys){
	var originalSize=iterable.size;

	// Sanitize begin & end using this shorthand for ToInt32(argument)
	// http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	if(begin!==undefined){
	begin=begin|0;
	}
	if(end!==undefined){
	end=end|0;
	}

	if(wholeSlice(begin,end,originalSize)){
	return iterable;
	}

	var resolvedBegin=resolveBegin(begin,originalSize);
	var resolvedEnd=resolveEnd(end,originalSize);

	// begin or end will be NaN if they were provided as negative numbers and
	// this iterable's size is unknown. In that case, cache first so there is
	// a known size and these do not resolve to NaN.
	if(resolvedBegin!==resolvedBegin||resolvedEnd!==resolvedEnd){
	return sliceFactory(iterable.toSeq().cacheResult(),begin,end,useKeys);
	}

	// Note: resolvedEnd is undefined when the original sequence's length is
	// unknown and this slice did not supply an end and should contain all
	// elements after resolvedBegin.
	// In that case, resolvedSize will be NaN and sliceSize will remain undefined.
	var resolvedSize=resolvedEnd-resolvedBegin;
	var sliceSize;
	if(resolvedSize===resolvedSize){
	sliceSize=resolvedSize<0?0:resolvedSize;
	}

	var sliceSeq=makeSequence(iterable);

	// If iterable.size is undefined, the size of the realized sliceSeq is
	// unknown at this point unless the number of items to slice is 0
	sliceSeq.size=sliceSize===0?sliceSize:iterable.size&&sliceSize||undefined;

	if(!useKeys&&isSeq(iterable)&&sliceSize>=0){
	sliceSeq.get=function(index,notSetValue){
	index=wrapIndex(this,index);
	return index>=0&&index<sliceSize?
	iterable.get(index+resolvedBegin,notSetValue):
	notSetValue;
	};
	}

	sliceSeq.__iterateUncached=function(fn,reverse){var this$0=this;
	if(sliceSize===0){
	return 0;
	}
	if(reverse){
	return this.cacheResult().__iterate(fn,reverse);
	}
	var skipped=0;
	var isSkipping=true;
	var iterations=0;
	iterable.__iterate(function(v,k){
	if(!(isSkipping&&(isSkipping=skipped++<resolvedBegin))){
	iterations++;
	return fn(v,useKeys?k:iterations-1,this$0)!==false&&
	iterations!==sliceSize;
	}
	});
	return iterations;
	};

	sliceSeq.__iteratorUncached=function(type,reverse){
	if(sliceSize!==0&&reverse){
	return this.cacheResult().__iterator(type,reverse);
	}
	// Don't bother instantiating parent iterator if taking 0.
	var iterator=sliceSize!==0&&iterable.__iterator(type,reverse);
	var skipped=0;
	var iterations=0;
	return new Iterator(function(){
	while(skipped++<resolvedBegin){
	iterator.next();
	}
	if(++iterations>sliceSize){
	return iteratorDone();
	}
	var step=iterator.next();
	if(useKeys||type===ITERATE_VALUES){
	return step;
	}else if(type===ITERATE_KEYS){
	return iteratorValue(type,iterations-1,undefined,step);
	}else{
	return iteratorValue(type,iterations-1,step.value[1],step);
	}
	});
	};

	return sliceSeq;
	}


	function takeWhileFactory(iterable,predicate,context){
	var takeSequence=makeSequence(iterable);
	takeSequence.__iterateUncached=function(fn,reverse){var this$0=this;
	if(reverse){
	return this.cacheResult().__iterate(fn,reverse);
	}
	var iterations=0;
	iterable.__iterate(function(v,k,c)
	{return predicate.call(context,v,k,c)&&++iterations&&fn(v,k,this$0);});

	return iterations;
	};
	takeSequence.__iteratorUncached=function(type,reverse){var this$0=this;
	if(reverse){
	return this.cacheResult().__iterator(type,reverse);
	}
	var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);
	var iterating=true;
	return new Iterator(function(){
	if(!iterating){
	return iteratorDone();
	}
	var step=iterator.next();
	if(step.done){
	return step;
	}
	var entry=step.value;
	var k=entry[0];
	var v=entry[1];
	if(!predicate.call(context,v,k,this$0)){
	iterating=false;
	return iteratorDone();
	}
	return type===ITERATE_ENTRIES?step:
	iteratorValue(type,k,v,step);
	});
	};
	return takeSequence;
	}


	function skipWhileFactory(iterable,predicate,context,useKeys){
	var skipSequence=makeSequence(iterable);
	skipSequence.__iterateUncached=function(fn,reverse){var this$0=this;
	if(reverse){
	return this.cacheResult().__iterate(fn,reverse);
	}
	var isSkipping=true;
	var iterations=0;
	iterable.__iterate(function(v,k,c){
	if(!(isSkipping&&(isSkipping=predicate.call(context,v,k,c)))){
	iterations++;
	return fn(v,useKeys?k:iterations-1,this$0);
	}
	});
	return iterations;
	};
	skipSequence.__iteratorUncached=function(type,reverse){var this$0=this;
	if(reverse){
	return this.cacheResult().__iterator(type,reverse);
	}
	var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);
	var skipping=true;
	var iterations=0;
	return new Iterator(function(){
	var step,k,v;
	do{
	step=iterator.next();
	if(step.done){
	if(useKeys||type===ITERATE_VALUES){
	return step;
	}else if(type===ITERATE_KEYS){
	return iteratorValue(type,iterations++,undefined,step);
	}else{
	return iteratorValue(type,iterations++,step.value[1],step);
	}
	}
	var entry=step.value;
	k=entry[0];
	v=entry[1];
	skipping&&(skipping=predicate.call(context,v,k,this$0));
	}while(skipping);
	return type===ITERATE_ENTRIES?step:
	iteratorValue(type,k,v,step);
	});
	};
	return skipSequence;
	}


	function concatFactory(iterable,values){
	var isKeyedIterable=isKeyed(iterable);
	var iters=[iterable].concat(values).map(function(v){
	if(!isIterable(v)){
	v=isKeyedIterable?
	keyedSeqFromValue(v):
	indexedSeqFromValue(Array.isArray(v)?v:[v]);
	}else if(isKeyedIterable){
	v=KeyedIterable(v);
	}
	return v;
	}).filter(function(v){return v.size!==0;});

	if(iters.length===0){
	return iterable;
	}

	if(iters.length===1){
	var singleton=iters[0];
	if(singleton===iterable||
	isKeyedIterable&&isKeyed(singleton)||
	isIndexed(iterable)&&isIndexed(singleton)){
	return singleton;
	}
	}

	var concatSeq=new ArraySeq(iters);
	if(isKeyedIterable){
	concatSeq=concatSeq.toKeyedSeq();
	}else if(!isIndexed(iterable)){
	concatSeq=concatSeq.toSetSeq();
	}
	concatSeq=concatSeq.flatten(true);
	concatSeq.size=iters.reduce(
	function(sum,seq){
	if(sum!==undefined){
	var size=seq.size;
	if(size!==undefined){
	return sum+size;
	}
	}
	},
	0);

	return concatSeq;
	}


	function flattenFactory(iterable,depth,useKeys){
	var flatSequence=makeSequence(iterable);
	flatSequence.__iterateUncached=function(fn,reverse){
	var iterations=0;
	var stopped=false;
	function flatDeep(iter,currentDepth){var this$0=this;
	iter.__iterate(function(v,k){
	if((!depth||currentDepth<depth)&&isIterable(v)){
	flatDeep(v,currentDepth+1);
	}else if(fn(v,useKeys?k:iterations++,this$0)===false){
	stopped=true;
	}
	return!stopped;
	},reverse);
	}
	flatDeep(iterable,0);
	return iterations;
	};
	flatSequence.__iteratorUncached=function(type,reverse){
	var iterator=iterable.__iterator(type,reverse);
	var stack=[];
	var iterations=0;
	return new Iterator(function(){
	while(iterator){
	var step=iterator.next();
	if(step.done!==false){
	iterator=stack.pop();
	continue;
	}
	var v=step.value;
	if(type===ITERATE_ENTRIES){
	v=v[1];
	}
	if((!depth||stack.length<depth)&&isIterable(v)){
	stack.push(iterator);
	iterator=v.__iterator(type,reverse);
	}else{
	return useKeys?step:iteratorValue(type,iterations++,v,step);
	}
	}
	return iteratorDone();
	});
	};
	return flatSequence;
	}


	function flatMapFactory(iterable,mapper,context){
	var coerce=iterableClass(iterable);
	return iterable.toSeq().map(
	function(v,k){return coerce(mapper.call(context,v,k,iterable));}).
	flatten(true);
	}


	function interposeFactory(iterable,separator){
	var interposedSequence=makeSequence(iterable);
	interposedSequence.size=iterable.size&&iterable.size*2-1;
	interposedSequence.__iterateUncached=function(fn,reverse){var this$0=this;
	var iterations=0;
	iterable.__iterate(function(v,k)
	{return(!iterations||fn(separator,iterations++,this$0)!==false)&&
	fn(v,iterations++,this$0)!==false;},
	reverse);

	return iterations;
	};
	interposedSequence.__iteratorUncached=function(type,reverse){
	var iterator=iterable.__iterator(ITERATE_VALUES,reverse);
	var iterations=0;
	var step;
	return new Iterator(function(){
	if(!step||iterations%2){
	step=iterator.next();
	if(step.done){
	return step;
	}
	}
	return iterations%2?
	iteratorValue(type,iterations++,separator):
	iteratorValue(type,iterations++,step.value,step);
	});
	};
	return interposedSequence;
	}


	function sortFactory(iterable,comparator,mapper){
	if(!comparator){
	comparator=defaultComparator;
	}
	var isKeyedIterable=isKeyed(iterable);
	var index=0;
	var entries=iterable.toSeq().map(
	function(v,k){return[k,v,index++,mapper?mapper(v,k,iterable):v];}).
	toArray();
	entries.sort(function(a,b){return comparator(a[3],b[3])||a[2]-b[2];}).forEach(
	isKeyedIterable?
	function(v,i){entries[i].length=2;}:
	function(v,i){entries[i]=v[1];});

	return isKeyedIterable?KeyedSeq(entries):
	isIndexed(iterable)?IndexedSeq(entries):
	SetSeq(entries);
	}


	function maxFactory(iterable,comparator,mapper){
	if(!comparator){
	comparator=defaultComparator;
	}
	if(mapper){
	var entry=iterable.toSeq().
	map(function(v,k){return[v,mapper(v,k,iterable)];}).
	reduce(function(a,b){return maxCompare(comparator,a[1],b[1])?b:a;});
	return entry&&entry[0];
	}else{
	return iterable.reduce(function(a,b){return maxCompare(comparator,a,b)?b:a;});
	}
	}

	function maxCompare(comparator,a,b){
	var comp=comparator(b,a);
	// b is considered the new max if the comparator declares them equal, but
	// they are not equal and b is in fact a nullish value.
	return comp===0&&b!==a&&(b===undefined||b===null||b!==b)||comp>0;
	}


	function zipWithFactory(keyIter,zipper,iters){
	var zipSequence=makeSequence(keyIter);
	zipSequence.size=new ArraySeq(iters).map(function(i){return i.size;}).min();
	// Note: this a generic base implementation of __iterate in terms of
	// __iterator which may be more generically useful in the future.
	zipSequence.__iterate=function(fn,reverse){
	/* generic:
	      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        iterations++;
	        if (fn(step.value[1], step.value[0], this) === false) {
	          break;
	        }
	      }
	      return iterations;
	      */
	// indexed:
	var iterator=this.__iterator(ITERATE_VALUES,reverse);
	var step;
	var iterations=0;
	while(!(step=iterator.next()).done){
	if(fn(step.value,iterations++,this)===false){
	break;
	}
	}
	return iterations;
	};
	zipSequence.__iteratorUncached=function(type,reverse){
	var iterators=iters.map(function(i)
	{return i=Iterable(i),getIterator(reverse?i.reverse():i);});

	var iterations=0;
	var isDone=false;
	return new Iterator(function(){
	var steps;
	if(!isDone){
	steps=iterators.map(function(i){return i.next();});
	isDone=steps.some(function(s){return s.done;});
	}
	if(isDone){
	return iteratorDone();
	}
	return iteratorValue(
	type,
	iterations++,
	zipper.apply(null,steps.map(function(s){return s.value;})));

	});
	};
	return zipSequence;
	}


	// #pragma Helper Functions

	function reify(iter,seq){
	return isSeq(iter)?seq:iter.constructor(seq);
	}

	function validateEntry(entry){
	if(entry!==Object(entry)){
	throw new TypeError('Expected [K, V] tuple: '+entry);
	}
	}

	function resolveSize(iter){
	assertNotInfinite(iter.size);
	return ensureSize(iter);
	}

	function iterableClass(iterable){
	return isKeyed(iterable)?KeyedIterable:
	isIndexed(iterable)?IndexedIterable:
	SetIterable;
	}

	function makeSequence(iterable){
	return Object.create(
	(
	isKeyed(iterable)?KeyedSeq:
	isIndexed(iterable)?IndexedSeq:
	SetSeq).
	prototype);

	}

	function cacheResultThrough(){
	if(this._iter.cacheResult){
	this._iter.cacheResult();
	this.size=this._iter.size;
	return this;
	}else{
	return Seq.prototype.cacheResult.call(this);
	}
	}

	function defaultComparator(a,b){
	return a>b?1:a<b?-1:0;
	}

	function forceIterator(keyPath){
	var iter=getIterator(keyPath);
	if(!iter){
	// Array might not be iterable in this environment, so we need a fallback
	// to our wrapped type.
	if(!isArrayLike(keyPath)){
	throw new TypeError('Expected iterable or array-like: '+keyPath);
	}
	iter=getIterator(Iterable(keyPath));
	}
	return iter;
	}

	createClass(Record,KeyedCollection);

	function Record(defaultValues,name){
	var hasInitialized;

	var RecordType=function Record(values){
	if(values instanceof RecordType){
	return values;
	}
	if(!(this instanceof RecordType)){
	return new RecordType(values);
	}
	if(!hasInitialized){
	hasInitialized=true;
	var keys=Object.keys(defaultValues);
	setProps(RecordTypePrototype,keys);
	RecordTypePrototype.size=keys.length;
	RecordTypePrototype._name=name;
	RecordTypePrototype._keys=keys;
	RecordTypePrototype._defaultValues=defaultValues;
	}
	this._map=Map(values);
	};

	var RecordTypePrototype=RecordType.prototype=Object.create(RecordPrototype);
	RecordTypePrototype.constructor=RecordType;

	return RecordType;
	}

	Record.prototype.toString=function(){
	return this.__toString(recordName(this)+' {','}');
	};

	// @pragma Access

	Record.prototype.has=function(k){
	return this._defaultValues.hasOwnProperty(k);
	};

	Record.prototype.get=function(k,notSetValue){
	if(!this.has(k)){
	return notSetValue;
	}
	var defaultVal=this._defaultValues[k];
	return this._map?this._map.get(k,defaultVal):defaultVal;
	};

	// @pragma Modification

	Record.prototype.clear=function(){
	if(this.__ownerID){
	this._map&&this._map.clear();
	return this;
	}
	var RecordType=this.constructor;
	return RecordType._empty||(RecordType._empty=makeRecord(this,emptyMap()));
	};

	Record.prototype.set=function(k,v){
	if(!this.has(k)){
	throw new Error('Cannot set unknown key "'+k+'" on '+recordName(this));
	}
	var newMap=this._map&&this._map.set(k,v);
	if(this.__ownerID||newMap===this._map){
	return this;
	}
	return makeRecord(this,newMap);
	};

	Record.prototype.remove=function(k){
	if(!this.has(k)){
	return this;
	}
	var newMap=this._map&&this._map.remove(k);
	if(this.__ownerID||newMap===this._map){
	return this;
	}
	return makeRecord(this,newMap);
	};

	Record.prototype.wasAltered=function(){
	return this._map.wasAltered();
	};

	Record.prototype.__iterator=function(type,reverse){var this$0=this;
	return KeyedIterable(this._defaultValues).map(function(_,k){return this$0.get(k);}).__iterator(type,reverse);
	};

	Record.prototype.__iterate=function(fn,reverse){var this$0=this;
	return KeyedIterable(this._defaultValues).map(function(_,k){return this$0.get(k);}).__iterate(fn,reverse);
	};

	Record.prototype.__ensureOwner=function(ownerID){
	if(ownerID===this.__ownerID){
	return this;
	}
	var newMap=this._map&&this._map.__ensureOwner(ownerID);
	if(!ownerID){
	this.__ownerID=ownerID;
	this._map=newMap;
	return this;
	}
	return makeRecord(this,newMap,ownerID);
	};


	var RecordPrototype=Record.prototype;
	RecordPrototype[DELETE]=RecordPrototype.remove;
	RecordPrototype.deleteIn=
	RecordPrototype.removeIn=MapPrototype.removeIn;
	RecordPrototype.merge=MapPrototype.merge;
	RecordPrototype.mergeWith=MapPrototype.mergeWith;
	RecordPrototype.mergeIn=MapPrototype.mergeIn;
	RecordPrototype.mergeDeep=MapPrototype.mergeDeep;
	RecordPrototype.mergeDeepWith=MapPrototype.mergeDeepWith;
	RecordPrototype.mergeDeepIn=MapPrototype.mergeDeepIn;
	RecordPrototype.setIn=MapPrototype.setIn;
	RecordPrototype.update=MapPrototype.update;
	RecordPrototype.updateIn=MapPrototype.updateIn;
	RecordPrototype.withMutations=MapPrototype.withMutations;
	RecordPrototype.asMutable=MapPrototype.asMutable;
	RecordPrototype.asImmutable=MapPrototype.asImmutable;


	function makeRecord(likeRecord,map,ownerID){
	var record=Object.create(Object.getPrototypeOf(likeRecord));
	record._map=map;
	record.__ownerID=ownerID;
	return record;
	}

	function recordName(record){
	return record._name||record.constructor.name||'Record';
	}

	function setProps(prototype,names){
	try{
	names.forEach(setProp.bind(undefined,prototype));
	}catch(error){
	// Object.defineProperty failed. Probably IE8.
	}
	}

	function setProp(prototype,name){
	Object.defineProperty(prototype,name,{
	get:function get(){
	return this.get(name);
	},
	set:function set(value){
	invariant(this.__ownerID,'Cannot set on an immutable record.');
	this.set(name,value);
	}});

	}

	createClass(Set,SetCollection);

	// @pragma Construction

	function Set(value){
	return value===null||value===undefined?emptySet():
	isSet(value)&&!isOrdered(value)?value:
	emptySet().withMutations(function(set){
	var iter=SetIterable(value);
	assertNotInfinite(iter.size);
	iter.forEach(function(v){return set.add(v);});
	});
	}

	Set.of=function()/*...values*/{
	return this(arguments);
	};

	Set.fromKeys=function(value){
	return this(KeyedIterable(value).keySeq());
	};

	Set.prototype.toString=function(){
	return this.__toString('Set {','}');
	};

	// @pragma Access

	Set.prototype.has=function(value){
	return this._map.has(value);
	};

	// @pragma Modification

	Set.prototype.add=function(value){
	return updateSet(this,this._map.set(value,true));
	};

	Set.prototype.remove=function(value){
	return updateSet(this,this._map.remove(value));
	};

	Set.prototype.clear=function(){
	return updateSet(this,this._map.clear());
	};

	// @pragma Composition

	Set.prototype.union=function(){var iters=SLICE$0.call(arguments,0);
	iters=iters.filter(function(x){return x.size!==0;});
	if(iters.length===0){
	return this;
	}
	if(this.size===0&&!this.__ownerID&&iters.length===1){
	return this.constructor(iters[0]);
	}
	return this.withMutations(function(set){
	for(var ii=0;ii<iters.length;ii++){
	SetIterable(iters[ii]).forEach(function(value){return set.add(value);});
	}
	});
	};

	Set.prototype.intersect=function(){var iters=SLICE$0.call(arguments,0);
	if(iters.length===0){
	return this;
	}
	iters=iters.map(function(iter){return SetIterable(iter);});
	var originalSet=this;
	return this.withMutations(function(set){
	originalSet.forEach(function(value){
	if(!iters.every(function(iter){return iter.includes(value);})){
	set.remove(value);
	}
	});
	});
	};

	Set.prototype.subtract=function(){var iters=SLICE$0.call(arguments,0);
	if(iters.length===0){
	return this;
	}
	iters=iters.map(function(iter){return SetIterable(iter);});
	var originalSet=this;
	return this.withMutations(function(set){
	originalSet.forEach(function(value){
	if(iters.some(function(iter){return iter.includes(value);})){
	set.remove(value);
	}
	});
	});
	};

	Set.prototype.merge=function(){
	return this.union.apply(this,arguments);
	};

	Set.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);
	return this.union.apply(this,iters);
	};

	Set.prototype.sort=function(comparator){
	// Late binding
	return OrderedSet(sortFactory(this,comparator));
	};

	Set.prototype.sortBy=function(mapper,comparator){
	// Late binding
	return OrderedSet(sortFactory(this,comparator,mapper));
	};

	Set.prototype.wasAltered=function(){
	return this._map.wasAltered();
	};

	Set.prototype.__iterate=function(fn,reverse){var this$0=this;
	return this._map.__iterate(function(_,k){return fn(k,k,this$0);},reverse);
	};

	Set.prototype.__iterator=function(type,reverse){
	return this._map.map(function(_,k){return k;}).__iterator(type,reverse);
	};

	Set.prototype.__ensureOwner=function(ownerID){
	if(ownerID===this.__ownerID){
	return this;
	}
	var newMap=this._map.__ensureOwner(ownerID);
	if(!ownerID){
	this.__ownerID=ownerID;
	this._map=newMap;
	return this;
	}
	return this.__make(newMap,ownerID);
	};


	function isSet(maybeSet){
	return!!(maybeSet&&maybeSet[IS_SET_SENTINEL]);
	}

	Set.isSet=isSet;

	var IS_SET_SENTINEL='@@__IMMUTABLE_SET__@@';

	var SetPrototype=Set.prototype;
	SetPrototype[IS_SET_SENTINEL]=true;
	SetPrototype[DELETE]=SetPrototype.remove;
	SetPrototype.mergeDeep=SetPrototype.merge;
	SetPrototype.mergeDeepWith=SetPrototype.mergeWith;
	SetPrototype.withMutations=MapPrototype.withMutations;
	SetPrototype.asMutable=MapPrototype.asMutable;
	SetPrototype.asImmutable=MapPrototype.asImmutable;

	SetPrototype.__empty=emptySet;
	SetPrototype.__make=makeSet;

	function updateSet(set,newMap){
	if(set.__ownerID){
	set.size=newMap.size;
	set._map=newMap;
	return set;
	}
	return newMap===set._map?set:
	newMap.size===0?set.__empty():
	set.__make(newMap);
	}

	function makeSet(map,ownerID){
	var set=Object.create(SetPrototype);
	set.size=map?map.size:0;
	set._map=map;
	set.__ownerID=ownerID;
	return set;
	}

	var EMPTY_SET;
	function emptySet(){
	return EMPTY_SET||(EMPTY_SET=makeSet(emptyMap()));
	}

	createClass(OrderedSet,Set);

	// @pragma Construction

	function OrderedSet(value){
	return value===null||value===undefined?emptyOrderedSet():
	isOrderedSet(value)?value:
	emptyOrderedSet().withMutations(function(set){
	var iter=SetIterable(value);
	assertNotInfinite(iter.size);
	iter.forEach(function(v){return set.add(v);});
	});
	}

	OrderedSet.of=function()/*...values*/{
	return this(arguments);
	};

	OrderedSet.fromKeys=function(value){
	return this(KeyedIterable(value).keySeq());
	};

	OrderedSet.prototype.toString=function(){
	return this.__toString('OrderedSet {','}');
	};


	function isOrderedSet(maybeOrderedSet){
	return isSet(maybeOrderedSet)&&isOrdered(maybeOrderedSet);
	}

	OrderedSet.isOrderedSet=isOrderedSet;

	var OrderedSetPrototype=OrderedSet.prototype;
	OrderedSetPrototype[IS_ORDERED_SENTINEL]=true;

	OrderedSetPrototype.__empty=emptyOrderedSet;
	OrderedSetPrototype.__make=makeOrderedSet;

	function makeOrderedSet(map,ownerID){
	var set=Object.create(OrderedSetPrototype);
	set.size=map?map.size:0;
	set._map=map;
	set.__ownerID=ownerID;
	return set;
	}

	var EMPTY_ORDERED_SET;
	function emptyOrderedSet(){
	return EMPTY_ORDERED_SET||(EMPTY_ORDERED_SET=makeOrderedSet(emptyOrderedMap()));
	}

	createClass(Stack,IndexedCollection);

	// @pragma Construction

	function Stack(value){
	return value===null||value===undefined?emptyStack():
	isStack(value)?value:
	emptyStack().unshiftAll(value);
	}

	Stack.of=function()/*...values*/{
	return this(arguments);
	};

	Stack.prototype.toString=function(){
	return this.__toString('Stack [',']');
	};

	// @pragma Access

	Stack.prototype.get=function(index,notSetValue){
	var head=this._head;
	index=wrapIndex(this,index);
	while(head&&index--){
	head=head.next;
	}
	return head?head.value:notSetValue;
	};

	Stack.prototype.peek=function(){
	return this._head&&this._head.value;
	};

	// @pragma Modification

	Stack.prototype.push=function()/*...values*/{
	if(arguments.length===0){
	return this;
	}
	var newSize=this.size+arguments.length;
	var head=this._head;
	for(var ii=arguments.length-1;ii>=0;ii--){
	head={
	value:arguments[ii],
	next:head};

	}
	if(this.__ownerID){
	this.size=newSize;
	this._head=head;
	this.__hash=undefined;
	this.__altered=true;
	return this;
	}
	return makeStack(newSize,head);
	};

	Stack.prototype.pushAll=function(iter){
	iter=IndexedIterable(iter);
	if(iter.size===0){
	return this;
	}
	assertNotInfinite(iter.size);
	var newSize=this.size;
	var head=this._head;
	iter.reverse().forEach(function(value){
	newSize++;
	head={
	value:value,
	next:head};

	});
	if(this.__ownerID){
	this.size=newSize;
	this._head=head;
	this.__hash=undefined;
	this.__altered=true;
	return this;
	}
	return makeStack(newSize,head);
	};

	Stack.prototype.pop=function(){
	return this.slice(1);
	};

	Stack.prototype.unshift=function()/*...values*/{
	return this.push.apply(this,arguments);
	};

	Stack.prototype.unshiftAll=function(iter){
	return this.pushAll(iter);
	};

	Stack.prototype.shift=function(){
	return this.pop.apply(this,arguments);
	};

	Stack.prototype.clear=function(){
	if(this.size===0){
	return this;
	}
	if(this.__ownerID){
	this.size=0;
	this._head=undefined;
	this.__hash=undefined;
	this.__altered=true;
	return this;
	}
	return emptyStack();
	};

	Stack.prototype.slice=function(begin,end){
	if(wholeSlice(begin,end,this.size)){
	return this;
	}
	var resolvedBegin=resolveBegin(begin,this.size);
	var resolvedEnd=resolveEnd(end,this.size);
	if(resolvedEnd!==this.size){
	// super.slice(begin, end);
	return IndexedCollection.prototype.slice.call(this,begin,end);
	}
	var newSize=this.size-resolvedBegin;
	var head=this._head;
	while(resolvedBegin--){
	head=head.next;
	}
	if(this.__ownerID){
	this.size=newSize;
	this._head=head;
	this.__hash=undefined;
	this.__altered=true;
	return this;
	}
	return makeStack(newSize,head);
	};

	// @pragma Mutability

	Stack.prototype.__ensureOwner=function(ownerID){
	if(ownerID===this.__ownerID){
	return this;
	}
	if(!ownerID){
	this.__ownerID=ownerID;
	this.__altered=false;
	return this;
	}
	return makeStack(this.size,this._head,ownerID,this.__hash);
	};

	// @pragma Iteration

	Stack.prototype.__iterate=function(fn,reverse){
	if(reverse){
	return this.reverse().__iterate(fn);
	}
	var iterations=0;
	var node=this._head;
	while(node){
	if(fn(node.value,iterations++,this)===false){
	break;
	}
	node=node.next;
	}
	return iterations;
	};

	Stack.prototype.__iterator=function(type,reverse){
	if(reverse){
	return this.reverse().__iterator(type);
	}
	var iterations=0;
	var node=this._head;
	return new Iterator(function(){
	if(node){
	var value=node.value;
	node=node.next;
	return iteratorValue(type,iterations++,value);
	}
	return iteratorDone();
	});
	};


	function isStack(maybeStack){
	return!!(maybeStack&&maybeStack[IS_STACK_SENTINEL]);
	}

	Stack.isStack=isStack;

	var IS_STACK_SENTINEL='@@__IMMUTABLE_STACK__@@';

	var StackPrototype=Stack.prototype;
	StackPrototype[IS_STACK_SENTINEL]=true;
	StackPrototype.withMutations=MapPrototype.withMutations;
	StackPrototype.asMutable=MapPrototype.asMutable;
	StackPrototype.asImmutable=MapPrototype.asImmutable;
	StackPrototype.wasAltered=MapPrototype.wasAltered;


	function makeStack(size,head,ownerID,hash){
	var map=Object.create(StackPrototype);
	map.size=size;
	map._head=head;
	map.__ownerID=ownerID;
	map.__hash=hash;
	map.__altered=false;
	return map;
	}

	var EMPTY_STACK;
	function emptyStack(){
	return EMPTY_STACK||(EMPTY_STACK=makeStack(0));
	}

	/**
	   * Contributes additional methods to a constructor
	   */
	function mixin(ctor,methods){
	var keyCopier=function keyCopier(key){ctor.prototype[key]=methods[key];};
	Object.keys(methods).forEach(keyCopier);
	Object.getOwnPropertySymbols&&
	Object.getOwnPropertySymbols(methods).forEach(keyCopier);
	return ctor;
	}

	Iterable.Iterator=Iterator;

	mixin(Iterable,{

	// ### Conversion to other types

	toArray:function toArray(){
	assertNotInfinite(this.size);
	var array=new Array(this.size||0);
	this.valueSeq().__iterate(function(v,i){array[i]=v;});
	return array;
	},

	toIndexedSeq:function toIndexedSeq(){
	return new ToIndexedSequence(this);
	},

	toJS:function toJS(){
	return this.toSeq().map(
	function(value){return value&&typeof value.toJS==='function'?value.toJS():value;}).
	__toJS();
	},

	toJSON:function toJSON(){
	return this.toSeq().map(
	function(value){return value&&typeof value.toJSON==='function'?value.toJSON():value;}).
	__toJS();
	},

	toKeyedSeq:function toKeyedSeq(){
	return new ToKeyedSequence(this,true);
	},

	toMap:function toMap(){
	// Use Late Binding here to solve the circular dependency.
	return Map(this.toKeyedSeq());
	},

	toObject:function toObject(){
	assertNotInfinite(this.size);
	var object={};
	this.__iterate(function(v,k){object[k]=v;});
	return object;
	},

	toOrderedMap:function toOrderedMap(){
	// Use Late Binding here to solve the circular dependency.
	return OrderedMap(this.toKeyedSeq());
	},

	toOrderedSet:function toOrderedSet(){
	// Use Late Binding here to solve the circular dependency.
	return OrderedSet(isKeyed(this)?this.valueSeq():this);
	},

	toSet:function toSet(){
	// Use Late Binding here to solve the circular dependency.
	return Set(isKeyed(this)?this.valueSeq():this);
	},

	toSetSeq:function toSetSeq(){
	return new ToSetSequence(this);
	},

	toSeq:function toSeq(){
	return isIndexed(this)?this.toIndexedSeq():
	isKeyed(this)?this.toKeyedSeq():
	this.toSetSeq();
	},

	toStack:function toStack(){
	// Use Late Binding here to solve the circular dependency.
	return Stack(isKeyed(this)?this.valueSeq():this);
	},

	toList:function toList(){
	// Use Late Binding here to solve the circular dependency.
	return List(isKeyed(this)?this.valueSeq():this);
	},


	// ### Common JavaScript methods and properties

	toString:function toString(){
	return'[Iterable]';
	},

	__toString:function __toString(head,tail){
	if(this.size===0){
	return head+tail;
	}
	return head+' '+this.toSeq().map(this.__toStringMapper).join(', ')+' '+tail;
	},


	// ### ES6 Collection methods (ES6 Array and Map)

	concat:function concat(){var values=SLICE$0.call(arguments,0);
	return reify(this,concatFactory(this,values));
	},

	includes:function includes(searchValue){
	return this.some(function(value){return is(value,searchValue);});
	},

	entries:function entries(){
	return this.__iterator(ITERATE_ENTRIES);
	},

	every:function every(predicate,context){
	assertNotInfinite(this.size);
	var returnValue=true;
	this.__iterate(function(v,k,c){
	if(!predicate.call(context,v,k,c)){
	returnValue=false;
	return false;
	}
	});
	return returnValue;
	},

	filter:function filter(predicate,context){
	return reify(this,filterFactory(this,predicate,context,true));
	},

	find:function find(predicate,context,notSetValue){
	var entry=this.findEntry(predicate,context);
	return entry?entry[1]:notSetValue;
	},

	findEntry:function findEntry(predicate,context){
	var found;
	this.__iterate(function(v,k,c){
	if(predicate.call(context,v,k,c)){
	found=[k,v];
	return false;
	}
	});
	return found;
	},

	findLastEntry:function findLastEntry(predicate,context){
	return this.toSeq().reverse().findEntry(predicate,context);
	},

	forEach:function forEach(sideEffect,context){
	assertNotInfinite(this.size);
	return this.__iterate(context?sideEffect.bind(context):sideEffect);
	},

	join:function join(separator){
	assertNotInfinite(this.size);
	separator=separator!==undefined?''+separator:',';
	var joined='';
	var isFirst=true;
	this.__iterate(function(v){
	isFirst?isFirst=false:joined+=separator;
	joined+=v!==null&&v!==undefined?v.toString():'';
	});
	return joined;
	},

	keys:function keys(){
	return this.__iterator(ITERATE_KEYS);
	},

	map:function map(mapper,context){
	return reify(this,mapFactory(this,mapper,context));
	},

	reduce:function reduce(reducer,initialReduction,context){
	assertNotInfinite(this.size);
	var reduction;
	var useFirst;
	if(arguments.length<2){
	useFirst=true;
	}else{
	reduction=initialReduction;
	}
	this.__iterate(function(v,k,c){
	if(useFirst){
	useFirst=false;
	reduction=v;
	}else{
	reduction=reducer.call(context,reduction,v,k,c);
	}
	});
	return reduction;
	},

	reduceRight:function reduceRight(reducer,initialReduction,context){
	var reversed=this.toKeyedSeq().reverse();
	return reversed.reduce.apply(reversed,arguments);
	},

	reverse:function reverse(){
	return reify(this,reverseFactory(this,true));
	},

	slice:function slice(begin,end){
	return reify(this,sliceFactory(this,begin,end,true));
	},

	some:function some(predicate,context){
	return!this.every(not(predicate),context);
	},

	sort:function sort(comparator){
	return reify(this,sortFactory(this,comparator));
	},

	values:function values(){
	return this.__iterator(ITERATE_VALUES);
	},


	// ### More sequential methods

	butLast:function butLast(){
	return this.slice(0,-1);
	},

	isEmpty:function isEmpty(){
	return this.size!==undefined?this.size===0:!this.some(function(){return true;});
	},

	count:function count(predicate,context){
	return ensureSize(
	predicate?this.toSeq().filter(predicate,context):this);

	},

	countBy:function countBy(grouper,context){
	return countByFactory(this,grouper,context);
	},

	equals:function equals(other){
	return deepEqual(this,other);
	},

	entrySeq:function entrySeq(){
	var iterable=this;
	if(iterable._cache){
	// We cache as an entries array, so we can just return the cache!
	return new ArraySeq(iterable._cache);
	}
	var entriesSequence=iterable.toSeq().map(entryMapper).toIndexedSeq();
	entriesSequence.fromEntrySeq=function(){return iterable.toSeq();};
	return entriesSequence;
	},

	filterNot:function filterNot(predicate,context){
	return this.filter(not(predicate),context);
	},

	findLast:function findLast(predicate,context,notSetValue){
	return this.toKeyedSeq().reverse().find(predicate,context,notSetValue);
	},

	first:function first(){
	return this.find(returnTrue);
	},

	flatMap:function flatMap(mapper,context){
	return reify(this,flatMapFactory(this,mapper,context));
	},

	flatten:function flatten(depth){
	return reify(this,flattenFactory(this,depth,true));
	},

	fromEntrySeq:function fromEntrySeq(){
	return new FromEntriesSequence(this);
	},

	get:function get(searchKey,notSetValue){
	return this.find(function(_,key){return is(key,searchKey);},undefined,notSetValue);
	},

	getIn:function getIn(searchKeyPath,notSetValue){
	var nested=this;
	// Note: in an ES6 environment, we would prefer:
	// for (var key of searchKeyPath) {
	var iter=forceIterator(searchKeyPath);
	var step;
	while(!(step=iter.next()).done){
	var key=step.value;
	nested=nested&&nested.get?nested.get(key,NOT_SET):NOT_SET;
	if(nested===NOT_SET){
	return notSetValue;
	}
	}
	return nested;
	},

	groupBy:function groupBy(grouper,context){
	return groupByFactory(this,grouper,context);
	},

	has:function has(searchKey){
	return this.get(searchKey,NOT_SET)!==NOT_SET;
	},

	hasIn:function hasIn(searchKeyPath){
	return this.getIn(searchKeyPath,NOT_SET)!==NOT_SET;
	},

	isSubset:function isSubset(iter){
	iter=typeof iter.includes==='function'?iter:Iterable(iter);
	return this.every(function(value){return iter.includes(value);});
	},

	isSuperset:function isSuperset(iter){
	iter=typeof iter.isSubset==='function'?iter:Iterable(iter);
	return iter.isSubset(this);
	},

	keySeq:function keySeq(){
	return this.toSeq().map(keyMapper).toIndexedSeq();
	},

	last:function last(){
	return this.toSeq().reverse().first();
	},

	max:function max(comparator){
	return maxFactory(this,comparator);
	},

	maxBy:function maxBy(mapper,comparator){
	return maxFactory(this,comparator,mapper);
	},

	min:function min(comparator){
	return maxFactory(this,comparator?neg(comparator):defaultNegComparator);
	},

	minBy:function minBy(mapper,comparator){
	return maxFactory(this,comparator?neg(comparator):defaultNegComparator,mapper);
	},

	rest:function rest(){
	return this.slice(1);
	},

	skip:function skip(amount){
	return this.slice(Math.max(0,amount));
	},

	skipLast:function skipLast(amount){
	return reify(this,this.toSeq().reverse().skip(amount).reverse());
	},

	skipWhile:function skipWhile(predicate,context){
	return reify(this,skipWhileFactory(this,predicate,context,true));
	},

	skipUntil:function skipUntil(predicate,context){
	return this.skipWhile(not(predicate),context);
	},

	sortBy:function sortBy(mapper,comparator){
	return reify(this,sortFactory(this,comparator,mapper));
	},

	take:function take(amount){
	return this.slice(0,Math.max(0,amount));
	},

	takeLast:function takeLast(amount){
	return reify(this,this.toSeq().reverse().take(amount).reverse());
	},

	takeWhile:function takeWhile(predicate,context){
	return reify(this,takeWhileFactory(this,predicate,context));
	},

	takeUntil:function takeUntil(predicate,context){
	return this.takeWhile(not(predicate),context);
	},

	valueSeq:function valueSeq(){
	return this.toIndexedSeq();
	},


	// ### Hashable Object

	hashCode:function hashCode(){
	return this.__hash||(this.__hash=hashIterable(this));
	}


	// ### Internal

	// abstract __iterate(fn, reverse)

	// abstract __iterator(type, reverse)
	});

	// var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	// var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	// var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	// var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	var IterablePrototype=Iterable.prototype;
	IterablePrototype[IS_ITERABLE_SENTINEL]=true;
	IterablePrototype[ITERATOR_SYMBOL]=IterablePrototype.values;
	IterablePrototype.__toJS=IterablePrototype.toArray;
	IterablePrototype.__toStringMapper=quoteString;
	IterablePrototype.inspect=
	IterablePrototype.toSource=function(){return this.toString();};
	IterablePrototype.chain=IterablePrototype.flatMap;
	IterablePrototype.contains=IterablePrototype.includes;

	// Temporary warning about using length
	(function(){
	try{
	Object.defineProperty(IterablePrototype,'length',{
	get:function get(){
	if(!Iterable.noLengthWarning){
	var stack;
	try{
	throw new Error();
	}catch(error){
	stack=error.stack;
	}
	if(stack.indexOf('_wrapObject')===-1){
	console&&console.warn&&console.warn(
	'iterable.length has been deprecated, '+
	'use iterable.size or iterable.count(). '+
	'This warning will become a silent error in a future version. '+
	stack);

	return this.size;
	}
	}
	}});

	}catch(e){}
	})();



	mixin(KeyedIterable,{

	// ### More sequential methods

	flip:function flip(){
	return reify(this,flipFactory(this));
	},

	findKey:function findKey(predicate,context){
	var entry=this.findEntry(predicate,context);
	return entry&&entry[0];
	},

	findLastKey:function findLastKey(predicate,context){
	return this.toSeq().reverse().findKey(predicate,context);
	},

	keyOf:function keyOf(searchValue){
	return this.findKey(function(value){return is(value,searchValue);});
	},

	lastKeyOf:function lastKeyOf(searchValue){
	return this.findLastKey(function(value){return is(value,searchValue);});
	},

	mapEntries:function mapEntries(mapper,context){var this$0=this;
	var iterations=0;
	return reify(this,
	this.toSeq().map(
	function(v,k){return mapper.call(context,[k,v],iterations++,this$0);}).
	fromEntrySeq());

	},

	mapKeys:function mapKeys(mapper,context){var this$0=this;
	return reify(this,
	this.toSeq().flip().map(
	function(k,v){return mapper.call(context,k,v,this$0);}).
	flip());

	}});



	var KeyedIterablePrototype=KeyedIterable.prototype;
	KeyedIterablePrototype[IS_KEYED_SENTINEL]=true;
	KeyedIterablePrototype[ITERATOR_SYMBOL]=IterablePrototype.entries;
	KeyedIterablePrototype.__toJS=IterablePrototype.toObject;
	KeyedIterablePrototype.__toStringMapper=function(v,k){return JSON.stringify(k)+': '+quoteString(v);};



	mixin(IndexedIterable,{

	// ### Conversion to other types

	toKeyedSeq:function toKeyedSeq(){
	return new ToKeyedSequence(this,false);
	},


	// ### ES6 Collection methods (ES6 Array and Map)

	filter:function filter(predicate,context){
	return reify(this,filterFactory(this,predicate,context,false));
	},

	findIndex:function findIndex(predicate,context){
	var entry=this.findEntry(predicate,context);
	return entry?entry[0]:-1;
	},

	indexOf:function indexOf(searchValue){
	var key=this.toKeyedSeq().keyOf(searchValue);
	return key===undefined?-1:key;
	},

	lastIndexOf:function lastIndexOf(searchValue){
	var key=this.toKeyedSeq().reverse().keyOf(searchValue);
	return key===undefined?-1:key;

	// var index =
	// return this.toSeq().reverse().indexOf(searchValue);
	},

	reverse:function reverse(){
	return reify(this,reverseFactory(this,false));
	},

	slice:function slice(begin,end){
	return reify(this,sliceFactory(this,begin,end,false));
	},

	splice:function splice(index,removeNum/*, ...values*/){
	var numArgs=arguments.length;
	removeNum=Math.max(removeNum|0,0);
	if(numArgs===0||numArgs===2&&!removeNum){
	return this;
	}
	// If index is negative, it should resolve relative to the size of the
	// collection. However size may be expensive to compute if not cached, so
	// only call count() if the number is in fact negative.
	index=resolveBegin(index,index<0?this.count():this.size);
	var spliced=this.slice(0,index);
	return reify(
	this,
	numArgs===1?
	spliced:
	spliced.concat(arrCopy(arguments,2),this.slice(index+removeNum)));

	},


	// ### More collection methods

	findLastIndex:function findLastIndex(predicate,context){
	var key=this.toKeyedSeq().findLastKey(predicate,context);
	return key===undefined?-1:key;
	},

	first:function first(){
	return this.get(0);
	},

	flatten:function flatten(depth){
	return reify(this,flattenFactory(this,depth,false));
	},

	get:function get(index,notSetValue){
	index=wrapIndex(this,index);
	return index<0||this.size===Infinity||
	this.size!==undefined&&index>this.size?
	notSetValue:
	this.find(function(_,key){return key===index;},undefined,notSetValue);
	},

	has:function has(index){
	index=wrapIndex(this,index);
	return index>=0&&(this.size!==undefined?
	this.size===Infinity||index<this.size:
	this.indexOf(index)!==-1);

	},

	interpose:function interpose(separator){
	return reify(this,interposeFactory(this,separator));
	},

	interleave:function interleave()/*...iterables*/{
	var iterables=[this].concat(arrCopy(arguments));
	var zipped=zipWithFactory(this.toSeq(),IndexedSeq.of,iterables);
	var interleaved=zipped.flatten(true);
	if(zipped.size){
	interleaved.size=zipped.size*iterables.length;
	}
	return reify(this,interleaved);
	},

	last:function last(){
	return this.get(-1);
	},

	skipWhile:function skipWhile(predicate,context){
	return reify(this,skipWhileFactory(this,predicate,context,false));
	},

	zip:function zip()/*, ...iterables */{
	var iterables=[this].concat(arrCopy(arguments));
	return reify(this,zipWithFactory(this,defaultZipper,iterables));
	},

	zipWith:function zipWith(zipper/*, ...iterables */){
	var iterables=arrCopy(arguments);
	iterables[0]=this;
	return reify(this,zipWithFactory(this,zipper,iterables));
	}});



	IndexedIterable.prototype[IS_INDEXED_SENTINEL]=true;
	IndexedIterable.prototype[IS_ORDERED_SENTINEL]=true;



	mixin(SetIterable,{

	// ### ES6 Collection methods (ES6 Array and Map)

	get:function get(value,notSetValue){
	return this.has(value)?value:notSetValue;
	},

	includes:function includes(value){
	return this.has(value);
	},


	// ### More sequential methods

	keySeq:function keySeq(){
	return this.valueSeq();
	}});



	SetIterable.prototype.has=IterablePrototype.includes;


	// Mixin subclasses

	mixin(KeyedSeq,KeyedIterable.prototype);
	mixin(IndexedSeq,IndexedIterable.prototype);
	mixin(SetSeq,SetIterable.prototype);

	mixin(KeyedCollection,KeyedIterable.prototype);
	mixin(IndexedCollection,IndexedIterable.prototype);
	mixin(SetCollection,SetIterable.prototype);


	// #pragma Helper functions

	function keyMapper(v,k){
	return k;
	}

	function entryMapper(v,k){
	return[k,v];
	}

	function not(predicate){
	return function(){
	return!predicate.apply(this,arguments);
	};
	}

	function neg(predicate){
	return function(){
	return-predicate.apply(this,arguments);
	};
	}

	function quoteString(value){
	return typeof value==='string'?JSON.stringify(value):value;
	}

	function defaultZipper(){
	return arrCopy(arguments);
	}

	function defaultNegComparator(a,b){
	return a<b?1:a>b?-1:0;
	}

	function hashIterable(iterable){
	if(iterable.size===Infinity){
	return 0;
	}
	var ordered=isOrdered(iterable);
	var keyed=isKeyed(iterable);
	var h=ordered?1:0;
	var size=iterable.__iterate(
	keyed?
	ordered?
	function(v,k){h=31*h+hashMerge(hash(v),hash(k))|0;}:
	function(v,k){h=h+hashMerge(hash(v),hash(k))|0;}:
	ordered?
	function(v){h=31*h+hash(v)|0;}:
	function(v){h=h+hash(v)|0;});

	return murmurHashOfSize(size,h);
	}

	function murmurHashOfSize(size,h){
	h=imul(h,0xCC9E2D51);
	h=imul(h<<15|h>>>-15,0x1B873593);
	h=imul(h<<13|h>>>-13,5);
	h=(h+0xE6546B64|0)^size;
	h=imul(h^h>>>16,0x85EBCA6B);
	h=imul(h^h>>>13,0xC2B2AE35);
	h=smi(h^h>>>16);
	return h;
	}

	function hashMerge(a,b){
	return a^b+0x9E3779B9+(a<<6)+(a>>2)|0;// int
	}

	var Immutable={

	Iterable:Iterable,

	Seq:Seq,
	Collection:Collection,
	Map:Map,
	OrderedMap:OrderedMap,
	List:List,
	Stack:Stack,
	Set:Set,
	OrderedSet:OrderedSet,

	Record:Record,
	Range:Range,
	Repeat:Repeat,

	is:is,
	fromJS:fromJS};



	return Immutable;

	});

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CharacterMetadata
	 * @typechecks
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;}

	function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var _require = __webpack_require__(269);

	var Map = _require.Map;
	var OrderedSet = _require.OrderedSet;
	var Record = _require.Record;


	var EMPTY_SET = OrderedSet();

	var defaultRecord = {
	  style: EMPTY_SET,
	  entity: null };


	var CharacterMetadataRecord = Record(defaultRecord);

	var CharacterMetadata = function (_CharacterMetadataRec) {
	  _inherits(CharacterMetadata, _CharacterMetadataRec);

	  function CharacterMetadata() {
	    _classCallCheck(this, CharacterMetadata);

	    return _possibleConstructorReturn(this, _CharacterMetadataRec.apply(this, arguments));
	  }

	  CharacterMetadata.prototype.getStyle = function getStyle() {
	    return this.get('style');
	  };

	  CharacterMetadata.prototype.getEntity = function getEntity() {
	    return this.get('entity');
	  };

	  CharacterMetadata.prototype.hasStyle = function hasStyle(style) {
	    return this.getStyle().has(style);
	  };

	  CharacterMetadata.applyStyle = function applyStyle(record, style) {
	    var withStyle = record.set('style', record.getStyle().add(style));
	    return CharacterMetadata.create(withStyle);
	  };

	  CharacterMetadata.removeStyle = function removeStyle(record, style) {
	    var withoutStyle = record.set('style', record.getStyle().remove(style));
	    return CharacterMetadata.create(withoutStyle);
	  };

	  CharacterMetadata.applyEntity = function applyEntity(record, entityKey) {
	    var withEntity = record.getEntity() === entityKey ? record : record.set('entity', entityKey);
	    return CharacterMetadata.create(withEntity);
	  };

	  /**
	      * Use this function instead of the `CharacterMetadata` constructor.
	      * Since most content generally uses only a very small number of
	      * style/entity permutations, we can reuse these objects as often as
	      * possible.
	      */


	  CharacterMetadata.create = function create(config) {
	    if (!config) {
	      return EMPTY;
	    }

	    // Fill in unspecified properties, if necessary.
	    var configMap = Map({ style: EMPTY_SET, entity: null }).merge(config);

	    var existing = pool.get(configMap);
	    if (existing) {
	      return existing;
	    }

	    var newCharacter = new CharacterMetadata(configMap);
	    pool = pool.set(configMap, newCharacter);
	    return newCharacter;
	  };

	  return CharacterMetadata;
	}(CharacterMetadataRecord);

	var EMPTY = new CharacterMetadata();
	var pool = Map([[Map(defaultRecord), EMPTY]]);

	CharacterMetadata.EMPTY = EMPTY;

	module.exports = CharacterMetadata;

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ContentBlock
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;}

	function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var Immutable = __webpack_require__(269);

	var findRangesImmutable = __webpack_require__(272);

	var List = Immutable.List;
	var Map = Immutable.Map;
	var OrderedSet = Immutable.OrderedSet;
	var Record = Immutable.Record;


	var EMPTY_SET = OrderedSet();

	var defaultRecord = {
	  key: '',
	  type: 'unstyled',
	  text: '',
	  characterList: List(),
	  depth: 0,
	  data: Map() };


	var ContentBlockRecord = Record(defaultRecord);

	var ContentBlock = function (_ContentBlockRecord) {
	  _inherits(ContentBlock, _ContentBlockRecord);

	  function ContentBlock() {
	    _classCallCheck(this, ContentBlock);

	    return _possibleConstructorReturn(this, _ContentBlockRecord.apply(this, arguments));
	  }

	  ContentBlock.prototype.getKey = function getKey() {
	    return this.get('key');
	  };

	  ContentBlock.prototype.getType = function getType() {
	    return this.get('type');
	  };

	  ContentBlock.prototype.getText = function getText() {
	    return this.get('text');
	  };

	  ContentBlock.prototype.getCharacterList = function getCharacterList() {
	    return this.get('characterList');
	  };

	  ContentBlock.prototype.getLength = function getLength() {
	    return this.getText().length;
	  };

	  ContentBlock.prototype.getDepth = function getDepth() {
	    return this.get('depth');
	  };

	  ContentBlock.prototype.getData = function getData() {
	    return this.get('data');
	  };

	  ContentBlock.prototype.getInlineStyleAt = function getInlineStyleAt(offset) {
	    var character = this.getCharacterList().get(offset);
	    return character ? character.getStyle() : EMPTY_SET;
	  };

	  ContentBlock.prototype.getEntityAt = function getEntityAt(offset) {
	    var character = this.getCharacterList().get(offset);
	    return character ? character.getEntity() : null;
	  };

	  /**
	      * Execute a callback for every contiguous range of styles within the block.
	      */


	  ContentBlock.prototype.findStyleRanges = function findStyleRanges(filterFn, callback) {
	    findRangesImmutable(this.getCharacterList(), haveEqualStyle, filterFn, callback);
	  };

	  /**
	      * Execute a callback for every contiguous range of entities within the block.
	      */


	  ContentBlock.prototype.findEntityRanges = function findEntityRanges(filterFn, callback) {
	    findRangesImmutable(this.getCharacterList(), haveEqualEntity, filterFn, callback);
	  };

	  return ContentBlock;
	}(ContentBlockRecord);

	function haveEqualStyle(charA, charB) {
	  return charA.getStyle() === charB.getStyle();
	}

	function haveEqualEntity(charA, charB) {
	  return charA.getEntity() === charB.getEntity();
	}

	module.exports = ContentBlock;

/***/ },
/* 272 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findRangesImmutable
	 * 
	 */

	'use strict';

	/**
	               * Search through an array to find contiguous stretches of elements that
	               * match a specified filter function.
	               *
	               * When ranges are found, execute a specified `found` function to supply
	               * the values to the caller.
	               */
	function findRangesImmutable(haystack, areEqualFn, filterFn, foundFn) {
	  if (!haystack.size) {
	    return;
	  }

	  var cursor = 0;

	  haystack.reduce(function (value, nextValue, nextIndex) {
	    /* $FlowFixMe(>=0.28.0): `value` could be undefined! */
	    if (!areEqualFn(value, nextValue)) {
	      /* $FlowFixMe(>=0.28.0): `value` could be undefined! */
	      if (filterFn(value)) {
	        foundFn(cursor, nextIndex);
	      }
	      cursor = nextIndex;
	    }
	    return nextValue;
	  });

	  filterFn(haystack.last()) && foundFn(cursor, haystack.count());
	}

	module.exports = findRangesImmutable;

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftModifier
	 * @typechecks
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(270);
	var ContentStateInlineStyle = __webpack_require__(274);
	var Immutable = __webpack_require__(269);

	var applyEntityToContentState = __webpack_require__(275);
	var getCharacterRemovalRange = __webpack_require__(277);
	var getContentStateFragment = __webpack_require__(284);
	var insertFragmentIntoContentState = __webpack_require__(287);
	var insertTextIntoContentState = __webpack_require__(289);
	var invariant = __webpack_require__(281);
	var modifyBlockForContentState = __webpack_require__(290);
	var removeEntitiesAtEdges = __webpack_require__(286);
	var removeRangeFromContentState = __webpack_require__(291);
	var splitBlockInContentState = __webpack_require__(292);

	var OrderedSet = Immutable.OrderedSet;

	/**
	                                        * `DraftModifier` provides a set of convenience methods that apply
	                                        * modifications to a `ContentState` object based on a target `SelectionState`.
	                                        *
	                                        * Any change to a `ContentState` should be decomposable into a series of
	                                        * transaction functions that apply the required changes and return output
	                                        * `ContentState` objects.
	                                        *
	                                        * These functions encapsulate some of the most common transaction sequences.
	                                        */

	var DraftModifier = {
	  replaceText: function replaceText(contentState, rangeToReplace, text, inlineStyle, entityKey) {
	    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToReplace);
	    var withoutText = removeRangeFromContentState(withoutEntities, rangeToReplace);

	    var character = CharacterMetadata.create({
	      style: inlineStyle || OrderedSet(),
	      entity: entityKey || null });


	    return insertTextIntoContentState(withoutText, withoutText.getSelectionAfter(), text, character);
	  },

	  insertText: function insertText(contentState, targetRange, text, inlineStyle, entityKey) {
	    !targetRange.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Target range must be collapsed for `insertText`.') : invariant(false) : void 0;
	    return DraftModifier.replaceText(contentState, targetRange, text, inlineStyle, entityKey);
	  },

	  moveText: function moveText(contentState, removalRange, targetRange) {
	    var movedFragment = getContentStateFragment(contentState, removalRange);

	    var afterRemoval = DraftModifier.removeRange(contentState, removalRange, 'backward');

	    return DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);
	  },

	  replaceWithFragment: function replaceWithFragment(contentState, targetRange, fragment) {
	    var withoutEntities = removeEntitiesAtEdges(contentState, targetRange);
	    var withoutText = removeRangeFromContentState(withoutEntities, targetRange);

	    return insertFragmentIntoContentState(withoutText, withoutText.getSelectionAfter(), fragment);
	  },

	  removeRange: function removeRange(contentState, rangeToRemove, removalDirection) {
	    // Check whether the selection state overlaps with a single entity.
	    // If so, try to remove the appropriate substring of the entity text.
	    if (rangeToRemove.getAnchorKey() === rangeToRemove.getFocusKey()) {
	      var key = rangeToRemove.getAnchorKey();
	      var startOffset = rangeToRemove.getStartOffset();
	      var endOffset = rangeToRemove.getEndOffset();
	      var block = contentState.getBlockForKey(key);

	      var startEntity = block.getEntityAt(startOffset);
	      var endEntity = block.getEntityAt(endOffset - 1);
	      if (startEntity && startEntity === endEntity) {
	        var adjustedRemovalRange = getCharacterRemovalRange(block, rangeToRemove, removalDirection);
	        return removeRangeFromContentState(contentState, adjustedRemovalRange);
	      }
	    }

	    var withoutEntities = removeEntitiesAtEdges(contentState, rangeToRemove);
	    return removeRangeFromContentState(withoutEntities, rangeToRemove);
	  },

	  splitBlock: function splitBlock(contentState, selectionState) {
	    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);
	    var withoutText = removeRangeFromContentState(withoutEntities, selectionState);

	    return splitBlockInContentState(withoutText, withoutText.getSelectionAfter());
	  },

	  applyInlineStyle: function applyInlineStyle(contentState, selectionState, inlineStyle) {
	    return ContentStateInlineStyle.add(contentState, selectionState, inlineStyle);
	  },

	  removeInlineStyle: function removeInlineStyle(contentState, selectionState, inlineStyle) {
	    return ContentStateInlineStyle.remove(contentState, selectionState, inlineStyle);
	  },

	  setBlockType: function setBlockType(contentState, selectionState, blockType) {
	    return modifyBlockForContentState(contentState, selectionState, function (block) {
	      return block.merge({ type: blockType, depth: 0 });
	    });
	  },

	  setBlockData: function setBlockData(contentState, selectionState, blockData) {
	    return modifyBlockForContentState(contentState, selectionState, function (block) {
	      return block.merge({ data: blockData });
	    });
	  },

	  mergeBlockData: function mergeBlockData(contentState, selectionState, blockData) {
	    return modifyBlockForContentState(contentState, selectionState, function (block) {
	      return block.merge({ data: block.getData().merge(blockData) });
	    });
	  },

	  applyEntity: function applyEntity(contentState, selectionState, entityKey) {
	    var withoutEntities = removeEntitiesAtEdges(contentState, selectionState);
	    return applyEntityToContentState(withoutEntities, selectionState, entityKey);
	  } };


	module.exports = DraftModifier;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ContentStateInlineStyle
	 * @typechecks
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(270);

	var _require = __webpack_require__(269);

	var Map = _require.Map;


	var ContentStateInlineStyle = {
	  add: function add(contentState, selectionState, inlineStyle) {
	    return modifyInlineStyle(contentState, selectionState, inlineStyle, true);
	  },

	  remove: function remove(contentState, selectionState, inlineStyle) {
	    return modifyInlineStyle(contentState, selectionState, inlineStyle, false);
	  } };


	function modifyInlineStyle(contentState, selectionState, inlineStyle, addOrRemove) {
	  var blockMap = contentState.getBlockMap();
	  var startKey = selectionState.getStartKey();
	  var startOffset = selectionState.getStartOffset();
	  var endKey = selectionState.getEndKey();
	  var endOffset = selectionState.getEndOffset();

	  var newBlocks = blockMap.skipUntil(function (_, k) {
	    return k === startKey;
	  }).takeUntil(function (_, k) {
	    return k === endKey;
	  }).concat(Map([[endKey, blockMap.get(endKey)]])).map(function (block, blockKey) {
	    var sliceStart;
	    var sliceEnd;

	    if (startKey === endKey) {
	      sliceStart = startOffset;
	      sliceEnd = endOffset;
	    } else {
	      sliceStart = blockKey === startKey ? startOffset : 0;
	      sliceEnd = blockKey === endKey ? endOffset : block.getLength();
	    }

	    var chars = block.getCharacterList();
	    var current;
	    while (sliceStart < sliceEnd) {
	      current = chars.get(sliceStart);
	      chars = chars.set(sliceStart, addOrRemove ? CharacterMetadata.applyStyle(current, inlineStyle) : CharacterMetadata.removeStyle(current, inlineStyle));
	      sliceStart++;
	    }

	    return block.set('characterList', chars);
	  });

	  return contentState.merge({
	    blockMap: blockMap.merge(newBlocks),
	    selectionBefore: selectionState,
	    selectionAfter: selectionState });

	}

	module.exports = ContentStateInlineStyle;

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule applyEntityToContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(269);

	var applyEntityToContentBlock = __webpack_require__(276);

	function applyEntityToContentState(contentState, selectionState, entityKey) {
	  var blockMap = contentState.getBlockMap();
	  var startKey = selectionState.getStartKey();
	  var startOffset = selectionState.getStartOffset();
	  var endKey = selectionState.getEndKey();
	  var endOffset = selectionState.getEndOffset();

	  var newBlocks = blockMap.skipUntil(function (_, k) {
	    return k === startKey;
	  }).takeUntil(function (_, k) {
	    return k === endKey;
	  }).toOrderedMap().merge(Immutable.OrderedMap([[endKey, blockMap.get(endKey)]])).map(function (block, blockKey) {
	    var sliceStart = blockKey === startKey ? startOffset : 0;
	    var sliceEnd = blockKey === endKey ? endOffset : block.getLength();
	    return applyEntityToContentBlock(block, sliceStart, sliceEnd, entityKey);
	  });

	  return contentState.merge({
	    blockMap: blockMap.merge(newBlocks),
	    selectionBefore: selectionState,
	    selectionAfter: selectionState });

	}

	module.exports = applyEntityToContentState;

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule applyEntityToContentBlock
	 * @typechecks
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(270);

	function applyEntityToContentBlock(contentBlock, start, end, entityKey) {
	  var characterList = contentBlock.getCharacterList();
	  while (start < end) {
	    characterList = characterList.set(start, CharacterMetadata.applyEntity(characterList.get(start), entityKey));
	    start++;
	  }
	  return contentBlock.set('characterList', characterList);
	}

	module.exports = applyEntityToContentBlock;

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getCharacterRemovalRange
	 * @typechecks
	 * 
	 */

	'use strict';

	var DraftEntity = __webpack_require__(278);
	var DraftEntitySegments = __webpack_require__(282);

	var getRangesForDraftEntity = __webpack_require__(283);
	var invariant = __webpack_require__(281);

	/**
	                                                * Given a SelectionState and a removal direction, determine the entire range
	                                                * that should be removed from a ContentState. This is based on any entities
	                                                * within the target, with their `mutability` values taken into account.
	                                                *
	                                                * For instance, if we are attempting to remove part of an "immutable" entity
	                                                * range, the entire entity must be removed. The returned `SelectionState`
	                                                * will be adjusted accordingly.
	                                                */
	function getCharacterRemovalRange(block, selectionState, direction) {
	  var start = selectionState.getStartOffset();
	  var end = selectionState.getEndOffset();
	  var entityKey = block.getEntityAt(start);
	  if (!entityKey) {
	    return selectionState;
	  }

	  var entity = DraftEntity.get(entityKey);
	  var mutability = entity.getMutability();

	  // `MUTABLE` entities can just have the specified range of text removed
	  // directly. No adjustments are needed.
	  if (mutability === 'MUTABLE') {
	    return selectionState;
	  }

	  // Find the entity range that overlaps with our removal range.
	  var entityRanges = getRangesForDraftEntity(block, entityKey).filter(function (range) {
	    return start < range.end && end > range.start;
	  });

	  !(entityRanges.length == 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There should only be one entity range within this removal range.') : invariant(false) : void 0;

	  var entityRange = entityRanges[0];

	  // For `IMMUTABLE` entity types, we will remove the entire entity range.
	  if (mutability === 'IMMUTABLE') {
	    return selectionState.merge({
	      anchorOffset: entityRange.start,
	      focusOffset: entityRange.end,
	      isBackward: false });

	  }

	  // For `SEGMENTED` entity types, determine the appropriate segment to
	  // remove.
	  var removalRange = DraftEntitySegments.getRemovalRange(start, end, block.getText().slice(entityRange.start, entityRange.end), entityRange.start, direction);

	  return selectionState.merge({
	    anchorOffset: removalRange.start,
	    focusOffset: removalRange.end,
	    isBackward: false });

	}

	module.exports = getCharacterRemovalRange;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var _assign = __webpack_require__(279);

	var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	/**
	                                                                                                                                                                                                                                                   * Copyright (c) 2013-present, Facebook, Inc.
	                                                                                                                                                                                                                                                   * All rights reserved.
	                                                                                                                                                                                                                                                   *
	                                                                                                                                                                                                                                                   * This source code is licensed under the BSD-style license found in the
	                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree. An additional grant
	                                                                                                                                                                                                                                                   * of patent rights can be found in the PATENTS file in the same directory.
	                                                                                                                                                                                                                                                   *
	                                                                                                                                                                                                                                                   * @providesModule DraftEntity
	                                                                                                                                                                                                                                                   * @typechecks
	                                                                                                                                                                                                                                                   * 
	                                                                                                                                                                                                                                                   */

	var DraftEntityInstance = __webpack_require__(280);
	var Immutable = __webpack_require__(269);

	var invariant = __webpack_require__(281);

	var Map = Immutable.Map;


	var instances = Map();
	var instanceKey = 0;

	/**
	                      * A "document entity" is an object containing metadata associated with a
	                      * piece of text in a ContentBlock.
	                      *
	                      * For example, a `link` entity might include a `uri` property. When a
	                      * ContentBlock is rendered in the browser, text that refers to that link
	                      * entity may be rendered as an anchor, with the `uri` as the href value.
	                      *
	                      * In a ContentBlock, every position in the text may correspond to zero
	                      * or one entities. This correspondence is tracked using a key string,
	                      * generated via DraftEntity.create() and used to obtain entity metadata
	                      * via DraftEntity.get().
	                      */
	var DraftEntity = {
	  /**
	                     * Create a DraftEntityInstance and store it for later retrieval.
	                     *
	                     * A random key string will be generated and returned. This key may
	                     * be used to track the entity's usage in a ContentBlock, and for
	                     * retrieving data about the entity at render time.
	                     */
	  create: function create(type, mutability, data) {
	    return DraftEntity.add(new DraftEntityInstance({ type: type, mutability: mutability, data: data || {} }));
	  },

	  /**
	      * Add an existing DraftEntityInstance to the DraftEntity map. This is
	      * useful when restoring instances from the server.
	      */
	  add: function add(instance) {
	    var key = '' + ++instanceKey;
	    instances = instances.set(key, instance);
	    return key;
	  },

	  /**
	      * Retrieve the entity corresponding to the supplied key string.
	      */
	  get: function get(key) {
	    var instance = instances.get(key);
	    !!!instance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown DraftEntity key.') : invariant(false) : void 0;
	    return instance;
	  },

	  /**
	      * Entity instances are immutable. If you need to update the data for an
	      * instance, this method will merge your data updates and return a new
	      * instance.
	      */
	  mergeData: function mergeData(key, toMerge) {
	    var instance = DraftEntity.get(key);
	    var newData = _extends({}, instance.getData(), toMerge);
	    var newInstance = instance.set('data', newData);
	    instances = instances.set(key, newInstance);
	    return newInstance;
	  },

	  /**
	      * Completely replace the data for a given instance.
	      */
	  replaceData: function replaceData(key, newData) {
	    var instance = DraftEntity.get(key);
	    var newInstance = instance.set('data', newData);
	    instances = instances.set(key, newInstance);
	    return newInstance;
	  } };


	module.exports = DraftEntity;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 279 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc'); // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
			'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEntityInstance
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;}

	function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var Immutable = __webpack_require__(269);

	var Record = Immutable.Record;


	var DraftEntityInstanceRecord = Record({
	  type: 'TOKEN',
	  mutability: 'IMMUTABLE',
	  data: Object });


	/**
	                    * An instance of a document entity, consisting of a `type` and relevant
	                    * `data`, metadata about the entity.
	                    *
	                    * For instance, a "link" entity might provide a URI, and a "mention"
	                    * entity might provide the mentioned user's ID. These pieces of data
	                    * may be used when rendering the entity as part of a ContentBlock DOM
	                    * representation. For a link, the data would be used as an href for
	                    * the rendered anchor. For a mention, the ID could be used to retrieve
	                    * a hovercard.
	                    */

	var DraftEntityInstance = function (_DraftEntityInstanceR) {
	  _inherits(DraftEntityInstance, _DraftEntityInstanceR);

	  function DraftEntityInstance() {
	    _classCallCheck(this, DraftEntityInstance);

	    return _possibleConstructorReturn(this, _DraftEntityInstanceR.apply(this, arguments));
	  }

	  DraftEntityInstance.prototype.getType = function getType() {
	    return this.get('type');
	  };

	  DraftEntityInstance.prototype.getMutability = function getMutability() {
	    return this.get('mutability');
	  };

	  DraftEntityInstance.prototype.getData = function getData() {
	    return this.get('data');
	  };

	  return DraftEntityInstance;
	}(DraftEntityInstanceRecord);

	module.exports = DraftEntityInstance;

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	               * Use invariant() to assert state which your program assumes to be true.
	               *
	               * Provide sprintf-style format (only %s is supported) and arguments
	               * to provide information about what broke and what you were
	               * expecting.
	               *
	               * The invariant message will be stripped in production, but the invariant
	               * will remain to ensure logic does not differ in production.
	               */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 282 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEntitySegments
	 * @typechecks
	 * 
	 */

	'use strict';

	/**
	               * Identify the range to delete from a segmented entity.
	               *
	               * Rules:
	               *
	               *  Example: 'John F. Kennedy'
	               *
	               *   - Deletion from within any non-whitespace (i.e. ['John', 'F.', 'Kennedy'])
	               *     will return the range of that text.
	               *
	               *       'John F. Kennedy' -> 'John F.'
	               *                  ^
	               *
	               *   - Forward deletion of whitespace will remove the following section:
	               *
	               *       'John F. Kennedy' -> 'John Kennedy'
	               *            ^
	               *
	               *   - Backward deletion of whitespace will remove the previous section:
	               *
	               *       'John F. Kennedy' -> 'F. Kennedy'
	               *            ^
	               */
	var DraftEntitySegments = {
	  getRemovalRange: function getRemovalRange(selectionStart, selectionEnd, text, entityStart, direction) {
	    var segments = text.split(' ');
	    segments = segments.map(function ( /*string*/segment, /*number*/ii) {
	      if (direction === 'forward') {
	        if (ii > 0) {
	          return ' ' + segment;
	        }
	      } else if (ii < segments.length - 1) {
	        return segment + ' ';
	      }
	      return segment;
	    });

	    var segmentStart = entityStart;
	    var segmentEnd;
	    var segment;
	    var removalStart = null;
	    var removalEnd = null;

	    for (var jj = 0; jj < segments.length; jj++) {
	      segment = segments[jj];
	      segmentEnd = segmentStart + segment.length;

	      // Our selection overlaps this segment.
	      if (selectionStart < segmentEnd && segmentStart < selectionEnd) {
	        if (removalStart !== null) {
	          removalEnd = segmentEnd;
	        } else {
	          removalStart = segmentStart;
	          removalEnd = segmentEnd;
	        }
	      } else if (removalStart !== null) {
	        break;
	      }

	      segmentStart = segmentEnd;
	    }

	    var entityEnd = entityStart + text.length;
	    var atStart = removalStart === entityStart;
	    var atEnd = removalEnd === entityEnd;

	    if (!atStart && atEnd || atStart && !atEnd) {
	      if (direction === 'forward') {
	        if (removalEnd !== entityEnd) {
	          removalEnd++;
	        }
	      } else if (removalStart !== entityStart) {
	        removalStart--;
	      }
	    }

	    return {
	      start: removalStart,
	      end: removalEnd };

	  } };


	module.exports = DraftEntitySegments;

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getRangesForDraftEntity
	 * @typechecks
	 * 
	 */

	'use strict';

	var invariant = __webpack_require__(281);

	/**
	                                                * Obtain the start and end positions of the range that has the
	                                                * specified entity applied to it.
	                                                *
	                                                * Entity keys are applied only to contiguous stretches of text, so this
	                                                * method searches for the first instance of the entity key and returns
	                                                * the subsequent range.
	                                                */
	function getRangesForDraftEntity(block, key) {
	  var ranges = [];
	  block.findEntityRanges(function (c) {
	    return c.getEntity() === key;
	  }, function (start, end) {
	    ranges.push({ start: start, end: end });
	  });

	  !!!ranges.length ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Entity key not found in this range.') : invariant(false) : void 0;

	  return ranges;
	}

	module.exports = getRangesForDraftEntity;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getContentStateFragment
	 * @typechecks
	 * 
	 */

	'use strict';

	var generateRandomKey = __webpack_require__(285);
	var removeEntitiesAtEdges = __webpack_require__(286);

	function getContentStateFragment(contentState, selectionState) {
	  var startKey = selectionState.getStartKey();
	  var startOffset = selectionState.getStartOffset();
	  var endKey = selectionState.getEndKey();
	  var endOffset = selectionState.getEndOffset();

	  // Edge entities should be stripped to ensure that we don't preserve
	  // invalid partial entities when the fragment is reused. We do, however,
	  // preserve entities that are entirely within the selection range.
	  var contentWithoutEdgeEntities = removeEntitiesAtEdges(contentState, selectionState);

	  var blockMap = contentWithoutEdgeEntities.getBlockMap();
	  var blockKeys = blockMap.keySeq();
	  var startIndex = blockKeys.indexOf(startKey);
	  var endIndex = blockKeys.indexOf(endKey) + 1;

	  var slice = blockMap.slice(startIndex, endIndex).map(function (block, blockKey) {
	    var newKey = generateRandomKey();

	    var text = block.getText();
	    var chars = block.getCharacterList();

	    if (startKey === endKey) {
	      return block.merge({
	        key: newKey,
	        text: text.slice(startOffset, endOffset),
	        characterList: chars.slice(startOffset, endOffset) });

	    }

	    if (blockKey === startKey) {
	      return block.merge({
	        key: newKey,
	        text: text.slice(startOffset),
	        characterList: chars.slice(startOffset) });

	    }

	    if (blockKey === endKey) {
	      return block.merge({
	        key: newKey,
	        text: text.slice(0, endOffset),
	        characterList: chars.slice(0, endOffset) });

	    }

	    return block.set('key', newKey);
	  });

	  return slice.toOrderedMap();
	}

	module.exports = getContentStateFragment;

/***/ },
/* 285 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule generateRandomKey
	 * @typechecks
	 * 
	 */

	'use strict';

	var seenKeys = {};
	var MULTIPLIER = Math.pow(2, 24);

	function generateRandomKey() {
	  var key = void 0;
	  while (key === undefined || seenKeys.hasOwnProperty(key) || !isNaN(+key)) {
	    key = Math.floor(Math.random() * MULTIPLIER).toString(32);
	  }
	  seenKeys[key] = true;
	  return key;
	}

	module.exports = generateRandomKey;

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule removeEntitiesAtEdges
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var CharacterMetadata = __webpack_require__(270);
	var DraftEntity = __webpack_require__(278);

	var findRangesImmutable = __webpack_require__(272);
	var invariant = __webpack_require__(281);

	function removeEntitiesAtEdges(contentState, selectionState) {
	  var blockMap = contentState.getBlockMap();

	  var updatedBlocks = {};

	  var startKey = selectionState.getStartKey();
	  var startOffset = selectionState.getStartOffset();
	  var startBlock = blockMap.get(startKey);
	  var updatedStart = removeForBlock(startBlock, startOffset);

	  if (updatedStart !== startBlock) {
	    updatedBlocks[startKey] = updatedStart;
	  }

	  var endKey = selectionState.getEndKey();
	  var endOffset = selectionState.getEndOffset();
	  var endBlock = blockMap.get(endKey);
	  if (startKey === endKey) {
	    endBlock = updatedStart;
	  }

	  var updatedEnd = removeForBlock(endBlock, endOffset);

	  if (updatedEnd !== endBlock) {
	    updatedBlocks[endKey] = updatedEnd;
	  }

	  if (!Object.keys(updatedBlocks).length) {
	    return contentState.set('selectionAfter', selectionState);
	  }

	  return contentState.merge({
	    blockMap: blockMap.merge(updatedBlocks),
	    selectionAfter: selectionState });

	}

	function getRemovalRange(characters, key, offset) {
	  var removalRange;
	  findRangesImmutable(characters, function (a, b) {
	    return a.getEntity() === b.getEntity();
	  }, function (element) {
	    return element.getEntity() === key;
	  }, function (start, end) {
	    if (start <= offset && end >= offset) {
	      removalRange = { start: start, end: end };
	    }
	  });
	  !((typeof removalRange === 'undefined' ? 'undefined' : _typeof(removalRange)) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Removal range must exist within character list.') : invariant(false) : void 0;
	  return removalRange;
	}

	function removeForBlock(block, offset) {
	  var chars = block.getCharacterList();
	  var charBefore = offset > 0 ? chars.get(offset - 1) : undefined;
	  var charAfter = offset < chars.count() ? chars.get(offset) : undefined;
	  var entityBeforeCursor = charBefore ? charBefore.getEntity() : undefined;
	  var entityAfterCursor = charAfter ? charAfter.getEntity() : undefined;

	  if (entityAfterCursor && entityAfterCursor === entityBeforeCursor) {
	    var entity = DraftEntity.get(entityAfterCursor);
	    if (entity.getMutability() !== 'MUTABLE') {
	      var _getRemovalRange = getRemovalRange(chars, entityAfterCursor, offset);

	      var start = _getRemovalRange.start;
	      var end = _getRemovalRange.end;

	      var current;
	      while (start < end) {
	        current = chars.get(start);
	        chars = chars.set(start, CharacterMetadata.applyEntity(current, null));
	        start++;
	      }
	      return block.set('characterList', chars);
	    }
	  }

	  return block;
	}

	module.exports = removeEntitiesAtEdges;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule insertFragmentIntoContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	var BlockMapBuilder = __webpack_require__(268);

	var generateRandomKey = __webpack_require__(285);
	var insertIntoList = __webpack_require__(288);
	var invariant = __webpack_require__(281);

	function insertFragmentIntoContentState(contentState, selectionState, fragment) {
	  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertFragment` should only be called with a collapsed selection state.') : invariant(false) : void 0;

	  var targetKey = selectionState.getStartKey();
	  var targetOffset = selectionState.getStartOffset();

	  var blockMap = contentState.getBlockMap();

	  var fragmentSize = fragment.size;
	  var finalKey;
	  var finalOffset;

	  if (fragmentSize === 1) {
	    var targetBlock = blockMap.get(targetKey);
	    var pastedBlock = fragment.first();
	    var text = targetBlock.getText();
	    var chars = targetBlock.getCharacterList();

	    var newBlock = targetBlock.merge({
	      text: text.slice(0, targetOffset) + pastedBlock.getText() + text.slice(targetOffset),
	      characterList: insertIntoList(chars, pastedBlock.getCharacterList(), targetOffset),
	      data: pastedBlock.getData() });


	    blockMap = blockMap.set(targetKey, newBlock);

	    finalKey = targetKey;
	    finalOffset = targetOffset + pastedBlock.getText().length;

	    return contentState.merge({
	      blockMap: blockMap.set(targetKey, newBlock),
	      selectionBefore: selectionState,
	      selectionAfter: selectionState.merge({
	        anchorKey: finalKey,
	        anchorOffset: finalOffset,
	        focusKey: finalKey,
	        focusOffset: finalOffset,
	        isBackward: false }) });


	  }

	  var newBlockArr = [];

	  contentState.getBlockMap().forEach(function (block, blockKey) {
	    if (blockKey !== targetKey) {
	      newBlockArr.push(block);
	      return;
	    }

	    var text = block.getText();
	    var chars = block.getCharacterList();

	    // Modify head portion of block.
	    var blockSize = text.length;
	    var headText = text.slice(0, targetOffset);
	    var headCharacters = chars.slice(0, targetOffset);
	    var appendToHead = fragment.first();

	    var modifiedHead = block.merge({
	      text: headText + appendToHead.getText(),
	      characterList: headCharacters.concat(appendToHead.getCharacterList()),
	      type: headText ? block.getType() : appendToHead.getType(),
	      data: appendToHead.getData() });


	    newBlockArr.push(modifiedHead);

	    // Insert fragment blocks after the head and before the tail.
	    fragment.slice(1, fragmentSize - 1).forEach(function (fragmentBlock) {
	      newBlockArr.push(fragmentBlock.set('key', generateRandomKey()));
	    });

	    // Modify tail portion of block.
	    var tailText = text.slice(targetOffset, blockSize);
	    var tailCharacters = chars.slice(targetOffset, blockSize);
	    var prependToTail = fragment.last();
	    finalKey = generateRandomKey();

	    var modifiedTail = prependToTail.merge({
	      key: finalKey,
	      text: prependToTail.getText() + tailText,
	      characterList: prependToTail.getCharacterList().concat(tailCharacters),
	      data: prependToTail.getData() });


	    newBlockArr.push(modifiedTail);
	  });

	  finalOffset = fragment.last().getLength();

	  return contentState.merge({
	    blockMap: BlockMapBuilder.createFromArray(newBlockArr),
	    selectionBefore: selectionState,
	    selectionAfter: selectionState.merge({
	      anchorKey: finalKey,
	      anchorOffset: finalOffset,
	      focusKey: finalKey,
	      focusOffset: finalOffset,
	      isBackward: false }) });


	}

	module.exports = insertFragmentIntoContentState;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 288 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule insertIntoList
	 * 
	 */

	'use strict';

	/**
	               * Maintain persistence for target list when appending and prepending.
	               */
	function insertIntoList(targetList, toInsert, offset) {
	  if (offset === targetList.count()) {
	    toInsert.forEach(function (c) {
	      targetList = targetList.push(c);
	    });
	  } else if (offset === 0) {
	    toInsert.reverse().forEach(function (c) {
	      targetList = targetList.unshift(c);
	    });
	  } else {
	    var head = targetList.slice(0, offset);
	    var tail = targetList.slice(offset);
	    targetList = head.concat(toInsert, tail).toList();
	  }
	  return targetList;
	}

	module.exports = insertIntoList;

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule insertTextIntoContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(269);

	var insertIntoList = __webpack_require__(288);
	var invariant = __webpack_require__(281);

	var Repeat = Immutable.Repeat;


	function insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {
	  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertText` should only be called with a collapsed range.') : invariant(false) : void 0;

	  var len = text.length;
	  if (!len) {
	    return contentState;
	  }

	  var blockMap = contentState.getBlockMap();
	  var key = selectionState.getStartKey();
	  var offset = selectionState.getStartOffset();
	  var block = blockMap.get(key);
	  var blockText = block.getText();

	  var newBlock = block.merge({
	    text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),
	    characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset) });


	  var newOffset = offset + len;

	  return contentState.merge({
	    blockMap: blockMap.set(key, newBlock),
	    selectionAfter: selectionState.merge({
	      anchorOffset: newOffset,
	      focusOffset: newOffset }) });


	}

	module.exports = insertTextIntoContentState;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule modifyBlockForContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(269);

	var Map = Immutable.Map;


	function modifyBlockForContentState(contentState, selectionState, operation) {
	  var startKey = selectionState.getStartKey();
	  var endKey = selectionState.getEndKey();
	  var blockMap = contentState.getBlockMap();
	  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {
	    return k === startKey;
	  }).takeUntil(function (_, k) {
	    return k === endKey;
	  }).concat(Map([[endKey, blockMap.get(endKey)]])).map(operation);

	  return contentState.merge({
	    blockMap: blockMap.merge(newBlocks),
	    selectionBefore: selectionState,
	    selectionAfter: selectionState });

	}

	module.exports = modifyBlockForContentState;

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule removeRangeFromContentState
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(269);

	function removeRangeFromContentState(contentState, selectionState) {
	  if (selectionState.isCollapsed()) {
	    return contentState;
	  }

	  var blockMap = contentState.getBlockMap();
	  var startKey = selectionState.getStartKey();
	  var startOffset = selectionState.getStartOffset();
	  var endKey = selectionState.getEndKey();
	  var endOffset = selectionState.getEndOffset();

	  var startBlock = blockMap.get(startKey);
	  var endBlock = blockMap.get(endKey);
	  var characterList;

	  if (startBlock === endBlock) {
	    characterList = removeFromList(startBlock.getCharacterList(), startOffset, endOffset);
	  } else {
	    characterList = startBlock.getCharacterList().slice(0, startOffset).concat(endBlock.getCharacterList().slice(endOffset));
	  }

	  var modifiedStart = startBlock.merge({
	    text: startBlock.getText().slice(0, startOffset) + endBlock.getText().slice(endOffset),
	    characterList: characterList });


	  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {
	    return k === startKey;
	  }).takeUntil(function (_, k) {
	    return k === endKey;
	  }).concat(Immutable.Map([[endKey, null]])).map(function (_, k) {
	    return k === startKey ? modifiedStart : null;
	  });

	  blockMap = blockMap.merge(newBlocks).filter(function (block) {
	    return !!block;
	  });

	  return contentState.merge({
	    blockMap: blockMap,
	    selectionBefore: selectionState,
	    selectionAfter: selectionState.merge({
	      anchorKey: startKey,
	      anchorOffset: startOffset,
	      focusKey: startKey,
	      focusOffset: startOffset,
	      isBackward: false }) });


	}

	/**
	   * Maintain persistence for target list when removing characters on the
	   * head and tail of the character list.
	   */
	function removeFromList(targetList, startOffset, endOffset) {
	  if (startOffset === 0) {
	    while (startOffset < endOffset) {
	      targetList = targetList.shift();
	      startOffset++;
	    }
	  } else if (endOffset === targetList.count()) {
	    while (endOffset > startOffset) {
	      targetList = targetList.pop();
	      endOffset--;
	    }
	  } else {
	    var head = targetList.slice(0, startOffset);
	    var tail = targetList.slice(endOffset);
	    targetList = head.concat(tail).toList();
	  }
	  return targetList;
	}

	module.exports = removeRangeFromContentState;

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule splitBlockInContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(269);

	var generateRandomKey = __webpack_require__(285);
	var invariant = __webpack_require__(281);

	var Map = Immutable.Map;


	function splitBlockInContentState(contentState, selectionState) {
	  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Selection range must be collapsed.') : invariant(false) : void 0;

	  var key = selectionState.getAnchorKey();
	  var offset = selectionState.getAnchorOffset();
	  var blockMap = contentState.getBlockMap();
	  var blockToSplit = blockMap.get(key);

	  var text = blockToSplit.getText();
	  var chars = blockToSplit.getCharacterList();

	  var blockAbove = blockToSplit.merge({
	    text: text.slice(0, offset),
	    characterList: chars.slice(0, offset) });


	  var keyBelow = generateRandomKey();
	  var blockBelow = blockAbove.merge({
	    key: keyBelow,
	    text: text.slice(offset),
	    characterList: chars.slice(offset),
	    data: Map() });


	  var blocksBefore = blockMap.toSeq().takeUntil(function (v) {
	    return v === blockToSplit;
	  });
	  var blocksAfter = blockMap.toSeq().skipUntil(function (v) {
	    return v === blockToSplit;
	  }).rest();
	  var newBlocks = blocksBefore.concat([[blockAbove.getKey(), blockAbove], [blockBelow.getKey(), blockBelow]], blocksAfter).toOrderedMap();

	  return contentState.merge({
	    blockMap: newBlocks,
	    selectionBefore: selectionState,
	    selectionAfter: selectionState.merge({
	      anchorKey: keyBelow,
	      anchorOffset: 0,
	      focusKey: keyBelow,
	      focusOffset: 0,
	      isBackward: false }) });


	}

	module.exports = splitBlockInContentState;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EditorState
	 * 
	 */

	'use strict';

	var _assign = __webpack_require__(279);

	var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	var BlockTree = __webpack_require__(294);
	var ContentState = __webpack_require__(296);
	var EditorBidiService = __webpack_require__(299);
	var Immutable = __webpack_require__(269);
	var SelectionState = __webpack_require__(297);

	var OrderedSet = Immutable.OrderedSet;
	var Record = Immutable.Record;
	var Stack = Immutable.Stack;


	var defaultRecord = {
	  allowUndo: true,
	  currentContent: null,
	  decorator: null,
	  directionMap: null,
	  forceSelection: false,
	  inCompositionMode: false,
	  inlineStyleOverride: null,
	  lastChangeType: null,
	  nativelyRenderedContent: null,
	  redoStack: Stack(),
	  selection: null,
	  treeMap: null,
	  undoStack: Stack() };


	var EditorStateRecord = Record(defaultRecord);

	var EditorState = function () {
	  EditorState.createEmpty = function createEmpty(decorator) {
	    return EditorState.createWithContent(ContentState.createFromText(''), decorator);
	  };

	  EditorState.createWithContent = function createWithContent(contentState, decorator) {
	    var firstKey = contentState.getBlockMap().first().getKey();
	    return EditorState.create({
	      currentContent: contentState,
	      undoStack: Stack(),
	      redoStack: Stack(),
	      decorator: decorator || null,
	      selection: SelectionState.createEmpty(firstKey) });

	  };

	  EditorState.create = function create(config) {
	    var currentContent = config.currentContent;
	    var decorator = config.decorator;

	    var recordConfig = _extends({}, config, {
	      treeMap: generateNewTreeMap(currentContent, decorator),
	      directionMap: EditorBidiService.getDirectionMap(currentContent) });

	    return new EditorState(new EditorStateRecord(recordConfig));
	  };

	  EditorState.set = function set(editorState, put) {
	    var map = editorState.getImmutable().withMutations(function (state) {
	      var existingDecorator = state.get('decorator');
	      var decorator = existingDecorator;
	      if (put.decorator === null) {
	        decorator = null;
	      } else if (put.decorator) {
	        decorator = put.decorator;
	      }

	      var newContent = put.currentContent || editorState.getCurrentContent();

	      if (decorator !== existingDecorator) {
	        var treeMap = state.get('treeMap');
	        var newTreeMap;
	        if (decorator && existingDecorator) {
	          newTreeMap = regenerateTreeForNewDecorator(newContent.getBlockMap(), treeMap, decorator, existingDecorator);
	        } else {
	          newTreeMap = generateNewTreeMap(newContent, decorator);
	        }

	        state.merge({
	          decorator: decorator,
	          treeMap: newTreeMap,
	          nativelyRenderedContent: null });

	        return;
	      }

	      var existingContent = editorState.getCurrentContent();
	      if (newContent !== existingContent) {
	        state.set('treeMap', regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), decorator));
	      }

	      state.merge(put);
	    });

	    return new EditorState(map);
	  };

	  EditorState.prototype.toJS = function toJS() {
	    return this.getImmutable().toJS();
	  };

	  EditorState.prototype.getAllowUndo = function getAllowUndo() {
	    return this.getImmutable().get('allowUndo');
	  };

	  EditorState.prototype.getCurrentContent = function getCurrentContent() {
	    return this.getImmutable().get('currentContent');
	  };

	  EditorState.prototype.getUndoStack = function getUndoStack() {
	    return this.getImmutable().get('undoStack');
	  };

	  EditorState.prototype.getRedoStack = function getRedoStack() {
	    return this.getImmutable().get('redoStack');
	  };

	  EditorState.prototype.getSelection = function getSelection() {
	    return this.getImmutable().get('selection');
	  };

	  EditorState.prototype.getDecorator = function getDecorator() {
	    return this.getImmutable().get('decorator');
	  };

	  EditorState.prototype.isInCompositionMode = function isInCompositionMode() {
	    return this.getImmutable().get('inCompositionMode');
	  };

	  EditorState.prototype.mustForceSelection = function mustForceSelection() {
	    return this.getImmutable().get('forceSelection');
	  };

	  EditorState.prototype.getNativelyRenderedContent = function getNativelyRenderedContent() {
	    return this.getImmutable().get('nativelyRenderedContent');
	  };

	  EditorState.prototype.getLastChangeType = function getLastChangeType() {
	    return this.getImmutable().get('lastChangeType');
	  };

	  /**
	      * While editing, the user may apply inline style commands with a collapsed
	      * cursor, intending to type text that adopts the specified style. In this
	      * case, we track the specified style as an "override" that takes precedence
	      * over the inline style of the text adjacent to the cursor.
	      *
	      * If null, there is no override in place.
	      */


	  EditorState.prototype.getInlineStyleOverride = function getInlineStyleOverride() {
	    return this.getImmutable().get('inlineStyleOverride');
	  };

	  EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {
	    return EditorState.set(editorState, { inlineStyleOverride: inlineStyleOverride });
	  };

	  /**
	      * Get the appropriate inline style for the editor state. If an
	      * override is in place, use it. Otherwise, the current style is
	      * based on the location of the selection state.
	      */


	  EditorState.prototype.getCurrentInlineStyle = function getCurrentInlineStyle() {
	    var override = this.getInlineStyleOverride();
	    if (override != null) {
	      return override;
	    }

	    var content = this.getCurrentContent();
	    var selection = this.getSelection();

	    if (selection.isCollapsed()) {
	      return getInlineStyleForCollapsedSelection(content, selection);
	    }

	    return getInlineStyleForNonCollapsedSelection(content, selection);
	  };

	  EditorState.prototype.getBlockTree = function getBlockTree(blockKey) {
	    return this.getImmutable().getIn(['treeMap', blockKey]);
	  };

	  EditorState.prototype.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {
	    var firstKey = this.getCurrentContent().getBlockMap().first().getKey();
	    return this.getSelection().hasEdgeWithin(firstKey, 0, 0);
	  };

	  EditorState.prototype.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {
	    var content = this.getCurrentContent();
	    var blockMap = content.getBlockMap();
	    var last = blockMap.last();
	    var end = last.getLength();
	    return this.getSelection().hasEdgeWithin(last.getKey(), end, end);
	  };

	  EditorState.prototype.getDirectionMap = function getDirectionMap() {
	    return this.getImmutable().get('directionMap');
	  };

	  /**
	      * Incorporate native DOM selection changes into the EditorState. This
	      * method can be used when we simply want to accept whatever the DOM
	      * has given us to represent selection, and we do not need to re-render
	      * the editor.
	      *
	      * To forcibly move the DOM selection, see `EditorState.forceSelection`.
	      */


	  EditorState.acceptSelection = function acceptSelection(editorState, selection) {
	    return updateSelection(editorState, selection, false);
	  };

	  /**
	      * At times, we need to force the DOM selection to be where we
	      * need it to be. This can occur when the anchor or focus nodes
	      * are non-text nodes, for instance. In this case, we want to trigger
	      * a re-render of the editor, which in turn forces selection into
	      * the correct place in the DOM. The `forceSelection` method
	      * accomplishes this.
	      *
	      * This method should be used in cases where you need to explicitly
	      * move the DOM selection from one place to another without a change
	      * in ContentState.
	      */


	  EditorState.forceSelection = function forceSelection(editorState, selection) {
	    if (!selection.getHasFocus()) {
	      selection = selection.set('hasFocus', true);
	    }
	    return updateSelection(editorState, selection, true);
	  };

	  /**
	      * Move selection to the end of the editor without forcing focus.
	      */


	  EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {
	    var content = editorState.getCurrentContent();
	    var lastBlock = content.getLastBlock();
	    var lastKey = lastBlock.getKey();
	    var length = lastBlock.getLength();

	    return EditorState.acceptSelection(editorState, new SelectionState({
	      anchorKey: lastKey,
	      anchorOffset: length,
	      focusKey: lastKey,
	      focusOffset: length,
	      isBackward: false }));

	  };

	  /**
	      * Force focus to the end of the editor. This is useful in scenarios
	      * where we want to programmatically focus the input and it makes sense
	      * to allow the user to continue working seamlessly.
	      */


	  EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {
	    var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);
	    return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());
	  };

	  /**
	      * Push the current ContentState onto the undo stack if it should be
	      * considered a boundary state, and set the provided ContentState as the
	      * new current content.
	      */


	  EditorState.push = function push(editorState, contentState, changeType) {
	    if (editorState.getCurrentContent() === contentState) {
	      return editorState;
	    }

	    var forceSelection = changeType !== 'insert-characters';
	    var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());

	    if (!editorState.getAllowUndo()) {
	      return EditorState.set(editorState, {
	        currentContent: contentState,
	        directionMap: directionMap,
	        lastChangeType: changeType,
	        selection: contentState.getSelectionAfter(),
	        forceSelection: forceSelection,
	        inlineStyleOverride: null });

	    }

	    var selection = editorState.getSelection();
	    var currentContent = editorState.getCurrentContent();
	    var undoStack = editorState.getUndoStack();
	    var newContent = contentState;

	    if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {
	      undoStack = undoStack.push(currentContent);
	      newContent = newContent.set('selectionBefore', selection);
	    } else if (changeType === 'insert-characters' || changeType === 'backspace-character' || changeType === 'delete-character') {
	      // Preserve the previous selection.
	      newContent = newContent.set('selectionBefore', currentContent.getSelectionBefore());
	    }

	    var inlineStyleOverride = editorState.getInlineStyleOverride();

	    // Don't discard inline style overrides on block type or depth changes.
	    if (changeType !== 'adjust-depth' && changeType !== 'change-block-type') {
	      inlineStyleOverride = null;
	    }

	    var editorStateChanges = {
	      currentContent: newContent,
	      directionMap: directionMap,
	      undoStack: undoStack,
	      redoStack: Stack(),
	      lastChangeType: changeType,
	      selection: contentState.getSelectionAfter(),
	      forceSelection: forceSelection,
	      inlineStyleOverride: inlineStyleOverride };


	    return EditorState.set(editorState, editorStateChanges);
	  };

	  /**
	      * Make the top ContentState in the undo stack the new current content and
	      * push the current content onto the redo stack.
	      */


	  EditorState.undo = function undo(editorState) {
	    if (!editorState.getAllowUndo()) {
	      return editorState;
	    }

	    var undoStack = editorState.getUndoStack();
	    var newCurrentContent = undoStack.peek();
	    if (!newCurrentContent) {
	      return editorState;
	    }

	    var currentContent = editorState.getCurrentContent();
	    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());

	    return EditorState.set(editorState, {
	      currentContent: newCurrentContent,
	      directionMap: directionMap,
	      undoStack: undoStack.shift(),
	      redoStack: editorState.getRedoStack().push(currentContent),
	      forceSelection: true,
	      inlineStyleOverride: null,
	      lastChangeType: 'undo',
	      nativelyRenderedContent: null,
	      selection: currentContent.getSelectionBefore() });

	  };

	  /**
	      * Make the top ContentState in the redo stack the new current content and
	      * push the current content onto the undo stack.
	      */


	  EditorState.redo = function redo(editorState) {
	    if (!editorState.getAllowUndo()) {
	      return editorState;
	    }

	    var redoStack = editorState.getRedoStack();
	    var newCurrentContent = redoStack.peek();
	    if (!newCurrentContent) {
	      return editorState;
	    }

	    var currentContent = editorState.getCurrentContent();
	    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());

	    return EditorState.set(editorState, {
	      currentContent: newCurrentContent,
	      directionMap: directionMap,
	      undoStack: editorState.getUndoStack().push(currentContent),
	      redoStack: redoStack.shift(),
	      forceSelection: true,
	      inlineStyleOverride: null,
	      lastChangeType: 'redo',
	      nativelyRenderedContent: null,
	      selection: newCurrentContent.getSelectionAfter() });

	  };

	  /**
	      * Not for public consumption.
	      */


	  function EditorState(immutable) {
	    _classCallCheck(this, EditorState);

	    this._immutable = immutable;
	  }

	  /**
	     * Not for public consumption.
	     */


	  EditorState.prototype.getImmutable = function getImmutable() {
	    return this._immutable;
	  };

	  return EditorState;
	}();

	/**
	      * Set the supplied SelectionState as the new current selection, and set
	      * the `force` flag to trigger manual selection placement by the view.
	      */


	function updateSelection(editorState, selection, forceSelection) {
	  return EditorState.set(editorState, {
	    selection: selection,
	    forceSelection: forceSelection,
	    nativelyRenderedContent: null,
	    inlineStyleOverride: null });

	}

	/**
	   * Regenerate the entire tree map for a given ContentState and decorator.
	   * Returns an OrderedMap that maps all available ContentBlock objects.
	   */
	function generateNewTreeMap(contentState, decorator) {
	  return contentState.getBlockMap().map(function (block) {
	    return BlockTree.generate(block, decorator);
	  }).toOrderedMap();
	}

	/**
	   * Regenerate tree map objects for all ContentBlocks that have changed
	   * between the current editorState and newContent. Returns an OrderedMap
	   * with only changed regenerated tree map objects.
	   */
	function regenerateTreeForNewBlocks(editorState, newBlockMap, decorator) {
	  var prevBlockMap = editorState.getCurrentContent().getBlockMap();
	  var prevTreeMap = editorState.getImmutable().get('treeMap');
	  return prevTreeMap.merge(newBlockMap.toSeq().filter(function (block, key) {
	    return block !== prevBlockMap.get(key);
	  }).map(function (block) {
	    return BlockTree.generate(block, decorator);
	  }));
	}

	/**
	   * Generate tree map objects for a new decorator object, preserving any
	   * decorations that are unchanged from the previous decorator.
	   *
	   * Note that in order for this to perform optimally, decoration Lists for
	   * decorators should be preserved when possible to allow for direct immutable
	   * List comparison.
	   */
	function regenerateTreeForNewDecorator(blockMap, previousTreeMap, decorator, existingDecorator) {
	  return previousTreeMap.merge(blockMap.toSeq().filter(function (block) {
	    return decorator.getDecorations(block) !== existingDecorator.getDecorations(block);
	  }).map(function (block) {
	    return BlockTree.generate(block, decorator);
	  }));
	}

	/**
	   * Return whether a change should be considered a boundary state, given
	   * the previous change type. Allows us to discard potential boundary states
	   * during standard typing or deletion behavior.
	   */
	function mustBecomeBoundary(editorState, changeType) {
	  var lastChangeType = editorState.getLastChangeType();
	  return changeType !== lastChangeType || changeType !== 'insert-characters' && changeType !== 'backspace-character' && changeType !== 'delete-character';
	}

	function getInlineStyleForCollapsedSelection(content, selection) {
	  var startKey = selection.getStartKey();
	  var startOffset = selection.getStartOffset();
	  var startBlock = content.getBlockForKey(startKey);

	  // If the cursor is not at the start of the block, look backward to
	  // preserve the style of the preceding character.
	  if (startOffset > 0) {
	    return startBlock.getInlineStyleAt(startOffset - 1);
	  }

	  // The caret is at position zero in this block. If the block has any
	  // text at all, use the style of the first character.
	  if (startBlock.getLength()) {
	    return startBlock.getInlineStyleAt(0);
	  }

	  // Otherwise, look upward in the document to find the closest character.
	  return lookUpwardForInlineStyle(content, startKey);
	}

	function getInlineStyleForNonCollapsedSelection(content, selection) {
	  var startKey = selection.getStartKey();
	  var startOffset = selection.getStartOffset();
	  var startBlock = content.getBlockForKey(startKey);

	  // If there is a character just inside the selection, use its style.
	  if (startOffset < startBlock.getLength()) {
	    return startBlock.getInlineStyleAt(startOffset);
	  }

	  // Check if the selection at the end of a non-empty block. Use the last
	  // style in the block.
	  if (startOffset > 0) {
	    return startBlock.getInlineStyleAt(startOffset - 1);
	  }

	  // Otherwise, look upward in the document to find the closest character.
	  return lookUpwardForInlineStyle(content, startKey);
	}

	function lookUpwardForInlineStyle(content, fromKey) {
	  var previousBlock = content.getBlockBefore(fromKey);
	  var previousLength;

	  while (previousBlock) {
	    previousLength = previousBlock.getLength();
	    if (previousLength) {
	      return previousBlock.getInlineStyleAt(previousLength - 1);
	    }
	    previousBlock = content.getBlockBefore(previousBlock.getKey());
	  }

	  return OrderedSet();
	}

	module.exports = EditorState;

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BlockTree
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(269);

	var emptyFunction = __webpack_require__(295);
	var findRangesImmutable = __webpack_require__(272);

	var List = Immutable.List;
	var Repeat = Immutable.Repeat;
	var Record = Immutable.Record;


	var returnTrue = emptyFunction.thatReturnsTrue;

	var FINGERPRINT_DELIMITER = '-';

	var defaultLeafRange = {
	  start: null,
	  end: null };


	var LeafRange = Record(defaultLeafRange);

	var defaultDecoratorRange = {
	  start: null,
	  end: null,
	  decoratorKey: null,
	  leaves: null };


	var DecoratorRange = Record(defaultDecoratorRange);

	var BlockTree = {
	  /**
	                   * Generate a block tree for a given ContentBlock/decorator pair.
	                   */
	  generate: function generate(block, decorator) {
	    var textLength = block.getLength();
	    if (!textLength) {
	      return List.of(new DecoratorRange({
	        start: 0,
	        end: 0,
	        decoratorKey: null,
	        leaves: List.of(new LeafRange({ start: 0, end: 0 })) }));

	    }

	    var leafSets = [];
	    var decorations = decorator ? decorator.getDecorations(block) : List(Repeat(null, textLength));

	    var chars = block.getCharacterList();

	    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {
	      leafSets.push(new DecoratorRange({
	        start: start,
	        end: end,
	        decoratorKey: decorations.get(start),
	        leaves: generateLeaves(chars.slice(start, end).toList(), start) }));

	    });

	    return List(leafSets);
	  },

	  /**
	      * Create a string representation of the given tree map. This allows us
	      * to rapidly determine whether a tree has undergone a significant
	      * structural change.
	      */
	  getFingerprint: function getFingerprint(tree) {
	    return tree.map(function (leafSet) {
	      var decoratorKey = leafSet.get('decoratorKey');
	      var fingerprintString = decoratorKey !== null ? decoratorKey + '.' + (leafSet.get('end') - leafSet.get('start')) : '';
	      return '' + fingerprintString + '.' + leafSet.get('leaves').size;
	    }).join(FINGERPRINT_DELIMITER);
	  } };


	/**
	        * Generate LeafRange records for a given character list.
	        */
	function generateLeaves(characters, offset) {
	  var leaves = [];
	  var inlineStyles = characters.map(function (c) {
	    return c.getStyle();
	  }).toList();
	  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {
	    leaves.push(new LeafRange({
	      start: start + offset,
	      end: end + offset }));

	  });
	  return List(leaves);
	}

	function areEqual(a, b) {
	  return a === b;
	}

	module.exports = BlockTree;

/***/ },
/* 295 */
/***/ function(module, exports) {

	"use strict";

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * 
	               */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	   * This function accepts and discards inputs; it has no side effects. This is
	   * primarily useful idiomatically for overridable function endpoints which
	   * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	   */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ContentState
	 * @typechecks
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;}

	function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var BlockMapBuilder = __webpack_require__(268);
	var CharacterMetadata = __webpack_require__(270);
	var ContentBlock = __webpack_require__(271);
	var Immutable = __webpack_require__(269);
	var SelectionState = __webpack_require__(297);

	var generateRandomKey = __webpack_require__(285);
	var sanitizeDraftText = __webpack_require__(298);

	var List = Immutable.List;
	var Record = Immutable.Record;
	var Repeat = Immutable.Repeat;


	var defaultRecord = {
	  blockMap: null,
	  selectionBefore: null,
	  selectionAfter: null };


	var ContentStateRecord = Record(defaultRecord);

	var ContentState = function (_ContentStateRecord) {
	  _inherits(ContentState, _ContentStateRecord);

	  function ContentState() {
	    _classCallCheck(this, ContentState);

	    return _possibleConstructorReturn(this, _ContentStateRecord.apply(this, arguments));
	  }

	  ContentState.prototype.getBlockMap = function getBlockMap() {
	    return this.get('blockMap');
	  };

	  ContentState.prototype.getSelectionBefore = function getSelectionBefore() {
	    return this.get('selectionBefore');
	  };

	  ContentState.prototype.getSelectionAfter = function getSelectionAfter() {
	    return this.get('selectionAfter');
	  };

	  ContentState.prototype.getBlockForKey = function getBlockForKey(key) {
	    var block = this.getBlockMap().get(key);
	    return block;
	  };

	  ContentState.prototype.getKeyBefore = function getKeyBefore(key) {
	    return this.getBlockMap().reverse().keySeq().skipUntil(function (v) {
	      return v === key;
	    }).skip(1).first();
	  };

	  ContentState.prototype.getKeyAfter = function getKeyAfter(key) {
	    return this.getBlockMap().keySeq().skipUntil(function (v) {
	      return v === key;
	    }).skip(1).first();
	  };

	  ContentState.prototype.getBlockAfter = function getBlockAfter(key) {
	    return this.getBlockMap().skipUntil(function (_, k) {
	      return k === key;
	    }).skip(1).first();
	  };

	  ContentState.prototype.getBlockBefore = function getBlockBefore(key) {
	    return this.getBlockMap().reverse().skipUntil(function (_, k) {
	      return k === key;
	    }).skip(1).first();
	  };

	  ContentState.prototype.getBlocksAsArray = function getBlocksAsArray() {
	    return this.getBlockMap().toArray();
	  };

	  ContentState.prototype.getFirstBlock = function getFirstBlock() {
	    return this.getBlockMap().first();
	  };

	  ContentState.prototype.getLastBlock = function getLastBlock() {
	    return this.getBlockMap().last();
	  };

	  ContentState.prototype.getPlainText = function getPlainText(delimiter) {
	    return this.getBlockMap().map(function (block) {
	      return block ? block.getText() : '';
	    }).join(delimiter || '\n');
	  };

	  ContentState.prototype.hasText = function hasText() {
	    var blockMap = this.getBlockMap();
	    return blockMap.size > 1 || blockMap.first().getLength() > 0;
	  };

	  ContentState.createFromBlockArray = function createFromBlockArray(blocks) {
	    var blockMap = BlockMapBuilder.createFromArray(blocks);
	    var selectionState = SelectionState.createEmpty(blockMap.first().getKey());
	    return new ContentState({
	      blockMap: blockMap,
	      selectionBefore: selectionState,
	      selectionAfter: selectionState });

	  };

	  ContentState.createFromText = function createFromText(text) {
	    var delimiter = arguments.length <= 1 || arguments[1] === undefined ? /\r\n?|\n/g : arguments[1];

	    var strings = text.split(delimiter);
	    var blocks = strings.map(function (block) {
	      block = sanitizeDraftText(block);
	      return new ContentBlock({
	        key: generateRandomKey(),
	        text: block,
	        type: 'unstyled',
	        characterList: List(Repeat(CharacterMetadata.EMPTY, block.length)) });

	    });
	    return ContentState.createFromBlockArray(blocks);
	  };

	  return ContentState;
	}(ContentStateRecord);

	module.exports = ContentState;

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectionState
	 * @typechecks
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;}

	function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var Immutable = __webpack_require__(269);

	var Record = Immutable.Record;


	var defaultRecord = {
	  anchorKey: '',
	  anchorOffset: 0,
	  focusKey: '',
	  focusOffset: 0,
	  isBackward: false,
	  hasFocus: false };


	var SelectionStateRecord = Record(defaultRecord);

	var SelectionState = function (_SelectionStateRecord) {
	  _inherits(SelectionState, _SelectionStateRecord);

	  function SelectionState() {
	    _classCallCheck(this, SelectionState);

	    return _possibleConstructorReturn(this, _SelectionStateRecord.apply(this, arguments));
	  }

	  SelectionState.prototype.serialize = function serialize() {
	    return 'Anchor: ' + this.getAnchorKey() + ':' + this.getAnchorOffset() + ', ' + 'Focus: ' + this.getFocusKey() + ':' + this.getFocusOffset() + ', ' + 'Is Backward: ' + String(this.getIsBackward()) + ', ' + 'Has Focus: ' + String(this.getHasFocus());
	  };

	  SelectionState.prototype.getAnchorKey = function getAnchorKey() {
	    return this.get('anchorKey');
	  };

	  SelectionState.prototype.getAnchorOffset = function getAnchorOffset() {
	    return this.get('anchorOffset');
	  };

	  SelectionState.prototype.getFocusKey = function getFocusKey() {
	    return this.get('focusKey');
	  };

	  SelectionState.prototype.getFocusOffset = function getFocusOffset() {
	    return this.get('focusOffset');
	  };

	  SelectionState.prototype.getIsBackward = function getIsBackward() {
	    return this.get('isBackward');
	  };

	  SelectionState.prototype.getHasFocus = function getHasFocus() {
	    return this.get('hasFocus');
	  };

	  /**
	      * Return whether the specified range overlaps with an edge of the
	      * SelectionState.
	      */


	  SelectionState.prototype.hasEdgeWithin = function hasEdgeWithin(blockKey, start, end) {
	    var anchorKey = this.getAnchorKey();
	    var focusKey = this.getFocusKey();

	    if (anchorKey === focusKey && anchorKey === blockKey) {
	      var selectionStart = this.getStartOffset();
	      var selectionEnd = this.getEndOffset();
	      return start <= selectionEnd && selectionStart <= end;
	    }

	    if (blockKey !== anchorKey && blockKey !== focusKey) {
	      return false;
	    }

	    var offsetToCheck = blockKey === anchorKey ? this.getAnchorOffset() : this.getFocusOffset();

	    return start <= offsetToCheck && end >= offsetToCheck;
	  };

	  SelectionState.prototype.isCollapsed = function isCollapsed() {
	    return this.getAnchorKey() === this.getFocusKey() && this.getAnchorOffset() === this.getFocusOffset();
	  };

	  SelectionState.prototype.getStartKey = function getStartKey() {
	    return this.getIsBackward() ? this.getFocusKey() : this.getAnchorKey();
	  };

	  SelectionState.prototype.getStartOffset = function getStartOffset() {
	    return this.getIsBackward() ? this.getFocusOffset() : this.getAnchorOffset();
	  };

	  SelectionState.prototype.getEndKey = function getEndKey() {
	    return this.getIsBackward() ? this.getAnchorKey() : this.getFocusKey();
	  };

	  SelectionState.prototype.getEndOffset = function getEndOffset() {
	    return this.getIsBackward() ? this.getAnchorOffset() : this.getFocusOffset();
	  };

	  SelectionState.createEmpty = function createEmpty(key) {
	    return new SelectionState({
	      anchorKey: key,
	      anchorOffset: 0,
	      focusKey: key,
	      focusOffset: 0,
	      isBackward: false,
	      hasFocus: false });

	  };

	  return SelectionState;
	}(SelectionStateRecord);

	module.exports = SelectionState;

/***/ },
/* 298 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule sanitizeDraftText
	 * 
	 */

	'use strict';

	var REGEX_BLOCK_DELIMITER = new RegExp('\r', 'g');

	function sanitizeDraftText(input) {
	  return input.replace(REGEX_BLOCK_DELIMITER, '');
	}

	module.exports = sanitizeDraftText;

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EditorBidiService
	 * @typechecks
	 * 
	 */

	'use strict';

	var Immutable = __webpack_require__(269);
	var UnicodeBidiService = __webpack_require__(300);

	var nullthrows = __webpack_require__(303);

	var OrderedMap = Immutable.OrderedMap;


	var bidiService;

	var EditorBidiService = {
	  getDirectionMap: function getDirectionMap(content, prevBidiMap) {
	    if (!bidiService) {
	      bidiService = new UnicodeBidiService();
	    } else {
	      bidiService.reset();
	    }

	    var blockMap = content.getBlockMap();
	    var nextBidi = blockMap.valueSeq().map(function (block) {
	      return nullthrows(bidiService).getDirection(block.getText());
	    });
	    var bidiMap = OrderedMap(blockMap.keySeq().zip(nextBidi));

	    if (prevBidiMap != null && Immutable.is(prevBidiMap, bidiMap)) {
	      return prevBidiMap;
	    }

	    return bidiMap;
	  } };


	module.exports = EditorBidiService;

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/**
	     * Stateful API for text direction detection
	     *
	     * This class can be used in applications where you need to detect the
	     * direction of a sequence of text blocks, where each direction shall be used
	     * as the fallback direction for the next one.
	     *
	     * NOTE: A default direction, if not provided, is set based on the global
	     *       direction, as defined by `UnicodeBidiDirection`.
	     *
	     * == Example ==
	     * ```
	     * var UnicodeBidiService = require('UnicodeBidiService');
	     *
	     * var bidiService = new UnicodeBidiService();
	     *
	     * ...
	     *
	     * bidiService.reset();
	     * for (var para in paragraphs) {
	     *   var dir = bidiService.getDirection(para);
	     *   ...
	     * }
	     * ```
	     *
	     * Part of our implementation of Unicode Bidirectional Algorithm (UBA)
	     * Unicode Standard Annex #9 (UAX9)
	     * http://www.unicode.org/reports/tr9/
	     */

	'use strict';

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	var UnicodeBidi = __webpack_require__(301);
	var UnicodeBidiDirection = __webpack_require__(302);

	var invariant = __webpack_require__(281);

	var UnicodeBidiService = function () {

	  /**
	                                       * Stateful class for paragraph direction detection
	                                       *
	                                       * @param defaultDir  Default direction of the service
	                                       */
	  function UnicodeBidiService(defaultDir) {
	    _classCallCheck(this, UnicodeBidiService);

	    if (!defaultDir) {
	      defaultDir = UnicodeBidiDirection.getGlobalDir();
	    } else {
	      !UnicodeBidiDirection.isStrong(defaultDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Default direction must be a strong direction (LTR or RTL)') : invariant(false) : void 0;
	    }
	    this._defaultDir = defaultDir;
	    this.reset();
	  }

	  /**
	     * Reset the internal state
	     *
	     * Instead of creating a new instance, you can just reset() your instance
	     * everytime you start a new loop.
	     */


	  UnicodeBidiService.prototype.reset = function reset() {
	    this._lastDir = this._defaultDir;
	  };

	  /**
	      * Returns the direction of a block of text, and remembers it as the
	      * fall-back direction for the next paragraph.
	      *
	      * @param str  A text block, e.g. paragraph, table cell, tag
	      * @return     The resolved direction
	      */


	  UnicodeBidiService.prototype.getDirection = function getDirection(str) {
	    this._lastDir = UnicodeBidi.getDirection(str, this._lastDir);
	    return this._lastDir;
	  };

	  return UnicodeBidiService;
	}();

	module.exports = UnicodeBidiService;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/**
	     * Basic (stateless) API for text direction detection
	     *
	     * Part of our implementation of Unicode Bidirectional Algorithm (UBA)
	     * Unicode Standard Annex #9 (UAX9)
	     * http://www.unicode.org/reports/tr9/
	     */

	'use strict';

	var UnicodeBidiDirection = __webpack_require__(302);

	var invariant = __webpack_require__(281);

	/**
	                                         * RegExp ranges of characters with a *Strong* Bidi_Class value.
	                                         *
	                                         * Data is based on DerivedBidiClass.txt in UCD version 7.0.0.
	                                         *
	                                         * NOTE: For performance reasons, we only support Unicode's
	                                         *       Basic Multilingual Plane (BMP) for now.
	                                         */
	var RANGE_BY_BIDI_TYPE = {

	  L: 'A-Za-zªµºÀ-ÖØ-öø-ƺƻ' + 'Ƽ-ƿǀ-ǃǄ-ʓʔʕ-ʯʰ-ʸ' + 'ʻ-ˁː-ˑˠ-ˤˮͰ-ͳͶ-ͷ' + 'ͺͻ-ͽͿΆΈ-ΊΌΎ-Ρ' + 'Σ-ϵϷ-ҁ҂Ҋ-ԯԱ-Ֆՙ' + '՚-՟ա-և։ःऄ-हऻऽ' + 'ा-ीॉ-ौॎ-ॏॐक़-ॡ।-॥' + '०-९॰ॱॲ-ঀং-ঃঅ-ঌ' + 'এ-ঐও-নপ-রলশ-হঽ' + 'া-ীে-ৈো-ৌৎৗড়-ঢ়' + 'য়-ৡ০-৯ৰ-ৱ৴-৹৺ਃ' + 'ਅ-ਊਏ-ਐਓ-ਨਪ-ਰਲ-ਲ਼' + 'ਵ-ਸ਼ਸ-ਹਾ-ੀਖ਼-ੜਫ਼੦-੯' + 'ੲ-ੴઃઅ-ઍએ-ઑઓ-નપ-ર' + 'લ-ળવ-હઽા-ીૉો-ૌૐ' + 'ૠ-ૡ૦-૯૰ଂ-ଃଅ-ଌଏ-ଐ' + 'ଓ-ନପ-ରଲ-ଳଵ-ହଽାୀ' + 'େ-ୈୋ-ୌୗଡ଼-ଢ଼ୟ-ୡ୦-୯' + '୰ୱ୲-୷ஃஅ-ஊஎ-ஐஒ-க' + 'ங-சஜஞ-டண-தந-பம-ஹ' + 'ா-ிு-ூெ-ைொ-ௌௐௗ' + '௦-௯௰-௲ఁ-ఃఅ-ఌఎ-ఐ' + 'ఒ-నప-హఽు-ౄౘ-ౙౠ-ౡ' + '౦-౯౿ಂ-ಃಅ-ಌಎ-ಐಒ-ನ' + 'ಪ-ಳವ-ಹಽಾಿೀ-ೄೆ' + 'ೇ-ೈೊ-ೋೕ-ೖೞೠ-ೡ೦-೯' + 'ೱ-ೲം-ഃഅ-ഌഎ-ഐഒ-ഺഽ' + 'ാ-ീെ-ൈൊ-ൌൎൗൠ-ൡ' + '൦-൯൰-൵൹ൺ-ൿං-ඃඅ-ඖ' + 'ක-නඳ-රලව-ෆා-ෑෘ-ෟ' + '෦-෯ෲ-ෳ෴ก-ะา-ำเ-ๅ' + 'ๆ๏๐-๙๚-๛ກ-ຂຄງ-ຈ' + 'ຊຍດ-ທນ-ຟມ-ຣລວ' + 'ສ-ຫອ-ະາ-ຳຽເ-ໄໆ' + '໐-໙ໜ-ໟༀ༁-༃༄-༒༓༔' + '༕-༗༚-༟༠-༩༪-༳༴༶༸' + '༾-༿ཀ-ཇཉ-ཬཿ྅ྈ-ྌ' + '྾-࿅࿇-࿌࿎-࿏࿐-࿔࿕-࿘' + '࿙-࿚က-ဪါ-ာေးျ-ြဿ' + '၀-၉၊-၏ၐ-ၕၖ-ၗၚ-ၝၡ' + 'ၢ-ၤၥ-ၦၧ-ၭၮ-ၰၵ-ႁ' + 'ႃ-ႄႇ-ႌႎႏ႐-႙ႚ-ႜ' + '႞-႟Ⴀ-ჅჇჍა-ჺ჻ჼ' + 'ჽ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈ' + 'ኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅ' + 'ወ-ዖዘ-ጐጒ-ጕጘ-ፚ፠-፨' + '፩-፼ᎀ-ᎏᎠ-Ᏼᐁ-ᙬ᙭-᙮' + 'ᙯ-ᙿᚁ-ᚚᚠ-ᛪ᛫-᛭ᛮ-ᛰ' + 'ᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱ᜵-᜶' + 'ᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳាើ-ៅ' + 'ះ-ៈ។-៖ៗ៘-៚ៜ០-៩' + '᠐-᠙ᠠ-ᡂᡃᡄ-ᡷᢀ-ᢨᢪ' + 'ᢰ-ᣵᤀ-ᤞᤣ-ᤦᤩ-ᤫᤰ-ᤱ' + 'ᤳ-ᤸ᥆-᥏ᥐ-ᥭᥰ-ᥴᦀ-ᦫ' + 'ᦰ-ᧀᧁ-ᧇᧈ-ᧉ᧐-᧙᧚ᨀ-ᨖ' + 'ᨙ-ᨚ᨞-᨟ᨠ-ᩔᩕᩗᩡᩣ-ᩤ' + 'ᩭ-ᩲ᪀-᪉᪐-᪙᪠-᪦ᪧ᪨-᪭' + 'ᬄᬅ-ᬳᬵᬻᬽ-ᭁᭃ-᭄ᭅ-ᭋ' + '᭐-᭙᭚-᭠᭡-᭪᭴-᭼ᮂᮃ-ᮠ' + 'ᮡᮦ-ᮧ᮪ᮮ-ᮯ᮰-᮹ᮺ-ᯥᯧ' + 'ᯪ-ᯬᯮ᯲-᯳᯼-᯿ᰀ-ᰣᰤ-ᰫ' + 'ᰴ-ᰵ᰻-᰿᱀-᱉ᱍ-ᱏ᱐-᱙' + 'ᱚ-ᱷᱸ-ᱽ᱾-᱿᳀-᳇᳓᳡' + 'ᳩ-ᳬᳮ-ᳱᳲ-ᳳᳵ-ᳶᴀ-ᴫ' + 'ᴬ-ᵪᵫ-ᵷᵸᵹ-ᶚᶛ-ᶿḀ-ἕ' + 'Ἐ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝ' + 'Ὗ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌ' + 'ῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ‎' + 'ⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝ' + 'ℤΩℨK-ℭℯ-ℴℵ-ℸℹ' + 'ℼ-ℿⅅ-ⅉⅎ⅏Ⅰ-ↂↃ-ↄ' + 'ↅ-ↈ⌶-⍺⎕⒜-ⓩ⚬⠀-⣿' + 'Ⰰ-Ⱞⰰ-ⱞⱠ-ⱻⱼ-ⱽⱾ-ⳤ' + 'Ⳬ-ⳮⳲ-ⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯ' + '⵰ⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾ' + 'ⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々〆〇' + '〡-〩〮-〯〱-〵〸-〺〻〼' + 'ぁ-ゖゝ-ゞゟァ-ヺー-ヾヿ' + 'ㄅ-ㄭㄱ-ㆎ㆐-㆑㆒-㆕㆖-㆟' + 'ㆠ-ㆺㇰ-ㇿ㈀-㈜㈠-㈩㈪-㉇' + '㉈-㉏㉠-㉻㉿㊀-㊉㊊-㊰㋀-㋋' + '㋐-㋾㌀-㍶㍻-㏝㏠-㏾㐀-䶵' + '一-鿌ꀀ-ꀔꀕꀖ-ꒌꓐ-ꓷꓸ-ꓽ' + '꓾-꓿ꔀ-ꘋꘌꘐ-ꘟ꘠-꘩ꘪ-ꘫ' + 'Ꙁ-ꙭꙮꚀ-ꚛꚜ-ꚝꚠ-ꛥꛦ-ꛯ' + '꛲-꛷Ꜣ-ꝯꝰꝱ-ꞇ꞉-꞊Ꞌ-ꞎ' + 'Ꞑ-ꞭꞰ-Ʇꟷꟸ-ꟹꟺꟻ-ꠁ' + 'ꠃ-ꠅꠇ-ꠊꠌ-ꠢꠣ-ꠤꠧ꠰-꠵' + '꠶-꠷ꡀ-ꡳꢀ-ꢁꢂ-ꢳꢴ-ꣃ' + '꣎-꣏꣐-꣙ꣲ-ꣷ꣸-꣺ꣻ꤀-꤉' + 'ꤊ-ꤥ꤮-꤯ꤰ-ꥆꥒ-꥓꥟ꥠ-ꥼ' + 'ꦃꦄ-ꦲꦴ-ꦵꦺ-ꦻꦽ-꧀꧁-꧍' + 'ꧏ꧐-꧙꧞-꧟ꧠ-ꧤꧦꧧ-ꧯ' + '꧰-꧹ꧺ-ꧾꨀ-ꨨꨯ-ꨰꨳ-ꨴ' + 'ꩀ-ꩂꩄ-ꩋꩍ꩐-꩙꩜-꩟ꩠ-ꩯ' + 'ꩰꩱ-ꩶ꩷-꩹ꩺꩻꩽꩾ-ꪯꪱ' + 'ꪵ-ꪶꪹ-ꪽꫀꫂꫛ-ꫜꫝ꫞-꫟' + 'ꫠ-ꫪꫫꫮ-ꫯ꫰-꫱ꫲꫳ-ꫴꫵ' + 'ꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮ' + 'ꬰ-ꭚ꭛ꭜ-ꭟꭤ-ꭥꯀ-ꯢꯣ-ꯤ' + 'ꯦ-ꯧꯩ-ꯪ꯫꯬꯰-꯹가-힣' + 'ힰ-ퟆퟋ-ퟻ-豈-舘並-龎' + 'ﬀ-ﬆﬓ-ﬗＡ-Ｚａ-ｚｦ-ｯｰ' + 'ｱ-ﾝﾞ-ﾟﾠ-ﾾￂ-ￇￊ-ￏ' + 'ￒ-ￗￚ-ￜ',

	  R: '֐־׀׃׆׈-׏א-ת׫-ׯ' + 'װ-ײ׳-״׵-׿߀-߉ߊ-ߪ' + 'ߴ-ߵߺ߻-߿ࠀ-ࠕࠚࠤࠨ' + '࠮-࠯࠰-࠾࠿ࡀ-ࡘ࡜-࡝࡞' + '࡟-࢟‏יִײַ-ﬨשׁ-זּ﬷טּ-לּ' + '﬽מּ﬿נּ-סּ﭂ףּ-פּ﭅צּ-ﭏ',

	  AL: '؈؋؍؛؜؝؞-؟ؠ-ؿـ' + 'ف-ي٭ٮ-ٯٱ-ۓ۔ەۥ-ۦ' + 'ۮ-ۯۺ-ۼ۽-۾ۿ܀-܍܎܏' + 'ܐܒ-ܯ݋-݌ݍ-ޥޱ޲-޿' + 'ࢠ-ࢲࢳ-ࣣﭐ-ﮱ﮲-﯁﯂-﯒' + 'ﯓ-ﴽ﵀-﵏ﵐ-ﶏ﶐-﶑ﶒ-ﷇ' + '﷈-﷏ﷰ-ﷻ﷼﷾-﷿ﹰ-ﹴ﹵' + 'ﹶ-ﻼ﻽-﻾' };



	var REGEX_STRONG = new RegExp('[' + RANGE_BY_BIDI_TYPE.L + RANGE_BY_BIDI_TYPE.R + RANGE_BY_BIDI_TYPE.AL + ']');

	var REGEX_RTL = new RegExp('[' + RANGE_BY_BIDI_TYPE.R + RANGE_BY_BIDI_TYPE.AL + ']');

	/**
	                                                                                       * Returns the first strong character (has Bidi_Class value of L, R, or AL).
	                                                                                       *
	                                                                                       * @param str  A text block; e.g. paragraph, table cell, tag
	                                                                                       * @return     A character with strong bidi direction, or null if not found
	                                                                                       */
	function firstStrongChar(str) {
	  var match = REGEX_STRONG.exec(str);
	  return match == null ? null : match[0];
	}

	/**
	   * Returns the direction of a block of text, based on the direction of its
	   * first strong character (has Bidi_Class value of L, R, or AL).
	   *
	   * @param str  A text block; e.g. paragraph, table cell, tag
	   * @return     The resolved direction
	   */
	function firstStrongCharDir(str) {
	  var strongChar = firstStrongChar(str);
	  if (strongChar == null) {
	    return UnicodeBidiDirection.NEUTRAL;
	  }
	  return REGEX_RTL.exec(strongChar) ? UnicodeBidiDirection.RTL : UnicodeBidiDirection.LTR;
	}

	/**
	   * Returns the direction of a block of text, based on the direction of its
	   * first strong character (has Bidi_Class value of L, R, or AL), or a fallback
	   * direction, if no strong character is found.
	   *
	   * This function is supposed to be used in respect to Higher-Level Protocol
	   * rule HL1. (http://www.unicode.org/reports/tr9/#HL1)
	   *
	   * @param str       A text block; e.g. paragraph, table cell, tag
	   * @param fallback  Fallback direction, used if no strong direction detected
	   *                  for the block (default = NEUTRAL)
	   * @return          The resolved direction
	   */
	function resolveBlockDir(str, fallback) {
	  fallback = fallback || UnicodeBidiDirection.NEUTRAL;
	  if (!str.length) {
	    return fallback;
	  }
	  var blockDir = firstStrongCharDir(str);
	  return blockDir === UnicodeBidiDirection.NEUTRAL ? fallback : blockDir;
	}

	/**
	   * Returns the direction of a block of text, based on the direction of its
	   * first strong character (has Bidi_Class value of L, R, or AL), or a fallback
	   * direction, if no strong character is found.
	   *
	   * NOTE: This function is similar to resolveBlockDir(), but uses the global
	   * direction as the fallback, so it *always* returns a Strong direction,
	   * making it useful for integration in places that you need to make the final
	   * decision, like setting some CSS class.
	   *
	   * This function is supposed to be used in respect to Higher-Level Protocol
	   * rule HL1. (http://www.unicode.org/reports/tr9/#HL1)
	   *
	   * @param str             A text block; e.g. paragraph, table cell
	   * @param strongFallback  Fallback direction, used if no strong direction
	   *                        detected for the block (default = global direction)
	   * @return                The resolved Strong direction
	   */
	function getDirection(str, strongFallback) {
	  if (!strongFallback) {
	    strongFallback = UnicodeBidiDirection.getGlobalDir();
	  }
	  !UnicodeBidiDirection.isStrong(strongFallback) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Fallback direction must be a strong direction') : invariant(false) : void 0;
	  return resolveBlockDir(str, strongFallback);
	}

	/**
	   * Returns true if getDirection(arguments...) returns LTR.
	   *
	   * @param str             A text block; e.g. paragraph, table cell
	   * @param strongFallback  Fallback direction, used if no strong direction
	   *                        detected for the block (default = global direction)
	   * @return                True if the resolved direction is LTR
	   */
	function isDirectionLTR(str, strongFallback) {
	  return getDirection(str, strongFallback) === UnicodeBidiDirection.LTR;
	}

	/**
	   * Returns true if getDirection(arguments...) returns RTL.
	   *
	   * @param str             A text block; e.g. paragraph, table cell
	   * @param strongFallback  Fallback direction, used if no strong direction
	   *                        detected for the block (default = global direction)
	   * @return                True if the resolved direction is RTL
	   */
	function isDirectionRTL(str, strongFallback) {
	  return getDirection(str, strongFallback) === UnicodeBidiDirection.RTL;
	}

	var UnicodeBidi = {
	  firstStrongChar: firstStrongChar,
	  firstStrongCharDir: firstStrongCharDir,
	  resolveBlockDir: resolveBlockDir,
	  getDirection: getDirection,
	  isDirectionLTR: isDirectionLTR,
	  isDirectionRTL: isDirectionRTL };


	module.exports = UnicodeBidi;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */

	/**
	     * Constants to represent text directionality
	     *
	     * Also defines a *global* direciton, to be used in bidi algorithms as a
	     * default fallback direciton, when no better direction is found or provided.
	     *
	     * NOTE: Use `setGlobalDir()`, or update `initGlobalDir()`, to set the initial
	     *       global direction value based on the application.
	     *
	     * Part of the implementation of Unicode Bidirectional Algorithm (UBA)
	     * Unicode Standard Annex #9 (UAX9)
	     * http://www.unicode.org/reports/tr9/
	     */

	'use strict';

	var invariant = __webpack_require__(281);

	var NEUTRAL = 'NEUTRAL'; // No strong direction
	var LTR = 'LTR'; // Left-to-Right direction
	var RTL = 'RTL'; // Right-to-Left direction

	var globalDir = null;

	// == Helpers ==

	/**
	 * Check if a directionality value is a Strong one
	 */
	function isStrong(dir) {
	  return dir === LTR || dir === RTL;
	}

	/**
	   * Get string value to be used for `dir` HTML attribute or `direction` CSS
	   * property.
	   */
	function getHTMLDir(dir) {
	  !isStrong(dir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;
	  return dir === LTR ? 'ltr' : 'rtl';
	}

	/**
	   * Get string value to be used for `dir` HTML attribute or `direction` CSS
	   * property, but returns null if `dir` has same value as `otherDir`.
	   * `null`.
	   */
	function getHTMLDirIfDifferent(dir, otherDir) {
	  !isStrong(dir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;
	  !isStrong(otherDir) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`otherDir` must be a strong direction to be converted to HTML Direction') : invariant(false) : void 0;
	  return dir === otherDir ? null : getHTMLDir(dir);
	}

	// == Global Direction ==

	/**
	 * Set the global direction.
	 */
	function setGlobalDir(dir) {
	  globalDir = dir;
	}

	/**
	   * Initialize the global direction
	   */
	function initGlobalDir() {
	  setGlobalDir(LTR);
	}

	/**
	   * Get the global direction
	   */
	function getGlobalDir() {
	  if (!globalDir) {
	    this.initGlobalDir();
	  }
	  !globalDir ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Global direction not set.') : invariant(false) : void 0;
	  return globalDir;
	}

	var UnicodeBidiDirection = {
	  // Values
	  NEUTRAL: NEUTRAL,
	  LTR: LTR,
	  RTL: RTL,
	  // Helpers
	  isStrong: isStrong,
	  getHTMLDir: getHTMLDir,
	  getHTMLDirIfDifferent: getHTMLDirIfDifferent,
	  // Global Direction
	  setGlobalDir: setGlobalDir,
	  initGlobalDir: initGlobalDir,
	  getGlobalDir: getGlobalDir };


	module.exports = UnicodeBidiDirection;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 303 */
/***/ function(module, exports) {

	"use strict";

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * 
	               */

	var nullthrows = function nullthrows(x) {
	  if (x != null) {
	    return x;
	  }
	  throw new Error("Got unexpected null or undefined");
	};

	module.exports = nullthrows;

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CompositeDraftDecorator
	 * @typechecks
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	var Immutable = __webpack_require__(269);

	var List = Immutable.List;


	var DELIMITER = '.';

	/**
	                      * A CompositeDraftDecorator traverses through a list of DraftDecorator
	                      * instances to identify sections of a ContentBlock that should be rendered
	                      * in a "decorated" manner. For example, hashtags, mentions, and links may
	                      * be intended to stand out visually, be rendered as anchors, etc.
	                      *
	                      * The list of decorators supplied to the constructor will be used in the
	                      * order they are provided. This allows the caller to specify a priority for
	                      * string matching, in case of match collisions among decorators.
	                      *
	                      * For instance, I may have a link with a `#` in its text. Though this section
	                      * of text may match our hashtag decorator, it should not be treated as a
	                      * hashtag. I should therefore list my link DraftDecorator
	                      * before my hashtag DraftDecorator when constructing this composite
	                      * decorator instance.
	                      *
	                      * Thus, when a collision like this is encountered, the earlier match is
	                      * preserved and the new match is discarded.
	                      */

	var CompositeDraftDecorator = function () {
	  function CompositeDraftDecorator(decorators) {
	    _classCallCheck(this, CompositeDraftDecorator);

	    // Copy the decorator array, since we use this array order to determine
	    // precedence of decoration matching. If the array is mutated externally,
	    // we don't want to be affected here.
	    this._decorators = decorators.slice();
	  }

	  CompositeDraftDecorator.prototype.getDecorations = function getDecorations(block) {
	    var decorations = Array(block.getText().length).fill(null);

	    this._decorators.forEach(function ( /*object*/decorator, /*number*/ii) {
	      var counter = 0;
	      var strategy = decorator.strategy;
	      strategy(block, function ( /*number*/start, /*number*/end) {
	        // Find out if any of our matching range is already occupied
	        // by another decorator. If so, discard the match. Otherwise, store
	        // the component key for rendering.
	        if (canOccupySlice(decorations, start, end)) {
	          occupySlice(decorations, start, end, ii + DELIMITER + counter);
	          counter++;
	        }
	      });
	    });

	    return List(decorations);
	  };

	  CompositeDraftDecorator.prototype.getComponentForKey = function getComponentForKey(key) {
	    var componentKey = parseInt(key.split(DELIMITER)[0], 10);
	    return this._decorators[componentKey].component;
	  };

	  CompositeDraftDecorator.prototype.getPropsForKey = function getPropsForKey(key) {
	    var componentKey = parseInt(key.split(DELIMITER)[0], 10);
	    return this._decorators[componentKey].props;
	  };

	  return CompositeDraftDecorator;
	}();

	/**
	      * Determine whether we can occupy the specified slice of the decorations
	      * array.
	      */


	function canOccupySlice(decorations, start, end) {
	  for (var ii = start; ii < end; ii++) {
	    if (decorations[ii] != null) {
	      return false;
	    }
	  }
	  return true;
	}

	/**
	   * Splice the specified component into our decoration array at the desired
	   * range.
	   */
	function occupySlice(targetArr, start, end, componentKey) {
	  for (var ii = start; ii < end; ii++) {
	    targetArr[ii] = componentKey;
	  }
	}

	module.exports = CompositeDraftDecorator;

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultDraftBlockRenderMap
	 * 
	 */

	'use strict';

	var _require = __webpack_require__(269);

	var Map = _require.Map;

	var React = __webpack_require__(1);

	var cx = __webpack_require__(306);

	var UL_WRAP = React.createElement('ul', { className: cx('public/DraftStyleDefault/ul') });
	var OL_WRAP = React.createElement('ol', { className: cx('public/DraftStyleDefault/ol') });
	var PRE_WRAP = React.createElement('pre', { className: cx('public/DraftStyleDefault/pre') });

	module.exports = Map({
	  'header-one': {
	    element: 'h1' },

	  'header-two': {
	    element: 'h2' },

	  'header-three': {
	    element: 'h3' },

	  'header-four': {
	    element: 'h4' },

	  'header-five': {
	    element: 'h5' },

	  'header-six': {
	    element: 'h6' },

	  'unordered-list-item': {
	    element: 'li',
	    wrapper: UL_WRAP },

	  'ordered-list-item': {
	    element: 'li',
	    wrapper: OL_WRAP },

	  'blockquote': {
	    element: 'blockquote' },

	  'atomic': {
	    element: 'figure' },

	  'code-block': {
	    element: 'pre',
	    wrapper: PRE_WRAP },

	  'unstyled': {
	    element: 'div' } });

/***/ },
/* 306 */
/***/ function(module, exports) {

	'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               */

	/**
	                   * This function is used to mark string literals representing CSS class names
	                   * so that they can be transformed statically. This allows for modularization
	                   * and minification of CSS class names.
	                   *
	                   * In static_upstream, this function is actually implemented, but it should
	                   * eventually be replaced with something more descriptive, and the transform
	                   * that is used in the main stack should be ported for use elsewhere.
	                   *
	                   * @param string|object className to modularize, or an object of key/values.
	                   *                      In the object case, the values are conditions that
	                   *                      determine if the className keys should be included.
	                   * @param [string ...]  Variable list of classNames in the string case.
	                   * @return string       Renderable space-separated CSS className.
	                   */var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};
	function cx(classNames) {
	  if ((typeof classNames === 'undefined' ? 'undefined' : _typeof(classNames)) == 'object') {
	    return Object.keys(classNames).filter(function (className) {
	      return classNames[className];
	    }).map(replace).join(' ');
	  }
	  return Array.prototype.map.call(arguments, replace).join(' ');
	}

	function replace(str) {
	  return str.replace(/\//g, '-');
	}

	module.exports = cx;

/***/ },
/* 307 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultDraftInlineStyle
	 * 
	 */

	'use strict';

	module.exports = {
	  BOLD: {
	    fontWeight: 'bold' },


	  CODE: {
	    fontFamily: 'monospace',
	    wordWrap: 'break-word' },


	  ITALIC: {
	    fontStyle: 'italic' },


	  STRIKETHROUGH: {
	    textDecoration: 'line-through' },


	  UNDERLINE: {
	    textDecoration: 'underline' } };

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditor.react
	 * @typechecks
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var _assign = __webpack_require__(279);

	var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;}

	function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var DefaultDraftBlockRenderMap = __webpack_require__(305);
	var DefaultDraftInlineStyle = __webpack_require__(307);
	var DraftEditorCompositionHandler = __webpack_require__(309);
	var DraftEditorContents = __webpack_require__(313);
	var DraftEditorDragHandler = __webpack_require__(342);
	var DraftEditorEditHandler = __webpack_require__(351);
	var DraftEditorPlaceholder = __webpack_require__(392);
	var EditorState = __webpack_require__(293);
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(158);
	var Scroll = __webpack_require__(330);
	var Style = __webpack_require__(331);
	var UserAgent = __webpack_require__(317);

	var cx = __webpack_require__(306);
	var emptyFunction = __webpack_require__(295);
	var generateRandomKey = __webpack_require__(285);
	var getDefaultKeyBinding = __webpack_require__(393);
	var nullthrows = __webpack_require__(303);
	var getScrollPosition = __webpack_require__(337);

	var isIE = UserAgent.isBrowser('IE');

	// IE does not support the `input` event on contentEditable, so we can't
	// observe spellcheck behavior.
	var allowSpellCheck = !isIE;

	// Define a set of handler objects to correspond to each possible `mode`
	// of editor behavior.
	var handlerMap = {
	  'edit': DraftEditorEditHandler,
	  'composite': DraftEditorCompositionHandler,
	  'drag': DraftEditorDragHandler,
	  'cut': null,
	  'render': null };


	/**
	                     * `DraftEditor` is the root editor component. It composes a `contentEditable`
	                     * div, and provides a wide variety of useful function props for managing the
	                     * state of the editor. See `DraftEditorProps` for details.
	                     */
	var DraftEditor = function (_React$Component) {
	  _inherits(DraftEditor, _React$Component);

	  function DraftEditor(props) {
	    _classCallCheck(this, DraftEditor);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this._blockSelectEvents = false;
	    _this._clipboard = null;
	    _this._guardAgainstRender = false;
	    _this._handler = null;
	    _this._dragCount = 0;
	    _this._editorKey = generateRandomKey();
	    _this._placeholderAccessibilityID = 'placeholder-' + _this._editorKey;

	    _this._onBeforeInput = _this._buildHandler('onBeforeInput');
	    _this._onBlur = _this._buildHandler('onBlur');
	    _this._onCharacterData = _this._buildHandler('onCharacterData');
	    _this._onCompositionEnd = _this._buildHandler('onCompositionEnd');
	    _this._onCompositionStart = _this._buildHandler('onCompositionStart');
	    _this._onCopy = _this._buildHandler('onCopy');
	    _this._onCut = _this._buildHandler('onCut');
	    _this._onDragEnd = _this._buildHandler('onDragEnd');
	    _this._onDragOver = _this._buildHandler('onDragOver');
	    _this._onDragStart = _this._buildHandler('onDragStart');
	    _this._onDrop = _this._buildHandler('onDrop');
	    _this._onInput = _this._buildHandler('onInput');
	    _this._onFocus = _this._buildHandler('onFocus');
	    _this._onKeyDown = _this._buildHandler('onKeyDown');
	    _this._onKeyPress = _this._buildHandler('onKeyPress');
	    _this._onKeyUp = _this._buildHandler('onKeyUp');
	    _this._onMouseDown = _this._buildHandler('onMouseDown');
	    _this._onMouseUp = _this._buildHandler('onMouseUp');
	    _this._onPaste = _this._buildHandler('onPaste');
	    _this._onSelect = _this._buildHandler('onSelect');

	    // Manual binding for public and internal methods.
	    _this.focus = _this._focus.bind(_this);
	    _this.blur = _this._blur.bind(_this);
	    _this.setMode = _this._setMode.bind(_this);
	    _this.exitCurrentMode = _this._exitCurrentMode.bind(_this);
	    _this.restoreEditorDOM = _this._restoreEditorDOM.bind(_this);
	    _this.setRenderGuard = _this._setRenderGuard.bind(_this);
	    _this.removeRenderGuard = _this._removeRenderGuard.bind(_this);
	    _this.setClipboard = _this._setClipboard.bind(_this);
	    _this.getClipboard = _this._getClipboard.bind(_this);
	    _this.getEditorKey = function () {
	      return _this._editorKey;
	    };
	    _this.update = _this._update.bind(_this);
	    _this.onDragEnter = _this._onDragEnter.bind(_this);
	    _this.onDragLeave = _this._onDragLeave.bind(_this);

	    // See `_restoreEditorDOM()`.
	    _this.state = { containerKey: 0 };
	    return _this;
	  }

	  /**
	     * Build a method that will pass the event to the specified handler method.
	     * This allows us to look up the correct handler function for the current
	     * editor mode, if any has been specified.
	     */


	  /**
	         * Define proxies that can route events to the current handler.
	         */


	  DraftEditor.prototype._buildHandler = function _buildHandler(eventName) {
	    var _this2 = this;

	    return function (e) {
	      if (!_this2.props.readOnly) {
	        var method = _this2._handler && _this2._handler[eventName];
	        method && method.call(_this2, e);
	      }
	    };
	  };

	  DraftEditor.prototype._showPlaceholder = function _showPlaceholder() {
	    return !!this.props.placeholder && !this.props.editorState.isInCompositionMode() && !this.props.editorState.getCurrentContent().hasText();
	  };

	  DraftEditor.prototype._renderPlaceholder = function _renderPlaceholder() {
	    if (this._showPlaceholder()) {
	      return React.createElement(DraftEditorPlaceholder, {
	        text: nullthrows(this.props.placeholder),
	        editorState: this.props.editorState,
	        textAlignment: this.props.textAlignment,
	        accessibilityID: this._placeholderAccessibilityID });

	    }
	    return null;
	  };

	  DraftEditor.prototype.render = function render() {
	    var _props = this.props;
	    var readOnly = _props.readOnly;
	    var textAlignment = _props.textAlignment;

	    var rootClass = cx({
	      'DraftEditor/root': true,
	      'DraftEditor/alignLeft': textAlignment === 'left',
	      'DraftEditor/alignRight': textAlignment === 'right',
	      'DraftEditor/alignCenter': textAlignment === 'center' });


	    var contentStyle = {
	      outline: 'none',
	      whiteSpace: 'pre-wrap',
	      wordWrap: 'break-word' };


	    return React.createElement(
	    'div',
	    { className: rootClass },
	    this._renderPlaceholder(),
	    React.createElement(
	    'div',
	    {
	      className: cx('DraftEditor/editorContainer'),
	      key: 'editor' + this.state.containerKey,
	      ref: 'editorContainer' },
	    React.createElement(
	    'div',
	    {
	      'aria-activedescendant': readOnly ? null : this.props.ariaActiveDescendantID,
	      'aria-autocomplete': readOnly ? null : this.props.ariaAutoComplete,
	      'aria-describedby': this._showPlaceholder() ? this._placeholderAccessibilityID : null,
	      'aria-expanded': readOnly ? null : this.props.ariaExpanded,
	      'aria-haspopup': readOnly ? null : this.props.ariaHasPopup,
	      'aria-label': this.props.ariaLabel,
	      'aria-owns': readOnly ? null : this.props.ariaOwneeID,
	      className: cx('public/DraftEditor/content'),
	      contentEditable: !readOnly,
	      'data-testid': this.props.webDriverTestID,
	      onBeforeInput: this._onBeforeInput,
	      onBlur: this._onBlur,
	      onCompositionEnd: this._onCompositionEnd,
	      onCompositionStart: this._onCompositionStart,
	      onCopy: this._onCopy,
	      onCut: this._onCut,
	      onDragEnd: this._onDragEnd,
	      onDragEnter: this.onDragEnter,
	      onDragLeave: this.onDragLeave,
	      onDragOver: this._onDragOver,
	      onDragStart: this._onDragStart,
	      onDrop: this._onDrop,
	      onFocus: this._onFocus,
	      onInput: this._onInput,
	      onKeyDown: this._onKeyDown,
	      onKeyPress: this._onKeyPress,
	      onKeyUp: this._onKeyUp,
	      onMouseUp: this._onMouseUp,
	      onPaste: this._onPaste,
	      onSelect: this._onSelect,
	      ref: 'editor',
	      role: readOnly ? null : this.props.role || 'textbox',
	      spellCheck: allowSpellCheck && this.props.spellCheck,
	      style: contentStyle,
	      suppressContentEditableWarning: true,
	      tabIndex: this.props.tabIndex },
	    React.createElement(DraftEditorContents, {
	      blockRenderMap: this.props.blockRenderMap,
	      blockRendererFn: this.props.blockRendererFn,
	      blockStyleFn: this.props.blockStyleFn,
	      customStyleMap: _extends({}, DefaultDraftInlineStyle, this.props.customStyleMap),
	      customStyleFn: this.props.customStyleFn,
	      editorKey: this._editorKey,
	      editorState: this.props.editorState }))));




	  };

	  DraftEditor.prototype.componentDidMount = function componentDidMount() {
	    this.setMode('edit');

	    /**
	                           * IE has a hardcoded "feature" that attempts to convert link text into
	                           * anchors in contentEditable DOM. This breaks the editor's expectations of
	                           * the DOM, and control is lost. Disable it to make IE behave.
	                           * See: http://blogs.msdn.com/b/ieinternals/archive/2010/09/15/
	                           * ie9-beta-minor-change-list.aspx
	                           */
	    if (isIE) {
	      document.execCommand('AutoUrlDetect', false, false);
	    }
	  };

	  /**
	      * Prevent selection events from affecting the current editor state. This
	      * is mostly intended to defend against IE, which fires off `selectionchange`
	      * events regardless of whether the selection is set via the browser or
	      * programmatically. We only care about selection events that occur because
	      * of browser interaction, not re-renders and forced selections.
	      */


	  DraftEditor.prototype.componentWillUpdate = function componentWillUpdate() {
	    this._blockSelectEvents = true;
	  };

	  DraftEditor.prototype.componentDidUpdate = function componentDidUpdate() {
	    this._blockSelectEvents = false;
	  };

	  /**
	      * Used via `this.focus()`.
	      *
	      * Force focus back onto the editor node.
	      *
	      * Forcing focus causes the browser to scroll to the top of the editor, which
	      * may be undesirable when the editor is taller than the viewport. To solve
	      * this, either use a specified scroll position (in cases like `cut` behavior
	      * where it should be restored to a known position) or store the current
	      * scroll state and put it back in place after focus has been forced.
	      */


	  DraftEditor.prototype._focus = function _focus(scrollPosition) {
	    var editorState = this.props.editorState;

	    var alreadyHasFocus = editorState.getSelection().getHasFocus();
	    var editorNode = ReactDOM.findDOMNode(this.refs.editor);

	    var scrollParent = Style.getScrollParent(editorNode);

	    var _ref = scrollPosition || getScrollPosition(scrollParent);

	    var x = _ref.x;
	    var y = _ref.y;


	    editorNode.focus();
	    if (scrollParent === window) {
	      window.scrollTo(x, y);
	    } else {
	      Scroll.setTop(scrollParent, y);
	    }

	    // On Chrome and Safari, calling focus on contenteditable focuses the
	    // cursor at the first character. This is something you don't expect when
	    // you're clicking on an input element but not directly on a character.
	    // Put the cursor back where it was before the blur.
	    if (!alreadyHasFocus) {
	      this.update(EditorState.forceSelection(editorState, editorState.getSelection()));
	    }
	  };

	  DraftEditor.prototype._blur = function _blur() {
	    ReactDOM.findDOMNode(this.refs.editor).blur();
	  };

	  /**
	      * Used via `this.setMode(...)`.
	      *
	      * Set the behavior mode for the editor component. This switches the current
	      * handler module to ensure that DOM events are managed appropriately for
	      * the active mode.
	      */


	  DraftEditor.prototype._setMode = function _setMode(mode) {
	    this._handler = handlerMap[mode];
	  };

	  DraftEditor.prototype._exitCurrentMode = function _exitCurrentMode() {
	    this.setMode('edit');
	  };

	  /**
	      * Used via `this.restoreEditorDOM()`.
	      *
	      * Force a complete re-render of the editor based on the current EditorState.
	      * This is useful when we know we are going to lose control of the DOM
	      * state (cut command, IME) and we want to make sure that reconciliation
	      * occurs on a version of the DOM that is synchronized with our EditorState.
	      */


	  DraftEditor.prototype._restoreEditorDOM = function _restoreEditorDOM(scrollPosition) {
	    var _this3 = this;

	    this.setState({ containerKey: this.state.containerKey + 1 }, function () {
	      _this3._focus(scrollPosition);
	    });
	  };

	  /**
	      * Guard against rendering. Intended for use when we need to manually
	      * reset editor contents, to ensure that no outside influences lead to
	      * React reconciliation when we are in an uncertain state.
	      */


	  DraftEditor.prototype._setRenderGuard = function _setRenderGuard() {
	    this._guardAgainstRender = true;
	  };

	  DraftEditor.prototype._removeRenderGuard = function _removeRenderGuard() {
	    this._guardAgainstRender = false;
	  };

	  /**
	      * Used via `this.setClipboard(...)`.
	      *
	      * Set the clipboard state for a cut/copy event.
	      */


	  DraftEditor.prototype._setClipboard = function _setClipboard(clipboard) {
	    this._clipboard = clipboard;
	  };

	  /**
	      * Used via `this.getClipboard()`.
	      *
	      * Retrieve the clipboard state for a cut/copy event.
	      */


	  DraftEditor.prototype._getClipboard = function _getClipboard() {
	    return this._clipboard;
	  };

	  /**
	      * Used via `this.update(...)`.
	      *
	      * Propagate a new `EditorState` object to higher-level components. This is
	      * the method by which event handlers inform the `DraftEditor` component of
	      * state changes. A component that composes a `DraftEditor` **must** provide
	      * an `onChange` prop to receive state updates passed along from this
	      * function.
	      */


	  DraftEditor.prototype._update = function _update(editorState) {
	    this.props.onChange(editorState);
	  };

	  /**
	      * Used in conjunction with `_onDragLeave()`, by counting the number of times
	      * a dragged element enters and leaves the editor (or any of its children),
	      * to determine when the dragged element absolutely leaves the editor.
	      */


	  DraftEditor.prototype._onDragEnter = function _onDragEnter() {
	    this._dragCount++;
	  };

	  /**
	      * See `_onDragEnter()`.
	      */


	  DraftEditor.prototype._onDragLeave = function _onDragLeave() {
	    this._dragCount--;
	    if (this._dragCount === 0) {
	      this.exitCurrentMode();
	    }
	  };

	  return DraftEditor;
	}(React.Component);

	DraftEditor.defaultProps = {
	  blockRenderMap: DefaultDraftBlockRenderMap,
	  blockRendererFn: emptyFunction.thatReturnsNull,
	  blockStyleFn: emptyFunction.thatReturns(''),
	  keyBindingFn: getDefaultKeyBinding,
	  readOnly: false,
	  spellCheck: false,
	  stripPastedStyles: false };



	module.exports = DraftEditor;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorCompositionHandler
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(273);
	var EditorState = __webpack_require__(293);
	var Keys = __webpack_require__(310);

	var getEntityKeyForSelection = __webpack_require__(311);
	var isSelectionAtLeafStart = __webpack_require__(312);

	/**
	                                                                   * Millisecond delay to allow `compositionstart` to fire again upon
	                                                                   * `compositionend`.
	                                                                   *
	                                                                   * This is used for Korean input to ensure that typing can continue without
	                                                                   * the editor trying to render too quickly. More specifically, Safari 7.1+
	                                                                   * triggers `compositionstart` a little slower than Chrome/FF, which
	                                                                   * leads to composed characters being resolved and re-render occurring
	                                                                   * sooner than we want.
	                                                                   */
	var RESOLVE_DELAY = 20;

	/**
	                         * A handful of variables used to track the current composition and its
	                         * resolution status. These exist at the module level because it is not
	                         * possible to have compositions occurring in multiple editors simultaneously,
	                         * and it simplifies state management with respect to the DraftEditor component.
	                         */
	var resolved = false;
	var stillComposing = false;
	var textInputData = '';

	var DraftEditorCompositionHandler = {
	  onBeforeInput: function onBeforeInput(e) {
	    textInputData = (textInputData || '') + e.data;
	  },

	  /**
	      * A `compositionstart` event has fired while we're still in composition
	      * mode. Continue the current composition session to prevent a re-render.
	      */
	  onCompositionStart: function onCompositionStart() {
	    stillComposing = true;
	  },

	  /**
	      * Attempt to end the current composition session.
	      *
	      * Defer handling because browser will still insert the chars into active
	      * element after `compositionend`. If a `compositionstart` event fires
	      * before `resolveComposition` executes, our composition session will
	      * continue.
	      *
	      * The `resolved` flag is useful because certain IME interfaces fire the
	      * `compositionend` event multiple times, thus queueing up multiple attempts
	      * at handling the composition. Since handling the same composition event
	      * twice could break the DOM, we only use the first event. Example: Arabic
	      * Google Input Tools on Windows 8.1 fires `compositionend` three times.
	      */
	  onCompositionEnd: function onCompositionEnd() {
	    var _this = this;

	    resolved = false;
	    stillComposing = false;
	    setTimeout(function () {
	      if (!resolved) {
	        DraftEditorCompositionHandler.resolveComposition.call(_this);
	      }
	    }, RESOLVE_DELAY);
	  },

	  /**
	      * In Safari, keydown events may fire when committing compositions. If
	      * the arrow keys are used to commit, prevent default so that the cursor
	      * doesn't move, otherwise it will jump back noticeably on re-render.
	      */
	  onKeyDown: function onKeyDown(e) {
	    if (e.which === Keys.RIGHT || e.which === Keys.LEFT) {
	      e.preventDefault();
	    }
	  },

	  /**
	      * Keypress events may fire when committing compositions. In Firefox,
	      * pressing RETURN commits the composition and inserts extra newline
	      * characters that we do not want. `preventDefault` allows the composition
	      * to be committed while preventing the extra characters.
	      */
	  onKeyPress: function onKeyPress(e) {
	    if (e.which === Keys.RETURN) {
	      e.preventDefault();
	    }
	  },

	  /**
	      * Attempt to insert composed characters into the document.
	      *
	      * If we are still in a composition session, do nothing. Otherwise, insert
	      * the characters into the document and terminate the composition session.
	      *
	      * If no characters were composed -- for instance, the user
	      * deleted all composed characters and committed nothing new --
	      * force a re-render. We also re-render when the composition occurs
	      * at the beginning of a leaf, to ensure that if the browser has
	      * created a new text node for the composition, we will discard it.
	      *
	      * Resetting innerHTML will move focus to the beginning of the editor,
	      * so we update to force it back to the correct place.
	      */
	  resolveComposition: function resolveComposition() {
	    if (stillComposing) {
	      return;
	    }

	    resolved = true;
	    var composedChars = textInputData;
	    textInputData = '';

	    var editorState = EditorState.set(this.props.editorState, {
	      inCompositionMode: false });


	    var currentStyle = editorState.getCurrentInlineStyle();
	    var entityKey = getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection());

	    var mustReset = !composedChars || isSelectionAtLeafStart(editorState) || currentStyle.size > 0 || entityKey !== null;

	    if (mustReset) {
	      this.restoreEditorDOM();
	    }

	    this.exitCurrentMode();
	    this.removeRenderGuard();

	    if (composedChars) {
	      // If characters have been composed, re-rendering with the update
	      // is sufficient to reset the editor.
	      var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), composedChars, currentStyle, entityKey);
	      this.update(EditorState.push(editorState, contentState, 'insert-characters'));
	      return;
	    }

	    if (mustReset) {
	      this.update(EditorState.set(editorState, {
	        nativelyRenderedContent: null,
	        forceSelection: true }));

	    }
	  } };


	module.exports = DraftEditorCompositionHandler;

/***/ },
/* 310 */
/***/ function(module, exports) {

	"use strict";

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               */

	module.exports = {
	  BACKSPACE: 8,
	  TAB: 9,
	  RETURN: 13,
	  ALT: 18,
	  ESC: 27,
	  SPACE: 32,
	  PAGE_UP: 33,
	  PAGE_DOWN: 34,
	  END: 35,
	  HOME: 36,
	  LEFT: 37,
	  UP: 38,
	  RIGHT: 39,
	  DOWN: 40,
	  DELETE: 46,
	  COMMA: 188,
	  PERIOD: 190,
	  A: 65,
	  Z: 90,
	  ZERO: 48,
	  NUMPAD_0: 96,
	  NUMPAD_9: 105 };

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEntityKeyForSelection
	 * @typechecks
	 * 
	 */

	'use strict';

	var DraftEntity = __webpack_require__(278);

	/**
	                                             * Return the entity key that should be used when inserting text for the
	                                             * specified target selection, only if the entity is `MUTABLE`. `IMMUTABLE`
	                                             * and `SEGMENTED` entities should not be used for insertion behavior.
	                                             */
	function getEntityKeyForSelection(contentState, targetSelection) {
	  var entityKey;

	  if (targetSelection.isCollapsed()) {
	    var key = targetSelection.getAnchorKey();
	    var offset = targetSelection.getAnchorOffset();
	    if (offset > 0) {
	      entityKey = contentState.getBlockForKey(key).getEntityAt(offset - 1);
	      return filterKey(entityKey);
	    }
	    return null;
	  }

	  var startKey = targetSelection.getStartKey();
	  var startOffset = targetSelection.getStartOffset();
	  var startBlock = contentState.getBlockForKey(startKey);

	  entityKey = startOffset === startBlock.getLength() ? null : startBlock.getEntityAt(startOffset);

	  return filterKey(entityKey);
	}

	/**
	   * Determine whether an entity key corresponds to a `MUTABLE` entity. If so,
	   * return it. If not, return null.
	   */
	function filterKey(entityKey) {
	  if (entityKey) {
	    var entity = DraftEntity.get(entityKey);
	    return entity.getMutability() === 'MUTABLE' ? entityKey : null;
	  }
	  return null;
	}

	module.exports = getEntityKeyForSelection;

/***/ },
/* 312 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isSelectionAtLeafStart
	 * @typechecks
	 * 
	 */

	'use strict';

	function isSelectionAtLeafStart(editorState) {
	  var selection = editorState.getSelection();
	  var anchorKey = selection.getAnchorKey();
	  var blockTree = editorState.getBlockTree(anchorKey);
	  var offset = selection.getStartOffset();

	  var isAtStart = false;

	  blockTree.some(function (leafSet) {
	    if (offset === leafSet.get('start')) {
	      isAtStart = true;
	      return true;
	    }

	    if (offset < leafSet.get('end')) {
	      return leafSet.get('leaves').some(function (leaf) {
	        var leafStart = leaf.get('start');
	        if (offset === leafStart) {
	          isAtStart = true;
	          return true;
	        }

	        return false;
	      });
	    }

	    return false;
	  });

	  return isAtStart;
	}

	module.exports = isSelectionAtLeafStart;

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorContents.react
	 * @typechecks
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var _assign = __webpack_require__(279);

	var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;}

	function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var DraftEditorBlock = __webpack_require__(314);
	var DraftOffsetKey = __webpack_require__(329);
	var EditorState = __webpack_require__(293);
	var React = __webpack_require__(1);

	var cx = __webpack_require__(306);
	var joinClasses = __webpack_require__(341);
	var nullthrows = __webpack_require__(303);

	/**
	                                                  * `DraftEditorContents` is the container component for all block components
	                                                  * rendered for a `DraftEditor`. It is optimized to aggressively avoid
	                                                  * re-rendering blocks whenever possible.
	                                                  *
	                                                  * This component is separate from `DraftEditor` because certain props
	                                                  * (for instance, ARIA props) must be allowed to update without affecting
	                                                  * the contents of the editor.
	                                                  */
	var DraftEditorContents = function (_React$Component) {
	  _inherits(DraftEditorContents, _React$Component);

	  function DraftEditorContents() {
	    _classCallCheck(this, DraftEditorContents);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DraftEditorContents.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    var prevEditorState = this.props.editorState;
	    var nextEditorState = nextProps.editorState;

	    var prevDirectionMap = prevEditorState.getDirectionMap();
	    var nextDirectionMap = nextEditorState.getDirectionMap();

	    // Text direction has changed for one or more blocks. We must re-render.
	    if (prevDirectionMap !== nextDirectionMap) {
	      return true;
	    }

	    var didHaveFocus = prevEditorState.getSelection().getHasFocus();
	    var nowHasFocus = nextEditorState.getSelection().getHasFocus();

	    if (didHaveFocus !== nowHasFocus) {
	      return true;
	    }

	    var nextNativeContent = nextEditorState.getNativelyRenderedContent();

	    var wasComposing = prevEditorState.isInCompositionMode();
	    var nowComposing = nextEditorState.isInCompositionMode();

	    // If the state is unchanged or we're currently rendering a natively
	    // rendered state, there's nothing new to be done.
	    if (prevEditorState === nextEditorState || nextNativeContent !== null && nextEditorState.getCurrentContent() === nextNativeContent || wasComposing && nowComposing) {
	      return false;
	    }

	    var prevContent = prevEditorState.getCurrentContent();
	    var nextContent = nextEditorState.getCurrentContent();
	    var prevDecorator = prevEditorState.getDecorator();
	    var nextDecorator = nextEditorState.getDecorator();
	    return wasComposing !== nowComposing || prevContent !== nextContent || prevDecorator !== nextDecorator || nextEditorState.mustForceSelection();
	  };

	  DraftEditorContents.prototype.render = function render() {
	    var _props = this.props;
	    var blockRenderMap = _props.blockRenderMap;
	    var blockRendererFn = _props.blockRendererFn;
	    var customStyleMap = _props.customStyleMap;
	    var customStyleFn = _props.customStyleFn;
	    var editorState = _props.editorState;


	    var content = editorState.getCurrentContent();
	    var selection = editorState.getSelection();
	    var forceSelection = editorState.mustForceSelection();
	    var decorator = editorState.getDecorator();
	    var directionMap = nullthrows(editorState.getDirectionMap());

	    var blocksAsArray = content.getBlocksAsArray();
	    var processedBlocks = [];
	    var currentDepth = null;
	    var lastWrapperTemplate = null;

	    for (var ii = 0; ii < blocksAsArray.length; ii++) {
	      var _block = blocksAsArray[ii];
	      var key = _block.getKey();
	      var blockType = _block.getType();

	      var customRenderer = blockRendererFn(_block);
	      var CustomComponent = void 0,
	      customProps = void 0,
	      customEditable = void 0;
	      if (customRenderer) {
	        CustomComponent = customRenderer.component;
	        customProps = customRenderer.props;
	        customEditable = customRenderer.editable;
	      }

	      var direction = directionMap.get(key);
	      var offsetKey = DraftOffsetKey.encode(key, 0, 0);
	      var componentProps = {
	        block: _block,
	        blockProps: customProps,
	        customStyleMap: customStyleMap,
	        customStyleFn: customStyleFn,
	        decorator: decorator,
	        direction: direction,
	        forceSelection: forceSelection,
	        key: key,
	        offsetKey: offsetKey,
	        selection: selection,
	        tree: editorState.getBlockTree(key) };


	      var configForType = blockRenderMap.get(blockType);
	      var wrapperTemplate = configForType.wrapper;

	      var _Element = configForType.element || blockRenderMap.get('unstyled').element;

	      var depth = _block.getDepth();
	      var className = this.props.blockStyleFn(_block);

	      // List items are special snowflakes, since we handle nesting and
	      // counters manually.
	      if (_Element === 'li') {
	        var shouldResetCount = lastWrapperTemplate !== wrapperTemplate || currentDepth === null || depth > currentDepth;
	        className = joinClasses(className, getListItemClasses(blockType, depth, shouldResetCount, direction));
	      }

	      var Component = CustomComponent || DraftEditorBlock;
	      var childProps = {
	        className: className,
	        'data-block': true,
	        'data-editor': this.props.editorKey,
	        'data-offset-key': offsetKey,
	        key: key };

	      if (customEditable !== undefined) {
	        childProps = _extends({}, childProps, {
	          contentEditable: customEditable,
	          suppressContentEditableWarning: true });

	      }

	      var child = React.createElement(_Element, childProps, React.createElement(Component, componentProps));

	      processedBlocks.push({
	        block: child,
	        wrapperTemplate: wrapperTemplate,
	        key: key,
	        offsetKey: offsetKey });


	      if (wrapperTemplate) {
	        currentDepth = _block.getDepth();
	      } else {
	        currentDepth = null;
	      }
	      lastWrapperTemplate = wrapperTemplate;
	    }

	    // Group contiguous runs of blocks that have the same wrapperTemplate
	    var outputBlocks = [];
	    for (var _ii = 0; _ii < processedBlocks.length;) {
	      var info = processedBlocks[_ii];
	      if (info.wrapperTemplate) {
	        var blocks = [];
	        do {
	          blocks.push(processedBlocks[_ii].block);
	          _ii++;
	        } while (_ii < processedBlocks.length && processedBlocks[_ii].wrapperTemplate === info.wrapperTemplate);
	        var wrapperElement = React.cloneElement(info.wrapperTemplate, {
	          key: info.key + '-wrap',
	          'data-offset-key': info.offsetKey },
	        blocks);
	        outputBlocks.push(wrapperElement);
	      } else {
	        outputBlocks.push(info.block);
	        _ii++;
	      }
	    }

	    return React.createElement(
	    'div',
	    { 'data-contents': 'true' },
	    outputBlocks);

	  };

	  return DraftEditorContents;
	}(React.Component);

	/**
	                     * Provide default styling for list items. This way, lists will be styled with
	                     * proper counters and indentation even if the caller does not specify
	                     * their own styling at all. If more than five levels of nesting are needed,
	                     * the necessary CSS classes can be provided via `blockStyleFn` configuration.
	                     */


	function getListItemClasses(type, depth, shouldResetCount, direction) {
	  return cx({
	    'public/DraftStyleDefault/unorderedListItem': type === 'unordered-list-item',
	    'public/DraftStyleDefault/orderedListItem': type === 'ordered-list-item',
	    'public/DraftStyleDefault/reset': shouldResetCount,
	    'public/DraftStyleDefault/depth0': depth === 0,
	    'public/DraftStyleDefault/depth1': depth === 1,
	    'public/DraftStyleDefault/depth2': depth === 2,
	    'public/DraftStyleDefault/depth3': depth === 3,
	    'public/DraftStyleDefault/depth4': depth === 4,
	    'public/DraftStyleDefault/listLTR': direction === 'LTR',
	    'public/DraftStyleDefault/listRTL': direction === 'RTL' });

	}

	module.exports = DraftEditorContents;

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorBlock.react
	 * @typechecks
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var _assign = __webpack_require__(279);

	var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;}

	function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var ContentBlock = __webpack_require__(271);
	var DraftEditorLeaf = __webpack_require__(315);
	var DraftOffsetKey = __webpack_require__(329);
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(158);
	var Scroll = __webpack_require__(330);
	var SelectionState = __webpack_require__(297);
	var Style = __webpack_require__(331);
	var UnicodeBidi = __webpack_require__(301);
	var UnicodeBidiDirection = __webpack_require__(302);

	var cx = __webpack_require__(306);
	var getElementPosition = __webpack_require__(335);
	var getScrollPosition = __webpack_require__(337);
	var getViewportDimensions = __webpack_require__(340);
	var nullthrows = __webpack_require__(303);

	var SCROLL_BUFFER = 10;

	/**
	                         * The default block renderer for a `DraftEditor` component.
	                         *
	                         * A `DraftEditorBlock` is able to render a given `ContentBlock` to its
	                         * appropriate decorator and inline style components.
	                         */
	var DraftEditorBlock = function (_React$Component) {
	  _inherits(DraftEditorBlock, _React$Component);

	  function DraftEditorBlock() {
	    _classCallCheck(this, DraftEditorBlock);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DraftEditorBlock.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    return this.props.block !== nextProps.block || this.props.tree !== nextProps.tree || this.props.direction !== nextProps.direction || isBlockOnSelectionEdge(nextProps.selection, nextProps.block.getKey()) && nextProps.forceSelection;
	  };

	  /**
	      * When a block is mounted and overlaps the selection state, we need to make
	      * sure that the cursor is visible to match native behavior. This may not
	      * be the case if the user has pressed `RETURN` or pasted some content, since
	      * programatically creating these new blocks and setting the DOM selection
	      * will miss out on the browser natively scrolling to that position.
	      *
	      * To replicate native behavior, if the block overlaps the selection state
	      * on mount, force the scroll position. Check the scroll state of the scroll
	      * parent, and adjust it to align the entire block to the bottom of the
	      * scroll parent.
	      */


	  DraftEditorBlock.prototype.componentDidMount = function componentDidMount() {
	    var selection = this.props.selection;
	    var endKey = selection.getEndKey();
	    if (!selection.getHasFocus() || endKey !== this.props.block.getKey()) {
	      return;
	    }

	    var blockNode = ReactDOM.findDOMNode(this);
	    var scrollParent = Style.getScrollParent(blockNode);
	    var scrollPosition = getScrollPosition(scrollParent);
	    var scrollDelta;

	    if (scrollParent === window) {
	      var nodePosition = getElementPosition(blockNode);
	      var nodeBottom = nodePosition.y + nodePosition.height;
	      var viewportHeight = getViewportDimensions().height;
	      scrollDelta = nodeBottom - viewportHeight;
	      if (scrollDelta > 0) {
	        window.scrollTo(scrollPosition.x, scrollPosition.y + scrollDelta + SCROLL_BUFFER);
	      }
	    } else {
	      var blockBottom = blockNode.offsetHeight + blockNode.offsetTop;
	      var scrollBottom = scrollParent.offsetHeight + scrollPosition.y;
	      scrollDelta = blockBottom - scrollBottom;
	      if (scrollDelta > 0) {
	        Scroll.setTop(scrollParent, Scroll.getTop(scrollParent) + scrollDelta + SCROLL_BUFFER);
	      }
	    }
	  };

	  DraftEditorBlock.prototype._renderChildren = function _renderChildren() {
	    var _this2 = this;

	    var block = this.props.block;
	    var blockKey = block.getKey();
	    var text = block.getText();
	    var lastLeafSet = this.props.tree.size - 1;
	    var hasSelection = isBlockOnSelectionEdge(this.props.selection, blockKey);

	    return this.props.tree.map(function (leafSet, ii) {
	      var leavesForLeafSet = leafSet.get('leaves');
	      var lastLeaf = leavesForLeafSet.size - 1;
	      var leaves = leavesForLeafSet.map(function (leaf, jj) {
	        var offsetKey = DraftOffsetKey.encode(blockKey, ii, jj);
	        var start = leaf.get('start');
	        var end = leaf.get('end');
	        return React.createElement(DraftEditorLeaf, {
	          key: offsetKey,
	          offsetKey: offsetKey,
	          blockKey: blockKey,
	          start: start,
	          selection: hasSelection ? _this2.props.selection : undefined,
	          forceSelection: _this2.props.forceSelection,
	          text: text.slice(start, end),
	          styleSet: block.getInlineStyleAt(start),
	          customStyleMap: _this2.props.customStyleMap,
	          customStyleFn: _this2.props.customStyleFn,
	          isLast: ii === lastLeafSet && jj === lastLeaf });

	      }).toArray();

	      var decoratorKey = leafSet.get('decoratorKey');
	      if (decoratorKey == null) {
	        return leaves;
	      }

	      if (!_this2.props.decorator) {
	        return leaves;
	      }

	      var decorator = nullthrows(_this2.props.decorator);

	      var DecoratorComponent = decorator.getComponentForKey(decoratorKey);
	      if (!DecoratorComponent) {
	        return leaves;
	      }

	      var decoratorProps = decorator.getPropsForKey(decoratorKey);
	      var decoratorOffsetKey = DraftOffsetKey.encode(blockKey, ii, 0);
	      var decoratedText = text.slice(leavesForLeafSet.first().get('start'), leavesForLeafSet.last().get('end'));

	      // Resetting dir to the same value on a child node makes Chrome/Firefox
	      // confused on cursor movement. See http://jsfiddle.net/d157kLck/3/
	      var dir = UnicodeBidiDirection.getHTMLDirIfDifferent(UnicodeBidi.getDirection(decoratedText), _this2.props.direction);

	      return React.createElement(
	      DecoratorComponent,
	      _extends({}, decoratorProps, {
	        decoratedText: decoratedText,
	        dir: dir,
	        key: decoratorOffsetKey,
	        entityKey: block.getEntityAt(leafSet.get('start')),
	        offsetKey: decoratorOffsetKey }),
	      leaves);

	    }).toArray();
	  };

	  DraftEditorBlock.prototype.render = function render() {
	    var _props = this.props;
	    var direction = _props.direction;
	    var offsetKey = _props.offsetKey;

	    var className = cx({
	      'public/DraftStyleDefault/block': true,
	      'public/DraftStyleDefault/ltr': direction === 'LTR',
	      'public/DraftStyleDefault/rtl': direction === 'RTL' });


	    return React.createElement(
	    'div',
	    { 'data-offset-key': offsetKey, className: className },
	    this._renderChildren());

	  };

	  return DraftEditorBlock;
	}(React.Component);

	/**
	                     * Return whether a block overlaps with either edge of the `SelectionState`.
	                     */


	function isBlockOnSelectionEdge(selection, key) {
	  return selection.getAnchorKey() === key || selection.getFocusKey() === key;
	}

	module.exports = DraftEditorBlock;

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorLeaf.react
	 * @typechecks
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var _assign = __webpack_require__(279);

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;}

	function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var DraftEditorTextNode = __webpack_require__(316);
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(158);
	var SelectionState = __webpack_require__(297);

	var setDraftEditorSelection = __webpack_require__(324);

	/**
	                                                                     * All leaf nodes in the editor are spans with single text nodes. Leaf
	                                                                     * elements are styled based on the merging of an optional custom style map
	                                                                     * and a default style map.
	                                                                     *
	                                                                     * `DraftEditorLeaf` also provides a wrapper for calling into the imperative
	                                                                     * DOM Selection API. In this way, top-level components can declaratively
	                                                                     * maintain the selection state.
	                                                                     */
	var DraftEditorLeaf = function (_React$Component) {
	  _inherits(DraftEditorLeaf, _React$Component);

	  function DraftEditorLeaf() {
	    _classCallCheck(this, DraftEditorLeaf);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  /**
	     * By making individual leaf instances aware of their context within
	     * the text of the editor, we can set our selection range more
	     * easily than we could in the non-React world.
	     *
	     * Note that this depends on our maintaining tight control over the
	     * DOM structure of the TextEditor component. If leaves had multiple
	     * text nodes, this would be harder.
	     */
	  DraftEditorLeaf.prototype._setSelection = function _setSelection() {
	    var selection = this.props.selection;

	    // If selection state is irrelevant to the parent block, no-op.

	    if (selection == null || !selection.getHasFocus()) {
	      return;
	    }

	    var _props = this.props;
	    var blockKey = _props.blockKey;
	    var start = _props.start;
	    var text = _props.text;

	    var end = start + text.length;
	    if (!selection.hasEdgeWithin(blockKey, start, end)) {
	      return;
	    }

	    // Determine the appropriate target node for selection. If the child
	    // is not a text node, it is a <br /> spacer. In this case, use the
	    // <span> itself as the selection target.
	    var node = ReactDOM.findDOMNode(this);
	    var child = node.firstChild;
	    var targetNode = void 0;

	    if (child.nodeType === Node.TEXT_NODE) {
	      targetNode = child;
	    } else if (child.tagName === 'BR') {
	      targetNode = node;
	    } else {
	      targetNode = child.firstChild;
	    }

	    setDraftEditorSelection(selection, targetNode, blockKey, start, end);
	  };

	  DraftEditorLeaf.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    return ReactDOM.findDOMNode(this.refs.leaf).textContent !== nextProps.text || nextProps.styleSet !== this.props.styleSet || nextProps.forceSelection;
	  };

	  DraftEditorLeaf.prototype.componentDidUpdate = function componentDidUpdate() {
	    this._setSelection();
	  };

	  DraftEditorLeaf.prototype.componentDidMount = function componentDidMount() {
	    this._setSelection();
	  };

	  DraftEditorLeaf.prototype.render = function render() {
	    var text = this.props.text;

	    // If the leaf is at the end of its block and ends in a soft newline, append
	    // an extra line feed character. Browsers collapse trailing newline
	    // characters, which leaves the cursor in the wrong place after a
	    // shift+enter. The extra character repairs this.

	    if (text.endsWith('\n') && this.props.isLast) {
	      text += '\n';
	    }

	    var _props2 = this.props;
	    var customStyleMap = _props2.customStyleMap;
	    var customStyleFn = _props2.customStyleFn;
	    var offsetKey = _props2.offsetKey;
	    var styleSet = _props2.styleSet;

	    var styleObj = styleSet.reduce(function (map, styleName) {
	      var mergedStyles = {};
	      var style = customStyleMap[styleName];

	      if (style !== undefined && map.textDecoration !== style.textDecoration) {
	        // .trim() is necessary for IE9/10/11 and Edge
	        mergedStyles.textDecoration = [map.textDecoration, style.textDecoration].join(' ').trim();
	      }

	      return _assign(map, style, mergedStyles);
	    }, {});

	    if (customStyleFn) {
	      var newStyles = customStyleFn(styleSet);
	      styleObj = _assign(styleObj, newStyles);
	    }

	    return React.createElement(
	    'span',
	    {
	      'data-offset-key': offsetKey,
	      ref: 'leaf',
	      style: styleObj },
	    React.createElement(
	    DraftEditorTextNode,
	    null,
	    text));


	  };

	  return DraftEditorLeaf;
	}(React.Component);

	module.exports = DraftEditorLeaf;

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorTextNode.react
	 * @typechecks
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;}

	function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(158);
	var UserAgent = __webpack_require__(317);

	// In IE, spans with <br> tags render as two newlines. By rendering a span
	// with only a newline character, we can be sure to render a single line.
	var useNewlineChar = UserAgent.isBrowser('IE <= 11');

	/**
	                                                       * Check whether the node should be considered a newline.
	                                                       */
	function isNewline(node) {
	  return useNewlineChar ? node.textContent === '\n' : node.tagName === 'BR';
	}

	/**
	   * Placeholder elements for empty text content.
	   *
	   * What is this `data-text` attribute, anyway? It turns out that we need to
	   * put an attribute on the lowest-level text node in order to preserve correct
	   * spellcheck handling. If the <span> is naked, Chrome and Safari may do
	   * bizarre things to do the DOM -- split text nodes, create extra spans, etc.
	   * If the <span> has an attribute, this appears not to happen.
	   * See http://jsfiddle.net/9khdavod/ for the failure case, and
	   * http://jsfiddle.net/7pg143f7/ for the fixed case.
	   */
	var NEWLINE_A = useNewlineChar ? React.createElement(
	'span',
	{ key: 'A', 'data-text': 'true' },
	'\n') :
	React.createElement('br', { key: 'A', 'data-text': 'true' });

	var NEWLINE_B = useNewlineChar ? React.createElement(
	'span',
	{ key: 'B', 'data-text': 'true' },
	'\n') :
	React.createElement('br', { key: 'B', 'data-text': 'true' });

	/**
	                                                               * The lowest-level component in a `DraftEditor`, the text node component
	                                                               * replaces the default React text node implementation. This allows us to
	                                                               * perform custom handling of newline behavior and avoid re-rendering text
	                                                               * nodes with DOM state that already matches the expectations of our immutable
	                                                               * editor state.
	                                                               */
	var DraftEditorTextNode = function (_React$Component) {
	  _inherits(DraftEditorTextNode, _React$Component);

	  function DraftEditorTextNode(props) {
	    _classCallCheck(this, DraftEditorTextNode);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

	    _this._forceFlag = false;
	    return _this;
	  }

	  DraftEditorTextNode.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    var node = ReactDOM.findDOMNode(this);
	    var shouldBeNewline = nextProps.children === '';
	    if (shouldBeNewline) {
	      return !isNewline(node);
	    }
	    return node.textContent !== nextProps.children;
	  };

	  DraftEditorTextNode.prototype.componentWillUpdate = function componentWillUpdate() {
	    // By flipping this flag, we also keep flipping keys which forces
	    // React to remount this node every time it rerenders.
	    this._forceFlag = !this._forceFlag;
	  };

	  DraftEditorTextNode.prototype.render = function render() {
	    if (this.props.children === '') {
	      return this._forceFlag ? NEWLINE_A : NEWLINE_B;
	    }
	    return React.createElement(
	    'span',
	    { key: this._forceFlag ? 'A' : 'B', 'data-text': 'true' },
	    this.props.children);

	  };

	  return DraftEditorTextNode;
	}(React.Component);

	module.exports = DraftEditorTextNode;

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var UserAgentData = __webpack_require__(318);
	var VersionRange = __webpack_require__(321);

	var mapObject = __webpack_require__(322);
	var memoizeStringOnly = __webpack_require__(323);

	/**
	                                                         * Checks to see whether `name` and `version` satisfy `query`.
	                                                         *
	                                                         * @param {string} name Name of the browser, device, engine or platform
	                                                         * @param {?string} version Version of the browser, engine or platform
	                                                         * @param {string} query Query of form "Name [range expression]"
	                                                         * @param {?function} normalizer Optional pre-processor for range expression
	                                                         * @return {boolean}
	                                                         */
	function compare(name, version, query, normalizer) {
	  // check for exact match with no version
	  if (name === query) {
	    return true;
	  }

	  // check for non-matching names
	  if (!query.startsWith(name)) {
	    return false;
	  }

	  // full comparison with version
	  var range = query.slice(name.length);
	  if (version) {
	    range = normalizer ? normalizer(range) : range;
	    return VersionRange.contains(range, version);
	  }

	  return false;
	}

	/**
	   * Normalizes `version` by stripping any "NT" prefix, but only on the Windows
	   * platform.
	   *
	   * Mimics the stripping performed by the `UserAgentWindowsPlatform` PHP class.
	   *
	   * @param {string} version
	   * @return {string}
	   */
	function normalizePlatformVersion(version) {
	  if (UserAgentData.platformName === 'Windows') {
	    return version.replace(/^\s*NT/, '');
	  }

	  return version;
	}

	/**
	   * Provides client-side access to the authoritative PHP-generated User Agent
	   * information supplied by the server.
	   */
	var UserAgent = {
	  /**
	                   * Check if the User Agent browser matches `query`.
	                   *
	                   * `query` should be a string like "Chrome" or "Chrome > 33".
	                   *
	                   * Valid browser names include:
	                   *
	                   * - ACCESS NetFront
	                   * - AOL
	                   * - Amazon Silk
	                   * - Android
	                   * - BlackBerry
	                   * - BlackBerry PlayBook
	                   * - Chrome
	                   * - Chrome for iOS
	                   * - Chrome frame
	                   * - Facebook PHP SDK
	                   * - Facebook for iOS
	                   * - Firefox
	                   * - IE
	                   * - IE Mobile
	                   * - Mobile Safari
	                   * - Motorola Internet Browser
	                   * - Nokia
	                   * - Openwave Mobile Browser
	                   * - Opera
	                   * - Opera Mini
	                   * - Opera Mobile
	                   * - Safari
	                   * - UIWebView
	                   * - Unknown
	                   * - webOS
	                   * - etc...
	                   *
	                   * An authoritative list can be found in the PHP `BrowserDetector` class and
	                   * related classes in the same file (see calls to `new UserAgentBrowser` here:
	                   * https://fburl.com/50728104).
	                   *
	                   * @note Function results are memoized
	                   *
	                   * @param {string} query Query of the form "Name [range expression]"
	                   * @return {boolean}
	                   */
	  isBrowser: function isBrowser(query) {
	    return compare(UserAgentData.browserName, UserAgentData.browserFullVersion, query);
	  },


	  /**
	      * Check if the User Agent browser uses a 32 or 64 bit architecture.
	      *
	      * @note Function results are memoized
	      *
	      * @param {string} query Query of the form "32" or "64".
	      * @return {boolean}
	      */
	  isBrowserArchitecture: function isBrowserArchitecture(query) {
	    return compare(UserAgentData.browserArchitecture, null, query);
	  },


	  /**
	      * Check if the User Agent device matches `query`.
	      *
	      * `query` should be a string like "iPhone" or "iPad".
	      *
	      * Valid device names include:
	      *
	      * - Kindle
	      * - Kindle Fire
	      * - Unknown
	      * - iPad
	      * - iPhone
	      * - iPod
	      * - etc...
	      *
	      * An authoritative list can be found in the PHP `DeviceDetector` class and
	      * related classes in the same file (see calls to `new UserAgentDevice` here:
	      * https://fburl.com/50728332).
	      *
	      * @note Function results are memoized
	      *
	      * @param {string} query Query of the form "Name"
	      * @return {boolean}
	      */
	  isDevice: function isDevice(query) {
	    return compare(UserAgentData.deviceName, null, query);
	  },


	  /**
	      * Check if the User Agent rendering engine matches `query`.
	      *
	      * `query` should be a string like "WebKit" or "WebKit >= 537".
	      *
	      * Valid engine names include:
	      *
	      * - Gecko
	      * - Presto
	      * - Trident
	      * - WebKit
	      * - etc...
	      *
	      * An authoritative list can be found in the PHP `RenderingEngineDetector`
	      * class related classes in the same file (see calls to `new
	      * UserAgentRenderingEngine` here: https://fburl.com/50728617).
	      *
	      * @note Function results are memoized
	      *
	      * @param {string} query Query of the form "Name [range expression]"
	      * @return {boolean}
	      */
	  isEngine: function isEngine(query) {
	    return compare(UserAgentData.engineName, UserAgentData.engineVersion, query);
	  },


	  /**
	      * Check if the User Agent platform matches `query`.
	      *
	      * `query` should be a string like "Windows" or "iOS 5 - 6".
	      *
	      * Valid platform names include:
	      *
	      * - Android
	      * - BlackBerry OS
	      * - Java ME
	      * - Linux
	      * - Mac OS X
	      * - Mac OS X Calendar
	      * - Mac OS X Internet Account
	      * - Symbian
	      * - SymbianOS
	      * - Windows
	      * - Windows Mobile
	      * - Windows Phone
	      * - iOS
	      * - iOS Facebook Integration Account
	      * - iOS Facebook Social Sharing UI
	      * - webOS
	      * - Chrome OS
	      * - etc...
	      *
	      * An authoritative list can be found in the PHP `PlatformDetector` class and
	      * related classes in the same file (see calls to `new UserAgentPlatform`
	      * here: https://fburl.com/50729226).
	      *
	      * @note Function results are memoized
	      *
	      * @param {string} query Query of the form "Name [range expression]"
	      * @return {boolean}
	      */
	  isPlatform: function isPlatform(query) {
	    return compare(UserAgentData.platformName, UserAgentData.platformFullVersion, query, normalizePlatformVersion);
	  },


	  /**
	      * Check if the User Agent platform is a 32 or 64 bit architecture.
	      *
	      * @note Function results are memoized
	      *
	      * @param {string} query Query of the form "32" or "64".
	      * @return {boolean}
	      */
	  isPlatformArchitecture: function isPlatformArchitecture(query) {
	    return compare(UserAgentData.platformArchitecture, null, query);
	  } };


	module.exports = mapObject(UserAgent, memoizeStringOnly);

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	     * Usage note:
	     * This module makes a best effort to export the same data we would internally.
	     * At Facebook we use a server-generated module that does the parsing and
	     * exports the data for the client to use. We can't rely on a server-side
	     * implementation in open source so instead we make use of an open source
	     * library to do the heavy lifting and then make some adjustments as necessary.
	     * It's likely there will be some differences. Some we can smooth over.
	     * Others are going to be harder.
	     */

	'use strict';

	var UAParser = __webpack_require__(319);

	var UNKNOWN = 'Unknown';

	var PLATFORM_MAP = {
	  'Mac OS': 'Mac OS X' };


	/**
	                           * Convert from UAParser platform name to what we expect.
	                           */
	function convertPlatformName(name) {
	  return PLATFORM_MAP[name] || name;
	}

	/**
	   * Get the version number in parts. This is very naive. We actually get major
	   * version as a part of UAParser already, which is generally good enough, but
	   * let's get the minor just in case.
	   */
	function getBrowserVersion(version) {
	  if (!version) {
	    return {
	      major: '',
	      minor: '' };

	  }
	  var parts = version.split('.');
	  return {
	    major: parts[0],
	    minor: parts[1] };

	}

	/**
	   * Get the UA data fom UAParser and then convert it to the format we're
	   * expecting for our APIS.
	   */
	var parser = new UAParser();
	var results = parser.getResult();

	// Do some conversion first.
	var browserVersionData = getBrowserVersion(results.browser.version);
	var uaData = {
	  browserArchitecture: results.cpu.architecture || UNKNOWN,
	  browserFullVersion: results.browser.version || UNKNOWN,
	  browserMinorVersion: browserVersionData.minor || UNKNOWN,
	  browserName: results.browser.name || UNKNOWN,
	  browserVersion: results.browser.major || UNKNOWN,
	  deviceName: results.device.model || UNKNOWN,
	  engineName: results.engine.name || UNKNOWN,
	  engineVersion: results.engine.version || UNKNOWN,
	  platformArchitecture: results.cpu.architecture || UNKNOWN,
	  platformName: convertPlatformName(results.os.name) || UNKNOWN,
	  platformVersion: results.os.version || UNKNOWN,
	  platformFullVersion: results.os.version || UNKNOWN };


	module.exports = uaData;

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}; /**
	                                                                                                                                                                                                                                                                                        * UAParser.js v0.7.10
	                                                                                                                                                                                                                                                                                        * Lightweight JavaScript-based User-Agent string parser
	                                                                                                                                                                                                                                                                                        * https://github.com/faisalman/ua-parser-js
	                                                                                                                                                                                                                                                                                        *
	                                                                                                                                                                                                                                                                                        * Copyright © 2012-2015 Faisal Salman <fyzlman@gmail.com>
	                                                                                                                                                                                                                                                                                        * Dual licensed under GPLv2 & MIT
	                                                                                                                                                                                                                                                                                        */

	(function (window, undefined) {

	            'use strict';

	            //////////////
	            // Constants
	            /////////////


	            var LIBVERSION = '0.7.10',
	            EMPTY = '',
	            UNKNOWN = '?',
	            FUNC_TYPE = 'function',
	            UNDEF_TYPE = 'undefined',
	            OBJ_TYPE = 'object',
	            STR_TYPE = 'string',
	            MAJOR = 'major', // deprecated
	            MODEL = 'model',
	            NAME = 'name',
	            TYPE = 'type',
	            VENDOR = 'vendor',
	            VERSION = 'version',
	            ARCHITECTURE = 'architecture',
	            CONSOLE = 'console',
	            MOBILE = 'mobile',
	            TABLET = 'tablet',
	            SMARTTV = 'smarttv',
	            WEARABLE = 'wearable',
	            EMBEDDED = 'embedded';


	            ///////////
	            // Helper
	            //////////


	            var util = {
	                        extend: function extend(regexes, extensions) {
	                                    for (var i in extensions) {
	                                                if ("browser cpu device engine os".indexOf(i) !== -1 && extensions[i].length % 2 === 0) {
	                                                            regexes[i] = extensions[i].concat(regexes[i]);
	                                                }
	                                    }
	                                    return regexes;
	                        },
	                        has: function has(str1, str2) {
	                                    if (typeof str1 === "string") {
	                                                return str2.toLowerCase().indexOf(str1.toLowerCase()) !== -1;
	                                    } else {
	                                                return false;
	                                    }
	                        },
	                        lowerize: function lowerize(str) {
	                                    return str.toLowerCase();
	                        },
	                        major: function major(version) {
	                                    return (typeof version === 'undefined' ? 'undefined' : _typeof(version)) === STR_TYPE ? version.split(".")[0] : undefined;
	                        } };



	            ///////////////
	            // Map helper
	            //////////////


	            var mapper = {

	                        rgx: function rgx() {

	                                    var result,i = 0,j,k,p,q,matches,match,args = arguments;

	                                    // loop through all regexes maps
	                                    while (i < args.length && !matches) {

	                                                var regex = args[i], // even sequence (0,2,4,..)
	                                                props = args[i + 1]; // odd sequence (1,3,5,..)

	                                                // construct object barebones
	                                                if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === UNDEF_TYPE) {
	                                                            result = {};
	                                                            for (p in props) {
	                                                                        if (props.hasOwnProperty(p)) {
	                                                                                    q = props[p];
	                                                                                    if ((typeof q === 'undefined' ? 'undefined' : _typeof(q)) === OBJ_TYPE) {
	                                                                                                result[q[0]] = undefined;
	                                                                                    } else {
	                                                                                                result[q] = undefined;
	                                                                                    }
	                                                                        }
	                                                            }
	                                                }

	                                                // try matching uastring with regexes
	                                                j = k = 0;
	                                                while (j < regex.length && !matches) {
	                                                            matches = regex[j++].exec(this.getUA());
	                                                            if (!!matches) {
	                                                                        for (p = 0; p < props.length; p++) {
	                                                                                    match = matches[++k];
	                                                                                    q = props[p];
	                                                                                    // check if given property is actually array
	                                                                                    if ((typeof q === 'undefined' ? 'undefined' : _typeof(q)) === OBJ_TYPE && q.length > 0) {
	                                                                                                if (q.length == 2) {
	                                                                                                            if (_typeof(q[1]) == FUNC_TYPE) {
	                                                                                                                        // assign modified match
	                                                                                                                        result[q[0]] = q[1].call(this, match);
	                                                                                                            } else {
	                                                                                                                        // assign given value, ignore regex match
	                                                                                                                        result[q[0]] = q[1];
	                                                                                                            }
	                                                                                                } else if (q.length == 3) {
	                                                                                                            // check whether function or regex
	                                                                                                            if (_typeof(q[1]) === FUNC_TYPE && !(q[1].exec && q[1].test)) {
	                                                                                                                        // call function (usually string mapper)
	                                                                                                                        result[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
	                                                                                                            } else {
	                                                                                                                        // sanitize match using given regex
	                                                                                                                        result[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
	                                                                                                            }
	                                                                                                } else if (q.length == 4) {
	                                                                                                            result[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
	                                                                                                }
	                                                                                    } else {
	                                                                                                result[q] = match ? match : undefined;
	                                                                                    }
	                                                                        }
	                                                            }
	                                                }
	                                                i += 2;
	                                    }
	                                    return result;
	                        },

	                        str: function str(_str, map) {

	                                    for (var i in map) {
	                                                // check if array
	                                                if (_typeof(map[i]) === OBJ_TYPE && map[i].length > 0) {
	                                                            for (var j = 0; j < map[i].length; j++) {
	                                                                        if (util.has(map[i][j], _str)) {
	                                                                                    return i === UNKNOWN ? undefined : i;
	                                                                        }
	                                                            }
	                                                } else if (util.has(map[i], _str)) {
	                                                            return i === UNKNOWN ? undefined : i;
	                                                }
	                                    }
	                                    return _str;
	                        } };



	            ///////////////
	            // String map
	            //////////////


	            var maps = {

	                        browser: {
	                                    oldsafari: {
	                                                version: {
	                                                            '1.0': '/8',
	                                                            '1.2': '/1',
	                                                            '1.3': '/3',
	                                                            '2.0': '/412',
	                                                            '2.0.2': '/416',
	                                                            '2.0.3': '/417',
	                                                            '2.0.4': '/419',
	                                                            '?': '/' } } },




	                        device: {
	                                    amazon: {
	                                                model: {
	                                                            'Fire Phone': ['SD', 'KF'] } },


	                                    sprint: {
	                                                model: {
	                                                            'Evo Shift 4G': '7373KT' },

	                                                vendor: {
	                                                            'HTC': 'APA',
	                                                            'Sprint': 'Sprint' } } },




	                        os: {
	                                    windows: {
	                                                version: {
	                                                            'ME': '4.90',
	                                                            'NT 3.11': 'NT3.51',
	                                                            'NT 4.0': 'NT4.0',
	                                                            '2000': 'NT 5.0',
	                                                            'XP': ['NT 5.1', 'NT 5.2'],
	                                                            'Vista': 'NT 6.0',
	                                                            '7': 'NT 6.1',
	                                                            '8': 'NT 6.2',
	                                                            '8.1': 'NT 6.3',
	                                                            '10': ['NT 6.4', 'NT 10.0'],
	                                                            'RT': 'ARM' } } } };






	            //////////////
	            // Regex map
	            /////////////


	            var regexes = {

	                        browser: [[

	                        // Presto based
	                        /(opera\smini)\/([\w\.-]+)/i, // Opera Mini
	                        /(opera\s[mobiletab]+).+version\/([\w\.-]+)/i, // Opera Mobi/Tablet
	                        /(opera).+version\/([\w\.]+)/i, // Opera > 9.80
	                        /(opera)[\/\s]+([\w\.]+)/i // Opera < 9.80
	                        ],
	                        [NAME, VERSION], [

	                        /\s(opr)\/([\w\.]+)/i // Opera Webkit
	                        ], [[NAME, 'Opera'], VERSION], [

	                        // Mixed
	                        /(kindle)\/([\w\.]+)/i, // Kindle
	                        /(lunascape|maxthon|netfront|jasmine|blazer)[\/\s]?([\w\.]+)*/i,
	                        // Lunascape/Maxthon/Netfront/Jasmine/Blazer

	                        // Trident based
	                        /(avant\s|iemobile|slim|baidu)(?:browser)?[\/\s]?([\w\.]*)/i,
	                        // Avant/IEMobile/SlimBrowser/Baidu
	                        /(?:ms|\()(ie)\s([\w\.]+)/i, // Internet Explorer

	                        // Webkit/KHTML based
	                        /(rekonq)\/([\w\.]+)*/i, // Rekonq
	                        /(chromium|flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs)\/([\w\.-]+)/i
	                        // Chromium/Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS
	                        ], [NAME, VERSION], [

	                        /(trident).+rv[:\s]([\w\.]+).+like\sgecko/i // IE11
	                        ], [[NAME, 'IE'], VERSION], [

	                        /(edge)\/((\d+)?[\w\.]+)/i // Microsoft Edge
	                        ], [NAME, VERSION], [

	                        /(yabrowser)\/([\w\.]+)/i // Yandex
	                        ], [[NAME, 'Yandex'], VERSION], [

	                        /(comodo_dragon)\/([\w\.]+)/i // Comodo Dragon
	                        ], [[NAME, /_/g, ' '], VERSION], [

	                        /(chrome|omniweb|arora|[tizenoka]{5}\s?browser)\/v?([\w\.]+)/i,
	                        // Chrome/OmniWeb/Arora/Tizen/Nokia
	                        /(qqbrowser)[\/\s]?([\w\.]+)/i
	                        // QQBrowser
	                        ], [NAME, VERSION], [

	                        /(uc\s?browser)[\/\s]?([\w\.]+)/i,
	                        /ucweb.+(ucbrowser)[\/\s]?([\w\.]+)/i,
	                        /JUC.+(ucweb)[\/\s]?([\w\.]+)/i
	                        // UCBrowser
	                        ], [[NAME, 'UCBrowser'], VERSION], [

	                        /(dolfin)\/([\w\.]+)/i // Dolphin
	                        ], [[NAME, 'Dolphin'], VERSION], [

	                        /((?:android.+)crmo|crios)\/([\w\.]+)/i // Chrome for Android/iOS
	                        ], [[NAME, 'Chrome'], VERSION], [

	                        /XiaoMi\/MiuiBrowser\/([\w\.]+)/i // MIUI Browser
	                        ], [VERSION, [NAME, 'MIUI Browser']], [

	                        /android.+version\/([\w\.]+)\s+(?:mobile\s?safari|safari)/i // Android Browser
	                        ], [VERSION, [NAME, 'Android Browser']], [

	                        /FBAV\/([\w\.]+);/i // Facebook App for iOS
	                        ], [VERSION, [NAME, 'Facebook']], [

	                        /fxios\/([\w\.-]+)/i // Firefox for iOS
	                        ], [VERSION, [NAME, 'Firefox']], [

	                        /version\/([\w\.]+).+?mobile\/\w+\s(safari)/i // Mobile Safari
	                        ], [VERSION, [NAME, 'Mobile Safari']], [

	                        /version\/([\w\.]+).+?(mobile\s?safari|safari)/i // Safari & Safari Mobile
	                        ], [VERSION, NAME], [

	                        /webkit.+?(mobile\s?safari|safari)(\/[\w\.]+)/i // Safari < 3.0
	                        ], [NAME, [VERSION, mapper.str, maps.browser.oldsafari.version]], [

	                        /(konqueror)\/([\w\.]+)/i, // Konqueror
	                        /(webkit|khtml)\/([\w\.]+)/i],
	                        [NAME, VERSION], [

	                        // Gecko based
	                        /(navigator|netscape)\/([\w\.-]+)/i // Netscape
	                        ], [[NAME, 'Netscape'], VERSION], [
	                        /(swiftfox)/i, // Swiftfox
	                        /(icedragon|iceweasel|camino|chimera|fennec|maemo\sbrowser|minimo|conkeror)[\/\s]?([\w\.\+]+)/i,
	                        // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror
	                        /(firefox|seamonkey|k-meleon|icecat|iceape|firebird|phoenix)\/([\w\.-]+)/i,
	                        // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
	                        /(mozilla)\/([\w\.]+).+rv\:.+gecko\/\d+/i, // Mozilla

	                        // Other
	                        /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir)[\/\s]?([\w\.]+)/i,
	                        // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir
	                        /(links)\s\(([\w\.]+)/i, // Links
	                        /(gobrowser)\/?([\w\.]+)*/i, // GoBrowser
	                        /(ice\s?browser)\/v?([\w\._]+)/i, // ICE Browser
	                        /(mosaic)[\/\s]([\w\.]+)/i // Mosaic
	                        ], [NAME, VERSION]

	                        /* /////////////////////
	                                           // Media players BEGIN
	                                           ////////////////////////
	                                             , [
	                                             /(apple(?:coremedia|))\/((\d+)[\w\._]+)/i,                          // Generic Apple CoreMedia
	                                           /(coremedia) v((\d+)[\w\._]+)/i
	                                           ], [NAME, VERSION], [
	                                             /(aqualung|lyssna|bsplayer)\/((\d+)?[\w\.-]+)/i                     // Aqualung/Lyssna/BSPlayer
	                                           ], [NAME, VERSION], [
	                                             /(ares|ossproxy)\s((\d+)[\w\.-]+)/i                                 // Ares/OSSProxy
	                                           ], [NAME, VERSION], [
	                                             /(audacious|audimusicstream|amarok|bass|core|dalvik|gnomemplayer|music on console|nsplayer|psp-internetradioplayer|videos)\/((\d+)[\w\.-]+)/i,
	                                                                                                               // Audacious/AudiMusicStream/Amarok/BASS/OpenCORE/Dalvik/GnomeMplayer/MoC
	                                                                                                               // NSPlayer/PSP-InternetRadioPlayer/Videos
	                                           /(clementine|music player daemon)\s((\d+)[\w\.-]+)/i,               // Clementine/MPD
	                                           /(lg player|nexplayer)\s((\d+)[\d\.]+)/i,
	                                           /player\/(nexplayer|lg player)\s((\d+)[\w\.-]+)/i                   // NexPlayer/LG Player
	                                           ], [NAME, VERSION], [
	                                           /(nexplayer)\s((\d+)[\w\.-]+)/i                                     // Nexplayer
	                                           ], [NAME, VERSION], [
	                                             /(flrp)\/((\d+)[\w\.-]+)/i                                          // Flip Player
	                                           ], [[NAME, 'Flip Player'], VERSION], [
	                                             /(fstream|nativehost|queryseekspider|ia-archiver|facebookexternalhit)/i
	                                                                                                               // FStream/NativeHost/QuerySeekSpider/IA Archiver/facebookexternalhit
	                                           ], [NAME], [
	                                             /(gstreamer) souphttpsrc (?:\([^\)]+\)){0,1} libsoup\/((\d+)[\w\.-]+)/i
	                                                                                                               // Gstreamer
	                                           ], [NAME, VERSION], [
	                                             /(htc streaming player)\s[\w_]+\s\/\s((\d+)[\d\.]+)/i,              // HTC Streaming Player
	                                           /(java|python-urllib|python-requests|wget|libcurl)\/((\d+)[\w\.-_]+)/i,
	                                                                                                               // Java/urllib/requests/wget/cURL
	                                           /(lavf)((\d+)[\d\.]+)/i                                             // Lavf (FFMPEG)
	                                           ], [NAME, VERSION], [
	                                             /(htc_one_s)\/((\d+)[\d\.]+)/i                                      // HTC One S
	                                           ], [[NAME, /_/g, ' '], VERSION], [
	                                             /(mplayer)(?:\s|\/)(?:(?:sherpya-){0,1}svn)(?:-|\s)(r\d+(?:-\d+[\w\.-]+){0,1})/i
	                                                                                                               // MPlayer SVN
	                                           ], [NAME, VERSION], [
	                                             /(mplayer)(?:\s|\/|[unkow-]+)((\d+)[\w\.-]+)/i                      // MPlayer
	                                           ], [NAME, VERSION], [
	                                             /(mplayer)/i,                                                       // MPlayer (no other info)
	                                           /(yourmuze)/i,                                                      // YourMuze
	                                           /(media player classic|nero showtime)/i                             // Media Player Classic/Nero ShowTime
	                                           ], [NAME], [
	                                             /(nero (?:home|scout))\/((\d+)[\w\.-]+)/i                           // Nero Home/Nero Scout
	                                           ], [NAME, VERSION], [
	                                             /(nokia\d+)\/((\d+)[\w\.-]+)/i                                      // Nokia
	                                           ], [NAME, VERSION], [
	                                             /\s(songbird)\/((\d+)[\w\.-]+)/i                                    // Songbird/Philips-Songbird
	                                           ], [NAME, VERSION], [
	                                             /(winamp)3 version ((\d+)[\w\.-]+)/i,                               // Winamp
	                                           /(winamp)\s((\d+)[\w\.-]+)/i,
	                                           /(winamp)mpeg\/((\d+)[\w\.-]+)/i
	                                           ], [NAME, VERSION], [
	                                             /(ocms-bot|tapinradio|tunein radio|unknown|winamp|inlight radio)/i  // OCMS-bot/tap in radio/tunein/unknown/winamp (no other info)
	                                                                                                               // inlight radio
	                                           ], [NAME], [
	                                             /(quicktime|rma|radioapp|radioclientapplication|soundtap|totem|stagefright|streamium)\/((\d+)[\w\.-]+)/i
	                                                                                                               // QuickTime/RealMedia/RadioApp/RadioClientApplication/
	                                                                                                               // SoundTap/Totem/Stagefright/Streamium
	                                           ], [NAME, VERSION], [
	                                             /(smp)((\d+)[\d\.]+)/i                                              // SMP
	                                           ], [NAME, VERSION], [
	                                             /(vlc) media player - version ((\d+)[\w\.]+)/i,                     // VLC Videolan
	                                           /(vlc)\/((\d+)[\w\.-]+)/i,
	                                           /(xbmc|gvfs|xine|xmms|irapp)\/((\d+)[\w\.-]+)/i,                    // XBMC/gvfs/Xine/XMMS/irapp
	                                           /(foobar2000)\/((\d+)[\d\.]+)/i,                                    // Foobar2000
	                                           /(itunes)\/((\d+)[\d\.]+)/i                                         // iTunes
	                                           ], [NAME, VERSION], [
	                                             /(wmplayer)\/((\d+)[\w\.-]+)/i,                                     // Windows Media Player
	                                           /(windows-media-player)\/((\d+)[\w\.-]+)/i
	                                           ], [[NAME, /-/g, ' '], VERSION], [
	                                             /windows\/((\d+)[\w\.-]+) upnp\/[\d\.]+ dlnadoc\/[\d\.]+ (home media server)/i
	                                                                                                               // Windows Media Server
	                                           ], [VERSION, [NAME, 'Windows']], [
	                                             /(com\.riseupradioalarm)\/((\d+)[\d\.]*)/i                          // RiseUP Radio Alarm
	                                           ], [NAME, VERSION], [
	                                             /(rad.io)\s((\d+)[\d\.]+)/i,                                        // Rad.io
	                                           /(radio.(?:de|at|fr))\s((\d+)[\d\.]+)/i
	                                           ], [[NAME, 'rad.io'], VERSION]
	                                             //////////////////////
	                                           // Media players END
	                                           ////////////////////*/],





























	                        cpu: [[

	                        /(?:(amd|x(?:(?:86|64)[_-])?|wow|win)64)[;\)]/i // AMD64
	                        ], [[ARCHITECTURE, 'amd64']], [

	                        /(ia32(?=;))/i // IA32 (quicktime)
	                        ], [[ARCHITECTURE, util.lowerize]], [

	                        /((?:i[346]|x)86)[;\)]/i // IA32
	                        ], [[ARCHITECTURE, 'ia32']], [

	                        // PocketPC mistakenly identified as PowerPC
	                        /windows\s(ce|mobile);\sppc;/i],
	                        [[ARCHITECTURE, 'arm']], [

	                        /((?:ppc|powerpc)(?:64)?)(?:\smac|;|\))/i // PowerPC
	                        ], [[ARCHITECTURE, /ower/, '', util.lowerize]], [

	                        /(sun4\w)[;\)]/i // SPARC
	                        ], [[ARCHITECTURE, 'sparc']], [

	                        /((?:avr32|ia64(?=;))|68k(?=\))|arm(?:64|(?=v\d+;))|(?=atmel\s)avr|(?:irix|mips|sparc)(?:64)?(?=;)|pa-risc)/i
	                        // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
	                        ], [[ARCHITECTURE, util.lowerize]]],


	                        device: [[

	                        /\((ipad|playbook);[\w\s\);-]+(rim|apple)/i // iPad/PlayBook
	                        ], [MODEL, VENDOR, [TYPE, TABLET]], [

	                        /applecoremedia\/[\w\.]+ \((ipad)/ // iPad
	                        ], [MODEL, [VENDOR, 'Apple'], [TYPE, TABLET]], [

	                        /(apple\s{0,1}tv)/i // Apple TV
	                        ], [[MODEL, 'Apple TV'], [VENDOR, 'Apple']], [

	                        /(archos)\s(gamepad2?)/i, // Archos
	                        /(hp).+(touchpad)/i, // HP TouchPad
	                        /(kindle)\/([\w\.]+)/i, // Kindle
	                        /\s(nook)[\w\s]+build\/(\w+)/i, // Nook
	                        /(dell)\s(strea[kpr\s\d]*[\dko])/i // Dell Streak
	                        ], [VENDOR, MODEL, [TYPE, TABLET]], [

	                        /(kf[A-z]+)\sbuild\/[\w\.]+.*silk\//i // Kindle Fire HD
	                        ], [MODEL, [VENDOR, 'Amazon'], [TYPE, TABLET]], [
	                        /(sd|kf)[0349hijorstuw]+\sbuild\/[\w\.]+.*silk\//i // Fire Phone
	                        ], [[MODEL, mapper.str, maps.device.amazon.model], [VENDOR, 'Amazon'], [TYPE, MOBILE]], [

	                        /\((ip[honed|\s\w*]+);.+(apple)/i // iPod/iPhone
	                        ], [MODEL, VENDOR, [TYPE, MOBILE]], [
	                        /\((ip[honed|\s\w*]+);/i // iPod/iPhone
	                        ], [MODEL, [VENDOR, 'Apple'], [TYPE, MOBILE]], [

	                        /(blackberry)[\s-]?(\w+)/i, // BlackBerry
	                        /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|huawei|meizu|motorola|polytron)[\s_-]?([\w-]+)*/i,
	                        // BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Huawei/Meizu/Motorola/Polytron
	                        /(hp)\s([\w\s]+\w)/i, // HP iPAQ
	                        /(asus)-?(\w+)/i // Asus
	                        ], [VENDOR, MODEL, [TYPE, MOBILE]], [
	                        /\(bb10;\s(\w+)/i // BlackBerry 10
	                        ], [MODEL, [VENDOR, 'BlackBerry'], [TYPE, MOBILE]], [
	                        // Asus Tablets
	                        /android.+(transfo[prime\s]{4,10}\s\w+|eeepc|slider\s\w+|nexus 7)/i],
	                        [MODEL, [VENDOR, 'Asus'], [TYPE, TABLET]], [

	                        /(sony)\s(tablet\s[ps])\sbuild\//i, // Sony
	                        /(sony)?(?:sgp.+)\sbuild\//i],
	                        [[VENDOR, 'Sony'], [MODEL, 'Xperia Tablet'], [TYPE, TABLET]], [
	                        /(?:sony)?(?:(?:(?:c|d)\d{4})|(?:so[-l].+))\sbuild\//i],
	                        [[VENDOR, 'Sony'], [MODEL, 'Xperia Phone'], [TYPE, MOBILE]], [

	                        /\s(ouya)\s/i, // Ouya
	                        /(nintendo)\s([wids3u]+)/i // Nintendo
	                        ], [VENDOR, MODEL, [TYPE, CONSOLE]], [

	                        /android.+;\s(shield)\sbuild/i // Nvidia
	                        ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [

	                        /(playstation\s[34portablevi]+)/i // Playstation
	                        ], [MODEL, [VENDOR, 'Sony'], [TYPE, CONSOLE]], [

	                        /(sprint\s(\w+))/i // Sprint Phones
	                        ], [[VENDOR, mapper.str, maps.device.sprint.vendor], [MODEL, mapper.str, maps.device.sprint.model], [TYPE, MOBILE]], [

	                        /(lenovo)\s?(S(?:5000|6000)+(?:[-][\w+]))/i // Lenovo tablets
	                        ], [VENDOR, MODEL, [TYPE, TABLET]], [

	                        /(htc)[;_\s-]+([\w\s]+(?=\))|\w+)*/i, // HTC
	                        /(zte)-(\w+)*/i, // ZTE
	                        /(alcatel|geeksphone|huawei|lenovo|nexian|panasonic|(?=;\s)sony)[_\s-]?([\w-]+)*/i
	                        // Alcatel/GeeksPhone/Huawei/Lenovo/Nexian/Panasonic/Sony
	                        ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

	                        /(nexus\s9)/i // HTC Nexus 9
	                        ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [

	                        /[\s\(;](xbox(?:\sone)?)[\s\);]/i // Microsoft Xbox
	                        ], [MODEL, [VENDOR, 'Microsoft'], [TYPE, CONSOLE]], [
	                        /(kin\.[onetw]{3})/i // Microsoft Kin
	                        ], [[MODEL, /\./g, ' '], [VENDOR, 'Microsoft'], [TYPE, MOBILE]], [

	                        // Motorola
	                        /\s(milestone|droid(?:[2-4x]|\s(?:bionic|x2|pro|razr))?(:?\s4g)?)[\w\s]+build\//i,
	                        /mot[\s-]?(\w+)*/i,
	                        /(XT\d{3,4}) build\//i,
	                        /(nexus\s[6])/i],
	                        [MODEL, [VENDOR, 'Motorola'], [TYPE, MOBILE]], [
	                        /android.+\s(mz60\d|xoom[\s2]{0,2})\sbuild\//i],
	                        [MODEL, [VENDOR, 'Motorola'], [TYPE, TABLET]], [

	                        /android.+((sch-i[89]0\d|shw-m380s|gt-p\d{4}|gt-n8000|sgh-t8[56]9|nexus 10))/i,
	                        /((SM-T\w+))/i],
	                        [[VENDOR, 'Samsung'], MODEL, [TYPE, TABLET]], [// Samsung
	                        /((s[cgp]h-\w+|gt-\w+|galaxy\snexus|sm-n900))/i,
	                        /(sam[sung]*)[\s-]*(\w+-?[\w-]*)*/i,
	                        /sec-((sgh\w+))/i],
	                        [[VENDOR, 'Samsung'], MODEL, [TYPE, MOBILE]], [
	                        /(samsung);smarttv/i],
	                        [VENDOR, MODEL, [TYPE, SMARTTV]], [

	                        /\(dtv[\);].+(aquos)/i // Sharp
	                        ], [MODEL, [VENDOR, 'Sharp'], [TYPE, SMARTTV]], [
	                        /sie-(\w+)*/i // Siemens
	                        ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [

	                        /(maemo|nokia).*(n900|lumia\s\d+)/i, // Nokia
	                        /(nokia)[\s_-]?([\w-]+)*/i],
	                        [[VENDOR, 'Nokia'], MODEL, [TYPE, MOBILE]], [

	                        /android\s3\.[\s\w;-]{10}(a\d{3})/i // Acer
	                        ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

	                        /android\s3\.[\s\w;-]{10}(lg?)-([06cv9]{3,4})/i // LG Tablet
	                        ], [[VENDOR, 'LG'], MODEL, [TYPE, TABLET]], [
	                        /(lg) netcast\.tv/i // LG SmartTV
	                        ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
	                        /(nexus\s[45])/i, // LG
	                        /lg[e;\s\/-]+(\w+)*/i],
	                        [MODEL, [VENDOR, 'LG'], [TYPE, MOBILE]], [

	                        /android.+(ideatab[a-z0-9\-\s]+)/i // Lenovo
	                        ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [

	                        /linux;.+((jolla));/i // Jolla
	                        ], [VENDOR, MODEL, [TYPE, MOBILE]], [

	                        /((pebble))app\/[\d\.]+\s/i // Pebble
	                        ], [VENDOR, MODEL, [TYPE, WEARABLE]], [

	                        /android.+;\s(glass)\s\d/i // Google Glass
	                        ], [MODEL, [VENDOR, 'Google'], [TYPE, WEARABLE]], [

	                        /android.+(\w+)\s+build\/hm\1/i, // Xiaomi Hongmi 'numeric' models
	                        /android.+(hm[\s\-_]*note?[\s_]*(?:\d\w)?)\s+build/i, // Xiaomi Hongmi
	                        /android.+(mi[\s\-_]*(?:one|one[\s_]plus)?[\s_]*(?:\d\w)?)\s+build/i // Xiaomi Mi
	                        ], [[MODEL, /_/g, ' '], [VENDOR, 'Xiaomi'], [TYPE, MOBILE]], [

	                        /\s(tablet)[;\/\s]/i, // Unidentifiable Tablet
	                        /\s(mobile)[;\/\s]/i // Unidentifiable Mobile
	                        ], [[TYPE, util.lowerize], VENDOR, MODEL]

	                        /*//////////////////////////
	                                                                  // TODO: move to string map
	                                                                  ////////////////////////////
	                                                                    /(C6603)/i                                                          // Sony Xperia Z C6603
	                                                                  ], [[MODEL, 'Xperia Z C6603'], [VENDOR, 'Sony'], [TYPE, MOBILE]], [
	                                                                  /(C6903)/i                                                          // Sony Xperia Z 1
	                                                                  ], [[MODEL, 'Xperia Z 1'], [VENDOR, 'Sony'], [TYPE, MOBILE]], [
	                                                                    /(SM-G900[F|H])/i                                                   // Samsung Galaxy S5
	                                                                  ], [[MODEL, 'Galaxy S5'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
	                                                                  /(SM-G7102)/i                                                       // Samsung Galaxy Grand 2
	                                                                  ], [[MODEL, 'Galaxy Grand 2'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
	                                                                  /(SM-G530H)/i                                                       // Samsung Galaxy Grand Prime
	                                                                  ], [[MODEL, 'Galaxy Grand Prime'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
	                                                                  /(SM-G313HZ)/i                                                      // Samsung Galaxy V
	                                                                  ], [[MODEL, 'Galaxy V'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
	                                                                  /(SM-T805)/i                                                        // Samsung Galaxy Tab S 10.5
	                                                                  ], [[MODEL, 'Galaxy Tab S 10.5'], [VENDOR, 'Samsung'], [TYPE, TABLET]], [
	                                                                  /(SM-G800F)/i                                                       // Samsung Galaxy S5 Mini
	                                                                  ], [[MODEL, 'Galaxy S5 Mini'], [VENDOR, 'Samsung'], [TYPE, MOBILE]], [
	                                                                  /(SM-T311)/i                                                        // Samsung Galaxy Tab 3 8.0
	                                                                  ], [[MODEL, 'Galaxy Tab 3 8.0'], [VENDOR, 'Samsung'], [TYPE, TABLET]], [
	                                                                    /(R1001)/i                                                          // Oppo R1001
	                                                                  ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [
	                                                                  /(X9006)/i                                                          // Oppo Find 7a
	                                                                  ], [[MODEL, 'Find 7a'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [
	                                                                  /(R2001)/i                                                          // Oppo YOYO R2001
	                                                                  ], [[MODEL, 'Yoyo R2001'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [
	                                                                  /(R815)/i                                                           // Oppo Clover R815
	                                                                  ], [[MODEL, 'Clover R815'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [
	                                                                   /(U707)/i                                                          // Oppo Find Way S
	                                                                  ], [[MODEL, 'Find Way S'], [VENDOR, 'Oppo'], [TYPE, MOBILE]], [
	                                                                    /(T3C)/i                                                            // Advan Vandroid T3C
	                                                                  ], [MODEL, [VENDOR, 'Advan'], [TYPE, TABLET]], [
	                                                                  /(ADVAN T1J\+)/i                                                    // Advan Vandroid T1J+
	                                                                  ], [[MODEL, 'Vandroid T1J+'], [VENDOR, 'Advan'], [TYPE, TABLET]], [
	                                                                  /(ADVAN S4A)/i                                                      // Advan Vandroid S4A
	                                                                  ], [[MODEL, 'Vandroid S4A'], [VENDOR, 'Advan'], [TYPE, MOBILE]], [
	                                                                    /(V972M)/i                                                          // ZTE V972M
	                                                                  ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [
	                                                                    /(i-mobile)\s(IQ\s[\d\.]+)/i                                        // i-mobile IQ
	                                                                  ], [VENDOR, MODEL, [TYPE, MOBILE]], [
	                                                                  /(IQ6.3)/i                                                          // i-mobile IQ IQ 6.3
	                                                                  ], [[MODEL, 'IQ 6.3'], [VENDOR, 'i-mobile'], [TYPE, MOBILE]], [
	                                                                  /(i-mobile)\s(i-style\s[\d\.]+)/i                                   // i-mobile i-STYLE
	                                                                  ], [VENDOR, MODEL, [TYPE, MOBILE]], [
	                                                                  /(i-STYLE2.1)/i                                                     // i-mobile i-STYLE 2.1
	                                                                  ], [[MODEL, 'i-STYLE 2.1'], [VENDOR, 'i-mobile'], [TYPE, MOBILE]], [
	                                                                  
	                                                                  /(mobiistar touch LAI 512)/i                                        // mobiistar touch LAI 512
	                                                                  ], [[MODEL, 'Touch LAI 512'], [VENDOR, 'mobiistar'], [TYPE, MOBILE]], [
	                                                                    /////////////
	                                                                  // END TODO
	                                                                  ///////////*/],










	                        engine: [[

	                        /windows.+\sedge\/([\w\.]+)/i // EdgeHTML
	                        ], [VERSION, [NAME, 'EdgeHTML']], [

	                        /(presto)\/([\w\.]+)/i, // Presto
	                        /(webkit|trident|netfront|netsurf|amaya|lynx|w3m)\/([\w\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m
	                        /(khtml|tasman|links)[\/\s]\(?([\w\.]+)/i, // KHTML/Tasman/Links
	                        /(icab)[\/\s]([23]\.[\d\.]+)/i // iCab
	                        ], [NAME, VERSION], [

	                        /rv\:([\w\.]+).*(gecko)/i // Gecko
	                        ], [VERSION, NAME]],


	                        os: [[

	                        // Windows based
	                        /microsoft\s(windows)\s(vista|xp)/i // Windows (iTunes)
	                        ], [NAME, VERSION], [
	                        /(windows)\snt\s6\.2;\s(arm)/i, // Windows RT
	                        /(windows\sphone(?:\sos)*|windows\smobile|windows)[\s\/]?([ntce\d\.\s]+\w)/i],
	                        [NAME, [VERSION, mapper.str, maps.os.windows.version]], [
	                        /(win(?=3|9|n)|win\s9x\s)([nt\d\.]+)/i],
	                        [[NAME, 'Windows'], [VERSION, mapper.str, maps.os.windows.version]], [

	                        // Mobile/Embedded OS
	                        /\((bb)(10);/i // BlackBerry 10
	                        ], [[NAME, 'BlackBerry'], VERSION], [
	                        /(blackberry)\w*\/?([\w\.]+)*/i, // Blackberry
	                        /(tizen)[\/\s]([\w\.]+)/i, // Tizen
	                        /(android|webos|palm\sos|qnx|bada|rim\stablet\sos|meego|contiki)[\/\s-]?([\w\.]+)*/i,
	                        // Android/WebOS/Palm/QNX/Bada/RIM/MeeGo/Contiki
	                        /linux;.+(sailfish);/i // Sailfish OS
	                        ], [NAME, VERSION], [
	                        /(symbian\s?os|symbos|s60(?=;))[\/\s-]?([\w\.]+)*/i // Symbian
	                        ], [[NAME, 'Symbian'], VERSION], [
	                        /\((series40);/i // Series 40
	                        ], [NAME], [
	                        /mozilla.+\(mobile;.+gecko.+firefox/i // Firefox OS
	                        ], [[NAME, 'Firefox OS'], VERSION], [

	                        // Console
	                        /(nintendo|playstation)\s([wids34portablevu]+)/i, // Nintendo/Playstation

	                        // GNU/Linux based
	                        /(mint)[\/\s\(]?(\w+)*/i, // Mint
	                        /(mageia|vectorlinux)[;\s]/i, // Mageia/VectorLinux
	                        /(joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|(?=\s)arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk|linpus)[\/\s-]?([\w\.-]+)*/i,
	                        // Joli/Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware
	                        // Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus
	                        /(hurd|linux)\s?([\w\.]+)*/i, // Hurd/Linux
	                        /(gnu)\s?([\w\.]+)*/i // GNU
	                        ], [NAME, VERSION], [

	                        /(cros)\s[\w]+\s([\w\.]+\w)/i // Chromium OS
	                        ], [[NAME, 'Chromium OS'], VERSION], [

	                        // Solaris
	                        /(sunos)\s?([\w\.]+\d)*/i // Solaris
	                        ], [[NAME, 'Solaris'], VERSION], [

	                        // BSD based
	                        /\s([frentopc-]{0,4}bsd|dragonfly)\s?([\w\.]+)*/i // FreeBSD/NetBSD/OpenBSD/PC-BSD/DragonFly
	                        ], [NAME, VERSION], [

	                        /(ip[honead]+)(?:.*os\s([\w]+)*\slike\smac|;\sopera)/i // iOS
	                        ], [[NAME, 'iOS'], [VERSION, /_/g, '.']], [

	                        /(mac\sos\sx)\s?([\w\s\.]+\w)*/i,
	                        /(macintosh|mac(?=_powerpc)\s)/i // Mac OS
	                        ], [[NAME, 'Mac OS'], [VERSION, /_/g, '.']], [

	                        // Other
	                        /((?:open)?solaris)[\/\s-]?([\w\.]+)*/i, // Solaris
	                        /(haiku)\s(\w+)/i, // Haiku
	                        /(aix)\s((\d)(?=\.|\)|\s)[\w\.]*)*/i, // AIX
	                        /(plan\s9|minix|beos|os\/2|amigaos|morphos|risc\sos|openvms)/i,
	                        // Plan9/Minix/BeOS/OS2/AmigaOS/MorphOS/RISCOS/OpenVMS
	                        /(unix)\s?([\w\.]+)*/i // UNIX
	                        ], [NAME, VERSION]] };




	            /////////////////
	            // Constructor
	            ////////////////


	            var UAParser = function UAParser(uastring, extensions) {

	                        if (!(this instanceof UAParser)) {
	                                    return new UAParser(uastring, extensions).getResult();
	                        }

	                        var ua = uastring || (window && window.navigator && window.navigator.userAgent ? window.navigator.userAgent : EMPTY);
	                        var rgxmap = extensions ? util.extend(regexes, extensions) : regexes;

	                        this.getBrowser = function () {
	                                    var browser = mapper.rgx.apply(this, rgxmap.browser);
	                                    browser.major = util.major(browser.version);
	                                    return browser;
	                        };
	                        this.getCPU = function () {
	                                    return mapper.rgx.apply(this, rgxmap.cpu);
	                        };
	                        this.getDevice = function () {
	                                    return mapper.rgx.apply(this, rgxmap.device);
	                        };
	                        this.getEngine = function () {
	                                    return mapper.rgx.apply(this, rgxmap.engine);
	                        };
	                        this.getOS = function () {
	                                    return mapper.rgx.apply(this, rgxmap.os);
	                        };
	                        this.getResult = function () {
	                                    return {
	                                                ua: this.getUA(),
	                                                browser: this.getBrowser(),
	                                                engine: this.getEngine(),
	                                                os: this.getOS(),
	                                                device: this.getDevice(),
	                                                cpu: this.getCPU() };

	                        };
	                        this.getUA = function () {
	                                    return ua;
	                        };
	                        this.setUA = function (uastring) {
	                                    ua = uastring;
	                                    return this;
	                        };
	                        this.setUA(ua);
	                        return this;
	            };

	            UAParser.VERSION = LIBVERSION;
	            UAParser.BROWSER = {
	                        NAME: NAME,
	                        MAJOR: MAJOR, // deprecated
	                        VERSION: VERSION };

	            UAParser.CPU = {
	                        ARCHITECTURE: ARCHITECTURE };

	            UAParser.DEVICE = {
	                        MODEL: MODEL,
	                        VENDOR: VENDOR,
	                        TYPE: TYPE,
	                        CONSOLE: CONSOLE,
	                        MOBILE: MOBILE,
	                        SMARTTV: SMARTTV,
	                        TABLET: TABLET,
	                        WEARABLE: WEARABLE,
	                        EMBEDDED: EMBEDDED };

	            UAParser.ENGINE = {
	                        NAME: NAME,
	                        VERSION: VERSION };

	            UAParser.OS = {
	                        NAME: NAME,
	                        VERSION: VERSION };



	            ///////////
	            // Export
	            //////////


	            // check js environment
	            if (( false ? 'undefined' : _typeof(exports)) !== UNDEF_TYPE) {
	                        // nodejs env
	                        if (( false ? 'undefined' : _typeof(module)) !== UNDEF_TYPE && module.exports) {
	                                    exports = module.exports = UAParser;
	                        }
	                        exports.UAParser = UAParser;
	            } else {
	                        // requirejs env (optional)
	                        if (( false ? 'undefined' : _typeof(__webpack_require__(320))) === FUNC_TYPE && __webpack_require__(223)) {
	                                    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	                                                return UAParser;
	                                    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	                        } else {
	                                    // browser env
	                                    window.UAParser = UAParser;
	                        }
	            }

	            // jQuery/Zepto specific (optional)
	            // Note: 
	            //   In AMD env the global scope should be kept clean, but jQuery is an exception.
	            //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
	            //   and we should catch that.
	            var $ = window.jQuery || window.Zepto;
	            if ((typeof $ === 'undefined' ? 'undefined' : _typeof($)) !== UNDEF_TYPE) {
	                        var parser = new UAParser();
	                        $.ua = parser.getResult();
	                        $.ua.get = function () {
	                                    return parser.getUA();
	                        };
	                        $.ua.set = function (uastring) {
	                                    parser.setUA(uastring);
	                                    var result = parser.getResult();
	                                    for (var prop in result) {
	                                                $.ua[prop] = result[prop];
	                                    }
	                        };
	            }

	})((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' ? window : undefined);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(215)(module)))

/***/ },
/* 320 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var invariant = __webpack_require__(281);

	var componentRegex = /\./;
	var orRegex = /\|\|/;
	var rangeRegex = /\s+\-\s+/;
	var modifierRegex = /^(<=|<|=|>=|~>|~|>|)?\s*(.+)/;
	var numericRegex = /^(\d*)(.*)/;

	/**
	                                  * Splits input `range` on "||" and returns true if any subrange matches
	                                  * `version`.
	                                  *
	                                  * @param {string} range
	                                  * @param {string} version
	                                  * @returns {boolean}
	                                  */
	function checkOrExpression(range, version) {
	  var expressions = range.split(orRegex);

	  if (expressions.length > 1) {
	    return expressions.some(function (range) {
	      return VersionRange.contains(range, version);
	    });
	  } else {
	    range = expressions[0].trim();
	    return checkRangeExpression(range, version);
	  }
	}

	/**
	   * Splits input `range` on " - " (the surrounding whitespace is required) and
	   * returns true if version falls between the two operands.
	   *
	   * @param {string} range
	   * @param {string} version
	   * @returns {boolean}
	   */
	function checkRangeExpression(range, version) {
	  var expressions = range.split(rangeRegex);

	  !(expressions.length > 0 && expressions.length <= 2) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'the "-" operator expects exactly 2 operands') : invariant(false) : void 0;

	  if (expressions.length === 1) {
	    return checkSimpleExpression(expressions[0], version);
	  } else {
	    var startVersion = expressions[0];
	    var endVersion = expressions[1];

	    !(isSimpleVersion(startVersion) && isSimpleVersion(endVersion)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'operands to the "-" operator must be simple (no modifiers)') : invariant(false) : void 0;

	    return checkSimpleExpression('>=' + startVersion, version) && checkSimpleExpression('<=' + endVersion, version);
	  }
	}

	/**
	   * Checks if `range` matches `version`. `range` should be a "simple" range (ie.
	   * not a compound range using the " - " or "||" operators).
	   *
	   * @param {string} range
	   * @param {string} version
	   * @returns {boolean}
	   */
	function checkSimpleExpression(range, version) {
	  range = range.trim();
	  if (range === '') {
	    return true;
	  }

	  var versionComponents = version.split(componentRegex);

	  var _getModifierAndCompon = getModifierAndComponents(range);

	  var modifier = _getModifierAndCompon.modifier;
	  var rangeComponents = _getModifierAndCompon.rangeComponents;

	  switch (modifier) {
	    case '<':
	      return checkLessThan(versionComponents, rangeComponents);
	    case '<=':
	      return checkLessThanOrEqual(versionComponents, rangeComponents);
	    case '>=':
	      return checkGreaterThanOrEqual(versionComponents, rangeComponents);
	    case '>':
	      return checkGreaterThan(versionComponents, rangeComponents);
	    case '~':
	    case '~>':
	      return checkApproximateVersion(versionComponents, rangeComponents);
	    default:
	      return checkEqual(versionComponents, rangeComponents);}

	}

	/**
	   * Checks whether `a` is less than `b`.
	   *
	   * @param {array<string>} a
	   * @param {array<string>} b
	   * @returns {boolean}
	   */
	function checkLessThan(a, b) {
	  return compareComponents(a, b) === -1;
	}

	/**
	   * Checks whether `a` is less than or equal to `b`.
	   *
	   * @param {array<string>} a
	   * @param {array<string>} b
	   * @returns {boolean}
	   */
	function checkLessThanOrEqual(a, b) {
	  var result = compareComponents(a, b);
	  return result === -1 || result === 0;
	}

	/**
	   * Checks whether `a` is equal to `b`.
	   *
	   * @param {array<string>} a
	   * @param {array<string>} b
	   * @returns {boolean}
	   */
	function checkEqual(a, b) {
	  return compareComponents(a, b) === 0;
	}

	/**
	   * Checks whether `a` is greater than or equal to `b`.
	   *
	   * @param {array<string>} a
	   * @param {array<string>} b
	   * @returns {boolean}
	   */
	function checkGreaterThanOrEqual(a, b) {
	  var result = compareComponents(a, b);
	  return result === 1 || result === 0;
	}

	/**
	   * Checks whether `a` is greater than `b`.
	   *
	   * @param {array<string>} a
	   * @param {array<string>} b
	   * @returns {boolean}
	   */
	function checkGreaterThan(a, b) {
	  return compareComponents(a, b) === 1;
	}

	/**
	   * Checks whether `a` is "reasonably close" to `b` (as described in
	   * https://www.npmjs.org/doc/misc/semver.html). For example, if `b` is "1.3.1"
	   * then "reasonably close" is defined as ">= 1.3.1 and < 1.4".
	   *
	   * @param {array<string>} a
	   * @param {array<string>} b
	   * @returns {boolean}
	   */
	function checkApproximateVersion(a, b) {
	  var lowerBound = b.slice();
	  var upperBound = b.slice();

	  if (upperBound.length > 1) {
	    upperBound.pop();
	  }
	  var lastIndex = upperBound.length - 1;
	  var numeric = parseInt(upperBound[lastIndex], 10);
	  if (isNumber(numeric)) {
	    upperBound[lastIndex] = numeric + 1 + '';
	  }

	  return checkGreaterThanOrEqual(a, lowerBound) && checkLessThan(a, upperBound);
	}

	/**
	   * Extracts the optional modifier (<, <=, =, >=, >, ~, ~>) and version
	   * components from `range`.
	   *
	   * For example, given `range` ">= 1.2.3" returns an object with a `modifier` of
	   * `">="` and `components` of `[1, 2, 3]`.
	   *
	   * @param {string} range
	   * @returns {object}
	   */
	function getModifierAndComponents(range) {
	  var rangeComponents = range.split(componentRegex);
	  var matches = rangeComponents[0].match(modifierRegex);
	  !matches ? process.env.NODE_ENV !== 'production' ? invariant(false, 'expected regex to match but it did not') : invariant(false) : void 0;

	  return {
	    modifier: matches[1],
	    rangeComponents: [matches[2]].concat(rangeComponents.slice(1)) };

	}

	/**
	   * Determines if `number` is a number.
	   *
	   * @param {mixed} number
	   * @returns {boolean}
	   */
	function isNumber(number) {
	  return !isNaN(number) && isFinite(number);
	}

	/**
	   * Tests whether `range` is a "simple" version number without any modifiers
	   * (">", "~" etc).
	   *
	   * @param {string} range
	   * @returns {boolean}
	   */
	function isSimpleVersion(range) {
	  return !getModifierAndComponents(range).modifier;
	}

	/**
	   * Zero-pads array `array` until it is at least `length` long.
	   *
	   * @param {array} array
	   * @param {number} length
	   */
	function zeroPad(array, length) {
	  for (var i = array.length; i < length; i++) {
	    array[i] = '0';
	  }
	}

	/**
	   * Normalizes `a` and `b` in preparation for comparison by doing the following:
	   *
	   * - zero-pads `a` and `b`
	   * - marks any "x", "X" or "*" component in `b` as equivalent by zero-ing it out
	   *   in both `a` and `b`
	   * - marks any final "*" component in `b` as a greedy wildcard by zero-ing it
	   *   and all of its successors in `a`
	   *
	   * @param {array<string>} a
	   * @param {array<string>} b
	   * @returns {array<array<string>>}
	   */
	function normalizeVersions(a, b) {
	  a = a.slice();
	  b = b.slice();

	  zeroPad(a, b.length);

	  // mark "x" and "*" components as equal
	  for (var i = 0; i < b.length; i++) {
	    var matches = b[i].match(/^[x*]$/i);
	    if (matches) {
	      b[i] = a[i] = '0';

	      // final "*" greedily zeros all remaining components
	      if (matches[0] === '*' && i === b.length - 1) {
	        for (var j = i; j < a.length; j++) {
	          a[j] = '0';
	        }
	      }
	    }
	  }

	  zeroPad(b, a.length);

	  return [a, b];
	}

	/**
	   * Returns the numerical -- not the lexicographical -- ordering of `a` and `b`.
	   *
	   * For example, `10-alpha` is greater than `2-beta`.
	   *
	   * @param {string} a
	   * @param {string} b
	   * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,
	   * or greater than `b`, respectively
	   */
	function compareNumeric(a, b) {
	  var aPrefix = a.match(numericRegex)[1];
	  var bPrefix = b.match(numericRegex)[1];
	  var aNumeric = parseInt(aPrefix, 10);
	  var bNumeric = parseInt(bPrefix, 10);

	  if (isNumber(aNumeric) && isNumber(bNumeric) && aNumeric !== bNumeric) {
	    return compare(aNumeric, bNumeric);
	  } else {
	    return compare(a, b);
	  }
	}

	/**
	   * Returns the ordering of `a` and `b`.
	   *
	   * @param {string|number} a
	   * @param {string|number} b
	   * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,
	   * or greater than `b`, respectively
	   */
	function compare(a, b) {
	  !((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === (typeof b === 'undefined' ? 'undefined' : _typeof(b))) ? process.env.NODE_ENV !== 'production' ? invariant(false, '"a" and "b" must be of the same type') : invariant(false) : void 0;

	  if (a > b) {
	    return 1;
	  } else if (a < b) {
	    return -1;
	  } else {
	    return 0;
	  }
	}

	/**
	   * Compares arrays of version components.
	   *
	   * @param {array<string>} a
	   * @param {array<string>} b
	   * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,
	   * or greater than `b`, respectively
	   */
	function compareComponents(a, b) {
	  var _normalizeVersions = normalizeVersions(a, b);

	  var aNormalized = _normalizeVersions[0];
	  var bNormalized = _normalizeVersions[1];


	  for (var i = 0; i < bNormalized.length; i++) {
	    var result = compareNumeric(aNormalized[i], bNormalized[i]);
	    if (result) {
	      return result;
	    }
	  }

	  return 0;
	}

	var VersionRange = {
	  /**
	                      * Checks whether `version` satisfies the `range` specification.
	                      *
	                      * We support a subset of the expressions defined in
	                      * https://www.npmjs.org/doc/misc/semver.html:
	                      *
	                      *    version   Must match version exactly
	                      *    =version  Same as just version
	                      *    >version  Must be greater than version
	                      *    >=version Must be greater than or equal to version
	                      *    <version  Must be less than version
	                      *    <=version Must be less than or equal to version
	                      *    ~version  Must be at least version, but less than the next significant
	                      *              revision above version:
	                      *              "~1.2.3" is equivalent to ">= 1.2.3 and < 1.3"
	                      *    ~>version Equivalent to ~version
	                      *    1.2.x     Must match "1.2.x", where "x" is a wildcard that matches
	                      *              anything
	                      *    1.2.*     Similar to "1.2.x", but "*" in the trailing position is a
	                      *              "greedy" wildcard, so will match any number of additional
	                      *              components:
	                      *              "1.2.*" will match "1.2.1", "1.2.1.1", "1.2.1.1.1" etc
	                      *    *         Any version
	                      *    ""        (Empty string) Same as *
	                      *    v1 - v2   Equivalent to ">= v1 and <= v2"
	                      *    r1 || r2  Passes if either r1 or r2 are satisfied
	                      *
	                      * @param {string} range
	                      * @param {string} version
	                      * @returns {boolean}
	                      */
	  contains: function contains(range, version) {
	    return checkOrExpression(range.trim(), version.trim());
	  } };


	module.exports = VersionRange;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 322 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	                                                       * Executes the provided `callback` once for each enumerable own property in the
	                                                       * object and constructs a new object from the results. The `callback` is
	                                                       * invoked with three arguments:
	                                                       *
	                                                       *  - the property value
	                                                       *  - the property name
	                                                       *  - the object being traversed
	                                                       *
	                                                       * Properties that are added after the call to `mapObject` will not be visited
	                                                       * by `callback`. If the values of existing properties are changed, the value
	                                                       * passed to `callback` will be the value at the time `mapObject` visits them.
	                                                       * Properties that are deleted before being visited are not visited.
	                                                       *
	                                                       * @grep function objectMap()
	                                                       * @grep function objMap()
	                                                       *
	                                                       * @param {?object} object
	                                                       * @param {function} callback
	                                                       * @param {*} context
	                                                       * @return {?object}
	                                                       */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 323 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */

	'use strict';

	/**
	               * Memoizes the return value of a function that accepts one string argument.
	               */

	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setDraftEditorSelection
	 * @typechecks
	 * 
	 */

	'use strict';

	var containsNode = __webpack_require__(325);
	var getActiveElement = __webpack_require__(328);

	/**
	                                                              * In modern non-IE browsers, we can support both forward and backward
	                                                              * selections.
	                                                              *
	                                                              * Note: IE10+ supports the Selection object, but it does not support
	                                                              * the `extend` method, which means that even in modern IE, it's not possible
	                                                              * to programatically create a backward selection. Thus, for all IE
	                                                              * versions, we use the old IE API to create our selections.
	                                                              */
	function setDraftEditorSelection(selectionState, node, blockKey, nodeStart, nodeEnd) {
	  // It's possible that the editor has been removed from the DOM but
	  // our selection code doesn't know it yet. Forcing selection in
	  // this case may lead to errors, so just bail now.
	  if (!containsNode(document.documentElement, node)) {
	    return;
	  }

	  var selection = global.getSelection();
	  var anchorKey = selectionState.getAnchorKey();
	  var anchorOffset = selectionState.getAnchorOffset();
	  var focusKey = selectionState.getFocusKey();
	  var focusOffset = selectionState.getFocusOffset();
	  var isBackward = selectionState.getIsBackward();

	  // IE doesn't support backward selection. Swap key/offset pairs.
	  if (!selection.extend && isBackward) {
	    var tempKey = anchorKey;
	    var tempOffset = anchorOffset;
	    anchorKey = focusKey;
	    anchorOffset = focusOffset;
	    focusKey = tempKey;
	    focusOffset = tempOffset;
	    isBackward = false;
	  }

	  var hasAnchor = anchorKey === blockKey && nodeStart <= anchorOffset && nodeEnd >= anchorOffset;

	  var hasFocus = focusKey === blockKey && nodeStart <= focusOffset && nodeEnd >= focusOffset;

	  // If the selection is entirely bound within this node, set the selection
	  // and be done.
	  if (hasAnchor && hasFocus) {
	    selection.removeAllRanges();
	    addPointToSelection(selection, node, anchorOffset - nodeStart);
	    addFocusToSelection(selection, node, focusOffset - nodeStart);
	    return;
	  }

	  if (!isBackward) {
	    // If the anchor is within this node, set the range start.
	    if (hasAnchor) {
	      selection.removeAllRanges();
	      addPointToSelection(selection, node, anchorOffset - nodeStart);
	    }

	    // If the focus is within this node, we can assume that we have
	    // already set the appropriate start range on the selection, and
	    // can simply extend the selection.
	    if (hasFocus) {
	      addFocusToSelection(selection, node, focusOffset - nodeStart);
	    }
	  } else {
	    // If this node has the focus, set the selection range to be a
	    // collapsed range beginning here. Later, when we encounter the anchor,
	    // we'll use this information to extend the selection.
	    if (hasFocus) {
	      selection.removeAllRanges();
	      addPointToSelection(selection, node, focusOffset - nodeStart);
	    }

	    // If this node has the anchor, we may assume that the correct
	    // focus information is already stored on the selection object.
	    // We keep track of it, reset the selection range, and extend it
	    // back to the focus point.
	    if (hasAnchor) {
	      var storedFocusNode = selection.focusNode;
	      var storedFocusOffset = selection.focusOffset;

	      selection.removeAllRanges();
	      addPointToSelection(selection, node, anchorOffset - nodeStart);
	      addFocusToSelection(selection, storedFocusNode, storedFocusOffset);
	    }
	  }
	}

	/**
	   * Extend selection towards focus point.
	   */
	function addFocusToSelection(selection, node, offset) {
	  if (selection.extend && containsNode(getActiveElement(), node)) {
	    // If `extend` is called while another element has focus, an error is
	    // thrown. We therefore disable `extend` if the active element is somewhere
	    // other than the node we are selecting. This should only occur in Firefox,
	    // since it is the only browser to support multiple selections.
	    // See https://bugzilla.mozilla.org/show_bug.cgi?id=921444.
	    selection.extend(node, offset);
	  } else {
	    // IE doesn't support extend. This will mean no backward selection.
	    // Extract the existing selection range and add focus to it.
	    // Additionally, clone the selection range. IE11 throws an
	    // InvalidStateError when attempting to access selection properties
	    // after the range is detached.
	    var range = selection.getRangeAt(0);
	    range.setEnd(node, offset);
	    selection.addRange(range.cloneRange());
	  }
	}

	function addPointToSelection(selection, node, offset) {
	  var range = document.createRange();
	  range.setStart(node, offset);
	  selection.addRange(range);
	}

	module.exports = setDraftEditorSelection;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * 
	               */

	var isTextNode = __webpack_require__(326);

	/*eslint-disable no-bitwise */

	/**
	                                * Checks if a given DOM node contains or is another DOM node.
	                                */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * @typechecks
	               */

	var isNode = __webpack_require__(327);

	/**
	                                   * @param {*} object The object to check.
	                                   * @return {boolean} Whether or not the object is a DOM text node.
	                                   */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 327 */
/***/ function(module, exports) {

	'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * @typechecks
	               */

	/**
	                   * @param {*} object The object to check.
	                   * @return {boolean} Whether or not the object is a DOM node.
	                   */var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 328 */
/***/ function(module, exports) {

	'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * @typechecks
	               */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	                                              * Same as document.activeElement but wraps in a try-catch block. In IE it is
	                                              * not safe to call document.activeElement if there is nothing focused.
	                                              *
	                                              * The activeElement will be null only if the document or document body is not
	                                              * yet defined.
	                                              */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 329 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftOffsetKey
	 * 
	 */

	'use strict';

	var KEY_DELIMITER = '-';

	var DraftOffsetKey = {
	  encode: function encode(blockKey, decoratorKey, leafKey) {
	    return blockKey + KEY_DELIMITER + decoratorKey + KEY_DELIMITER + leafKey;
	  },

	  decode: function decode(offsetKey) {
	    var _offsetKey$split = offsetKey.split(KEY_DELIMITER);

	    var blockKey = _offsetKey$split[0];
	    var decoratorKey = _offsetKey$split[1];
	    var leafKey = _offsetKey$split[2];

	    return {
	      blockKey: blockKey,
	      decoratorKey: parseInt(decoratorKey, 10),
	      leafKey: parseInt(leafKey, 10) };

	  } };


	module.exports = DraftOffsetKey;

/***/ },
/* 330 */
/***/ function(module, exports) {

	"use strict";

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               */

	/**
	                   * @param {DOMElement} element
	                   * @param {DOMDocument} doc
	                   * @return {boolean}
	                   */
	function _isViewportScrollElement(element, doc) {
	  return !!doc && (element === doc.documentElement || element === doc.body);
	}

	/**
	   * Scroll Module. This class contains 4 simple static functions
	   * to be used to access Element.scrollTop/scrollLeft properties.
	   * To solve the inconsistencies between browsers when either
	   * document.body or document.documentElement is supplied,
	   * below logic will be used to alleviate the issue:
	   *
	   * 1. If 'element' is either 'document.body' or 'document.documentElement,
	   *    get whichever element's 'scroll{Top,Left}' is larger.
	   * 2. If 'element' is either 'document.body' or 'document.documentElement',
	   *    set the 'scroll{Top,Left}' on both elements.
	   */

	var Scroll = {
	  /**
	                * @param {DOMElement} element
	                * @return {number}
	                */
	  getTop: function getTop(element) {
	    var doc = element.ownerDocument;
	    return _isViewportScrollElement(element, doc) ?
	    // In practice, they will either both have the same value,
	    // or one will be zero and the other will be the scroll position
	    // of the viewport. So we can use `X || Y` instead of `Math.max(X, Y)`
	    doc.body.scrollTop || doc.documentElement.scrollTop : element.scrollTop;
	  },

	  /**
	      * @param {DOMElement} element
	      * @param {number} newTop
	      */
	  setTop: function setTop(element, newTop) {
	    var doc = element.ownerDocument;
	    if (_isViewportScrollElement(element, doc)) {
	      doc.body.scrollTop = doc.documentElement.scrollTop = newTop;
	    } else {
	      element.scrollTop = newTop;
	    }
	  },

	  /**
	      * @param {DOMElement} element
	      * @return {number}
	      */
	  getLeft: function getLeft(element) {
	    var doc = element.ownerDocument;
	    return _isViewportScrollElement(element, doc) ? doc.body.scrollLeft || doc.documentElement.scrollLeft : element.scrollLeft;
	  },

	  /**
	      * @param {DOMElement} element
	      * @param {number} newLeft
	      */
	  setLeft: function setLeft(element, newLeft) {
	    var doc = element.ownerDocument;
	    if (_isViewportScrollElement(element, doc)) {
	      doc.body.scrollLeft = doc.documentElement.scrollLeft = newLeft;
	    } else {
	      element.scrollLeft = newLeft;
	    }
	  } };


	module.exports = Scroll;

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * @typechecks
	               */

	var getStyleProperty = __webpack_require__(332);

	/**
	                                                       * @param {DOMNode} element [description]
	                                                       * @param {string} name Overflow style property name.
	                                                       * @return {boolean} True if the supplied ndoe is scrollable.
	                                                       */
	function _isNodeScrollable(element, name) {
	  var overflow = Style.get(element, name);
	  return overflow === 'auto' || overflow === 'scroll';
	}

	/**
	   * Utilities for querying and mutating style properties.
	   */
	var Style = {
	  /**
	               * Gets the style property for the supplied node. This will return either the
	               * computed style, if available, or the declared style.
	               *
	               * @param {DOMNode} node
	               * @param {string} name Style property name.
	               * @return {?string} Style property value.
	               */
	  get: getStyleProperty,

	  /**
	                          * Determines the nearest ancestor of a node that is scrollable.
	                          *
	                          * NOTE: This can be expensive if used repeatedly or on a node nested deeply.
	                          *
	                          * @param {?DOMNode} node Node from which to start searching.
	                          * @return {?DOMWindow|DOMElement} Scroll parent of the supplied node.
	                          */
	  getScrollParent: function getScrollParent(node) {
	    if (!node) {
	      return null;
	    }
	    while (node && node !== document.body) {
	      if (_isNodeScrollable(node, 'overflow') || _isNodeScrollable(node, 'overflowY') || _isNodeScrollable(node, 'overflowX')) {
	        return node;
	      }
	      node = node.parentNode;
	    }
	    return window;
	  } };



	module.exports = Style;

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * @typechecks
	               */

	var camelize = __webpack_require__(333);
	var hyphenate = __webpack_require__(334);

	function asString(value) /*?string*/{
	  return value == null ? value : String(value);
	}

	function getStyleProperty( /*DOMNode*/node, /*string*/name) /*?string*/{
	  var computedStyle = void 0;

	  // W3C Standard
	  if (window.getComputedStyle) {
	    // In certain cases such as within an iframe in FF3, this returns null.
	    computedStyle = window.getComputedStyle(node, null);
	    if (computedStyle) {
	      return asString(computedStyle.getPropertyValue(hyphenate(name)));
	    }
	  }
	  // Safari
	  if (document.defaultView && document.defaultView.getComputedStyle) {
	    computedStyle = document.defaultView.getComputedStyle(node, null);
	    // A Safari bug causes this to return null for `display: none` elements.
	    if (computedStyle) {
	      return asString(computedStyle.getPropertyValue(hyphenate(name)));
	    }
	    if (name === 'display') {
	      return 'none';
	    }
	  }
	  // Internet Explorer
	  if (node.currentStyle) {
	    if (name === 'float') {
	      return asString(node.currentStyle.cssFloat || node.currentStyle.styleFloat);
	    }
	    return asString(node.currentStyle[camelize(name)]);
	  }
	  return asString(node.style && node.style[camelize(name)]);
	}

	module.exports = getStyleProperty;

/***/ },
/* 333 */
/***/ function(module, exports) {

	"use strict";

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * @typechecks
	               */

	var _hyphenPattern = /-(.)/g;

	/**
	                               * Camelcases a hyphenated string, for example:
	                               *
	                               *   > camelize('background-color')
	                               *   < "backgroundColor"
	                               *
	                               * @param {string} string
	                               * @return {string}
	                               */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 334 */
/***/ function(module, exports) {

	'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * @typechecks
	               */

	var _uppercasePattern = /([A-Z])/g;

	/**
	                                     * Hyphenates a camelcased string, for example:
	                                     *
	                                     *   > hyphenate('backgroundColor')
	                                     *   < "background-color"
	                                     *
	                                     * For CSS style names, use `hyphenateStyleName` instead which works properly
	                                     * with all vendor prefixes, including `ms`.
	                                     *
	                                     * @param {string} string
	                                     * @return {string}
	                                     */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * @typechecks
	               */

	var getElementRect = __webpack_require__(336);

	/**
	                                                   * Gets an element's position in pixels relative to the viewport. The returned
	                                                   * object represents the position of the element's top left corner.
	                                                   *
	                                                   * @param {DOMElement} element
	                                                   * @return {object}
	                                                   */
	function getElementPosition(element) {
	  var rect = getElementRect(element);
	  return {
	    x: rect.left,
	    y: rect.top,
	    width: rect.right - rect.left,
	    height: rect.bottom - rect.top };

	}

	module.exports = getElementPosition;

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * @typechecks
	               */

	var containsNode = __webpack_require__(325);

	/**
	                                               * Gets an element's bounding rect in pixels relative to the viewport.
	                                               *
	                                               * @param {DOMElement} elem
	                                               * @return {object}
	                                               */
	function getElementRect(elem) {
	  var docElem = document.documentElement;

	  // FF 2, Safari 3 and Opera 9.5- do not support getBoundingClientRect().
	  // IE9- will throw if the element is not in the document.
	  if (!('getBoundingClientRect' in elem) || !containsNode(docElem, elem)) {
	    return {
	      left: 0,
	      right: 0,
	      top: 0,
	      bottom: 0 };

	  }

	  // Subtracts clientTop/Left because IE8- added a 2px border to the
	  // <html> element (see http://fburl.com/1493213). IE 7 in
	  // Quicksmode does not report clientLeft/clientTop so there
	  // will be an unaccounted offset of 2px when in quirksmode
	  var rect = elem.getBoundingClientRect();

	  return {
	    left: Math.round(rect.left) - docElem.clientLeft,
	    right: Math.round(rect.right) - docElem.clientLeft,
	    top: Math.round(rect.top) - docElem.clientTop,
	    bottom: Math.round(rect.bottom) - docElem.clientTop };

	}

	module.exports = getElementRect;

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var getDocumentScrollElement = __webpack_require__(338);
	var getUnboundedScrollPosition = __webpack_require__(339);

	/**
	                                                                           * Gets the scroll position of the supplied element or window.
	                                                                           *
	                                                                           * The return values are bounded. This means that if the scroll position is
	                                                                           * negative or exceeds the element boundaries (which is possible using inertial
	                                                                           * scrolling), you will get zero or the maximum scroll position, respectively.
	                                                                           *
	                                                                           * If you need the unbound scroll position, use `getUnboundedScrollPosition`.
	                                                                           *
	                                                                           * @param {DOMWindow|DOMElement} scrollable
	                                                                           * @return {object} Map with `x` and `y` keys.
	                                                                           */
	function getScrollPosition(scrollable) {
	  var documentScrollElement = getDocumentScrollElement();
	  if (scrollable === window) {
	    scrollable = documentScrollElement;
	  }
	  var scrollPosition = getUnboundedScrollPosition(scrollable);

	  var viewport = scrollable === documentScrollElement ? document.documentElement : scrollable;

	  var xMax = scrollable.scrollWidth - viewport.clientWidth;
	  var yMax = scrollable.scrollHeight - viewport.clientHeight;

	  scrollPosition.x = Math.max(0, Math.min(scrollPosition.x, xMax));
	  scrollPosition.y = Math.max(0, Math.min(scrollPosition.y, yMax));

	  return scrollPosition;
	}

	module.exports = getScrollPosition;

/***/ },
/* 338 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var isWebkit = typeof navigator !== 'undefined' && navigator.userAgent.indexOf('AppleWebKit') > -1;

	/**
	                                                                                                     * Gets the element with the document scroll properties such as `scrollLeft` and
	                                                                                                     * `scrollHeight`. This may differ across different browsers.
	                                                                                                     *
	                                                                                                     * NOTE: The return value can be null if the DOM is not yet ready.
	                                                                                                     *
	                                                                                                     * @param {?DOMDocument} doc Defaults to current document.
	                                                                                                     * @return {?DOMElement}
	                                                                                                     */
	function getDocumentScrollElement(doc) {
	  doc = doc || document;
	  return !isWebkit && doc.compatMode === 'CSS1Compat' ? doc.documentElement : doc.body;
	}

	module.exports = getDocumentScrollElement;

/***/ },
/* 339 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	/**
	               * Gets the scroll position of the supplied element or window.
	               *
	               * The return values are unbounded, unlike `getScrollPosition`. This means they
	               * may be negative or exceed the element boundaries (which is possible using
	               * inertial scrolling).
	               *
	               * @param {DOMWindow|DOMElement} scrollable
	               * @return {object} Map with `x` and `y` keys.
	               */

	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop };

	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop };

	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 340 */
/***/ function(module, exports) {

	"use strict";

	function getViewportWidth() {
	  var width = void 0;
	  if (document.documentElement) {
	    width = document.documentElement.clientWidth;
	  }

	  if (!width && document.body) {
	    width = document.body.clientWidth;
	  }

	  return width || 0;
	} /**
	   * Copyright (c) 2013-present, Facebook, Inc.
	   * All rights reserved.
	   *
	   * This source code is licensed under the BSD-style license found in the
	   * LICENSE file in the root directory of this source tree. An additional grant
	   * of patent rights can be found in the PATENTS file in the same directory.
	   *
	   * 
	   * @typechecks
	   */

	function getViewportHeight() {
	  var height = void 0;
	  if (document.documentElement) {
	    height = document.documentElement.clientHeight;
	  }

	  if (!height && document.body) {
	    height = document.body.clientHeight;
	  }

	  return height || 0;
	}

	/**
	   * Gets the viewport dimensions including any scrollbars.
	   */
	function getViewportDimensions() {
	  return {
	    width: window.innerWidth || getViewportWidth(),
	    height: window.innerHeight || getViewportHeight() };

	}

	/**
	   * Gets the viewport dimensions excluding any scrollbars.
	   */
	getViewportDimensions.withoutScrollbars = function () {
	  return {
	    width: getViewportWidth(),
	    height: getViewportHeight() };

	};

	module.exports = getViewportDimensions;

/***/ },
/* 341 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 */

	'use strict';

	/**
	               * Combines multiple className strings into one.
	               * http://jsperf.com/joinclasses-args-vs-array
	               *
	               * @param {...?string} className
	               * @return {string}
	               */

	function joinClasses(className /*, ... */) {
	  if (!className) {
	    className = '';
	  }
	  var nextClass = void 0;
	  var argLength = arguments.length;
	  if (argLength > 1) {
	    for (var ii = 1; ii < argLength; ii++) {
	      nextClass = arguments[ii];
	      if (nextClass) {
	        className = (className ? className + ' ' : '') + nextClass;
	      }
	    }
	  }
	  return className;
	}

	module.exports = joinClasses;

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorDragHandler
	 * @typechecks
	 * 
	 */

	'use strict';

	var DataTransfer = __webpack_require__(343);
	var DraftModifier = __webpack_require__(273);
	var EditorState = __webpack_require__(293);

	var findAncestorOffsetKey = __webpack_require__(346);
	var getTextContentFromFiles = __webpack_require__(348);
	var getUpdatedSelectionState = __webpack_require__(349);
	var nullthrows = __webpack_require__(303);

	var isEventHandled = __webpack_require__(350);

	/**
	                                                   * Get a SelectionState for the supplied mouse event.
	                                                   */
	function getSelectionForEvent(event, editorState) {
	  var node = null;
	  var offset = null;

	  if (typeof document.caretRangeFromPoint === 'function') {
	    var dropRange = document.caretRangeFromPoint(event.x, event.y);
	    node = dropRange.startContainer;
	    offset = dropRange.startOffset;
	  } else if (event.rangeParent) {
	    node = event.rangeParent;
	    offset = event.rangeOffset;
	  } else {
	    return null;
	  }

	  node = nullthrows(node);
	  offset = nullthrows(offset);
	  var offsetKey = nullthrows(findAncestorOffsetKey(node));

	  return getUpdatedSelectionState(editorState, offsetKey, offset, offsetKey, offset);
	}

	var DraftEditorDragHandler = {
	  /**
	                                * Drag originating from input terminated.
	                                */
	  onDragEnd: function onDragEnd() {
	    this.exitCurrentMode();
	  },

	  /**
	      * Handle data being dropped.
	      */
	  onDrop: function onDrop(e) {
	    var _this = this;

	    var data = new DataTransfer(e.nativeEvent.dataTransfer);

	    var editorState = this.props.editorState;
	    var dropSelection = getSelectionForEvent(e.nativeEvent, editorState);

	    e.preventDefault();
	    this.exitCurrentMode();

	    if (dropSelection == null) {
	      return;
	    }

	    var files = data.getFiles();
	    if (files.length > 0) {
	      if (this.props.handleDroppedFiles && isEventHandled(this.props.handleDroppedFiles(dropSelection, files))) {
	        return;
	      }

	      getTextContentFromFiles(files, function (fileText) {
	        fileText && _this.update(insertTextAtSelection(editorState, nullthrows(dropSelection), // flow wtf
	        fileText));
	      });
	      return;
	    }

	    var dragType = this._internalDrag ? 'internal' : 'external';
	    if (this.props.handleDrop && isEventHandled(this.props.handleDrop(dropSelection, data, dragType))) {
	      return;
	    }

	    if (this._internalDrag) {
	      this.update(moveText(editorState, dropSelection));
	      return;
	    }

	    this.update(insertTextAtSelection(editorState, dropSelection, data.getText()));
	  } };



	function moveText(editorState, targetSelection) {
	  var newContentState = DraftModifier.moveText(editorState.getCurrentContent(), editorState.getSelection(), targetSelection);
	  return EditorState.push(editorState, newContentState, 'insert-fragment');
	}

	/**
	   * Insert text at a specified selection.
	   */
	function insertTextAtSelection(editorState, selection, text) {
	  var newContentState = DraftModifier.insertText(editorState.getCurrentContent(), selection, text, editorState.getCurrentInlineStyle());
	  return EditorState.push(editorState, newContentState, 'insert-fragment');
	}

	module.exports = DraftEditorDragHandler;

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	/**
	                                                                                                                                                       * Copyright (c) 2013-present, Facebook, Inc.
	                                                                                                                                                       * All rights reserved.
	                                                                                                                                                       *
	                                                                                                                                                       * This source code is licensed under the BSD-style license found in the
	                                                                                                                                                       * LICENSE file in the root directory of this source tree. An additional grant
	                                                                                                                                                       * of patent rights can be found in the PATENTS file in the same directory.
	                                                                                                                                                       *
	                                                                                                                                                       * @typechecks
	                                                                                                                                                       */

	var PhotosMimeType = __webpack_require__(344);

	var createArrayFromMixed = __webpack_require__(345);
	var emptyFunction = __webpack_require__(295);

	var CR_LF_REGEX = new RegExp('\r\n', 'g');
	var LF_ONLY = '\n';

	var RICH_TEXT_TYPES = {
	  'text/rtf': 1,
	  'text/html': 1 };


	/**
	                     * If DataTransferItem is a file then return the Blob of data.
	                     *
	                     * @param {object} item
	                     * @return {?blob}
	                     */
	function getFileFromDataTransfer(item) {
	  if (item.kind == 'file') {
	    return item.getAsFile();
	  }
	}

	var DataTransfer = function () {
	  /**
	                                 * @param {object} data
	                                 */
	  function DataTransfer(data) {
	    _classCallCheck(this, DataTransfer);

	    this.data = data;

	    // Types could be DOMStringList or array
	    this.types = data.types ? createArrayFromMixed(data.types) : [];
	  }

	  /**
	     * Is this likely to be a rich text data transfer?
	     *
	     * @return {boolean}
	     */


	  DataTransfer.prototype.isRichText = function isRichText() {
	    // If HTML is available, treat this data as rich text. This way, we avoid
	    // using a pasted image if it is packaged with HTML -- this may occur with
	    // pastes from MS Word, for example.  However this is only rich text if
	    // there's accompanying text.
	    if (this.getHTML() && this.getText()) {
	      return true;
	    }

	    // When an image is copied from a preview window, you end up with two
	    // DataTransferItems one of which is a file's metadata as text.  Skip those.
	    if (this.isImage()) {
	      return false;
	    }

	    return this.types.some(function (type) {
	      return RICH_TEXT_TYPES[type];
	    });
	  };

	  /**
	      * Get raw text.
	      *
	      * @return {?string}
	      */


	  DataTransfer.prototype.getText = function getText() {
	    var text;
	    if (this.data.getData) {
	      if (!this.types.length) {
	        text = this.data.getData('Text');
	      } else if (this.types.indexOf('text/plain') != -1) {
	        text = this.data.getData('text/plain');
	      }
	    }
	    return text ? text.replace(CR_LF_REGEX, LF_ONLY) : null;
	  };

	  /**
	      * Get HTML paste data
	      *
	      * @return {?string}
	      */


	  DataTransfer.prototype.getHTML = function getHTML() {
	    if (this.data.getData) {
	      if (!this.types.length) {
	        return this.data.getData('Text');
	      } else if (this.types.indexOf('text/html') != -1) {
	        return this.data.getData('text/html');
	      }
	    }
	  };

	  /**
	      * Is this a link data transfer?
	      *
	      * @return {boolean}
	      */


	  DataTransfer.prototype.isLink = function isLink() {
	    return this.types.some(function (type) {
	      return type.indexOf('Url') != -1 || type.indexOf('text/uri-list') != -1 || type.indexOf('text/x-moz-url');
	    });
	  };

	  /**
	      * Get a link url.
	      *
	      * @return {?string}
	      */


	  DataTransfer.prototype.getLink = function getLink() {
	    if (this.data.getData) {
	      if (this.types.indexOf('text/x-moz-url') != -1) {
	        var url = this.data.getData('text/x-moz-url').split('\n');
	        return url[0];
	      }
	      return this.types.indexOf('text/uri-list') != -1 ? this.data.getData('text/uri-list') : this.data.getData('url');
	    }

	    return null;
	  };

	  /**
	      * Is this an image data transfer?
	      *
	      * @return {boolean}
	      */


	  DataTransfer.prototype.isImage = function isImage() {
	    var isImage = this.types.some(function (type) {
	      // Firefox will have a type of application/x-moz-file for images during
	      // dragging
	      return type.indexOf('application/x-moz-file') != -1;
	    });

	    if (isImage) {
	      return true;
	    }

	    var items = this.getFiles();
	    for (var i = 0; i < items.length; i++) {
	      var type = items[i].type;
	      if (!PhotosMimeType.isImage(type)) {
	        return false;
	      }
	    }

	    return true;
	  };

	  DataTransfer.prototype.getCount = function getCount() {
	    if (this.data.hasOwnProperty('items')) {
	      return this.data.items.length;
	    } else if (this.data.hasOwnProperty('mozItemCount')) {
	      return this.data.mozItemCount;
	    } else if (this.data.files) {
	      return this.data.files.length;
	    }
	    return null;
	  };

	  /**
	      * Get files.
	      *
	      * @return {array}
	      */


	  DataTransfer.prototype.getFiles = function getFiles() {
	    if (this.data.items) {
	      // createArrayFromMixed doesn't properly handle DataTransferItemLists.
	      return Array.prototype.slice.call(this.data.items).map(getFileFromDataTransfer).filter(emptyFunction.thatReturnsArgument);
	    } else if (this.data.files) {
	      return Array.prototype.slice.call(this.data.files);
	    } else {
	      return [];
	    }
	  };

	  /**
	      * Are there any files to fetch?
	      *
	      * @return {boolean}
	      */


	  DataTransfer.prototype.hasFiles = function hasFiles() {
	    return this.getFiles().length > 0;
	  };

	  return DataTransfer;
	}();

	module.exports = DataTransfer;

/***/ },
/* 344 */
/***/ function(module, exports) {

	'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               */
	var PhotosMimeType = {
	  isImage: function isImage(mimeString) {
	    return getParts(mimeString)[0] === 'image';
	  },
	  isJpeg: function isJpeg(mimeString) {
	    var parts = getParts(mimeString);
	    return PhotosMimeType.isImage(mimeString) && (
	    // see http://fburl.com/10972194
	    parts[1] === 'jpeg' || parts[1] === 'pjpeg');
	  } };


	function getParts(mimeString) {
	  return mimeString.split('/');
	}

	module.exports = PhotosMimeType;

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * @typechecks
	               */var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	var invariant = __webpack_require__(281);

	/**
	                                         * Convert array-like objects to arrays.
	                                         *
	                                         * This API assumes the caller knows the contents of the data type. For less
	                                         * well defined inputs use createArrayFromMixed.
	                                         *
	                                         * @param {object|function|filelist} obj
	                                         * @return {array}
	                                         */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	/**
	   * Perform a heuristic test to determine if an object is "array-like".
	   *
	   *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	   *   Joshu replied: "Mu."
	   *
	   * This function determines if its argument has "array nature": it returns
	   * true if the argument is an actual array, an `arguments' object, or an
	   * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	   *
	   * It will return false for other array-like objects like Filelist.
	   *
	   * @param {*} obj
	   * @return {boolean}
	   */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj));

	}

	/**
	   * Ensure that the argument is an array by wrapping it in an array if it is not.
	   * Creates a copy of the argument if it is already an array.
	   *
	   * This is mostly useful idiomatically:
	   *
	   *   var createArrayFromMixed = require('createArrayFromMixed');
	   *
	   *   function takesOneOrMoreThings(things) {
	   *     things = createArrayFromMixed(things);
	   *     ...
	   *   }
	   *
	   * This allows you to treat `things' as an array, but accept scalars in the API.
	   *
	   * If you need to convert an array-like object, like `arguments`, into an array
	   * use toArray instead.
	   *
	   * @param {*} obj
	   * @return {array}
	   */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findAncestorOffsetKey
	 * @typechecks
	 * 
	 */

	'use strict';

	var getSelectionOffsetKeyForNode = __webpack_require__(347);

	/**
	                                                                               * Get the key from the node's nearest offset-aware ancestor.
	                                                                               */
	function findAncestorOffsetKey(node) {
	  var searchNode = node;
	  while (searchNode && searchNode !== document.documentElement) {
	    var key = getSelectionOffsetKeyForNode(searchNode);
	    if (key != null) {
	      return key;
	    }
	    searchNode = searchNode.parentNode;
	  }
	  return null;
	}

	module.exports = findAncestorOffsetKey;

/***/ },
/* 347 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getSelectionOffsetKeyForNode
	 * @typechecks
	 * 
	 */

	'use strict';

	/**
	               * Get offset key from a node or it's child nodes. Return the first offset key
	               * found on the DOM tree of given node.
	               */

	function getSelectionOffsetKeyForNode(node) {
	  if (node instanceof Element) {
	    var offsetKey = node.getAttribute('data-offset-key');
	    if (offsetKey) {
	      return offsetKey;
	    }
	    for (var ii = 0; ii < node.childNodes.length; ii++) {
	      var childOffsetKey = getSelectionOffsetKeyForNode(node.childNodes[ii]);
	      if (childOffsetKey) {
	        return childOffsetKey;
	      }
	    }
	  }
	  return null;
	}

	module.exports = getSelectionOffsetKeyForNode;

/***/ },
/* 348 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentFromFiles
	 * 
	 */

	'use strict';

	var TEXT_CLIPPING_REGEX = /\.textClipping$/;

	var TEXT_TYPES = {
	  'text/plain': true,
	  'text/html': true,
	  'text/rtf': true };


	// Somewhat arbitrary upper bound on text size. Let's not lock up the browser.
	var TEXT_SIZE_UPPER_BOUND = 5000;

	/**
	                                   * Extract the text content from a file list.
	                                   */
	function getTextContentFromFiles(files, callback) {
	  var readCount = 0;
	  var results = [];
	  files.forEach(function ( /*blob*/file) {
	    readFile(file, function ( /*string*/text) {
	      readCount++;
	      text && results.push(text.slice(0, TEXT_SIZE_UPPER_BOUND));
	      if (readCount == files.length) {
	        callback(results.join('\r'));
	      }
	    });
	  });
	}

	/**
	   * todo isaac: Do work to turn html/rtf into a content fragment.
	   */
	function readFile(file, callback) {
	  if (!global.FileReader || file.type && !(file.type in TEXT_TYPES)) {
	    callback('');
	    return;
	  }

	  if (file.type === '') {
	    var contents = '';
	    // Special-case text clippings, which have an empty type but include
	    // `.textClipping` in the file name. `readAsText` results in an empty
	    // string for text clippings, so we force the file name to serve
	    // as the text value for the file.
	    if (TEXT_CLIPPING_REGEX.test(file.name)) {
	      contents = file.name.replace(TEXT_CLIPPING_REGEX, '');
	    }
	    callback(contents);
	    return;
	  }

	  var reader = new FileReader();
	  reader.onload = function () {
	    callback(reader.result);
	  };
	  reader.onerror = function () {
	    callback('');
	  };
	  reader.readAsText(file);
	}

	module.exports = getTextContentFromFiles;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUpdatedSelectionState
	 * 
	 */

	'use strict';

	var DraftOffsetKey = __webpack_require__(329);

	var nullthrows = __webpack_require__(303);

	function getUpdatedSelectionState(editorState, anchorKey, anchorOffset, focusKey, focusOffset) {
	  var selection = nullthrows(editorState.getSelection());
	  if (process.env.NODE_ENV !== 'production') {
	    if (!anchorKey || !focusKey) {
	      /*eslint-disable no-console */
	      console.warn('Invalid selection state.', arguments, editorState.toJS());
	      /*eslint-enable no-console */
	      return selection;
	    }
	  }

	  var anchorPath = DraftOffsetKey.decode(anchorKey);
	  var anchorBlockKey = anchorPath.blockKey;
	  var anchorLeaf = editorState.getBlockTree(anchorBlockKey).getIn([anchorPath.decoratorKey, 'leaves', anchorPath.leafKey]);

	  var focusPath = DraftOffsetKey.decode(focusKey);
	  var focusBlockKey = focusPath.blockKey;
	  var focusLeaf = editorState.getBlockTree(focusBlockKey).getIn([focusPath.decoratorKey, 'leaves', focusPath.leafKey]);

	  var anchorLeafStart = anchorLeaf.get('start');
	  var focusLeafStart = focusLeaf.get('start');

	  var anchorBlockOffset = anchorLeaf ? anchorLeafStart + anchorOffset : null;
	  var focusBlockOffset = focusLeaf ? focusLeafStart + focusOffset : null;

	  var areEqual = selection.getAnchorKey() === anchorBlockKey && selection.getAnchorOffset() === anchorBlockOffset && selection.getFocusKey() === focusBlockKey && selection.getFocusOffset() === focusBlockOffset;

	  if (areEqual) {
	    return selection;
	  }

	  var isBackward = false;
	  if (anchorBlockKey === focusBlockKey) {
	    var anchorLeafEnd = anchorLeaf.get('end');
	    var focusLeafEnd = focusLeaf.get('end');
	    if (focusLeafStart === anchorLeafStart && focusLeafEnd === anchorLeafEnd) {
	      isBackward = focusOffset < anchorOffset;
	    } else {
	      isBackward = focusLeafStart < anchorLeafStart;
	    }
	  } else {
	    var startKey = editorState.getCurrentContent().getBlockMap().keySeq().skipUntil(function (v) {
	      return v === anchorBlockKey || v === focusBlockKey;
	    }).first();
	    isBackward = startKey === focusBlockKey;
	  }

	  return selection.merge({
	    anchorKey: anchorBlockKey,
	    anchorOffset: anchorBlockOffset,
	    focusKey: focusBlockKey,
	    focusOffset: focusBlockOffset,
	    isBackward: isBackward });

	}

	module.exports = getUpdatedSelectionState;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 350 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventHandled
	 * @typechecks
	 * 
	 */

	'use strict';

	/**
	               * Utility method for determining whether or not the value returned
	               * from a handler indicates that it was handled.
	               */
	function isEventHandled(value) {
	  return value === 'handled' || value === true;
	}

	module.exports = isEventHandled;

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorEditHandler
	 * 
	 */

	'use strict';

	var onBeforeInput = __webpack_require__(352);
	var onBlur = __webpack_require__(353);
	var onCompositionStart = __webpack_require__(354);
	var onCopy = __webpack_require__(355);
	var onCut = __webpack_require__(357);
	var onDragOver = __webpack_require__(358);
	var onDragStart = __webpack_require__(359);
	var onFocus = __webpack_require__(360);
	var onInput = __webpack_require__(361);
	var onKeyDown = __webpack_require__(362);
	var onPaste = __webpack_require__(384);
	var onSelect = __webpack_require__(390);

	var DraftEditorEditHandler = {
	  onBeforeInput: onBeforeInput,
	  onBlur: onBlur,
	  onCompositionStart: onCompositionStart,
	  onCopy: onCopy,
	  onCut: onCut,
	  onDragOver: onDragOver,
	  onDragStart: onDragStart,
	  onFocus: onFocus,
	  onInput: onInput,
	  onKeyDown: onKeyDown,
	  onPaste: onPaste,
	  onSelect: onSelect };


	module.exports = DraftEditorEditHandler;

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnBeforeInput
	 * 
	 */

	'use strict';

	var BlockTree = __webpack_require__(294);
	var DraftModifier = __webpack_require__(273);
	var EditorState = __webpack_require__(293);
	var UserAgent = __webpack_require__(317);

	var getEntityKeyForSelection = __webpack_require__(311);
	var isSelectionAtLeafStart = __webpack_require__(312);
	var nullthrows = __webpack_require__(303);

	var isEventHandled = __webpack_require__(350);

	// When nothing is focused, Firefox regards two characters, `'` and `/`, as
	// commands that should open and focus the "quickfind" search bar. This should
	// *never* happen while a contenteditable is focused, but as of v28, it
	// sometimes does, even when the keypress event target is the contenteditable.
	// This breaks the input. Special case these characters to ensure that when
	// they are typed, we prevent default on the event to make sure not to
	// trigger quickfind.
	var FF_QUICKFIND_CHAR = '\'';
	var FF_QUICKFIND_LINK_CHAR = '\/';
	var isFirefox = UserAgent.isBrowser('Firefox');

	function mustPreventDefaultForCharacter(character) {
	  return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);
	}

	/**
	   * Replace the current selection with the specified text string, with the
	   * inline style and entity key applied to the newly inserted text.
	   */
	function replaceText(editorState, text, inlineStyle, entityKey) {
	  var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);
	  return EditorState.push(editorState, contentState, 'insert-characters');
	}

	/**
	   * When `onBeforeInput` executes, the browser is attempting to insert a
	   * character into the editor. Apply this character data to the document,
	   * allowing native insertion if possible.
	   *
	   * Native insertion is encouraged in order to limit re-rendering and to
	   * preserve spellcheck highlighting, which disappears or flashes if re-render
	   * occurs on the relevant text nodes.
	   */
	function editOnBeforeInput(e) {
	  var chars = e.data;

	  // In some cases (ex: IE ideographic space insertion) no character data
	  // is provided. There's nothing to do when this happens.
	  if (!chars) {
	    return;
	  }

	  // Allow the top-level component to handle the insertion manually. This is
	  // useful when triggering interesting behaviors for a character insertion,
	  // Simple examples: replacing a raw text ':)' with a smile emoji or image
	  // decorator, or setting a block to be a list item after typing '- ' at the
	  // start of the block.
	  if (this.props.handleBeforeInput && isEventHandled(this.props.handleBeforeInput(chars))) {
	    e.preventDefault();
	    return;
	  }

	  // If selection is collapsed, conditionally allow native behavior. This
	  // reduces re-renders and preserves spellcheck highlighting. If the selection
	  // is not collapsed, we will re-render.
	  var editorState = this.props.editorState;
	  var selection = editorState.getSelection();

	  if (!selection.isCollapsed()) {
	    e.preventDefault();
	    this.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())));
	    return;
	  }

	  var mayAllowNative = !isSelectionAtLeafStart(editorState);
	  var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()));

	  if (!mayAllowNative) {
	    e.preventDefault();
	    this.update(newEditorState);
	    return;
	  }

	  var anchorKey = selection.getAnchorKey();
	  var anchorTree = editorState.getBlockTree(anchorKey);

	  // Check the old and new "fingerprints" of the current block to determine
	  // whether this insertion requires any addition or removal of text nodes,
	  // in which case we would prevent the native character insertion.
	  var originalFingerprint = BlockTree.getFingerprint(anchorTree);
	  var newFingerprint = BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));

	  if (mustPreventDefaultForCharacter(chars) || originalFingerprint !== newFingerprint || nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey)) {
	    e.preventDefault();
	  } else {
	    // The native event is allowed to occur.
	    newEditorState = EditorState.set(newEditorState, {
	      nativelyRenderedContent: newEditorState.getCurrentContent() });

	  }

	  this.update(newEditorState);
	}

	module.exports = editOnBeforeInput;

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnBlur
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(293);
	var UserAgent = __webpack_require__(317);

	var getActiveElement = __webpack_require__(328);

	var isWebKit = UserAgent.isEngine('WebKit');

	function editOnBlur(e) {
	  // Webkit has a bug in which blurring a contenteditable by clicking on
	  // other active elements will trigger the `blur` event but will not remove
	  // the DOM selection from the contenteditable. We therefore force the
	  // issue to be certain, checking whether the active element is `body`
	  // to force it when blurring occurs within the window (as opposed to
	  // clicking to another tab or window).
	  if (isWebKit && getActiveElement() === document.body) {
	    global.getSelection().removeAllRanges();
	  }

	  var editorState = this.props.editorState;
	  var currentSelection = editorState.getSelection();
	  if (!currentSelection.getHasFocus()) {
	    return;
	  }

	  var selection = currentSelection.set('hasFocus', false);
	  this.props.onBlur && this.props.onBlur(e);
	  this.update(EditorState.acceptSelection(editorState, selection));
	}

	module.exports = editOnBlur;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnCompositionStart
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(293);

	/**
	                                             * The user has begun using an IME input system. Switching to `composite` mode
	                                             * allows handling composition input and disables other edit behavior.
	                                             */
	function editOnCompositionStart() {
	  this.setRenderGuard();
	  this.setMode('composite');
	  this.update(EditorState.set(this.props.editorState, { inCompositionMode: true }));
	}

	module.exports = editOnCompositionStart;

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnCopy
	 * 
	 */

	'use strict';

	var getFragmentFromSelection = __webpack_require__(356);

	/**
	                                                                       * If we have a selection, create a ContentState fragment and store
	                                                                       * it in our internal clipboard. Subsequent paste events will use this
	                                                                       * fragment if no external clipboard data is supplied.
	                                                                       */
	function editOnCopy(e) {
	  var editorState = this.props.editorState;
	  var selection = editorState.getSelection();

	  // No selection, so there's nothing to copy.
	  if (selection.isCollapsed()) {
	    e.preventDefault();
	    return;
	  }

	  this.setClipboard(getFragmentFromSelection(this.props.editorState));
	}

	module.exports = editOnCopy;

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getFragmentFromSelection
	 * 
	 */

	'use strict';

	var getContentStateFragment = __webpack_require__(284);

	function getFragmentFromSelection(editorState) {
	  var selectionState = editorState.getSelection();

	  if (selectionState.isCollapsed()) {
	    return null;
	  }

	  return getContentStateFragment(editorState.getCurrentContent(), selectionState);
	}

	module.exports = getFragmentFromSelection;

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnCut
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(273);
	var EditorState = __webpack_require__(293);
	var Style = __webpack_require__(331);

	var getFragmentFromSelection = __webpack_require__(356);
	var getScrollPosition = __webpack_require__(337);

	/**
	                                                                * On `cut` events, native behavior is allowed to occur so that the system
	                                                                * clipboard is set properly. This means that we need to take steps to recover
	                                                                * the editor DOM state after the `cut` has occurred in order to maintain
	                                                                * control of the component.
	                                                                *
	                                                                * In addition, we can keep a copy of the removed fragment, including all
	                                                                * styles and entities, for use as an internal paste.
	                                                                */
	function editOnCut(e) {
	  var _this = this;

	  var editorState = this.props.editorState;
	  var selection = editorState.getSelection();

	  // No selection, so there's nothing to cut.
	  if (selection.isCollapsed()) {
	    e.preventDefault();
	    return;
	  }

	  // Track the current scroll position so that it can be forced back in place
	  // after the editor regains control of the DOM.
	  var scrollParent = Style.getScrollParent(e.target);

	  var _getScrollPosition = getScrollPosition(scrollParent);

	  var x = _getScrollPosition.x;
	  var y = _getScrollPosition.y;


	  var fragment = getFragmentFromSelection(editorState);
	  this.setClipboard(fragment);

	  // Set `cut` mode to disable all event handling temporarily.
	  this.setRenderGuard();
	  this.setMode('cut');

	  // Let native `cut` behavior occur, then recover control.
	  setTimeout(function () {
	    _this.restoreEditorDOM({ x: x, y: y });
	    _this.removeRenderGuard();
	    _this.exitCurrentMode();
	    _this.update(removeFragment(editorState));
	  }, 0);
	}

	function removeFragment(editorState) {
	  var newContent = DraftModifier.removeRange(editorState.getCurrentContent(), editorState.getSelection(), 'forward');
	  return EditorState.push(editorState, newContent, 'remove-range');
	}

	module.exports = editOnCut;

/***/ },
/* 358 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnDragOver
	 * 
	 */

	'use strict';

	/**
	               * Drag behavior has begun from outside the editor element.
	               */

	function editOnDragOver(e) {
	  this._internalDrag = false;
	  this.setMode('drag');
	  e.preventDefault();
	}

	module.exports = editOnDragOver;

/***/ },
/* 359 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnDragStart
	 * 
	 */

	'use strict';

	/**
	               * A `dragstart` event has begun within the text editor component.
	               */

	function editOnDragStart() {
	  this._internalDrag = true;
	  this.setMode('drag');
	}

	module.exports = editOnDragStart;

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnFocus
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(293);

	function editOnFocus(e) {
	  var editorState = this.props.editorState;
	  var currentSelection = editorState.getSelection();
	  if (currentSelection.getHasFocus()) {
	    return;
	  }

	  var selection = currentSelection.set('hasFocus', true);
	  this.props.onFocus && this.props.onFocus(e);

	  // When the tab containing this text editor is hidden and the user does a
	  // find-in-page in a _different_ tab, Chrome on Mac likes to forget what the
	  // selection was right after sending this focus event and (if you let it)
	  // moves the cursor back to the beginning of the editor, so we force the
	  // selection here instead of simply accepting it in order to preserve the
	  // old cursor position. See https://crbug.com/540004.
	  this.update(EditorState.forceSelection(editorState, selection));
	}

	module.exports = editOnFocus;

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnInput
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(273);
	var DraftOffsetKey = __webpack_require__(329);
	var EditorState = __webpack_require__(293);
	var Entity = __webpack_require__(278);
	var UserAgent = __webpack_require__(317);

	var findAncestorOffsetKey = __webpack_require__(346);
	var nullthrows = __webpack_require__(303);

	var isGecko = UserAgent.isEngine('Gecko');

	var DOUBLE_NEWLINE = '\n\n';

	/**
	                              * This function is intended to handle spellcheck and autocorrect changes,
	                              * which occur in the DOM natively without any opportunity to observe or
	                              * interpret the changes before they occur.
	                              *
	                              * The `input` event fires in contentEditable elements reliably for non-IE
	                              * browsers, immediately after changes occur to the editor DOM. Since our other
	                              * handlers override or otherwise handle cover other varieties of text input,
	                              * the DOM state should match the model in all controlled input cases. Thus,
	                              * when an `input` change leads to a DOM/model mismatch, the change should be
	                              * due to a spellcheck change, and we can incorporate it into our model.
	                              */
	function editOnInput() {
	  var domSelection = global.getSelection();

	  var anchorNode = domSelection.anchorNode;
	  var isCollapsed = domSelection.isCollapsed;

	  if (anchorNode.nodeType !== Node.TEXT_NODE) {
	    return;
	  }

	  var domText = anchorNode.textContent;
	  var editorState = this.props.editorState;

	  var offsetKey = nullthrows(findAncestorOffsetKey(anchorNode));

	  var _DraftOffsetKey$decod = DraftOffsetKey.decode(offsetKey);

	  var blockKey = _DraftOffsetKey$decod.blockKey;
	  var decoratorKey = _DraftOffsetKey$decod.decoratorKey;
	  var leafKey = _DraftOffsetKey$decod.leafKey;

	  var _editorState$getBlock = editorState.getBlockTree(blockKey).getIn([decoratorKey, 'leaves', leafKey]);

	  var start = _editorState$getBlock.start;
	  var end = _editorState$getBlock.end;


	  var content = editorState.getCurrentContent();
	  var block = content.getBlockForKey(blockKey);
	  var modelText = block.getText().slice(start, end);

	  // Special-case soft newlines here. If the DOM text ends in a soft newline,
	  // we will have manually inserted an extra soft newline in DraftEditorLeaf.
	  // We want to remove this extra newline for the purpose of our comparison
	  // of DOM and model text.
	  if (domText.endsWith(DOUBLE_NEWLINE)) {
	    domText = domText.slice(0, -1);
	  }

	  // No change -- the DOM is up to date. Nothing to do here.
	  if (domText === modelText) {
	    return;
	  }

	  var selection = editorState.getSelection();

	  // We'll replace the entire leaf with the text content of the target.
	  var targetRange = selection.merge({
	    anchorOffset: start,
	    focusOffset: end,
	    isBackward: false });


	  var entityKey = block.getEntityAt(start);
	  var entity = entityKey && Entity.get(entityKey);
	  var entityType = entity && entity.getMutability();
	  var preserveEntity = entityType === 'MUTABLE';

	  // Immutable or segmented entities cannot properly be handled by the
	  // default browser undo, so we have to use a different change type to
	  // force using our internal undo method instead of falling through to the
	  // native browser undo.
	  var changeType = preserveEntity ? 'spellcheck-change' : 'apply-entity';

	  var newContent = DraftModifier.replaceText(content, targetRange, domText, block.getInlineStyleAt(start), preserveEntity ? block.getEntityAt(start) : null);

	  var anchorOffset, focusOffset, startOffset, endOffset;

	  if (isGecko) {
	    // Firefox selection does not change while the context menu is open, so
	    // we preserve the anchor and focus values of the DOM selection.
	    anchorOffset = domSelection.anchorOffset;
	    focusOffset = domSelection.focusOffset;
	    startOffset = start + Math.min(anchorOffset, focusOffset);
	    endOffset = startOffset + Math.abs(anchorOffset - focusOffset);
	    anchorOffset = startOffset;
	    focusOffset = endOffset;
	  } else {
	    // Browsers other than Firefox may adjust DOM selection while the context
	    // menu is open, and Safari autocorrect is prone to providing an inaccurate
	    // DOM selection. Don't trust it. Instead, use our existing SelectionState
	    // and adjust it based on the number of characters changed during the
	    // mutation.
	    var charDelta = domText.length - modelText.length;
	    startOffset = selection.getStartOffset();
	    endOffset = selection.getEndOffset();

	    anchorOffset = isCollapsed ? endOffset + charDelta : startOffset;
	    focusOffset = endOffset + charDelta;
	  }

	  // Segmented entities are completely or partially removed when their
	  // text content changes. For this case we do not want any text to be selected
	  // after the change, so we are not merging the selection.
	  var contentWithAdjustedDOMSelection = newContent.merge({
	    selectionBefore: content.getSelectionAfter(),
	    selectionAfter: selection.merge({ anchorOffset: anchorOffset, focusOffset: focusOffset }) });


	  this.update(EditorState.push(editorState, contentWithAdjustedDOMSelection, changeType));
	}

	module.exports = editOnInput;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnKeyDown
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(273);
	var EditorState = __webpack_require__(293);
	var KeyBindingUtil = __webpack_require__(363);
	var Keys = __webpack_require__(310);
	var SecondaryClipboard = __webpack_require__(364);
	var UserAgent = __webpack_require__(317);

	var keyCommandBackspaceToStartOfLine = __webpack_require__(365);
	var keyCommandBackspaceWord = __webpack_require__(372);
	var keyCommandDeleteWord = __webpack_require__(375);
	var keyCommandInsertNewline = __webpack_require__(377);
	var keyCommandPlainBackspace = __webpack_require__(378);
	var keyCommandPlainDelete = __webpack_require__(379);
	var keyCommandMoveSelectionToEndOfBlock = __webpack_require__(380);
	var keyCommandMoveSelectionToStartOfBlock = __webpack_require__(381);
	var keyCommandTransposeCharacters = __webpack_require__(382);
	var keyCommandUndo = __webpack_require__(383);

	var isEventHandled = __webpack_require__(350);

	var isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;

	var isChrome = UserAgent.isBrowser('Chrome');

	/**
	                                               * Map a `DraftEditorCommand` command value to a corresponding function.
	                                               */
	function onKeyCommand(command, editorState) {
	  switch (command) {
	    case 'redo':
	      return EditorState.redo(editorState);
	    case 'delete':
	      return keyCommandPlainDelete(editorState);
	    case 'delete-word':
	      return keyCommandDeleteWord(editorState);
	    case 'backspace':
	      return keyCommandPlainBackspace(editorState);
	    case 'backspace-word':
	      return keyCommandBackspaceWord(editorState);
	    case 'backspace-to-start-of-line':
	      return keyCommandBackspaceToStartOfLine(editorState);
	    case 'split-block':
	      return keyCommandInsertNewline(editorState);
	    case 'transpose-characters':
	      return keyCommandTransposeCharacters(editorState);
	    case 'move-selection-to-start-of-block':
	      return keyCommandMoveSelectionToStartOfBlock(editorState);
	    case 'move-selection-to-end-of-block':
	      return keyCommandMoveSelectionToEndOfBlock(editorState);
	    case 'secondary-cut':
	      return SecondaryClipboard.cut(editorState);
	    case 'secondary-paste':
	      return SecondaryClipboard.paste(editorState);
	    default:
	      return editorState;}

	}

	/**
	   * Intercept keydown behavior to handle keys and commands manually, if desired.
	   *
	   * Keydown combinations may be mapped to `DraftCommand` values, which may
	   * correspond to command functions that modify the editor or its contents.
	   *
	   * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level
	   * component may provide a custom mapping via the `keyBindingFn` prop.
	   */
	function editOnKeyDown(e) {
	  var keyCode = e.which;
	  var editorState = this.props.editorState;

	  switch (keyCode) {
	    case Keys.RETURN:
	      e.preventDefault();
	      // The top-level component may manually handle newline insertion. If
	      // no special handling is performed, fall through to command handling.
	      if (this.props.handleReturn && isEventHandled(this.props.handleReturn(e))) {
	        return;
	      }
	      break;
	    case Keys.ESC:
	      e.preventDefault();
	      this.props.onEscape && this.props.onEscape(e);
	      return;
	    case Keys.TAB:
	      this.props.onTab && this.props.onTab(e);
	      return;
	    case Keys.UP:
	      this.props.onUpArrow && this.props.onUpArrow(e);
	      return;
	    case Keys.DOWN:
	      this.props.onDownArrow && this.props.onDownArrow(e);
	      return;
	    case Keys.SPACE:
	      // Handling for OSX where option + space scrolls.
	      if (isChrome && isOptionKeyCommand(e)) {
	        e.preventDefault();
	        // Insert a nbsp into the editor.
	        var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), ' ');
	        this.update(EditorState.push(editorState, contentState, 'insert-characters'));
	        return;
	      }}


	  var command = this.props.keyBindingFn(e);

	  // If no command is specified, allow keydown event to continue.
	  if (!command) {
	    return;
	  }

	  if (command === 'undo') {
	    // Since undo requires some special updating behavior to keep the editor
	    // in sync, handle it separately.
	    keyCommandUndo(e, editorState, this.update);
	    return;
	  }

	  // At this point, we know that we're handling a command of some kind, so
	  // we don't want to insert a character following the keydown.
	  e.preventDefault();

	  // Allow components higher up the tree to handle the command first.
	  if (this.props.handleKeyCommand && isEventHandled(this.props.handleKeyCommand(command))) {
	    return;
	  }

	  var newState = onKeyCommand(command, editorState);
	  if (newState !== editorState) {
	    this.update(newState);
	  }
	}

	module.exports = editOnKeyDown;

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule KeyBindingUtil
	 * @typechecks
	 * 
	 */

	'use strict';

	var UserAgent = __webpack_require__(317);

	var isOSX = UserAgent.isPlatform('Mac OS X');

	var KeyBindingUtil = {
	  /**
	                        * Check whether the ctrlKey modifier is *not* being used in conjunction with
	                        * the altKey modifier. If they are combined, the result is an `altGraph`
	                        * key modifier, which should not be handled by this set of key bindings.
	                        */
	  isCtrlKeyCommand: function isCtrlKeyCommand(e) {
	    return !!e.ctrlKey && !e.altKey;
	  },

	  isOptionKeyCommand: function isOptionKeyCommand(e) {
	    return isOSX && e.altKey;
	  },

	  hasCommandModifier: function hasCommandModifier(e) {
	    return isOSX ? !!e.metaKey && !e.altKey : KeyBindingUtil.isCtrlKeyCommand(e);
	  } };


	module.exports = KeyBindingUtil;

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SecondaryClipboard
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(273);
	var EditorState = __webpack_require__(293);

	var getContentStateFragment = __webpack_require__(284);
	var nullthrows = __webpack_require__(303);

	var clipboard = null;

	/**
	                       * Some systems offer a "secondary" clipboard to allow quick internal cut
	                       * and paste behavior. For instance, Ctrl+K (cut) and Ctrl+Y (paste).
	                       */
	var SecondaryClipboard = {
	  cut: function cut(editorState) {
	    var content = editorState.getCurrentContent();
	    var selection = editorState.getSelection();
	    var targetRange = null;

	    if (selection.isCollapsed()) {
	      var anchorKey = selection.getAnchorKey();
	      var blockEnd = content.getBlockForKey(anchorKey).getLength();

	      if (blockEnd === selection.getAnchorOffset()) {
	        return editorState;
	      }

	      targetRange = selection.set('focusOffset', blockEnd);
	    } else {
	      targetRange = selection;
	    }

	    targetRange = nullthrows(targetRange);
	    clipboard = getContentStateFragment(content, targetRange);

	    var afterRemoval = DraftModifier.removeRange(content, targetRange, 'forward');

	    if (afterRemoval === content) {
	      return editorState;
	    }

	    return EditorState.push(editorState, afterRemoval, 'remove-range');
	  },

	  paste: function paste(editorState) {
	    if (!clipboard) {
	      return editorState;
	    }

	    var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), clipboard);

	    return EditorState.push(editorState, newContent, 'insert-fragment');
	  } };


	module.exports = SecondaryClipboard;

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandBackspaceToStartOfLine
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(293);

	var expandRangeToStartOfLine = __webpack_require__(366);
	var getDraftEditorSelectionWithNodes = __webpack_require__(369);
	var moveSelectionBackward = __webpack_require__(370);
	var removeTextWithStrategy = __webpack_require__(371);

	function keyCommandBackspaceToStartOfLine(editorState) {
	  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {
	    var selection = strategyState.getSelection();
	    if (selection.isCollapsed() && selection.getAnchorOffset() === 0) {
	      return moveSelectionBackward(strategyState, 1);
	    }

	    var domSelection = global.getSelection();
	    var range = domSelection.getRangeAt(0);
	    range = expandRangeToStartOfLine(range);

	    return getDraftEditorSelectionWithNodes(strategyState, null, range.endContainer, range.endOffset, range.startContainer, range.startOffset).selectionState;
	  }, 'backward');

	  if (afterRemoval === editorState.getCurrentContent()) {
	    return editorState;
	  }

	  return EditorState.push(editorState, afterRemoval, 'remove-range');
	}

	module.exports = keyCommandBackspaceToStartOfLine;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	/**
	               * Copyright (c) 2013-present, Facebook, Inc.
	               * All rights reserved.
	               *
	               * This source code is licensed under the BSD-style license found in the
	               * LICENSE file in the root directory of this source tree. An additional grant
	               * of patent rights can be found in the PATENTS file in the same directory.
	               *
	               * @providesModule expandRangeToStartOfLine
	               * @typechecks
	               * 
	               */

	var UnicodeUtils = __webpack_require__(367);

	var getRangeClientRects = __webpack_require__(368);
	var invariant = __webpack_require__(281);

	/**
	                                                * Return the computed line height, in pixels, for the provided element.
	                                                */
	function getLineHeightPx(element) {
	  var computed = getComputedStyle(element);
	  var div = document.createElement('div');
	  div.style.fontFamily = computed.fontFamily;
	  div.style.fontSize = computed.fontSize;
	  div.style.fontStyle = computed.fontStyle;
	  div.style.fontWeight = computed.fontWeight;
	  div.style.lineHeight = computed.lineHeight;
	  div.style.position = 'absolute';
	  div.textContent = 'M';

	  // forced layout here
	  document.body.appendChild(div);
	  var rect = div.getBoundingClientRect();
	  document.body.removeChild(div);

	  return rect.height;
	}

	/**
	   * Return whether every ClientRect in the provided list lies on the same line.
	   *
	   * We assume that the rects on the same line all contain the baseline, so the
	   * lowest top line needs to be above the highest bottom line (i.e., if you were
	   * to project the rects onto the y-axis, their intersection would be nonempty).
	   *
	   * In addition, we require that no two boxes are lineHeight (or more) apart at
	   * either top or bottom, which helps protect against false positives for fonts
	   * with extremely large glyph heights (e.g., with a font size of 17px, Zapfino
	   * produces rects of height 58px!).
	   */
	function areRectsOnOneLine(rects, lineHeight) {
	  var minTop = Infinity;
	  var minBottom = Infinity;
	  var maxTop = -Infinity;
	  var maxBottom = -Infinity;

	  for (var ii = 0; ii < rects.length; ii++) {
	    var rect = rects[ii];
	    if (rect.width === 0 || rect.width === 1) {
	      // When a range starts or ends a soft wrap, many browsers (Chrome, IE,
	      // Safari) include an empty rect on the previous or next line. When the
	      // text lies in a container whose position is not integral (e.g., from
	      // margin: auto), Safari makes these empty rects have width 1 (instead of
	      // 0). Having one-pixel-wide characters seems unlikely (and most browsers
	      // report widths in subpixel precision anyway) so it's relatively safe to
	      // skip over them.
	      continue;
	    }
	    minTop = Math.min(minTop, rect.top);
	    minBottom = Math.min(minBottom, rect.bottom);
	    maxTop = Math.max(maxTop, rect.top);
	    maxBottom = Math.max(maxBottom, rect.bottom);
	  }

	  return maxTop <= minBottom && maxTop - minTop < lineHeight && maxBottom - minBottom < lineHeight;
	}

	/**
	   * Return the length of a node, as used by Range offsets.
	   */
	function getNodeLength(node) {
	  // http://www.w3.org/TR/dom/#concept-node-length
	  switch (node.nodeType) {
	    case Node.DOCUMENT_TYPE_NODE:
	      return 0;
	    case Node.TEXT_NODE:
	    case Node.PROCESSING_INSTRUCTION_NODE:
	    case Node.COMMENT_NODE:
	      return node.length;
	    default:
	      return node.childNodes.length;}

	}

	/**
	   * Given a collapsed range, move the start position backwards as far as
	   * possible while the range still spans only a single line.
	   */
	function expandRangeToStartOfLine(range) {
	  !range.collapsed ? process.env.NODE_ENV !== 'production' ? invariant(false, 'expandRangeToStartOfLine: Provided range is not collapsed.') : invariant(false) : void 0;
	  range = range.cloneRange();

	  var containingElement = range.startContainer;
	  if (containingElement.nodeType !== 1) {
	    containingElement = containingElement.parentNode;
	  }
	  var lineHeight = getLineHeightPx(containingElement);

	  // Imagine our text looks like:
	  //   <div><span>once upon a time, there was a <em>boy
	  //   who lived</em> </span><q><strong>under^ the
	  //   stairs</strong> in a small closet.</q></div>
	  // where the caret represents the cursor. First, we crawl up the tree until
	  // the range spans multiple lines (setting the start point to before
	  // "<strong>", then before "<div>"), then at each level we do a search to
	  // find the latest point which is still on a previous line. We'll find that
	  // the break point is inside the span, then inside the <em>, then in its text
	  // node child, the actual break point before "who".

	  var bestContainer = range.endContainer;
	  var bestOffset = range.endOffset;
	  range.setStart(range.startContainer, 0);

	  while (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {
	    bestContainer = range.startContainer;
	    bestOffset = range.startOffset;
	    !bestContainer.parentNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Found unexpected detached subtree when traversing.') : invariant(false) : void 0;
	    range.setStartBefore(bestContainer);
	    if (bestContainer.nodeType === 1 && getComputedStyle(bestContainer).display !== 'inline') {
	      // The start of the line is never in a different block-level container.
	      break;
	    }
	  }

	  // In the above example, range now spans from "<div>" to "under",
	  // bestContainer is <div>, and bestOffset is 1 (index of <q> inside <div>)].
	  // Picking out which child to recurse into here is a special case since we
	  // don't want to check past <q> -- once we find that the final range starts
	  // in <span>, we can look at all of its children (and all of their children)
	  // to find the break point.

	  // At all times, (bestContainer, bestOffset) is the latest single-line start
	  // point that we know of.
	  var currentContainer = bestContainer;
	  var maxIndexToConsider = bestOffset - 1;

	  do {
	    var nodeValue = currentContainer.nodeValue;

	    for (var ii = maxIndexToConsider; ii >= 0; ii--) {
	      if (nodeValue != null && ii > 0 && UnicodeUtils.isSurrogatePair(nodeValue, ii - 1)) {
	        // We're in the middle of a surrogate pair -- skip over so we never
	        // return a range with an endpoint in the middle of a code point.
	        continue;
	      }

	      range.setStart(currentContainer, ii);
	      if (areRectsOnOneLine(getRangeClientRects(range), lineHeight)) {
	        bestContainer = currentContainer;
	        bestOffset = ii;
	      } else {
	        break;
	      }
	    }

	    if (ii === -1 || currentContainer.childNodes.length === 0) {
	      // If ii === -1, then (bestContainer, bestOffset), which is equal to
	      // (currentContainer, 0), was a single-line start point but a start
	      // point before currentContainer wasn't, so the line break seems to
	      // have occurred immediately after currentContainer's start tag
	      //
	      // If currentContainer.childNodes.length === 0, we're already at a
	      // terminal node (e.g., text node) and should return our current best.
	      break;
	    }

	    currentContainer = currentContainer.childNodes[ii];
	    maxIndexToConsider = getNodeLength(currentContainer);
	  } while (true);

	  range.setStart(bestContainer, bestOffset);
	  return range;
	}

	module.exports = expandRangeToStartOfLine;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	/**
	     * Unicode-enabled replacesments for basic String functions.
	     *
	     * All the functions in this module assume that the input string is a valid
	     * UTF-16 encoding of a Unicode sequence. If it's not the case, the behavior
	     * will be undefined.
	     *
	     * WARNING: Since this module is typechecks-enforced, you may find new bugs
	     * when replacing normal String functions with ones provided here.
	     */

	'use strict';

	var invariant = __webpack_require__(281);

	// These two ranges are consecutive so anything in [HIGH_START, LOW_END] is a
	// surrogate code unit.
	var SURROGATE_HIGH_START = 0xD800;
	var SURROGATE_HIGH_END = 0xDBFF;
	var SURROGATE_LOW_START = 0xDC00;
	var SURROGATE_LOW_END = 0xDFFF;
	var SURROGATE_UNITS_REGEX = /[\uD800-\uDFFF]/;

	/**
	                                                * @param {number} codeUnit   A Unicode code-unit, in range [0, 0x10FFFF]
	                                                * @return {boolean}          Whether code-unit is in a surrogate (hi/low) range
	                                                */
	function isCodeUnitInSurrogateRange(codeUnit) {
	  return SURROGATE_HIGH_START <= codeUnit && codeUnit <= SURROGATE_LOW_END;
	}

	/**
	   * Returns whether the two characters starting at `index` form a surrogate pair.
	   * For example, given the string s = "\uD83D\uDE0A", (s, 0) returns true and
	   * (s, 1) returns false.
	   *
	   * @param {string} str
	   * @param {number} index
	   * @return {boolean}
	   */
	function isSurrogatePair(str, index) {
	  !(0 <= index && index < str.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isSurrogatePair: Invalid index %s for string length %s.', index, str.length) : invariant(false) : void 0;
	  if (index + 1 === str.length) {
	    return false;
	  }
	  var first = str.charCodeAt(index);
	  var second = str.charCodeAt(index + 1);
	  return SURROGATE_HIGH_START <= first && first <= SURROGATE_HIGH_END && SURROGATE_LOW_START <= second && second <= SURROGATE_LOW_END;
	}

	/**
	   * @param {string} str  Non-empty string
	   * @return {boolean}    True if the input includes any surrogate code units
	   */
	function hasSurrogateUnit(str) {
	  return SURROGATE_UNITS_REGEX.test(str);
	}

	/**
	   * Return the length of the original Unicode character at given position in the
	   * String by looking into the UTF-16 code unit; that is equal to 1 for any
	   * non-surrogate characters in BMP ([U+0000..U+D7FF] and [U+E000, U+FFFF]); and
	   * returns 2 for the hi/low surrogates ([U+D800..U+DFFF]), which are in fact
	   * representing non-BMP characters ([U+10000..U+10FFFF]).
	   *
	   * Examples:
	   * - '\u0020' => 1
	   * - '\u3020' => 1
	   * - '\uD835' => 2
	   * - '\uD835\uDDEF' => 2
	   * - '\uDDEF' => 2
	   *
	   * @param {string} str  Non-empty string
	   * @param {number} pos  Position in the string to look for one code unit
	   * @return {number}      Number 1 or 2
	   */
	function getUTF16Length(str, pos) {
	  return 1 + isCodeUnitInSurrogateRange(str.charCodeAt(pos));
	}

	/**
	   * Fully Unicode-enabled replacement for String#length
	   *
	   * @param {string} str  Valid Unicode string
	   * @return {number}     The number of Unicode characters in the string
	   */
	function strlen(str) {
	  // Call the native functions if there's no surrogate char
	  if (!hasSurrogateUnit(str)) {
	    return str.length;
	  }

	  var len = 0;
	  for (var pos = 0; pos < str.length; pos += getUTF16Length(str, pos)) {
	    len++;
	  }
	  return len;
	}

	/**
	   * Fully Unicode-enabled replacement for String#substr()
	   *
	   * @param {string} str      Valid Unicode string
	   * @param {number} start    Location in Unicode sequence to begin extracting
	   * @param {?number} length  The number of Unicode characters to extract
	   *                          (default: to the end of the string)
	   * @return {string}         Extracted sub-string
	   */
	function substr(str, start, length) {
	  start = start || 0;
	  length = length === undefined ? Infinity : length || 0;

	  // Call the native functions if there's no surrogate char
	  if (!hasSurrogateUnit(str)) {
	    return str.substr(start, length);
	  }

	  // Obvious cases
	  var size = str.length;
	  if (size <= 0 || start > size || length <= 0) {
	    return '';
	  }

	  // Find the actual starting position
	  var posA = 0;
	  if (start > 0) {
	    for (; start > 0 && posA < size; start--) {
	      posA += getUTF16Length(str, posA);
	    }
	    if (posA >= size) {
	      return '';
	    }
	  } else if (start < 0) {
	    for (posA = size; start < 0 && 0 < posA; start++) {
	      posA -= getUTF16Length(str, posA - 1);
	    }
	    if (posA < 0) {
	      posA = 0;
	    }
	  }

	  // Find the actual ending position
	  var posB = size;
	  if (length < size) {
	    for (posB = posA; length > 0 && posB < size; length--) {
	      posB += getUTF16Length(str, posB);
	    }
	  }

	  return str.substring(posA, posB);
	}

	/**
	   * Fully Unicode-enabled replacement for String#substring()
	   *
	   * @param {string} str    Valid Unicode string
	   * @param {number} start  Location in Unicode sequence to begin extracting
	   * @param {?number} end   Location in Unicode sequence to end extracting
	   *                        (default: end of the string)
	   * @return {string}       Extracted sub-string
	   */
	function substring(str, start, end) {
	  start = start || 0;
	  end = end === undefined ? Infinity : end || 0;

	  if (start < 0) {
	    start = 0;
	  }
	  if (end < 0) {
	    end = 0;
	  }

	  var length = Math.abs(end - start);
	  start = start < end ? start : end;
	  return substr(str, start, length);
	}

	/**
	   * Get a list of Unicode code-points from a String
	   *
	   * @param {string} str        Valid Unicode string
	   * @return {array<number>}    A list of code-points in [0..0x10FFFF]
	   */
	function getCodePoints(str) {
	  var codePoints = [];
	  for (var pos = 0; pos < str.length; pos += getUTF16Length(str, pos)) {
	    codePoints.push(str.codePointAt(pos));
	  }
	  return codePoints;
	}

	var UnicodeUtils = {
	  getCodePoints: getCodePoints,
	  getUTF16Length: getUTF16Length,
	  hasSurrogateUnit: hasSurrogateUnit,
	  isCodeUnitInSurrogateRange: isCodeUnitInSurrogateRange,
	  isSurrogatePair: isSurrogatePair,
	  strlen: strlen,
	  substring: substring,
	  substr: substr };


	module.exports = UnicodeUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getRangeClientRects
	 * @typechecks
	 * 
	 */

	'use strict';

	var UserAgent = __webpack_require__(317);

	var invariant = __webpack_require__(281);

	var isChrome = UserAgent.isBrowser('Chrome');

	// In Chrome, the client rects will include the entire bounds of all nodes that
	// begin (have a start tag) within the selection, even if the selection does
	// not overlap the entire node. To resolve this, we split the range at each
	// start tag and join the client rects together.
	// https://code.google.com/p/chromium/issues/detail?id=324437
	/* eslint-disable consistent-return */
	function getRangeClientRectsChrome(range) {
	  var tempRange = range.cloneRange();
	  var clientRects = [];

	  for (var ancestor = range.endContainer; ancestor != null; ancestor = ancestor.parentNode) {
	    // If we've climbed up to the common ancestor, we can now use the
	    // original start point and stop climbing the tree.
	    var atCommonAncestor = ancestor === range.commonAncestorContainer;
	    if (atCommonAncestor) {
	      tempRange.setStart(range.startContainer, range.startOffset);
	    } else {
	      tempRange.setStart(tempRange.endContainer, 0);
	    }
	    var rects = Array.from(tempRange.getClientRects());
	    clientRects.push(rects);
	    if (atCommonAncestor) {
	      var _ref;

	      clientRects.reverse();
	      return (_ref = []).concat.apply(_ref, clientRects);
	    }
	    tempRange.setEndBefore(ancestor);
	  }

	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Found an unexpected detached subtree when getting range client rects.') : invariant(false) : void 0;
	}
	/* eslint-enable consistent-return */

	/**
	                                       * Like range.getClientRects() but normalizes for browser bugs.
	                                       */
	var getRangeClientRects = isChrome ? getRangeClientRectsChrome : function (range) {
	  return Array.from(range.getClientRects());
	};

	module.exports = getRangeClientRects;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getDraftEditorSelectionWithNodes
	 * @typechecks
	 * 
	 */

	'use strict';

	var findAncestorOffsetKey = __webpack_require__(346);
	var getSelectionOffsetKeyForNode = __webpack_require__(347);
	var getUpdatedSelectionState = __webpack_require__(349);
	var invariant = __webpack_require__(281);
	var nullthrows = __webpack_require__(303);

	/**
	                                                  * Convert the current selection range to an anchor/focus pair of offset keys
	                                                  * and values that can be interpreted by components.
	                                                  */
	function getDraftEditorSelectionWithNodes(editorState, root, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var anchorIsTextNode = anchorNode.nodeType === Node.TEXT_NODE;
	  var focusIsTextNode = focusNode.nodeType === Node.TEXT_NODE;

	  // If the selection range lies only on text nodes, the task is simple.
	  // Find the nearest offset-aware elements and use the
	  // offset values supplied by the selection range.
	  if (anchorIsTextNode && focusIsTextNode) {
	    return {
	      selectionState: getUpdatedSelectionState(editorState, nullthrows(findAncestorOffsetKey(anchorNode)), anchorOffset, nullthrows(findAncestorOffsetKey(focusNode)), focusOffset),
	      needsRecovery: false };

	  }

	  var anchorPoint = null;
	  var focusPoint = null;
	  var needsRecovery = true;

	  // An element is selected. Convert this selection range into leaf offset
	  // keys and offset values for consumption at the component level. This
	  // is common in Firefox, where select-all and triple click behavior leads
	  // to entire elements being selected.
	  //
	  // Note that we use the `needsRecovery` parameter in the callback here. This
	  // is because when certain elements are selected, the behavior for subsequent
	  // cursor movement (e.g. via arrow keys) is uncertain and may not match
	  // expectations at the component level. For example, if an entire <div> is
	  // selected and the user presses the right arrow, Firefox keeps the selection
	  // on the <div>. If we allow subsequent keypresses to insert characters
	  // natively, they will be inserted into a browser-created text node to the
	  // right of that <div>. This is obviously undesirable.
	  //
	  // With the `needsRecovery` flag, we inform the caller that it is responsible
	  // for manually setting the selection state on the rendered document to
	  // ensure proper selection state maintenance.

	  if (anchorIsTextNode) {
	    anchorPoint = {
	      key: nullthrows(findAncestorOffsetKey(anchorNode)),
	      offset: anchorOffset };

	    focusPoint = getPointForNonTextNode(root, focusNode, focusOffset);
	  } else if (focusIsTextNode) {
	    focusPoint = {
	      key: nullthrows(findAncestorOffsetKey(focusNode)),
	      offset: focusOffset };

	    anchorPoint = getPointForNonTextNode(root, anchorNode, anchorOffset);
	  } else {
	    anchorPoint = getPointForNonTextNode(root, anchorNode, anchorOffset);
	    focusPoint = getPointForNonTextNode(root, focusNode, focusOffset);

	    // If the selection is collapsed on an empty block, don't force recovery.
	    // This way, on arrow key selection changes, the browser can move the
	    // cursor from a non-zero offset on one block, through empty blocks,
	    // to a matching non-zero offset on other text blocks.
	    if (anchorNode === focusNode && anchorOffset === focusOffset) {
	      needsRecovery = !!anchorNode.firstChild && anchorNode.firstChild.nodeName !== 'BR';
	    }
	  }

	  return {
	    selectionState: getUpdatedSelectionState(editorState, anchorPoint.key, anchorPoint.offset, focusPoint.key, focusPoint.offset),
	    needsRecovery: needsRecovery };

	}

	/**
	   * Identify the first leaf descendant for the given node.
	   */
	function getFirstLeaf(node) {
	  while (node.firstChild && getSelectionOffsetKeyForNode(node.firstChild)) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	   * Identify the last leaf descendant for the given node.
	   */
	function getLastLeaf(node) {
	  while (node.lastChild && getSelectionOffsetKeyForNode(node.lastChild)) {
	    node = node.lastChild;
	  }
	  return node;
	}

	function getPointForNonTextNode(editorRoot, startNode, childOffset) {
	  var node = startNode;
	  var offsetKey = findAncestorOffsetKey(node);

	  !(offsetKey != null || editorRoot && (editorRoot === node || editorRoot.firstChild === node)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown node in selection range.') : invariant(false) : void 0;

	  // If the editorRoot is the selection, step downward into the content
	  // wrapper.
	  if (editorRoot === node) {
	    node = node.firstChild;
	    !(node instanceof Element && node.getAttribute('data-contents') === 'true') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid DraftEditorContents structure.') : invariant(false) : void 0;
	    if (childOffset > 0) {
	      childOffset = node.childNodes.length;
	    }
	  }

	  // If the child offset is zero and we have an offset key, we're done.
	  // If there's no offset key because the entire editor is selected,
	  // find the leftmost ("first") leaf in the tree and use that as the offset
	  // key.
	  if (childOffset === 0) {
	    var key = null;
	    if (offsetKey != null) {
	      key = offsetKey;
	    } else {
	      var firstLeaf = getFirstLeaf(node);
	      key = nullthrows(getSelectionOffsetKeyForNode(firstLeaf));
	    }
	    return { key: key, offset: 0 };
	  }

	  var nodeBeforeCursor = node.childNodes[childOffset - 1];
	  var leafKey = null;
	  var textLength = null;

	  if (!getSelectionOffsetKeyForNode(nodeBeforeCursor)) {
	    // Our target node may be a leaf or a text node, in which case we're
	    // already where we want to be and can just use the child's length as
	    // our offset.
	    leafKey = nullthrows(offsetKey);
	    textLength = getTextContentLength(nodeBeforeCursor);
	  } else {
	    // Otherwise, we'll look at the child to the left of the cursor and find
	    // the last leaf node in its subtree.
	    var lastLeaf = getLastLeaf(nodeBeforeCursor);
	    leafKey = nullthrows(getSelectionOffsetKeyForNode(lastLeaf));
	    textLength = getTextContentLength(lastLeaf);
	  }

	  return {
	    key: leafKey,
	    offset: textLength };

	}

	/**
	   * Return the length of a node's textContent, regarding single newline
	   * characters as zero-length. This allows us to avoid problems with identifying
	   * the correct selection offset for empty blocks in IE, in which we
	   * render newlines instead of break tags.
	   */
	function getTextContentLength(node) {
	  var textContent = node.textContent;
	  return textContent === '\n' ? 0 : textContent.length;
	}

	module.exports = getDraftEditorSelectionWithNodes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 370 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule moveSelectionBackward
	 * 
	 */

	'use strict';

	/**
	               * Given a collapsed selection, move the focus `maxDistance` backward within
	               * the selected block. If the selection will go beyond the start of the block,
	               * move focus to the end of the previous block, but no further.
	               *
	               * This function is not Unicode-aware, so surrogate pairs will be treated
	               * as having length 2.
	               */
	function moveSelectionBackward(editorState, maxDistance) {
	  var selection = editorState.getSelection();
	  var content = editorState.getCurrentContent();
	  var key = selection.getStartKey();
	  var offset = selection.getStartOffset();

	  var focusKey = key;
	  var focusOffset = 0;

	  if (maxDistance > offset) {
	    var keyBefore = content.getKeyBefore(key);
	    if (keyBefore == null) {
	      focusKey = key;
	    } else {
	      focusKey = keyBefore;
	      var blockBefore = content.getBlockForKey(keyBefore);
	      focusOffset = blockBefore.getText().length;
	    }
	  } else {
	    focusOffset = offset - maxDistance;
	  }

	  return selection.merge({
	    focusKey: focusKey,
	    focusOffset: focusOffset,
	    isBackward: true });

	}

	module.exports = moveSelectionBackward;

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule removeTextWithStrategy
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(273);

	/**
	                                                 * For a collapsed selection state, remove text based on the specified strategy.
	                                                 * If the selection state is not collapsed, remove the entire selected range.
	                                                 */
	function removeTextWithStrategy(editorState, strategy, direction) {
	  var selection = editorState.getSelection();
	  var content = editorState.getCurrentContent();
	  var target = selection;
	  if (selection.isCollapsed()) {
	    if (direction === 'forward') {
	      if (editorState.isSelectionAtEndOfContent()) {
	        return content;
	      }
	    } else if (editorState.isSelectionAtStartOfContent()) {
	      return content;
	    }

	    target = strategy(editorState);
	    if (target === selection) {
	      return content;
	    }
	  }
	  return DraftModifier.removeRange(content, target, direction);
	}

	module.exports = removeTextWithStrategy;

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandBackspaceWord
	 * 
	 */

	'use strict';

	var DraftRemovableWord = __webpack_require__(373);
	var EditorState = __webpack_require__(293);

	var moveSelectionBackward = __webpack_require__(370);
	var removeTextWithStrategy = __webpack_require__(371);

	/**
	                                                                   * Delete the word that is left of the cursor, as well as any spaces or
	                                                                   * punctuation after the word.
	                                                                   */
	function keyCommandBackspaceWord(editorState) {
	  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {
	    var selection = strategyState.getSelection();
	    var offset = selection.getStartOffset();
	    // If there are no words before the cursor, remove the preceding newline.
	    if (offset === 0) {
	      return moveSelectionBackward(strategyState, 1);
	    }
	    var key = selection.getStartKey();
	    var content = strategyState.getCurrentContent();
	    var text = content.getBlockForKey(key).getText().slice(0, offset);
	    var toRemove = DraftRemovableWord.getBackward(text);
	    return moveSelectionBackward(strategyState, toRemove.length || 1);
	  }, 'backward');

	  if (afterRemoval === editorState.getCurrentContent()) {
	    return editorState;
	  }

	  return EditorState.push(editorState, afterRemoval, 'remove-range');
	}

	module.exports = keyCommandBackspaceWord;

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftRemovableWord
	 * @typechecks
	 * 
	 */

	'use strict';

	var TokenizeUtil = __webpack_require__(374);

	var punctuation = TokenizeUtil.getPunctuation();

	// The apostrophe and curly single quotes behave in a curious way: when
	// surrounded on both sides by word characters, they behave as word chars; when
	// either neighbor is punctuation or an end of the string, they behave as
	// punctuation.
	var CHAMELEON_CHARS = '[\'‘’]';

	// Remove the underscore, which should count as part of the removable word. The
	// "chameleon chars" also count as punctuation in this regex.
	var WHITESPACE_AND_PUNCTUATION = '\\s|(?![_])' + punctuation;

	var DELETE_STRING = '^' + '(?:' + WHITESPACE_AND_PUNCTUATION + ')*' + '(?:' + CHAMELEON_CHARS + '|(?!' + WHITESPACE_AND_PUNCTUATION + ').)*' + '(?:(?!' + WHITESPACE_AND_PUNCTUATION + ').)';
	var DELETE_REGEX = new RegExp(DELETE_STRING);

	var BACKSPACE_STRING = '(?:(?!' + WHITESPACE_AND_PUNCTUATION + ').)' + '(?:' + CHAMELEON_CHARS + '|(?!' + WHITESPACE_AND_PUNCTUATION + ').)*' + '(?:' + WHITESPACE_AND_PUNCTUATION + ')*' + '$';
	var BACKSPACE_REGEX = new RegExp(BACKSPACE_STRING);

	function getRemovableWord(text, isBackward) {
	  var matches = isBackward ? BACKSPACE_REGEX.exec(text) : DELETE_REGEX.exec(text);
	  return matches ? matches[0] : text;
	}

	var DraftRemovableWord = {
	  getBackward: function getBackward(text) {
	    return getRemovableWord(text, true);
	  },

	  getForward: function getForward(text) {
	    return getRemovableWord(text, false);
	  } };


	module.exports = DraftRemovableWord;

/***/ },
/* 374 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * @stub
	 * 
	 */

	'use strict';

	// \u00a1-\u00b1\u00b4-\u00b8\u00ba\u00bb\u00bf
	//             is latin supplement punctuation except fractions and superscript
	//             numbers
	// \u2010-\u2027\u2030-\u205e
	//             is punctuation from the general punctuation block:
	//             weird quotes, commas, bullets, dashes, etc.
	// \u30fb\u3001\u3002\u3008-\u3011\u3014-\u301f
	//             is CJK punctuation
	// \uff1a-\uff1f\uff01-\uff0f\uff3b-\uff40\uff5b-\uff65
	//             is some full-width/half-width punctuation
	// \u2E2E\u061f\u066a-\u066c\u061b\u060c\u060d\uFD3e\uFD3F
	//             is some Arabic punctuation marks
	// \u1801\u0964\u104a\u104b
	//             is misc. other language punctuation marks

	var PUNCTUATION = '[.,+*?$|#{}()\'\\^\\-\\[\\]\\\\\\/!@%"~=<>_:;' + '・、。〈-】〔-〟：-？！-／' + '［-｀｛-･⸮؟٪-٬؛،؍' + '﴾﴿᠁।၊။‐-‧‰-⁞' + '¡-±´-¸º»¿]';

	module.exports = {
	  getPunctuation: function getPunctuation() {
	    return PUNCTUATION;
	  } };

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandDeleteWord
	 * 
	 */

	'use strict';

	var DraftRemovableWord = __webpack_require__(373);
	var EditorState = __webpack_require__(293);

	var moveSelectionForward = __webpack_require__(376);
	var removeTextWithStrategy = __webpack_require__(371);

	/**
	                                                                   * Delete the word that is right of the cursor, as well as any spaces or
	                                                                   * punctuation before the word.
	                                                                   */
	function keyCommandDeleteWord(editorState) {
	  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {
	    var selection = strategyState.getSelection();
	    var offset = selection.getStartOffset();
	    var key = selection.getStartKey();
	    var content = strategyState.getCurrentContent();
	    var text = content.getBlockForKey(key).getText().slice(offset);
	    var toRemove = DraftRemovableWord.getForward(text);

	    // If there are no words in front of the cursor, remove the newline.
	    return moveSelectionForward(strategyState, toRemove.length || 1);
	  }, 'forward');

	  if (afterRemoval === editorState.getCurrentContent()) {
	    return editorState;
	  }

	  return EditorState.push(editorState, afterRemoval, 'remove-range');
	}

	module.exports = keyCommandDeleteWord;

/***/ },
/* 376 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule moveSelectionForward
	 * 
	 */

	'use strict';

	/**
	               * Given a collapsed selection, move the focus `maxDistance` forward within
	               * the selected block. If the selection will go beyond the end of the block,
	               * move focus to the start of the next block, but no further.
	               *
	               * This function is not Unicode-aware, so surrogate pairs will be treated
	               * as having length 2.
	               */
	function moveSelectionForward(editorState, maxDistance) {
	  var selection = editorState.getSelection();
	  var key = selection.getStartKey();
	  var offset = selection.getStartOffset();
	  var content = editorState.getCurrentContent();

	  var focusKey = key;
	  var focusOffset;

	  var block = content.getBlockForKey(key);

	  if (maxDistance > block.getText().length - offset) {
	    focusKey = content.getKeyAfter(key);
	    focusOffset = 0;
	  } else {
	    focusOffset = offset + maxDistance;
	  }

	  return selection.merge({ focusKey: focusKey, focusOffset: focusOffset });
	}

	module.exports = moveSelectionForward;

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandInsertNewline
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(273);
	var EditorState = __webpack_require__(293);

	function keyCommandInsertNewline(editorState) {
	  var contentState = DraftModifier.splitBlock(editorState.getCurrentContent(), editorState.getSelection());
	  return EditorState.push(editorState, contentState, 'split-block');
	}

	module.exports = keyCommandInsertNewline;

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandPlainBackspace
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(293);
	var UnicodeUtils = __webpack_require__(367);

	var moveSelectionBackward = __webpack_require__(370);
	var removeTextWithStrategy = __webpack_require__(371);

	/**
	                                                                   * Remove the selected range. If the cursor is collapsed, remove the preceding
	                                                                   * character. This operation is Unicode-aware, so removing a single character
	                                                                   * will remove a surrogate pair properly as well.
	                                                                   */
	function keyCommandPlainBackspace(editorState) {
	  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {
	    var selection = strategyState.getSelection();
	    var content = strategyState.getCurrentContent();
	    var key = selection.getAnchorKey();
	    var offset = selection.getAnchorOffset();
	    var charBehind = content.getBlockForKey(key).getText()[offset - 1];
	    return moveSelectionBackward(strategyState, charBehind ? UnicodeUtils.getUTF16Length(charBehind, 0) : 1);
	  }, 'backward');

	  if (afterRemoval === editorState.getCurrentContent()) {
	    return editorState;
	  }

	  var selection = editorState.getSelection();
	  return EditorState.push(editorState, afterRemoval.set('selectionBefore', selection), selection.isCollapsed() ? 'backspace-character' : 'remove-range');
	}

	module.exports = keyCommandPlainBackspace;

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandPlainDelete
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(293);
	var UnicodeUtils = __webpack_require__(367);

	var moveSelectionForward = __webpack_require__(376);
	var removeTextWithStrategy = __webpack_require__(371);

	/**
	                                                                   * Remove the selected range. If the cursor is collapsed, remove the following
	                                                                   * character. This operation is Unicode-aware, so removing a single character
	                                                                   * will remove a surrogate pair properly as well.
	                                                                   */
	function keyCommandPlainDelete(editorState) {
	  var afterRemoval = removeTextWithStrategy(editorState, function (strategyState) {
	    var selection = strategyState.getSelection();
	    var content = strategyState.getCurrentContent();
	    var key = selection.getAnchorKey();
	    var offset = selection.getAnchorOffset();
	    var charAhead = content.getBlockForKey(key).getText()[offset];
	    return moveSelectionForward(strategyState, charAhead ? UnicodeUtils.getUTF16Length(charAhead, 0) : 1);
	  }, 'forward');

	  if (afterRemoval === editorState.getCurrentContent()) {
	    return editorState;
	  }

	  var selection = editorState.getSelection();

	  return EditorState.push(editorState, afterRemoval.set('selectionBefore', selection), selection.isCollapsed() ? 'delete-character' : 'remove-range');
	}

	module.exports = keyCommandPlainDelete;

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandMoveSelectionToEndOfBlock
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(293);

	/**
	                                             * See comment for `moveSelectionToStartOfBlock`.
	                                             */
	function keyCommandMoveSelectionToEndOfBlock(editorState) {
	  var selection = editorState.getSelection();
	  var endKey = selection.getEndKey();
	  var content = editorState.getCurrentContent();
	  var textLength = content.getBlockForKey(endKey).getLength();
	  return EditorState.set(editorState, {
	    selection: selection.merge({
	      anchorKey: endKey,
	      anchorOffset: textLength,
	      focusKey: endKey,
	      focusOffset: textLength,
	      isBackward: false }),

	    forceSelection: true });

	}

	module.exports = keyCommandMoveSelectionToEndOfBlock;

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandMoveSelectionToStartOfBlock
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(293);

	/**
	                                             * Collapse selection at the start of the first selected block. This is used
	                                             * for Firefox versions that attempt to navigate forward/backward instead of
	                                             * moving the cursor. Other browsers are able to move the cursor natively.
	                                             */
	function keyCommandMoveSelectionToStartOfBlock(editorState) {
	  var selection = editorState.getSelection();
	  var startKey = selection.getStartKey();
	  return EditorState.set(editorState, {
	    selection: selection.merge({
	      anchorKey: startKey,
	      anchorOffset: 0,
	      focusKey: startKey,
	      focusOffset: 0,
	      isBackward: false }),

	    forceSelection: true });

	}

	module.exports = keyCommandMoveSelectionToStartOfBlock;

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandTransposeCharacters
	 * 
	 */

	'use strict';

	var DraftModifier = __webpack_require__(273);
	var EditorState = __webpack_require__(293);

	var getContentStateFragment = __webpack_require__(284);

	/**
	                                                                     * Transpose the characters on either side of a collapsed cursor, or
	                                                                     * if the cursor is at the end of the block, transpose the last two
	                                                                     * characters.
	                                                                     */
	function keyCommandTransposeCharacters(editorState) {
	  var selection = editorState.getSelection();
	  if (!selection.isCollapsed()) {
	    return editorState;
	  }

	  var offset = selection.getAnchorOffset();
	  if (offset === 0) {
	    return editorState;
	  }

	  var blockKey = selection.getAnchorKey();
	  var content = editorState.getCurrentContent();
	  var block = content.getBlockForKey(blockKey);
	  var length = block.getLength();

	  // Nothing to transpose if there aren't two characters.
	  if (length <= 1) {
	    return editorState;
	  }

	  var removalRange;
	  var finalSelection;

	  if (offset === length) {
	    // The cursor is at the end of the block. Swap the last two characters.
	    removalRange = selection.set('anchorOffset', offset - 1);
	    finalSelection = selection;
	  } else {
	    removalRange = selection.set('focusOffset', offset + 1);
	    finalSelection = removalRange.set('anchorOffset', offset + 1);
	  }

	  // Extract the character to move as a fragment. This preserves its
	  // styling and entity, if any.
	  var movedFragment = getContentStateFragment(content, removalRange);
	  var afterRemoval = DraftModifier.removeRange(content, removalRange, 'backward');

	  // After the removal, the insertion target is one character back.
	  var selectionAfter = afterRemoval.getSelectionAfter();
	  var targetOffset = selectionAfter.getAnchorOffset() - 1;
	  var targetRange = selectionAfter.merge({
	    anchorOffset: targetOffset,
	    focusOffset: targetOffset });


	  var afterInsert = DraftModifier.replaceWithFragment(afterRemoval, targetRange, movedFragment);

	  var newEditorState = EditorState.push(editorState, afterInsert, 'insert-fragment');

	  return EditorState.acceptSelection(newEditorState, finalSelection);
	}

	module.exports = keyCommandTransposeCharacters;

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyCommandUndo
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(293);

	function keyCommandUndo(e, editorState, updateFn) {
	  var undoneState = EditorState.undo(editorState);

	  // If the last change to occur was a spellcheck change, allow the undo
	  // event to fall through to the browser. This allows the browser to record
	  // the unwanted change, which should soon lead it to learn not to suggest
	  // the correction again.
	  if (editorState.getLastChangeType() === 'spellcheck-change') {
	    var nativelyRenderedContent = undoneState.getCurrentContent();
	    updateFn(EditorState.set(undoneState, { nativelyRenderedContent: nativelyRenderedContent }));
	    return;
	  }

	  // Otheriwse, manage the undo behavior manually.
	  e.preventDefault();
	  if (!editorState.getNativelyRenderedContent()) {
	    updateFn(undoneState);
	    return;
	  }

	  // Trigger a re-render with the current content state to ensure that the
	  // component tree has up-to-date props for comparison.
	  updateFn(EditorState.set(editorState, { nativelyRenderedContent: null }));

	  // Wait to ensure that the re-render has occurred before performing
	  // the undo action.
	  setTimeout(function () {
	    updateFn(undoneState);
	  }, 0);
	}

	module.exports = keyCommandUndo;

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnPaste
	 * 
	 */

	'use strict';

	var BlockMapBuilder = __webpack_require__(268);
	var CharacterMetadata = __webpack_require__(270);
	var DataTransfer = __webpack_require__(343);
	var DraftModifier = __webpack_require__(273);
	var DraftPasteProcessor = __webpack_require__(385);
	var EditorState = __webpack_require__(293);

	var getEntityKeyForSelection = __webpack_require__(311);
	var getTextContentFromFiles = __webpack_require__(348);
	var splitTextIntoTextBlocks = __webpack_require__(389);

	var isEventHandled = __webpack_require__(350);

	/**
	                                                   * Paste content.
	                                                   */
	function editOnPaste(e) {
	  var _this = this;

	  e.preventDefault();
	  var data = new DataTransfer(e.clipboardData);

	  // Get files, unless this is likely to be a string the user wants inline.
	  if (!data.isRichText()) {
	    var files = data.getFiles();
	    var defaultFileText = data.getText();
	    if (files.length > 0) {
	      // Allow customized paste handling for images, etc. Otherwise, fall
	      // through to insert text contents into the editor.
	      if (this.props.handlePastedFiles && isEventHandled(this.props.handlePastedFiles(files))) {
	        return;
	      }

	      getTextContentFromFiles(files, function ( /*string*/fileText) {
	        fileText = fileText || defaultFileText;
	        if (!fileText) {
	          return;
	        }

	        var editorState = _this.props.editorState;

	        var blocks = splitTextIntoTextBlocks(fileText);
	        var character = CharacterMetadata.create({
	          style: editorState.getCurrentInlineStyle(),
	          entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()) });


	        var text = DraftPasteProcessor.processText(blocks, character);
	        var fragment = BlockMapBuilder.createFromArray(text);

	        var withInsertedText = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);

	        _this.update(EditorState.push(editorState, withInsertedText, 'insert-fragment'));
	      });

	      return;
	    }
	  }

	  var textBlocks = [];
	  var text = data.getText();
	  var html = data.getHTML();

	  if (this.props.handlePastedText && isEventHandled(this.props.handlePastedText(text, html))) {
	    return;
	  }

	  if (text) {
	    textBlocks = splitTextIntoTextBlocks(text);
	  }

	  if (!this.props.stripPastedStyles) {
	    // If the text from the paste event is rich content that matches what we
	    // already have on the internal clipboard, assume that we should just use
	    // the clipboard fragment for the paste. This will allow us to preserve
	    // styling and entities, if any are present. Note that newlines are
	    // stripped during comparison -- this is because copy/paste within the
	    // editor in Firefox and IE will not include empty lines. The resulting
	    // paste will preserve the newlines correctly.
	    var internalClipboard = this.getClipboard();
	    if (data.isRichText() && internalClipboard) {
	      if (
	      // If the editorKey is present in the pasted HTML, it should be safe to
	      // assume this is an internal paste.
	      html.indexOf(this.getEditorKey()) !== -1 ||
	      // The copy may have been made within a single block, in which case the
	      // editor key won't be part of the paste. In this case, just check
	      // whether the pasted text matches the internal clipboard.
	      textBlocks.length === 1 && internalClipboard.size === 1 && internalClipboard.first().getText() === text) {
	        this.update(insertFragment(this.props.editorState, internalClipboard));
	        return;
	      }
	    } else if (internalClipboard && data.types.includes('com.apple.webarchive') && !data.types.includes('text/html') && areTextBlocksAndClipboardEqual(textBlocks, internalClipboard)) {
	      // Safari does not properly store text/html in some cases.
	      // Use the internalClipboard if present and equal to what is on
	      // the clipboard. See https://bugs.webkit.org/show_bug.cgi?id=19893.
	      this.update(insertFragment(this.props.editorState, internalClipboard));
	      return;
	    }

	    // If there is html paste data, try to parse that.
	    if (html) {
	      var htmlFragment = DraftPasteProcessor.processHTML(html, this.props.blockRenderMap);
	      if (htmlFragment) {
	        var htmlMap = BlockMapBuilder.createFromArray(htmlFragment);
	        this.update(insertFragment(this.props.editorState, htmlMap));
	        return;
	      }
	    }

	    // Otherwise, create a new fragment from our pasted text. Also
	    // empty the internal clipboard, since it's no longer valid.
	    this.setClipboard(null);
	  }

	  if (textBlocks) {
	    var editorState = this.props.editorState;

	    var character = CharacterMetadata.create({
	      style: editorState.getCurrentInlineStyle(),
	      entity: getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()) });


	    var textFragment = DraftPasteProcessor.processText(textBlocks, character);

	    var textMap = BlockMapBuilder.createFromArray(textFragment);
	    this.update(insertFragment(this.props.editorState, textMap));
	  }
	}

	function insertFragment(editorState, fragment) {
	  var newContent = DraftModifier.replaceWithFragment(editorState.getCurrentContent(), editorState.getSelection(), fragment);
	  return EditorState.push(editorState, newContent, 'insert-fragment');
	}

	function areTextBlocksAndClipboardEqual(textBlocks, blockMap) {
	  return textBlocks.length === blockMap.size && blockMap.valueSeq().every(function (block, ii) {
	    return block.getText() === textBlocks[ii];
	  });
	}

	module.exports = editOnPaste;

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftPasteProcessor
	 * @typechecks
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(270);
	var ContentBlock = __webpack_require__(271);
	var Immutable = __webpack_require__(269);

	var convertFromHTMLtoContentBlocks = __webpack_require__(386);
	var generateRandomKey = __webpack_require__(285);
	var getSafeBodyFromHTML = __webpack_require__(388);
	var sanitizeDraftText = __webpack_require__(298);

	var List = Immutable.List;
	var Repeat = Immutable.Repeat;


	var DraftPasteProcessor = {
	  processHTML: function processHTML(html, blockRenderMap) {
	    return convertFromHTMLtoContentBlocks(html, getSafeBodyFromHTML, blockRenderMap);
	  },
	  processText: function processText(textBlocks, character) {
	    return textBlocks.map(function (textLine) {
	      textLine = sanitizeDraftText(textLine);
	      return new ContentBlock({
	        key: generateRandomKey(),
	        type: 'unstyled',
	        text: textLine,
	        characterList: List(Repeat(character, textLine.length)) });

	    });
	  } };


	module.exports = DraftPasteProcessor;

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule convertFromHTMLToContentBlocks
	 * @typechecks
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(270);
	var ContentBlock = __webpack_require__(271);
	var DefaultDraftBlockRenderMap = __webpack_require__(305);
	var DraftEntity = __webpack_require__(278);
	var Immutable = __webpack_require__(269);
	var URI = __webpack_require__(387);

	var generateRandomKey = __webpack_require__(285);
	var getSafeBodyFromHTML = __webpack_require__(388);
	var invariant = __webpack_require__(281);
	var nullthrows = __webpack_require__(303);
	var sanitizeDraftText = __webpack_require__(298);

	var List = Immutable.List;
	var OrderedSet = Immutable.OrderedSet;


	var NBSP = '&nbsp;';
	var SPACE = ' ';

	// Arbitrary max indent
	var MAX_DEPTH = 4;

	// used for replacing characters in HTML
	var REGEX_CR = new RegExp('\r', 'g');
	var REGEX_LF = new RegExp('\n', 'g');
	var REGEX_NBSP = new RegExp(NBSP, 'g');
	var REGEX_CARRIAGE = new RegExp('&#13;?', 'g');
	var REGEX_ZWS = new RegExp('&#8203;?', 'g');

	// https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight
	var boldValues = ['bold', 'bolder', '500', '600', '700', '800', '900'];
	var notBoldValues = ['light', 'lighter', '100', '200', '300', '400'];

	// Block tag flow is different because LIs do not have
	// a deterministic style ;_;
	var inlineTags = {
	  b: 'BOLD',
	  code: 'CODE',
	  del: 'STRIKETHROUGH',
	  em: 'ITALIC',
	  i: 'ITALIC',
	  s: 'STRIKETHROUGH',
	  strike: 'STRIKETHROUGH',
	  strong: 'BOLD',
	  u: 'UNDERLINE' };


	var anchorAttr = ['className', 'href', 'rel', 'target', 'title'];

	var lastBlock;

	function getEmptyChunk() {
	  return {
	    text: '',
	    inlines: [],
	    entities: [],
	    blocks: [] };

	}

	function getWhitespaceChunk(inEntity) {
	  var entities = new Array(1);
	  if (inEntity) {
	    entities[0] = inEntity;
	  }
	  return {
	    text: SPACE,
	    inlines: [OrderedSet()],
	    entities: entities,
	    blocks: [] };

	}

	function getSoftNewlineChunk() {
	  return {
	    text: '\n',
	    inlines: [OrderedSet()],
	    entities: new Array(1),
	    blocks: [] };

	}

	function getBlockDividerChunk(block, depth) {
	  return {
	    text: '\r',
	    inlines: [OrderedSet()],
	    entities: new Array(1),
	    blocks: [{
	      type: block,
	      depth: Math.max(0, Math.min(MAX_DEPTH, depth)) }] };


	}

	function getListBlockType(tag, lastList) {
	  if (tag === 'li') {
	    return lastList === 'ol' ? 'ordered-list-item' : 'unordered-list-item';
	  }
	  return null;
	}

	function getBlockMapSupportedTags(blockRenderMap) {
	  var unstyledElement = blockRenderMap.get('unstyled').element;
	  return blockRenderMap.map(function (config) {
	    return config.element;
	  }).valueSeq().toSet().filter(function (tag) {
	    return tag && tag !== unstyledElement;
	  }).toArray().sort();
	}

	// custom element conversions
	function getMultiMatchedType(tag, lastList, multiMatchExtractor) {
	  for (var ii = 0; ii < multiMatchExtractor.length; ii++) {
	    var matchType = multiMatchExtractor[ii](tag, lastList);
	    if (matchType) {
	      return matchType;
	    }
	  }
	  return null;
	}

	function getBlockTypeForTag(tag, lastList, blockRenderMap) {
	  var matchedTypes = blockRenderMap.filter(function (config) {
	    return config.element === tag || config.wrapper === tag;
	  }).keySeq().toSet().toArray().sort();

	  // if we dont have any matched type, return unstyled
	  // if we have one matched type return it
	  // if we have multi matched types use the multi-match function to gather type
	  switch (matchedTypes.length) {
	    case 0:
	      return 'unstyled';
	    case 1:
	      return matchedTypes[0];
	    default:
	      return getMultiMatchedType(tag, lastList, [getListBlockType]) || 'unstyled';}

	}

	function processInlineTag(tag, node, currentStyle) {
	  var styleToCheck = inlineTags[tag];
	  if (styleToCheck) {
	    currentStyle = currentStyle.add(styleToCheck).toOrderedSet();
	  } else if (node instanceof HTMLElement) {
	    (function () {
	      var htmlElement = node;
	      currentStyle = currentStyle.withMutations(function (style) {
	        var fontWeight = htmlElement.style.fontWeight;
	        var fontStyle = htmlElement.style.fontStyle;
	        var textDecoration = htmlElement.style.textDecoration;

	        if (boldValues.indexOf(fontWeight) >= 0) {
	          style.add('BOLD');
	        } else if (notBoldValues.indexOf(fontWeight) >= 0) {
	          style.remove('BOLD');
	        }

	        if (fontStyle === 'italic') {
	          style.add('ITALIC');
	        } else if (fontStyle === 'normal') {
	          style.remove('ITALIC');
	        }

	        if (textDecoration === 'underline') {
	          style.add('UNDERLINE');
	        }
	        if (textDecoration === 'line-through') {
	          style.add('STRIKETHROUGH');
	        }
	        if (textDecoration === 'none') {
	          style.remove('UNDERLINE');
	          style.remove('STRIKETHROUGH');
	        }
	      }).toOrderedSet();
	    })();
	  }
	  return currentStyle;
	}

	function joinChunks(A, B) {
	  // Sometimes two blocks will touch in the DOM and we need to strip the
	  // extra delimiter to preserve niceness.
	  var lastInA = A.text.slice(-1);
	  var firstInB = B.text.slice(0, 1);

	  if (lastInA === '\r' && firstInB === '\r') {
	    A.text = A.text.slice(0, -1);
	    A.inlines.pop();
	    A.entities.pop();
	    A.blocks.pop();
	  }

	  // Kill whitespace after blocks
	  if (lastInA === '\r') {
	    if (B.text === SPACE || B.text === '\n') {
	      return A;
	    } else if (firstInB === SPACE || firstInB === '\n') {
	      B.text = B.text.slice(1);
	      B.inlines.shift();
	      B.entities.shift();
	    }
	  }

	  return {
	    text: A.text + B.text,
	    inlines: A.inlines.concat(B.inlines),
	    entities: A.entities.concat(B.entities),
	    blocks: A.blocks.concat(B.blocks) };

	}

	/**
	   * Check to see if we have anything like <p> <blockquote> <h1>... to create
	   * block tags from. If we do, we can use those and ignore <div> tags. If we
	   * don't, we can treat <div> tags as meaningful (unstyled) blocks.
	   */
	function containsSemanticBlockMarkup(html, blockTags) {
	  return blockTags.some(function (tag) {
	    return html.indexOf('<' + tag) !== -1;
	  });
	}

	function hasValidLinkText(link) {
	  !(link instanceof HTMLAnchorElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Link must be an HTMLAnchorElement.') : invariant(false) : void 0;
	  var protocol = link.protocol;
	  return protocol === 'http:' || protocol === 'https:' || protocol === 'mailto:';
	}

	function genFragment(node, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, inEntity) {
	  var nodeName = node.nodeName.toLowerCase();
	  var newBlock = false;
	  var nextBlockType = 'unstyled';
	  var lastLastBlock = lastBlock;

	  // Base Case
	  if (nodeName === '#text') {
	    var text = node.textContent;
	    if (text.trim() === '' && inBlock !== 'pre') {
	      return getWhitespaceChunk(inEntity);
	    }
	    if (inBlock !== 'pre') {
	      // Can't use empty string because MSWord
	      text = text.replace(REGEX_LF, SPACE);
	    }

	    // save the last block so we can use it later
	    lastBlock = nodeName;

	    return {
	      text: text,
	      inlines: Array(text.length).fill(inlineStyle),
	      entities: Array(text.length).fill(inEntity),
	      blocks: [] };

	  }

	  // save the last block so we can use it later
	  lastBlock = nodeName;

	  // BR tags
	  if (nodeName === 'br') {
	    if (lastLastBlock === 'br' && (!inBlock || getBlockTypeForTag(inBlock, lastList, blockRenderMap) === 'unstyled')) {
	      return getBlockDividerChunk('unstyled', depth);
	    }
	    return getSoftNewlineChunk();
	  }

	  var chunk = getEmptyChunk();
	  var newChunk = null;

	  // Inline tags
	  inlineStyle = processInlineTag(nodeName, node, inlineStyle);

	  // Handle lists
	  if (nodeName === 'ul' || nodeName === 'ol') {
	    if (lastList) {
	      depth += 1;
	    }
	    lastList = nodeName;
	  }

	  // Block Tags
	  if (!inBlock && blockTags.indexOf(nodeName) !== -1) {
	    chunk = getBlockDividerChunk(getBlockTypeForTag(nodeName, lastList, blockRenderMap), depth);
	    inBlock = nodeName;
	    newBlock = true;
	  } else if (lastList && inBlock === 'li' && nodeName === 'li') {
	    chunk = getBlockDividerChunk(getBlockTypeForTag(nodeName, lastList, blockRenderMap), depth);
	    inBlock = nodeName;
	    newBlock = true;
	    nextBlockType = lastList === 'ul' ? 'unordered-list-item' : 'ordered-list-item';
	  }

	  // Recurse through children
	  var child = node.firstChild;
	  if (child != null) {
	    nodeName = child.nodeName.toLowerCase();
	  }

	  var entityId = null;

	  while (child) {
	    if (child instanceof HTMLAnchorElement && child.href && hasValidLinkText(child)) {
	      (function () {
	        var anchor = child;
	        var entityConfig = {};

	        anchorAttr.forEach(function (attr) {
	          var anchorAttribute = anchor.getAttribute(attr);
	          if (anchorAttribute) {
	            entityConfig[attr] = anchorAttribute;
	          }
	        });

	        entityConfig.url = new URI(anchor.href).toString();

	        entityId = DraftEntity.create('LINK', 'MUTABLE', entityConfig);
	      })();
	    } else {
	      entityId = undefined;
	    }

	    newChunk = genFragment(child, inlineStyle, lastList, inBlock, blockTags, depth, blockRenderMap, entityId || inEntity);

	    chunk = joinChunks(chunk, newChunk);
	    var sibling = child.nextSibling;

	    // Put in a newline to break up blocks inside blocks
	    if (sibling && blockTags.indexOf(nodeName) >= 0 && inBlock) {
	      chunk = joinChunks(chunk, getSoftNewlineChunk());
	    }
	    if (sibling) {
	      nodeName = sibling.nodeName.toLowerCase();
	    }
	    child = sibling;
	  }

	  if (newBlock) {
	    chunk = joinChunks(chunk, getBlockDividerChunk(nextBlockType, depth));
	  }

	  return chunk;
	}

	function getChunkForHTML(html, DOMBuilder, blockRenderMap) {
	  html = html.trim().replace(REGEX_CR, '').replace(REGEX_NBSP, SPACE).replace(REGEX_CARRIAGE, '').replace(REGEX_ZWS, '');

	  var supportedBlockTags = getBlockMapSupportedTags(blockRenderMap);

	  var safeBody = DOMBuilder(html);
	  if (!safeBody) {
	    return null;
	  }
	  lastBlock = null;

	  // Sometimes we aren't dealing with content that contains nice semantic
	  // tags. In this case, use divs to separate everything out into paragraphs
	  // and hope for the best.
	  var workingBlocks = containsSemanticBlockMarkup(html, supportedBlockTags) ? supportedBlockTags : ['div'];

	  // Start with -1 block depth to offset the fact that we are passing in a fake
	  // UL block to start with.
	  var chunk = genFragment(safeBody, OrderedSet(), 'ul', null, workingBlocks, -1, blockRenderMap);

	  // join with previous block to prevent weirdness on paste
	  if (chunk.text.indexOf('\r') === 0) {
	    chunk = {
	      text: chunk.text.slice(1),
	      inlines: chunk.inlines.slice(1),
	      entities: chunk.entities.slice(1),
	      blocks: chunk.blocks };

	  }

	  // Kill block delimiter at the end
	  if (chunk.text.slice(-1) === '\r') {
	    chunk.text = chunk.text.slice(0, -1);
	    chunk.inlines = chunk.inlines.slice(0, -1);
	    chunk.entities = chunk.entities.slice(0, -1);
	    chunk.blocks.pop();
	  }

	  // If we saw no block tags, put an unstyled one in
	  if (chunk.blocks.length === 0) {
	    chunk.blocks.push({ type: 'unstyled', depth: 0 });
	  }

	  // Sometimes we start with text that isn't in a block, which is then
	  // followed by blocks. Need to fix up the blocks to add in
	  // an unstyled block for this content
	  if (chunk.text.split('\r').length === chunk.blocks.length + 1) {
	    chunk.blocks.unshift({ type: 'unstyled', depth: 0 });
	  }

	  return chunk;
	}

	function convertFromHTMLtoContentBlocks(html) {
	  var DOMBuilder = arguments.length <= 1 || arguments[1] === undefined ? getSafeBodyFromHTML : arguments[1];
	  var blockRenderMap = arguments.length <= 2 || arguments[2] === undefined ? DefaultDraftBlockRenderMap : arguments[2];

	  // Be ABSOLUTELY SURE that the dom builder you pass here won't execute
	  // arbitrary code in whatever environment you're running this in. For an
	  // example of how we try to do this in-browser, see getSafeBodyFromHTML.

	  var chunk = getChunkForHTML(html, DOMBuilder, blockRenderMap);

	  if (chunk == null) {
	    return null;
	  }
	  var start = 0;
	  return chunk.text.split('\r').map(function (textBlock, ii) {
	    // Make absolutely certain that our text is acceptable.
	    textBlock = sanitizeDraftText(textBlock);
	    var end = start + textBlock.length;
	    var inlines = nullthrows(chunk).inlines.slice(start, end);
	    var entities = nullthrows(chunk).entities.slice(start, end);
	    var characterList = List(inlines.map(function (style, ii) {
	      var data = { style: style, entity: null };
	      if (entities[ii]) {
	        data.entity = entities[ii];
	      }
	      return CharacterMetadata.create(data);
	    }));
	    start = end + 1;

	    return new ContentBlock({
	      key: generateRandomKey(),
	      type: nullthrows(chunk).blocks[ii].type,
	      depth: nullthrows(chunk).blocks[ii].depth,
	      text: textBlock,
	      characterList: characterList });

	  });
	}

	module.exports = convertFromHTMLtoContentBlocks;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 387 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	var URI = function () {
	  function URI(uri) {
	    _classCallCheck(this, URI);

	    this._uri = uri;
	  }

	  URI.prototype.toString = function toString() {
	    return this._uri;
	  };

	  return URI;
	}();

	module.exports = URI;

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getSafeBodyFromHTML
	 * 
	 */

	'use strict';

	var UserAgent = __webpack_require__(317);

	var isOldIE = UserAgent.isBrowser('IE <= 9');

	// Provides a dom node that will not execute scripts
	// https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation.createHTMLDocument
	// https://developer.mozilla.org/en-US/Add-ons/Code_snippets/HTML_to_DOM

	function getSafeBodyFromHTML(html) {
	  var doc;
	  var root = null;
	  // Provides a safe context
	  if (!isOldIE && document.implementation && document.implementation.createHTMLDocument) {
	    doc = document.implementation.createHTMLDocument('foo');
	    doc.documentElement.innerHTML = html;
	    root = doc.getElementsByTagName('body')[0];
	  }
	  return root;
	}

	module.exports = getSafeBodyFromHTML;

/***/ },
/* 389 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule splitTextIntoTextBlocks
	 * 
	 */

	'use strict';

	var NEWLINE_REGEX = /\r\n?|\n/g;

	function splitTextIntoTextBlocks(text) {
	  return text.split(NEWLINE_REGEX);
	}

	module.exports = splitTextIntoTextBlocks;

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule editOnSelect
	 * 
	 */

	'use strict';

	var EditorState = __webpack_require__(293);
	var ReactDOM = __webpack_require__(158);

	var getDraftEditorSelection = __webpack_require__(391);

	function editOnSelect() {
	  if (this._blockSelectEvents) {
	    return;
	  }

	  var editorState = this.props.editorState;
	  var documentSelection = getDraftEditorSelection(editorState, ReactDOM.findDOMNode(this.refs.editorContainer).firstChild);
	  var updatedSelectionState = documentSelection.selectionState;

	  if (updatedSelectionState !== editorState.getSelection()) {
	    if (documentSelection.needsRecovery) {
	      editorState = EditorState.forceSelection(editorState, updatedSelectionState);
	    } else {
	      editorState = EditorState.acceptSelection(editorState, updatedSelectionState);
	    }
	    this.update(editorState);
	  }
	}

	module.exports = editOnSelect;

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getDraftEditorSelection
	 * @typechecks
	 * 
	 */

	'use strict';

	var getDraftEditorSelectionWithNodes = __webpack_require__(369);

	/**
	                                                                                       * Convert the current selection range to an anchor/focus pair of offset keys
	                                                                                       * and values that can be interpreted by components.
	                                                                                       */
	function getDraftEditorSelection(editorState, root) {
	  var selection = global.getSelection();

	  // No active selection.
	  if (selection.rangeCount === 0) {
	    return {
	      selectionState: editorState.getSelection().set('hasFocus', false),
	      needsRecovery: false };

	  }

	  return getDraftEditorSelectionWithNodes(editorState, root, selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	}

	module.exports = getDraftEditorSelection;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftEditorPlaceholder.react
	 * @typechecks
	 * 
	 */

	'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};

	function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

	function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;}

	function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

	var React = __webpack_require__(1);

	var cx = __webpack_require__(306);

	/**
	                                  * This component is responsible for rendering placeholder text for the
	                                  * `DraftEditor` component.
	                                  *
	                                  * Override placeholder style via CSS.
	                                  */
	var DraftEditorPlaceholder = function (_React$Component) {
	  _inherits(DraftEditorPlaceholder, _React$Component);

	  function DraftEditorPlaceholder() {
	    _classCallCheck(this, DraftEditorPlaceholder);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DraftEditorPlaceholder.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	    return this.props.text !== nextProps.text || this.props.editorState.getSelection().getHasFocus() !== nextProps.editorState.getSelection().getHasFocus();
	  };

	  DraftEditorPlaceholder.prototype.render = function render() {
	    var hasFocus = this.props.editorState.getSelection().getHasFocus();

	    var className = cx({
	      'public/DraftEditorPlaceholder/root': true,
	      'public/DraftEditorPlaceholder/hasFocus': hasFocus });


	    return React.createElement(
	    'div',
	    { className: className },
	    React.createElement(
	    'div',
	    {
	      className: cx('public/DraftEditorPlaceholder/inner'),
	      id: this.props.accessibilityID },
	    this.props.text));


	  };

	  return DraftEditorPlaceholder;
	}(React.Component);

	module.exports = DraftEditorPlaceholder;

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getDefaultKeyBinding
	 * @typechecks
	 * 
	 */

	'use strict';

	var KeyBindingUtil = __webpack_require__(363);
	var Keys = __webpack_require__(310);
	var UserAgent = __webpack_require__(317);

	var isOSX = UserAgent.isPlatform('Mac OS X');
	var isWindows = UserAgent.isPlatform('Windows');

	// Firefox on OSX had a bug resulting in navigation instead of cursor movement.
	// This bug was fixed in Firefox 29. Feature detection is virtually impossible
	// so we just check the version number. See #342765.
	var shouldFixFirefoxMovement = isOSX && UserAgent.isBrowser('Firefox < 29');

	var hasCommandModifier = KeyBindingUtil.hasCommandModifier;
	var isCtrlKeyCommand = KeyBindingUtil.isCtrlKeyCommand;


	function shouldRemoveWord(e) {
	  return isOSX && e.altKey || isCtrlKeyCommand(e);
	}

	/**
	   * Get the appropriate undo/redo command for a Z key command.
	   */
	function getZCommand(e) {
	  if (!hasCommandModifier(e)) {
	    return null;
	  }
	  return e.shiftKey ? 'redo' : 'undo';
	}

	function getDeleteCommand(e) {
	  // Allow default "cut" behavior for Windows on Shift + Delete.
	  if (isWindows && e.shiftKey) {
	    return null;
	  }
	  return shouldRemoveWord(e) ? 'delete-word' : 'delete';
	}

	function getBackspaceCommand(e) {
	  if (hasCommandModifier(e) && isOSX) {
	    return 'backspace-to-start-of-line';
	  }
	  return shouldRemoveWord(e) ? 'backspace-word' : 'backspace';
	}

	/**
	   * Retrieve a bound key command for the given event.
	   */
	function getDefaultKeyBinding(e) {
	  switch (e.keyCode) {
	    case 66:
	      // B
	      return hasCommandModifier(e) ? 'bold' : null;
	    case 68:
	      // D
	      return isCtrlKeyCommand(e) ? 'delete' : null;
	    case 72:
	      // H
	      return isCtrlKeyCommand(e) ? 'backspace' : null;
	    case 73:
	      // I
	      return hasCommandModifier(e) ? 'italic' : null;
	    case 74:
	      // J
	      return hasCommandModifier(e) ? 'code' : null;
	    case 75:
	      // K
	      return !isWindows && isCtrlKeyCommand(e) ? 'secondary-cut' : null;
	    case 77:
	      // M
	      return isCtrlKeyCommand(e) ? 'split-block' : null;
	    case 79:
	      // O
	      return isCtrlKeyCommand(e) ? 'split-block' : null;
	    case 84:
	      // T
	      return isOSX && isCtrlKeyCommand(e) ? 'transpose-characters' : null;
	    case 85:
	      // U
	      return hasCommandModifier(e) ? 'underline' : null;
	    case 87:
	      // W
	      return isOSX && isCtrlKeyCommand(e) ? 'backspace-word' : null;
	    case 89:
	      // Y
	      if (isCtrlKeyCommand(e)) {
	        return isWindows ? 'redo' : 'secondary-paste';
	      }
	      return null;
	    case 90:
	      // Z
	      return getZCommand(e) || null;
	    case Keys.RETURN:
	      return 'split-block';
	    case Keys.DELETE:
	      return getDeleteCommand(e);
	    case Keys.BACKSPACE:
	      return getBackspaceCommand(e);
	    // LEFT/RIGHT handlers serve as a workaround for a Firefox bug.
	    case Keys.LEFT:
	      return shouldFixFirefoxMovement && hasCommandModifier(e) ? 'move-selection-to-start-of-block' : null;
	    case Keys.RIGHT:
	      return shouldFixFirefoxMovement && hasCommandModifier(e) ? 'move-selection-to-end-of-block' : null;
	    default:
	      return null;}

	}

	module.exports = getDefaultKeyBinding;

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule RichTextEditorUtil
	 * @typechecks
	 * 
	 */

	'use strict';

	var DraftEntity = __webpack_require__(278);
	var DraftModifier = __webpack_require__(273);
	var EditorState = __webpack_require__(293);
	var SelectionState = __webpack_require__(297);

	var adjustBlockDepthForContentState = __webpack_require__(395);
	var nullthrows = __webpack_require__(303);

	var RichTextEditorUtil = {
	  currentBlockContainsLink: function currentBlockContainsLink(editorState) {
	    var selection = editorState.getSelection();
	    return editorState.getCurrentContent().getBlockForKey(selection.getAnchorKey()).getCharacterList().slice(selection.getStartOffset(), selection.getEndOffset()).some(function (v) {
	      var entity = v.getEntity();
	      return !!entity && DraftEntity.get(entity).getType() === 'LINK';
	    });
	  },

	  getCurrentBlockType: function getCurrentBlockType(editorState) {
	    var selection = editorState.getSelection();
	    return editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();
	  },

	  getDataObjectForLinkURL: function getDataObjectForLinkURL(uri) {
	    return { url: uri.toString() };
	  },

	  handleKeyCommand: function handleKeyCommand(editorState, command) {
	    switch (command) {
	      case 'bold':
	        return RichTextEditorUtil.toggleInlineStyle(editorState, 'BOLD');
	      case 'italic':
	        return RichTextEditorUtil.toggleInlineStyle(editorState, 'ITALIC');
	      case 'underline':
	        return RichTextEditorUtil.toggleInlineStyle(editorState, 'UNDERLINE');
	      case 'code':
	        return RichTextEditorUtil.toggleCode(editorState);
	      case 'backspace':
	      case 'backspace-word':
	      case 'backspace-to-start-of-line':
	        return RichTextEditorUtil.onBackspace(editorState);
	      case 'delete':
	      case 'delete-word':
	      case 'delete-to-end-of-block':
	        return RichTextEditorUtil.onDelete(editorState);
	      default:
	        return null;}

	  },

	  insertSoftNewline: function insertSoftNewline(editorState) {
	    var contentState = DraftModifier.insertText(editorState.getCurrentContent(), editorState.getSelection(), '\n', editorState.getCurrentInlineStyle(), null);

	    var newEditorState = EditorState.push(editorState, contentState, 'insert-characters');

	    return EditorState.forceSelection(newEditorState, contentState.getSelectionAfter());
	  },

	  /**
	      * For collapsed selections at the start of styled blocks, backspace should
	      * just remove the existing style.
	      */
	  onBackspace: function onBackspace(editorState) {
	    var selection = editorState.getSelection();
	    if (!selection.isCollapsed() || selection.getAnchorOffset() || selection.getFocusOffset()) {
	      return null;
	    }

	    // First, try to remove a preceding atomic block.
	    var content = editorState.getCurrentContent();
	    var startKey = selection.getStartKey();
	    var blockBefore = content.getBlockBefore(startKey);

	    if (blockBefore && blockBefore.getType() === 'atomic') {
	      var atomicBlockTarget = selection.merge({
	        anchorKey: blockBefore.getKey(),
	        anchorOffset: 0 });

	      var asCurrentStyle = DraftModifier.setBlockType(content, atomicBlockTarget, content.getBlockForKey(startKey).getType());
	      var withoutAtomicBlock = DraftModifier.removeRange(asCurrentStyle, atomicBlockTarget, 'backward');
	      if (withoutAtomicBlock !== content) {
	        return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');
	      }
	    }

	    // If that doesn't succeed, try to remove the current block style.
	    var withoutBlockStyle = RichTextEditorUtil.tryToRemoveBlockStyle(editorState);

	    if (withoutBlockStyle) {
	      return EditorState.push(editorState, withoutBlockStyle, 'change-block-type');
	    }

	    return null;
	  },

	  onDelete: function onDelete(editorState) {
	    var selection = editorState.getSelection();
	    if (!selection.isCollapsed()) {
	      return null;
	    }

	    var content = editorState.getCurrentContent();
	    var startKey = selection.getStartKey();
	    var block = content.getBlockForKey(startKey);
	    var length = block.getLength();

	    // The cursor is somewhere within the text. Behave normally.
	    if (selection.getStartOffset() < length) {
	      return null;
	    }

	    var blockAfter = content.getBlockAfter(startKey);

	    if (!blockAfter || blockAfter.getType() !== 'atomic') {
	      return null;
	    }

	    var atomicBlockTarget = selection.merge({
	      focusKey: blockAfter.getKey(),
	      focusOffset: blockAfter.getLength() });


	    var withoutAtomicBlock = DraftModifier.removeRange(content, atomicBlockTarget, 'forward');

	    if (withoutAtomicBlock !== content) {
	      return EditorState.push(editorState, withoutAtomicBlock, 'remove-range');
	    }

	    return null;
	  },

	  onTab: function onTab(event, editorState, maxDepth) {
	    var selection = editorState.getSelection();
	    var key = selection.getAnchorKey();
	    if (key !== selection.getFocusKey()) {
	      return editorState;
	    }

	    var content = editorState.getCurrentContent();
	    var block = content.getBlockForKey(key);
	    var type = block.getType();
	    if (type !== 'unordered-list-item' && type !== 'ordered-list-item') {
	      return editorState;
	    }

	    event.preventDefault();

	    // Only allow indenting one level beyond the block above, and only if
	    // the block above is a list item as well.
	    var blockAbove = content.getBlockBefore(key);
	    if (!blockAbove) {
	      return editorState;
	    }

	    var typeAbove = blockAbove.getType();
	    if (typeAbove !== 'unordered-list-item' && typeAbove !== 'ordered-list-item') {
	      return editorState;
	    }

	    var depth = block.getDepth();
	    if (!event.shiftKey && depth === maxDepth) {
	      return editorState;
	    }

	    maxDepth = Math.min(blockAbove.getDepth() + 1, maxDepth);

	    var withAdjustment = adjustBlockDepthForContentState(content, selection, event.shiftKey ? -1 : 1, maxDepth);

	    return EditorState.push(editorState, withAdjustment, 'adjust-depth');
	  },

	  toggleBlockType: function toggleBlockType(editorState, blockType) {
	    var selection = editorState.getSelection();
	    var startKey = selection.getStartKey();
	    var endKey = selection.getEndKey();
	    var content = editorState.getCurrentContent();
	    var target = selection;

	    // Triple-click can lead to a selection that includes offset 0 of the
	    // following block. The `SelectionState` for this case is accurate, but
	    // we should avoid toggling block type for the trailing block because it
	    // is a confusing interaction.
	    if (startKey !== endKey && selection.getEndOffset() === 0) {
	      var blockBefore = nullthrows(content.getBlockBefore(endKey));
	      endKey = blockBefore.getKey();
	      target = target.merge({
	        anchorKey: startKey,
	        anchorOffset: selection.getStartOffset(),
	        focusKey: endKey,
	        focusOffset: blockBefore.getLength(),
	        isBackward: false });

	    }

	    var hasAtomicBlock = content.getBlockMap().skipWhile(function (_, k) {
	      return k !== startKey;
	    }).reverse().skipWhile(function (_, k) {
	      return k !== endKey;
	    }).some(function (v) {
	      return v.getType() === 'atomic';
	    });

	    if (hasAtomicBlock) {
	      return editorState;
	    }

	    var typeToSet = content.getBlockForKey(startKey).getType() === blockType ? 'unstyled' : blockType;

	    return EditorState.push(editorState, DraftModifier.setBlockType(content, target, typeToSet), 'change-block-type');
	  },

	  toggleCode: function toggleCode(editorState) {
	    var selection = editorState.getSelection();
	    var anchorKey = selection.getAnchorKey();
	    var focusKey = selection.getFocusKey();

	    if (selection.isCollapsed() || anchorKey !== focusKey) {
	      return RichTextEditorUtil.toggleBlockType(editorState, 'code-block');
	    }

	    return RichTextEditorUtil.toggleInlineStyle(editorState, 'CODE');
	  },

	  /**
	      * Toggle the specified inline style for the selection. If the
	      * user's selection is collapsed, apply or remove the style for the
	      * internal state. If it is not collapsed, apply the change directly
	      * to the document state.
	      */
	  toggleInlineStyle: function toggleInlineStyle(editorState, inlineStyle) {
	    var selection = editorState.getSelection();
	    var currentStyle = editorState.getCurrentInlineStyle();

	    // If the selection is collapsed, toggle the specified style on or off and
	    // set the result as the new inline style override. This will then be
	    // used as the inline style for the next character to be inserted.
	    if (selection.isCollapsed()) {
	      return EditorState.setInlineStyleOverride(editorState, currentStyle.has(inlineStyle) ? currentStyle.remove(inlineStyle) : currentStyle.add(inlineStyle));
	    }

	    // If characters are selected, immediately apply or remove the
	    // inline style on the document state itself.
	    var content = editorState.getCurrentContent();
	    var newContent;

	    // If the style is already present for the selection range, remove it.
	    // Otherwise, apply it.
	    if (currentStyle.has(inlineStyle)) {
	      newContent = DraftModifier.removeInlineStyle(content, selection, inlineStyle);
	    } else {
	      newContent = DraftModifier.applyInlineStyle(content, selection, inlineStyle);
	    }

	    return EditorState.push(editorState, newContent, 'change-inline-style');
	  },

	  toggleLink: function toggleLink(editorState, targetSelection, entityKey) {
	    var withoutLink = DraftModifier.applyEntity(editorState.getCurrentContent(), targetSelection, entityKey);

	    return EditorState.push(editorState, withoutLink, 'apply-entity');
	  },

	  /**
	      * When a collapsed cursor is at the start of an empty styled block, allow
	      * certain key commands (newline, backspace) to simply change the
	      * style of the block instead of the default behavior.
	      */
	  tryToRemoveBlockStyle: function tryToRemoveBlockStyle(editorState) {
	    var selection = editorState.getSelection();
	    var offset = selection.getAnchorOffset();
	    if (selection.isCollapsed() && offset === 0) {
	      var key = selection.getAnchorKey();
	      var content = editorState.getCurrentContent();
	      var block = content.getBlockForKey(key);
	      if (block.getLength() > 0) {
	        return null;
	      }

	      var type = block.getType();
	      var blockBefore = content.getBlockBefore(key);
	      if (type === 'code-block' && blockBefore && blockBefore.getType() === 'code-block') {
	        return null;
	      }

	      if (type !== 'unstyled') {
	        return DraftModifier.setBlockType(content, selection, 'unstyled');
	      }
	    }
	    return null;
	  } };


	module.exports = RichTextEditorUtil;

/***/ },
/* 395 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adjustBlockDepthForContentState
	 * @typechecks
	 * 
	 */

	'use strict';

	function adjustBlockDepthForContentState(contentState, selectionState, adjustment, maxDepth) {
	  var startKey = selectionState.getStartKey();
	  var endKey = selectionState.getEndKey();
	  var blockMap = contentState.getBlockMap();
	  var blocks = blockMap.toSeq().skipUntil(function (_, k) {
	    return k === startKey;
	  }).takeUntil(function (_, k) {
	    return k === endKey;
	  }).concat([[endKey, blockMap.get(endKey)]]).map(function (block) {
	    var depth = block.getDepth() + adjustment;
	    depth = Math.max(0, Math.min(depth, maxDepth));
	    return block.set('depth', depth);
	  });

	  blockMap = blockMap.merge(blocks);

	  return contentState.merge({
	    blockMap: blockMap,
	    selectionBefore: selectionState,
	    selectionAfter: selectionState });

	}

	module.exports = adjustBlockDepthForContentState;

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule convertFromDraftStateToRaw
	 * 
	 */

	'use strict';

	var DraftEntity = __webpack_require__(278);
	var DraftStringKey = __webpack_require__(397);

	var encodeEntityRanges = __webpack_require__(398);
	var encodeInlineStyleRanges = __webpack_require__(399);

	function convertFromDraftStateToRaw(contentState) {
	  var entityStorageKey = 0;
	  var entityStorageMap = {};
	  var rawBlocks = [];

	  contentState.getBlockMap().forEach(function (block, blockKey) {
	    block.findEntityRanges(function (character) {
	      return character.getEntity() !== null;
	    }, function (start) {
	      // Stringify to maintain order of otherwise numeric keys.
	      var stringifiedEntityKey = DraftStringKey.stringify(block.getEntityAt(start));
	      if (!entityStorageMap.hasOwnProperty(stringifiedEntityKey)) {
	        entityStorageMap[stringifiedEntityKey] = '' + entityStorageKey++;
	      }
	    });

	    rawBlocks.push({
	      key: blockKey,
	      text: block.getText(),
	      type: block.getType(),
	      depth: block.getDepth(),
	      inlineStyleRanges: encodeInlineStyleRanges(block),
	      entityRanges: encodeEntityRanges(block, entityStorageMap),
	      data: block.getData().toObject() });

	  });

	  // Flip storage map so that our storage keys map to global
	  // DraftEntity keys.
	  var entityKeys = Object.keys(entityStorageMap);
	  var flippedStorageMap = {};
	  entityKeys.forEach(function (key, jj) {
	    var entity = DraftEntity.get(DraftStringKey.unstringify(key));
	    flippedStorageMap[jj] = {
	      type: entity.getType(),
	      mutability: entity.getMutability(),
	      data: entity.getData() };

	  });

	  return {
	    entityMap: flippedStorageMap,
	    blocks: rawBlocks };

	}

	module.exports = convertFromDraftStateToRaw;

/***/ },
/* 397 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DraftStringKey
	 * @typechecks
	 * 
	 */

	'use strict';

	var DraftStringKey = {
	  stringify: function stringify(key) {
	    return '_' + String(key);
	  },

	  unstringify: function unstringify(key) {
	    return key.slice(1);
	  } };


	module.exports = DraftStringKey;

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule encodeEntityRanges
	 * @typechecks
	 * 
	 */

	'use strict';

	var DraftStringKey = __webpack_require__(397);
	var UnicodeUtils = __webpack_require__(367);

	var strlen = UnicodeUtils.strlen;

	/**
	                                   * Convert to UTF-8 character counts for storage.
	                                   */

	function encodeEntityRanges(block, storageMap) {
	  var encoded = [];
	  block.findEntityRanges(function (character) {
	    return !!character.getEntity();
	  }, function ( /*number*/start, /*number*/end) {
	    var text = block.getText();
	    var key = block.getEntityAt(start);
	    encoded.push({
	      offset: strlen(text.slice(0, start)),
	      length: strlen(text.slice(start, end)),
	      // Encode the key as a number for range storage.
	      key: Number(storageMap[DraftStringKey.stringify(key)]) });

	  });
	  return encoded;
	}

	module.exports = encodeEntityRanges;

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule encodeInlineStyleRanges
	 * 
	 */

	'use strict';

	var UnicodeUtils = __webpack_require__(367);

	var findRangesImmutable = __webpack_require__(272);

	var areEqual = function areEqual(a, b) {
	  return a === b;
	};
	var isTruthy = function isTruthy(a) {
	  return !!a;
	};
	var EMPTY_ARRAY = [];

	/**
	                       * Helper function for getting encoded styles for each inline style. Convert
	                       * to UTF-8 character counts for storage.
	                       */
	function getEncodedInlinesForType(block, styleList, styleToEncode) {
	  var ranges = [];

	  // Obtain an array with ranges for only the specified style.
	  var filteredInlines = styleList.map(function (style) {
	    return style.has(styleToEncode);
	  }).toList();

	  findRangesImmutable(filteredInlines, areEqual,
	  // We only want to keep ranges with nonzero style values.
	  isTruthy, function (start, end) {
	    var text = block.getText();
	    ranges.push({
	      offset: UnicodeUtils.strlen(text.slice(0, start)),
	      length: UnicodeUtils.strlen(text.slice(start, end)),
	      style: styleToEncode });

	  });

	  return ranges;
	}

	/*
	   * Retrieve the encoded arrays of inline styles, with each individual style
	   * treated separately.
	   */
	function encodeInlineStyleRanges(block) {
	  var styleList = block.getCharacterList().map(function (c) {
	    return c.getStyle();
	  }).toList();
	  var ranges = styleList.flatten().toSet().map(function (style) {
	    return getEncodedInlinesForType(block, styleList, style);
	  });

	  return Array.prototype.concat.apply(EMPTY_ARRAY, ranges.toJS());
	}

	module.exports = encodeInlineStyleRanges;

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule convertFromRawToDraftState
	 * 
	 */

	'use strict';

	var _assign = __webpack_require__(279);

	var _extends = _assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

	var ContentBlock = __webpack_require__(271);
	var ContentState = __webpack_require__(296);
	var DraftEntity = __webpack_require__(278);
	var Immutable = __webpack_require__(269);

	var createCharacterList = __webpack_require__(401);
	var decodeEntityRanges = __webpack_require__(402);
	var decodeInlineStyleRanges = __webpack_require__(403);
	var generateRandomKey = __webpack_require__(285);

	var Map = Immutable.Map;


	function convertFromRawToDraftState(rawState) {
	  var blocks = rawState.blocks;
	  var entityMap = rawState.entityMap;


	  var fromStorageToLocal = {};
	  Object.keys(entityMap).forEach(function (storageKey) {
	    var encodedEntity = entityMap[storageKey];
	    var type = encodedEntity.type;
	    var mutability = encodedEntity.mutability;
	    var data = encodedEntity.data;

	    var newKey = DraftEntity.create(type, mutability, data || {});
	    fromStorageToLocal[storageKey] = newKey;
	  });

	  var contentBlocks = blocks.map(function (block) {
	    var key = block.key;
	    var type = block.type;
	    var text = block.text;
	    var depth = block.depth;
	    var inlineStyleRanges = block.inlineStyleRanges;
	    var entityRanges = block.entityRanges;
	    var data = block.data;

	    key = key || generateRandomKey();
	    depth = depth || 0;
	    inlineStyleRanges = inlineStyleRanges || [];
	    entityRanges = entityRanges || [];
	    data = Map(data);

	    var inlineStyles = decodeInlineStyleRanges(text, inlineStyleRanges);

	    // Translate entity range keys to the DraftEntity map.
	    var filteredEntityRanges = entityRanges.filter(function (range) {
	      return fromStorageToLocal.hasOwnProperty(range.key);
	    }).map(function (range) {
	      return _extends({}, range, { key: fromStorageToLocal[range.key] });
	    });

	    var entities = decodeEntityRanges(text, filteredEntityRanges);
	    var characterList = createCharacterList(inlineStyles, entities);

	    return new ContentBlock({ key: key, type: type, text: text, depth: depth, characterList: characterList, data: data });
	  });

	  return ContentState.createFromBlockArray(contentBlocks);
	}

	module.exports = convertFromRawToDraftState;

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createCharacterList
	 * @typechecks
	 * 
	 */

	'use strict';

	var CharacterMetadata = __webpack_require__(270);
	var Immutable = __webpack_require__(269);

	var List = Immutable.List;


	function createCharacterList(inlineStyles, entities) {
	  var characterArray = inlineStyles.map(function (style, ii) {
	    var entity = entities[ii];
	    return CharacterMetadata.create({ style: style, entity: entity });
	  });
	  return List(characterArray);
	}

	module.exports = createCharacterList;

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule decodeEntityRanges
	 * @typechecks
	 * 
	 */

	'use strict';

	var UnicodeUtils = __webpack_require__(367);

	var substr = UnicodeUtils.substr;

	/**
	                                   * Convert to native JavaScript string lengths to determine ranges.
	                                   */

	function decodeEntityRanges(text, ranges) {
	  var entities = Array(text.length).fill(null);
	  if (ranges) {
	    ranges.forEach(function (range) {
	      // Using Unicode-enabled substrings converted to JavaScript lengths,
	      // fill the output array with entity keys.
	      var start = substr(text, 0, range.offset).length;
	      var end = start + substr(text, range.offset, range.length).length;
	      for (var ii = start; ii < end; ii++) {
	        entities[ii] = range.key;
	      }
	    });
	  }
	  return entities;
	}

	module.exports = decodeEntityRanges;

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule decodeInlineStyleRanges
	 * @typechecks
	 * 
	 */

	'use strict';

	var UnicodeUtils = __webpack_require__(367);

	var _require = __webpack_require__(269);

	var OrderedSet = _require.OrderedSet;
	var substr = UnicodeUtils.substr;


	var EMPTY_SET = OrderedSet();

	/**
	                               * Convert to native JavaScript string lengths to determine ranges.
	                               */
	function decodeInlineStyleRanges(text, ranges) {
	  var styles = Array(text.length).fill(EMPTY_SET);
	  if (ranges) {
	    ranges.forEach(function ( /*object*/range) {
	      var cursor = substr(text, 0, range.offset).length;
	      var end = cursor + substr(text, range.offset, range.length).length;
	      while (cursor < end) {
	        styles[cursor] = styles[cursor].add(range.style);
	        cursor++;
	      }
	    });
	  }
	  return styles;
	}

	module.exports = decodeInlineStyleRanges;

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getVisibleSelectionRect
	 * @typechecks
	 * 
	 */

	'use strict';

	var getRangeBoundingClientRect = __webpack_require__(405);

	/**
	                                                                           * Return the bounding ClientRect for the visible DOM selection, if any.
	                                                                           * In cases where there are no selected ranges or the bounding rect is
	                                                                           * temporarily invalid, return null.
	                                                                           */
	function getVisibleSelectionRect(global) {
	  var selection = global.getSelection();
	  if (!selection.rangeCount) {
	    return null;
	  }

	  var range = selection.getRangeAt(0);
	  var boundingRect = getRangeBoundingClientRect(range);
	  var top = boundingRect.top;
	  var right = boundingRect.right;
	  var bottom = boundingRect.bottom;
	  var left = boundingRect.left;

	  // When a re-render leads to a node being removed, the DOM selection will
	  // temporarily be placed on an ancestor node, which leads to an invalid
	  // bounding rect. Discard this state.

	  if (top === 0 && right === 0 && bottom === 0 && left === 0) {
	    return null;
	  }

	  return boundingRect;
	}

	module.exports = getVisibleSelectionRect;

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getRangeBoundingClientRect
	 * @typechecks
	 * 
	 */

	'use strict';

	var getRangeClientRects = __webpack_require__(368);

	/**
	                                                             * Like range.getBoundingClientRect() but normalizes for browser bugs.
	                                                             */
	function getRangeBoundingClientRect(range) {
	  // "Return a DOMRect object describing the smallest rectangle that includes
	  // the first rectangle in list and all of the remaining rectangles of which
	  // the height or width is not zero."
	  // http://www.w3.org/TR/cssom-view/#dom-range-getboundingclientrect
	  var rects = getRangeClientRects(range);
	  var top = 0;
	  var right = 0;
	  var bottom = 0;
	  var left = 0;

	  if (rects.length) {
	    var _rects$ = rects[0];
	    top = _rects$.top;
	    right = _rects$.right;
	    bottom = _rects$.bottom;
	    left = _rects$.left;

	    for (var ii = 1; ii < rects.length; ii++) {
	      var rect = rects[ii];
	      if (rect.height !== 0 || rect.width !== 0) {
	        top = Math.min(top, rect.top);
	        right = Math.max(right, rect.right);
	        bottom = Math.max(bottom, rect.bottom);
	        left = Math.min(left, rect.left);
	      }
	    }
	  }

	  return {
	    top: top,
	    right: right,
	    bottom: bottom,
	    left: left,
	    width: right - left,
	    height: bottom - top };

	}

	module.exports = getRangeBoundingClientRect;

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _stateToHTML = __webpack_require__(407);

	Object.defineProperty(exports, 'stateToHTML', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_stateToHTML).default;
	  }
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _slicedToArray = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;_e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }return _arr;
	  }return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if (Symbol.iterator in Object(arr)) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	var _DEFAULT_STYLE_MAP, _ENTITY_ATTR_MAP, _DATA_TO_ATTR;

	exports.default = stateToHTML;

	var _combineOrderedStyles3 = __webpack_require__(408);

	var _combineOrderedStyles4 = _interopRequireDefault(_combineOrderedStyles3);

	var _normalizeAttributes = __webpack_require__(409);

	var _normalizeAttributes2 = _interopRequireDefault(_normalizeAttributes);

	var _styleToCSS = __webpack_require__(410);

	var _styleToCSS2 = _interopRequireDefault(_styleToCSS);

	var _draftJs = __webpack_require__(266);

	var _draftJsUtils = __webpack_require__(411);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	  } else {
	    obj[key] = value;
	  }return obj;
	}

	var BOLD = _draftJsUtils.INLINE_STYLE.BOLD;
	var CODE = _draftJsUtils.INLINE_STYLE.CODE;
	var ITALIC = _draftJsUtils.INLINE_STYLE.ITALIC;
	var STRIKETHROUGH = _draftJsUtils.INLINE_STYLE.STRIKETHROUGH;
	var UNDERLINE = _draftJsUtils.INLINE_STYLE.UNDERLINE;

	var INDENT = '  ';
	var BREAK = '<br>';
	var DATA_ATTRIBUTE = /^data-([a-z0-9-]+)$/;

	var DEFAULT_STYLE_MAP = (_DEFAULT_STYLE_MAP = {}, _defineProperty(_DEFAULT_STYLE_MAP, BOLD, { element: 'strong' }), _defineProperty(_DEFAULT_STYLE_MAP, CODE, { element: 'code' }), _defineProperty(_DEFAULT_STYLE_MAP, ITALIC, { element: 'em' }), _defineProperty(_DEFAULT_STYLE_MAP, STRIKETHROUGH, { element: 'del' }), _defineProperty(_DEFAULT_STYLE_MAP, UNDERLINE, { element: 'ins' }), _DEFAULT_STYLE_MAP);

	// Order: inner-most style to outer-most.
	// Examle: <em><strong>foo</strong></em>
	var DEFAULT_STYLE_ORDER = [BOLD, ITALIC, UNDERLINE, STRIKETHROUGH, CODE];

	// Map entity data to element attributes.
	var ENTITY_ATTR_MAP = (_ENTITY_ATTR_MAP = {}, _defineProperty(_ENTITY_ATTR_MAP, _draftJsUtils.ENTITY_TYPE.LINK, { url: 'href', rel: 'rel', target: 'target', title: 'title', className: 'class' }), _defineProperty(_ENTITY_ATTR_MAP, _draftJsUtils.ENTITY_TYPE.IMAGE, { src: 'src', height: 'height', width: 'width', alt: 'alt', className: 'class' }), _ENTITY_ATTR_MAP);

	// Map entity data to element attributes.
	var DATA_TO_ATTR = (_DATA_TO_ATTR = {}, _defineProperty(_DATA_TO_ATTR, _draftJsUtils.ENTITY_TYPE.LINK, function (entityType, entity) {
	  var attrMap = ENTITY_ATTR_MAP.hasOwnProperty(entityType) ? ENTITY_ATTR_MAP[entityType] : {};
	  var data = entity.getData();
	  var attrs = {};
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = Object.keys(data)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var dataKey = _step.value;

	      var dataValue = data[dataKey];
	      if (attrMap.hasOwnProperty(dataKey)) {
	        var attrKey = attrMap[dataKey];
	        attrs[attrKey] = dataValue;
	      } else if (DATA_ATTRIBUTE.test(dataKey)) {
	        attrs[dataKey] = dataValue;
	      }
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  return attrs;
	}), _defineProperty(_DATA_TO_ATTR, _draftJsUtils.ENTITY_TYPE.IMAGE, function (entityType, entity) {
	  var attrMap = ENTITY_ATTR_MAP.hasOwnProperty(entityType) ? ENTITY_ATTR_MAP[entityType] : {};
	  var data = entity.getData();
	  var attrs = {};
	  var _iteratorNormalCompletion2 = true;
	  var _didIteratorError2 = false;
	  var _iteratorError2 = undefined;

	  try {
	    for (var _iterator2 = Object.keys(data)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	      var dataKey = _step2.value;

	      var dataValue = data[dataKey];
	      if (attrMap.hasOwnProperty(dataKey)) {
	        var attrKey = attrMap[dataKey];
	        attrs[attrKey] = dataValue;
	      } else if (DATA_ATTRIBUTE.test(dataKey)) {
	        attrs[dataKey] = dataValue;
	      }
	    }
	  } catch (err) {
	    _didIteratorError2 = true;
	    _iteratorError2 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion2 && _iterator2.return) {
	        _iterator2.return();
	      }
	    } finally {
	      if (_didIteratorError2) {
	        throw _iteratorError2;
	      }
	    }
	  }

	  return attrs;
	}), _DATA_TO_ATTR);

	// The reason this returns an array is because a single block might get wrapped
	// in two tags.
	function getTags(blockType) {
	  switch (blockType) {
	    case _draftJsUtils.BLOCK_TYPE.HEADER_ONE:
	      return ['h1'];
	    case _draftJsUtils.BLOCK_TYPE.HEADER_TWO:
	      return ['h2'];
	    case _draftJsUtils.BLOCK_TYPE.HEADER_THREE:
	      return ['h3'];
	    case _draftJsUtils.BLOCK_TYPE.HEADER_FOUR:
	      return ['h4'];
	    case _draftJsUtils.BLOCK_TYPE.HEADER_FIVE:
	      return ['h5'];
	    case _draftJsUtils.BLOCK_TYPE.HEADER_SIX:
	      return ['h6'];
	    case _draftJsUtils.BLOCK_TYPE.UNORDERED_LIST_ITEM:
	    case _draftJsUtils.BLOCK_TYPE.ORDERED_LIST_ITEM:
	      return ['li'];
	    case _draftJsUtils.BLOCK_TYPE.BLOCKQUOTE:
	      return ['blockquote'];
	    case _draftJsUtils.BLOCK_TYPE.CODE:
	      return ['pre', 'code'];
	    case _draftJsUtils.BLOCK_TYPE.ATOMIC:
	      return ['figure'];
	    default:
	      return ['p'];
	  }
	}

	function getWrapperTag(blockType) {
	  switch (blockType) {
	    case _draftJsUtils.BLOCK_TYPE.UNORDERED_LIST_ITEM:
	      return 'ul';
	    case _draftJsUtils.BLOCK_TYPE.ORDERED_LIST_ITEM:
	      return 'ol';
	    default:
	      return null;
	  }
	}

	var MarkupGenerator = function () {
	  // These are related to state.
	  function MarkupGenerator(contentState, options) {
	    _classCallCheck(this, MarkupGenerator);

	    if (options == null) {
	      options = {};
	    }
	    this.contentState = contentState;
	    this.options = options;

	    var _combineOrderedStyles = (0, _combineOrderedStyles4.default)(options.inlineStyles, [DEFAULT_STYLE_MAP, DEFAULT_STYLE_ORDER]);

	    var _combineOrderedStyles2 = _slicedToArray(_combineOrderedStyles, 2);

	    var inlineStyles = _combineOrderedStyles2[0];
	    var styleOrder = _combineOrderedStyles2[1];

	    this.inlineStyles = inlineStyles;
	    this.styleOrder = styleOrder;
	  }
	  // These are related to user-defined options.


	  _createClass(MarkupGenerator, [{
	    key: 'generate',
	    value: function generate() {
	      this.output = [];
	      this.blocks = this.contentState.getBlocksAsArray();
	      this.totalBlocks = this.blocks.length;
	      this.currentBlock = 0;
	      this.indentLevel = 0;
	      this.wrapperTag = null;
	      while (this.currentBlock < this.totalBlocks) {
	        this.processBlock();
	      }
	      this.closeWrapperTag();
	      return this.output.join('').trim();
	    }
	  }, {
	    key: 'processBlock',
	    value: function processBlock() {
	      var blockRenderers = this.options.blockRenderers;

	      var block = this.blocks[this.currentBlock];
	      var blockType = block.getType();
	      var newWrapperTag = getWrapperTag(blockType);
	      if (this.wrapperTag !== newWrapperTag) {
	        if (this.wrapperTag) {
	          this.closeWrapperTag();
	        }
	        if (newWrapperTag) {
	          this.openWrapperTag(newWrapperTag);
	        }
	      }
	      this.indent();
	      // Allow blocks to be rendered using a custom renderer.
	      var customRenderer = blockRenderers != null && blockRenderers.hasOwnProperty(blockType) ? blockRenderers[blockType] : null;
	      var customRendererOutput = customRenderer ? customRenderer(block) : null;
	      // Renderer can return null, which will cause processing to continue as normal.
	      if (customRendererOutput != null) {
	        this.output.push(customRendererOutput);
	        this.output.push('\n');
	        this.currentBlock += 1;
	        return;
	      }
	      this.writeStartTag(block);
	      this.output.push(this.renderBlockContent(block));
	      // Look ahead and see if we will nest list.
	      var nextBlock = this.getNextBlock();
	      if (canHaveDepth(blockType) && nextBlock && nextBlock.getDepth() === block.getDepth() + 1) {
	        this.output.push('\n');
	        // This is a litle hacky: temporarily stash our current wrapperTag and
	        // render child list(s).
	        var thisWrapperTag = this.wrapperTag;
	        this.wrapperTag = null;
	        this.indentLevel += 1;
	        this.currentBlock += 1;
	        this.processBlocksAtDepth(nextBlock.getDepth());
	        this.wrapperTag = thisWrapperTag;
	        this.indentLevel -= 1;
	        this.indent();
	      } else {
	        this.currentBlock += 1;
	      }
	      this.writeEndTag(block);
	    }
	  }, {
	    key: 'processBlocksAtDepth',
	    value: function processBlocksAtDepth(depth) {
	      var block = this.blocks[this.currentBlock];
	      while (block && block.getDepth() === depth) {
	        this.processBlock();
	        block = this.blocks[this.currentBlock];
	      }
	      this.closeWrapperTag();
	    }
	  }, {
	    key: 'getNextBlock',
	    value: function getNextBlock() {
	      return this.blocks[this.currentBlock + 1];
	    }
	  }, {
	    key: 'writeStartTag',
	    value: function writeStartTag(block) {
	      var tags = getTags(block.getType());

	      var attrString = void 0;
	      if (this.options.blockStyleFn) {
	        var _ref = this.options.blockStyleFn(block) || {};

	        var _attributes = _ref.attributes;
	        var _style = _ref.style;
	        // Normalize `className` -> `class`, etc.

	        _attributes = (0, _normalizeAttributes2.default)(_attributes);
	        if (_style != null) {
	          var styleAttr = (0, _styleToCSS2.default)(_style);
	          _attributes = _attributes == null ? { style: styleAttr } : _extends({}, _attributes, { style: styleAttr });
	        }
	        attrString = stringifyAttrs(_attributes);
	      } else {
	        attrString = '';
	      }

	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;

	      try {
	        for (var _iterator3 = tags[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var tag = _step3.value;

	          this.output.push('<' + tag + attrString + '>');
	        }
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'writeEndTag',
	    value: function writeEndTag(block) {
	      var tags = getTags(block.getType());
	      if (tags.length === 1) {
	        this.output.push('</' + tags[0] + '>\n');
	      } else {
	        var output = [];
	        var _iteratorNormalCompletion4 = true;
	        var _didIteratorError4 = false;
	        var _iteratorError4 = undefined;

	        try {
	          for (var _iterator4 = tags[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	            var tag = _step4.value;

	            output.unshift('</' + tag + '>');
	          }
	        } catch (err) {
	          _didIteratorError4 = true;
	          _iteratorError4 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion4 && _iterator4.return) {
	              _iterator4.return();
	            }
	          } finally {
	            if (_didIteratorError4) {
	              throw _iteratorError4;
	            }
	          }
	        }

	        this.output.push(output.join('') + '\n');
	      }
	    }
	  }, {
	    key: 'openWrapperTag',
	    value: function openWrapperTag(wrapperTag) {
	      this.wrapperTag = wrapperTag;
	      this.indent();
	      this.output.push('<' + wrapperTag + '>\n');
	      this.indentLevel += 1;
	    }
	  }, {
	    key: 'closeWrapperTag',
	    value: function closeWrapperTag() {
	      var wrapperTag = this.wrapperTag;

	      if (wrapperTag) {
	        this.indentLevel -= 1;
	        this.indent();
	        this.output.push('</' + wrapperTag + '>\n');
	        this.wrapperTag = null;
	      }
	    }
	  }, {
	    key: 'indent',
	    value: function indent() {
	      this.output.push(INDENT.repeat(this.indentLevel));
	    }
	  }, {
	    key: 'renderBlockContent',
	    value: function renderBlockContent(block) {
	      var _this = this;

	      var blockType = block.getType();
	      var text = block.getText();
	      if (text === '') {
	        // Prevent element collapse if completely empty.
	        return BREAK;
	      }
	      text = this.preserveWhitespace(text);
	      var charMetaList = block.getCharacterList();
	      var entityPieces = (0, _draftJsUtils.getEntityRanges)(text, charMetaList);
	      return entityPieces.map(function (_ref2) {
	        var _ref3 = _slicedToArray(_ref2, 2);

	        var entityKey = _ref3[0];
	        var stylePieces = _ref3[1];

	        var content = stylePieces.map(function (_ref4) {
	          var _ref5 = _slicedToArray(_ref4, 2);

	          var text = _ref5[0];
	          var styleSet = _ref5[1];

	          var content = encodeContent(text);
	          var _iteratorNormalCompletion5 = true;
	          var _didIteratorError5 = false;
	          var _iteratorError5 = undefined;

	          try {
	            for (var _iterator5 = _this.styleOrder[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	              var _styleName = _step5.value;

	              // If our block type is CODE then don't wrap inline code elements.
	              if (_styleName === CODE && blockType === _draftJsUtils.BLOCK_TYPE.CODE) {
	                continue;
	              }
	              if (styleSet.has(_styleName)) {
	                var _inlineStyles$_styleN = _this.inlineStyles[_styleName];
	                var _element = _inlineStyles$_styleN.element;
	                var _attributes2 = _inlineStyles$_styleN.attributes;
	                var _style2 = _inlineStyles$_styleN.style;

	                if (_element == null) {
	                  _element = 'span';
	                }
	                // Normalize `className` -> `class`, etc.
	                _attributes2 = (0, _normalizeAttributes2.default)(_attributes2);
	                if (_style2 != null) {
	                  var styleAttr = (0, _styleToCSS2.default)(_style2);
	                  _attributes2 = _attributes2 == null ? { style: styleAttr } : _extends({}, _attributes2, { style: styleAttr });
	                }
	                var attrString = stringifyAttrs(_attributes2);
	                content = '<' + _element + attrString + '>' + content + '</' + _element + '>';
	              }
	            }
	          } catch (err) {
	            _didIteratorError5 = true;
	            _iteratorError5 = err;
	          } finally {
	            try {
	              if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                _iterator5.return();
	              }
	            } finally {
	              if (_didIteratorError5) {
	                throw _iteratorError5;
	              }
	            }
	          }

	          return content;
	        }).join('');
	        var entity = entityKey ? _draftJs.Entity.get(entityKey) : null;
	        // Note: The `toUpperCase` below is for compatability with some libraries that use lower-case for image blocks.
	        var entityType = entity == null ? null : entity.getType().toUpperCase();
	        if (entityType != null && entityType === _draftJsUtils.ENTITY_TYPE.LINK) {
	          var attrs = DATA_TO_ATTR.hasOwnProperty(entityType) ? DATA_TO_ATTR[entityType](entityType, entity) : null;
	          var attrString = stringifyAttrs(attrs);
	          return '<a' + attrString + '>' + content + '</a>';
	        } else if (entityType != null && entityType === _draftJsUtils.ENTITY_TYPE.IMAGE) {
	          var _attrs = DATA_TO_ATTR.hasOwnProperty(entityType) ? DATA_TO_ATTR[entityType](entityType, entity) : null;
	          var _attrString = stringifyAttrs(_attrs);
	          return '<img' + _attrString + '/>';
	        } else {
	          return content;
	        }
	      }).join('');
	    }
	  }, {
	    key: 'preserveWhitespace',
	    value: function preserveWhitespace(text) {
	      var length = text.length;
	      // Prevent leading/trailing/consecutive whitespace collapse.
	      var newText = new Array(length);
	      for (var i = 0; i < length; i++) {
	        if (text[i] === ' ' && (i === 0 || i === length - 1 || text[i - 1] === ' ')) {
	          newText[i] = '\xA0';
	        } else {
	          newText[i] = text[i];
	        }
	      }
	      return newText.join('');
	    }
	  }]);

	  return MarkupGenerator;
	}();

	function stringifyAttrs(attrs) {
	  if (attrs == null) {
	    return '';
	  }
	  var parts = [];
	  var _iteratorNormalCompletion6 = true;
	  var _didIteratorError6 = false;
	  var _iteratorError6 = undefined;

	  try {
	    for (var _iterator6 = Object.keys(attrs)[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	      var name = _step6.value;

	      var value = attrs[name];
	      if (value != null) {
	        parts.push(' ' + name + '="' + encodeAttr(value + '') + '"');
	      }
	    }
	  } catch (err) {
	    _didIteratorError6 = true;
	    _iteratorError6 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion6 && _iterator6.return) {
	        _iterator6.return();
	      }
	    } finally {
	      if (_didIteratorError6) {
	        throw _iteratorError6;
	      }
	    }
	  }

	  return parts.join('');
	}

	function canHaveDepth(blockType) {
	  switch (blockType) {
	    case _draftJsUtils.BLOCK_TYPE.UNORDERED_LIST_ITEM:
	    case _draftJsUtils.BLOCK_TYPE.ORDERED_LIST_ITEM:
	      return true;
	    default:
	      return false;
	  }
	}

	function encodeContent(text) {
	  return text.split('&').join('&amp;').split('<').join('&lt;').split('>').join('&gt;').split('\xA0').join('&nbsp;').split('\n').join(BREAK + '\n');
	}

	function encodeAttr(text) {
	  return text.split('&').join('&amp;').split('<').join('&lt;').split('>').join('&gt;').split('"').join('&quot;');
	}

	function stateToHTML(content, options) {
	  return new MarkupGenerator(content, options).generate();
	}

/***/ },
/* 408 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};

	var _slicedToArray = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;_e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }return _arr;
	  }return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if (Symbol.iterator in Object(arr)) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();

	function _toConsumableArray(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }return arr2;
	  } else {
	    return Array.from(arr);
	  }
	}

	function combineOrderedStyles(customMap, defaults) {
	  if (customMap == null) {
	    return defaults;
	  }

	  var _defaults = _slicedToArray(defaults, 2);

	  var defaultStyleMap = _defaults[0];
	  var defaultStyleOrder = _defaults[1];

	  var styleMap = _extends({}, defaultStyleMap);
	  var styleOrder = [].concat(_toConsumableArray(defaultStyleOrder));
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = Object.keys(customMap)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var _styleName = _step.value;

	      if (defaultStyleMap.hasOwnProperty(_styleName)) {
	        var defaultStyles = defaultStyleMap[_styleName];
	        styleMap[_styleName] = _extends({}, defaultStyles, customMap[_styleName]);
	      } else {
	        styleMap[_styleName] = customMap[_styleName];
	        styleOrder.push(_styleName);
	      }
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  return [styleMap, styleOrder];
	}

	exports.default = combineOrderedStyles;

/***/ },
/* 409 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	// Lifted from: https://github.com/facebook/react/blob/master/src/renderers/dom/shared/HTMLDOMPropertyConfig.js
	var ATTR_NAME_MAP = {
	  acceptCharset: 'accept-charset',
	  className: 'class',
	  htmlFor: 'for',
	  httpEquiv: 'http-equiv'
	};

	function normalizeAttributes(attributes) {
	  if (attributes == null) {
	    return attributes;
	  }
	  var normalized = {};
	  var didNormalize = false;
	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = Object.keys(attributes)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var name = _step.value;

	      var newName = name;
	      if (ATTR_NAME_MAP.hasOwnProperty(name)) {
	        newName = ATTR_NAME_MAP[name];
	        didNormalize = true;
	      }
	      normalized[newName] = attributes[name];
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  return didNormalize ? normalized : attributes;
	}

	exports.default = normalizeAttributes;

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _CSSProperty = __webpack_require__(97);

	var VENDOR_PREFIX = /^(moz|ms|o|webkit)-/;

	var NUMERIC_STRING = /^\d+$/;
	var UPPERCASE_PATTERN = /([A-Z])/g;

	// Lifted from: https://github.com/facebook/react/blob/master/src/renderers/dom/shared/CSSPropertyOperations.js
	function processStyleName(name) {
	  return name.replace(UPPERCASE_PATTERN, '-$1').toLowerCase().replace(VENDOR_PREFIX, '-$1-');
	}

	// Lifted from: https://github.com/facebook/react/blob/master/src/renderers/dom/shared/dangerousStyleValue.js
	function processStyleValue(name, value) {
	  var isNumeric = void 0;
	  if (typeof value === 'string') {
	    isNumeric = NUMERIC_STRING.test(value);
	  } else {
	    isNumeric = true;
	    value = String(value);
	  }
	  if (!isNumeric || value === '0' || _CSSProperty.isUnitlessNumber[name] === true) {
	    return value;
	  } else {
	    return value + 'px';
	  }
	}

	function styleToCSS(styleDescr) {
	  return Object.keys(styleDescr).map(function (name) {
	    var styleValue = processStyleValue(name, styleDescr[name]);
	    var styleName = processStyleName(name);
	    return styleName + ': ' + styleValue;
	  }).join('; ');
	}

	exports.default = styleToCSS;

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Constants = __webpack_require__(412);

	Object.keys(_Constants).forEach(function (key) {
	  if (key === "default" || key === "__esModule") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _Constants[key];
	    }
	  });
	});
	Object.defineProperty(exports, 'Constants', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_Constants).default;
	  }
	});

	var _getEntityRanges = __webpack_require__(413);

	Object.defineProperty(exports, 'getEntityRanges', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getEntityRanges).default;
	  }
	});

	var _getSelectedBlocks = __webpack_require__(415);

	Object.defineProperty(exports, 'getSelectedBlocks', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_getSelectedBlocks).default;
	  }
	});

	var _selectionContainsEntity = __webpack_require__(416);

	Object.defineProperty(exports, 'selectionContainsEntity', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_selectionContainsEntity).default;
	  }
	});

	var _callModifierForSelectedBlocks = __webpack_require__(417);

	Object.defineProperty(exports, 'callModifierForSelectedBlocks', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_callModifierForSelectedBlocks).default;
	  }
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

/***/ },
/* 412 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var BLOCK_TYPE = exports.BLOCK_TYPE = {
	  // This is used to represent a normal text block (paragraph).
	  UNSTYLED: 'unstyled',
	  HEADER_ONE: 'header-one',
	  HEADER_TWO: 'header-two',
	  HEADER_THREE: 'header-three',
	  HEADER_FOUR: 'header-four',
	  HEADER_FIVE: 'header-five',
	  HEADER_SIX: 'header-six',
	  UNORDERED_LIST_ITEM: 'unordered-list-item',
	  ORDERED_LIST_ITEM: 'ordered-list-item',
	  BLOCKQUOTE: 'blockquote',
	  PULLQUOTE: 'pullquote',
	  CODE: 'code-block',
	  ATOMIC: 'atomic'
	};

	var ENTITY_TYPE = exports.ENTITY_TYPE = {
	  LINK: 'LINK',
	  IMAGE: 'IMAGE'
	};

	var INLINE_STYLE = exports.INLINE_STYLE = {
	  BOLD: 'BOLD',
	  CODE: 'CODE',
	  ITALIC: 'ITALIC',
	  STRIKETHROUGH: 'STRIKETHROUGH',
	  UNDERLINE: 'UNDERLINE'
	};

	exports.default = {
	  BLOCK_TYPE: BLOCK_TYPE,
	  ENTITY_TYPE: ENTITY_TYPE,
	  INLINE_STYLE: INLINE_STYLE
	};

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.EMPTY_SET = undefined;
	exports.default = getEntityRanges;

	var _immutable = __webpack_require__(414);

	var EMPTY_SET = exports.EMPTY_SET = new _immutable.OrderedSet();
	function getEntityRanges(text, charMetaList) {
	  var charEntity = null;
	  var prevCharEntity = null;
	  var ranges = [];
	  var rangeStart = 0;
	  for (var i = 0, len = text.length; i < len; i++) {
	    prevCharEntity = charEntity;
	    var meta = charMetaList.get(i);
	    charEntity = meta ? meta.getEntity() : null;
	    if (i > 0 && charEntity !== prevCharEntity) {
	      ranges.push([prevCharEntity, getStyleRanges(text.slice(rangeStart, i), charMetaList.slice(rangeStart, i))]);
	      rangeStart = i;
	    }
	  }
	  ranges.push([charEntity, getStyleRanges(text.slice(rangeStart), charMetaList.slice(rangeStart))]);
	  return ranges;
	}

	function getStyleRanges(text, charMetaList) {
	  var charStyle = EMPTY_SET;
	  var prevCharStyle = EMPTY_SET;
	  var ranges = [];
	  var rangeStart = 0;
	  for (var i = 0, len = text.length; i < len; i++) {
	    prevCharStyle = charStyle;
	    var meta = charMetaList.get(i);
	    charStyle = meta ? meta.getStyle() : EMPTY_SET;
	    if (i > 0 && !(0, _immutable.is)(charStyle, prevCharStyle)) {
	      ranges.push([text.slice(rangeStart, i), prevCharStyle]);
	      rangeStart = i;
	    }
	  }
	  ranges.push([text.slice(rangeStart), charStyle]);
	  return ranges;
	}

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/**
	 *  Copyright (c) 2014-2015, Facebook, Inc.
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree. An additional grant
	 *  of patent rights can be found in the PATENTS file in the same directory.
	 */

	(function(global,factory){
	( false?'undefined':_typeof(exports))==='object'&&typeof module!=='undefined'?module.exports=factory():
	 true?!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):
	global.Immutable=factory();
	})(undefined,function(){'use strict';var SLICE$0=Array.prototype.slice;

	function createClass(ctor,superClass){
	if(superClass){
	ctor.prototype=Object.create(superClass.prototype);
	}
	ctor.prototype.constructor=ctor;
	}

	function Iterable(value){
	return isIterable(value)?value:Seq(value);
	}


	createClass(KeyedIterable,Iterable);
	function KeyedIterable(value){
	return isKeyed(value)?value:KeyedSeq(value);
	}


	createClass(IndexedIterable,Iterable);
	function IndexedIterable(value){
	return isIndexed(value)?value:IndexedSeq(value);
	}


	createClass(SetIterable,Iterable);
	function SetIterable(value){
	return isIterable(value)&&!isAssociative(value)?value:SetSeq(value);
	}



	function isIterable(maybeIterable){
	return!!(maybeIterable&&maybeIterable[IS_ITERABLE_SENTINEL]);
	}

	function isKeyed(maybeKeyed){
	return!!(maybeKeyed&&maybeKeyed[IS_KEYED_SENTINEL]);
	}

	function isIndexed(maybeIndexed){
	return!!(maybeIndexed&&maybeIndexed[IS_INDEXED_SENTINEL]);
	}

	function isAssociative(maybeAssociative){
	return isKeyed(maybeAssociative)||isIndexed(maybeAssociative);
	}

	function isOrdered(maybeOrdered){
	return!!(maybeOrdered&&maybeOrdered[IS_ORDERED_SENTINEL]);
	}

	Iterable.isIterable=isIterable;
	Iterable.isKeyed=isKeyed;
	Iterable.isIndexed=isIndexed;
	Iterable.isAssociative=isAssociative;
	Iterable.isOrdered=isOrdered;

	Iterable.Keyed=KeyedIterable;
	Iterable.Indexed=IndexedIterable;
	Iterable.Set=SetIterable;


	var IS_ITERABLE_SENTINEL='@@__IMMUTABLE_ITERABLE__@@';
	var IS_KEYED_SENTINEL='@@__IMMUTABLE_KEYED__@@';
	var IS_INDEXED_SENTINEL='@@__IMMUTABLE_INDEXED__@@';
	var IS_ORDERED_SENTINEL='@@__IMMUTABLE_ORDERED__@@';

	// Used for setting prototype methods that IE8 chokes on.
	var DELETE='delete';

	// Constants describing the size of trie nodes.
	var SHIFT=5;// Resulted in best performance after ______?
	var SIZE=1<<SHIFT;
	var MASK=SIZE-1;

	// A consistent shared value representing "not set" which equals nothing other
	// than itself, and nothing that could be provided externally.
	var NOT_SET={};

	// Boolean references, Rough equivalent of `bool &`.
	var CHANGE_LENGTH={value:false};
	var DID_ALTER={value:false};

	function MakeRef(ref){
	ref.value=false;
	return ref;
	}

	function SetRef(ref){
	ref&&(ref.value=true);
	}

	// A function which returns a value representing an "owner" for transient writes
	// to tries. The return value will only ever equal itself, and will not equal
	// the return of any subsequent call of this function.
	function OwnerID(){}

	// http://jsperf.com/copy-array-inline
	function arrCopy(arr,offset){
	offset=offset||0;
	var len=Math.max(0,arr.length-offset);
	var newArr=new Array(len);
	for(var ii=0;ii<len;ii++){
	newArr[ii]=arr[ii+offset];
	}
	return newArr;
	}

	function ensureSize(iter){
	if(iter.size===undefined){
	iter.size=iter.__iterate(returnTrue);
	}
	return iter.size;
	}

	function wrapIndex(iter,index){
	// This implements "is array index" which the ECMAString spec defines as:
	//
	//     A String property name P is an array index if and only if
	//     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
	//     to 2^32−1.
	//
	// http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
	if(typeof index!=='number'){
	var uint32Index=index>>>0;// N >>> 0 is shorthand for ToUint32
	if(''+uint32Index!==index||uint32Index===4294967295){
	return NaN;
	}
	index=uint32Index;
	}
	return index<0?ensureSize(iter)+index:index;
	}

	function returnTrue(){
	return true;
	}

	function wholeSlice(begin,end,size){
	return(begin===0||size!==undefined&&begin<=-size)&&(
	end===undefined||size!==undefined&&end>=size);
	}

	function resolveBegin(begin,size){
	return resolveIndex(begin,size,0);
	}

	function resolveEnd(end,size){
	return resolveIndex(end,size,size);
	}

	function resolveIndex(index,size,defaultIndex){
	return index===undefined?
	defaultIndex:
	index<0?
	Math.max(0,size+index):
	size===undefined?
	index:
	Math.min(size,index);
	}

	/* global Symbol */

	var ITERATE_KEYS=0;
	var ITERATE_VALUES=1;
	var ITERATE_ENTRIES=2;

	var REAL_ITERATOR_SYMBOL=typeof Symbol==='function'&&Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL='@@iterator';

	var ITERATOR_SYMBOL=REAL_ITERATOR_SYMBOL||FAUX_ITERATOR_SYMBOL;


	function Iterator(next){
	this.next=next;
	}

	Iterator.prototype.toString=function(){
	return'[Iterator]';
	};


	Iterator.KEYS=ITERATE_KEYS;
	Iterator.VALUES=ITERATE_VALUES;
	Iterator.ENTRIES=ITERATE_ENTRIES;

	Iterator.prototype.inspect=
	Iterator.prototype.toSource=function(){return this.toString();};
	Iterator.prototype[ITERATOR_SYMBOL]=function(){
	return this;
	};


	function iteratorValue(type,k,v,iteratorResult){
	var value=type===0?k:type===1?v:[k,v];
	iteratorResult?iteratorResult.value=value:iteratorResult={
	value:value,done:false};

	return iteratorResult;
	}

	function iteratorDone(){
	return{value:undefined,done:true};
	}

	function hasIterator(maybeIterable){
	return!!getIteratorFn(maybeIterable);
	}

	function isIterator(maybeIterator){
	return maybeIterator&&typeof maybeIterator.next==='function';
	}

	function getIterator(iterable){
	var iteratorFn=getIteratorFn(iterable);
	return iteratorFn&&iteratorFn.call(iterable);
	}

	function getIteratorFn(iterable){
	var iteratorFn=iterable&&(
	REAL_ITERATOR_SYMBOL&&iterable[REAL_ITERATOR_SYMBOL]||
	iterable[FAUX_ITERATOR_SYMBOL]);

	if(typeof iteratorFn==='function'){
	return iteratorFn;
	}
	}

	function isArrayLike(value){
	return value&&typeof value.length==='number';
	}

	createClass(Seq,Iterable);
	function Seq(value){
	return value===null||value===undefined?emptySequence():
	isIterable(value)?value.toSeq():seqFromValue(value);
	}

	Seq.of=function()/*...values*/{
	return Seq(arguments);
	};

	Seq.prototype.toSeq=function(){
	return this;
	};

	Seq.prototype.toString=function(){
	return this.__toString('Seq {','}');
	};

	Seq.prototype.cacheResult=function(){
	if(!this._cache&&this.__iterateUncached){
	this._cache=this.entrySeq().toArray();
	this.size=this._cache.length;
	}
	return this;
	};

	// abstract __iterateUncached(fn, reverse)

	Seq.prototype.__iterate=function(fn,reverse){
	return seqIterate(this,fn,reverse,true);
	};

	// abstract __iteratorUncached(type, reverse)

	Seq.prototype.__iterator=function(type,reverse){
	return seqIterator(this,type,reverse,true);
	};



	createClass(KeyedSeq,Seq);
	function KeyedSeq(value){
	return value===null||value===undefined?
	emptySequence().toKeyedSeq():
	isIterable(value)?
	isKeyed(value)?value.toSeq():value.fromEntrySeq():
	keyedSeqFromValue(value);
	}

	KeyedSeq.prototype.toKeyedSeq=function(){
	return this;
	};



	createClass(IndexedSeq,Seq);
	function IndexedSeq(value){
	return value===null||value===undefined?emptySequence():
	!isIterable(value)?indexedSeqFromValue(value):
	isKeyed(value)?value.entrySeq():value.toIndexedSeq();
	}

	IndexedSeq.of=function()/*...values*/{
	return IndexedSeq(arguments);
	};

	IndexedSeq.prototype.toIndexedSeq=function(){
	return this;
	};

	IndexedSeq.prototype.toString=function(){
	return this.__toString('Seq [',']');
	};

	IndexedSeq.prototype.__iterate=function(fn,reverse){
	return seqIterate(this,fn,reverse,false);
	};

	IndexedSeq.prototype.__iterator=function(type,reverse){
	return seqIterator(this,type,reverse,false);
	};



	createClass(SetSeq,Seq);
	function SetSeq(value){
	return(
	value===null||value===undefined?emptySequence():
	!isIterable(value)?indexedSeqFromValue(value):
	isKeyed(value)?value.entrySeq():value).
	toSetSeq();
	}

	SetSeq.of=function()/*...values*/{
	return SetSeq(arguments);
	};

	SetSeq.prototype.toSetSeq=function(){
	return this;
	};



	Seq.isSeq=isSeq;
	Seq.Keyed=KeyedSeq;
	Seq.Set=SetSeq;
	Seq.Indexed=IndexedSeq;

	var IS_SEQ_SENTINEL='@@__IMMUTABLE_SEQ__@@';

	Seq.prototype[IS_SEQ_SENTINEL]=true;



	createClass(ArraySeq,IndexedSeq);
	function ArraySeq(array){
	this._array=array;
	this.size=array.length;
	}

	ArraySeq.prototype.get=function(index,notSetValue){
	return this.has(index)?this._array[wrapIndex(this,index)]:notSetValue;
	};

	ArraySeq.prototype.__iterate=function(fn,reverse){
	var array=this._array;
	var maxIndex=array.length-1;
	for(var ii=0;ii<=maxIndex;ii++){
	if(fn(array[reverse?maxIndex-ii:ii],ii,this)===false){
	return ii+1;
	}
	}
	return ii;
	};

	ArraySeq.prototype.__iterator=function(type,reverse){
	var array=this._array;
	var maxIndex=array.length-1;
	var ii=0;
	return new Iterator(function()
	{return ii>maxIndex?
	iteratorDone():
	iteratorValue(type,ii,array[reverse?maxIndex-ii++:ii++]);});

	};



	createClass(ObjectSeq,KeyedSeq);
	function ObjectSeq(object){
	var keys=Object.keys(object);
	this._object=object;
	this._keys=keys;
	this.size=keys.length;
	}

	ObjectSeq.prototype.get=function(key,notSetValue){
	if(notSetValue!==undefined&&!this.has(key)){
	return notSetValue;
	}
	return this._object[key];
	};

	ObjectSeq.prototype.has=function(key){
	return this._object.hasOwnProperty(key);
	};

	ObjectSeq.prototype.__iterate=function(fn,reverse){
	var object=this._object;
	var keys=this._keys;
	var maxIndex=keys.length-1;
	for(var ii=0;ii<=maxIndex;ii++){
	var key=keys[reverse?maxIndex-ii:ii];
	if(fn(object[key],key,this)===false){
	return ii+1;
	}
	}
	return ii;
	};

	ObjectSeq.prototype.__iterator=function(type,reverse){
	var object=this._object;
	var keys=this._keys;
	var maxIndex=keys.length-1;
	var ii=0;
	return new Iterator(function(){
	var key=keys[reverse?maxIndex-ii:ii];
	return ii++>maxIndex?
	iteratorDone():
	iteratorValue(type,key,object[key]);
	});
	};

	ObjectSeq.prototype[IS_ORDERED_SENTINEL]=true;


	createClass(IterableSeq,IndexedSeq);
	function IterableSeq(iterable){
	this._iterable=iterable;
	this.size=iterable.length||iterable.size;
	}

	IterableSeq.prototype.__iterateUncached=function(fn,reverse){
	if(reverse){
	return this.cacheResult().__iterate(fn,reverse);
	}
	var iterable=this._iterable;
	var iterator=getIterator(iterable);
	var iterations=0;
	if(isIterator(iterator)){
	var step;
	while(!(step=iterator.next()).done){
	if(fn(step.value,iterations++,this)===false){
	break;
	}
	}
	}
	return iterations;
	};

	IterableSeq.prototype.__iteratorUncached=function(type,reverse){
	if(reverse){
	return this.cacheResult().__iterator(type,reverse);
	}
	var iterable=this._iterable;
	var iterator=getIterator(iterable);
	if(!isIterator(iterator)){
	return new Iterator(iteratorDone);
	}
	var iterations=0;
	return new Iterator(function(){
	var step=iterator.next();
	return step.done?step:iteratorValue(type,iterations++,step.value);
	});
	};



	createClass(IteratorSeq,IndexedSeq);
	function IteratorSeq(iterator){
	this._iterator=iterator;
	this._iteratorCache=[];
	}

	IteratorSeq.prototype.__iterateUncached=function(fn,reverse){
	if(reverse){
	return this.cacheResult().__iterate(fn,reverse);
	}
	var iterator=this._iterator;
	var cache=this._iteratorCache;
	var iterations=0;
	while(iterations<cache.length){
	if(fn(cache[iterations],iterations++,this)===false){
	return iterations;
	}
	}
	var step;
	while(!(step=iterator.next()).done){
	var val=step.value;
	cache[iterations]=val;
	if(fn(val,iterations++,this)===false){
	break;
	}
	}
	return iterations;
	};

	IteratorSeq.prototype.__iteratorUncached=function(type,reverse){
	if(reverse){
	return this.cacheResult().__iterator(type,reverse);
	}
	var iterator=this._iterator;
	var cache=this._iteratorCache;
	var iterations=0;
	return new Iterator(function(){
	if(iterations>=cache.length){
	var step=iterator.next();
	if(step.done){
	return step;
	}
	cache[iterations]=step.value;
	}
	return iteratorValue(type,iterations,cache[iterations++]);
	});
	};




	// # pragma Helper functions

	function isSeq(maybeSeq){
	return!!(maybeSeq&&maybeSeq[IS_SEQ_SENTINEL]);
	}

	var EMPTY_SEQ;

	function emptySequence(){
	return EMPTY_SEQ||(EMPTY_SEQ=new ArraySeq([]));
	}

	function keyedSeqFromValue(value){
	var seq=
	Array.isArray(value)?new ArraySeq(value).fromEntrySeq():
	isIterator(value)?new IteratorSeq(value).fromEntrySeq():
	hasIterator(value)?new IterableSeq(value).fromEntrySeq():
	(typeof value==='undefined'?'undefined':_typeof(value))==='object'?new ObjectSeq(value):
	undefined;
	if(!seq){
	throw new TypeError(
	'Expected Array or iterable object of [k, v] entries, '+
	'or keyed object: '+value);

	}
	return seq;
	}

	function indexedSeqFromValue(value){
	var seq=maybeIndexedSeqFromValue(value);
	if(!seq){
	throw new TypeError(
	'Expected Array or iterable object of values: '+value);

	}
	return seq;
	}

	function seqFromValue(value){
	var seq=maybeIndexedSeqFromValue(value)||
	(typeof value==='undefined'?'undefined':_typeof(value))==='object'&&new ObjectSeq(value);
	if(!seq){
	throw new TypeError(
	'Expected Array or iterable object of values, or keyed object: '+value);

	}
	return seq;
	}

	function maybeIndexedSeqFromValue(value){
	return(
	isArrayLike(value)?new ArraySeq(value):
	isIterator(value)?new IteratorSeq(value):
	hasIterator(value)?new IterableSeq(value):
	undefined);

	}

	function seqIterate(seq,fn,reverse,useKeys){
	var cache=seq._cache;
	if(cache){
	var maxIndex=cache.length-1;
	for(var ii=0;ii<=maxIndex;ii++){
	var entry=cache[reverse?maxIndex-ii:ii];
	if(fn(entry[1],useKeys?entry[0]:ii,seq)===false){
	return ii+1;
	}
	}
	return ii;
	}
	return seq.__iterateUncached(fn,reverse);
	}

	function seqIterator(seq,type,reverse,useKeys){
	var cache=seq._cache;
	if(cache){
	var maxIndex=cache.length-1;
	var ii=0;
	return new Iterator(function(){
	var entry=cache[reverse?maxIndex-ii:ii];
	return ii++>maxIndex?
	iteratorDone():
	iteratorValue(type,useKeys?entry[0]:ii-1,entry[1]);
	});
	}
	return seq.__iteratorUncached(type,reverse);
	}

	function fromJS(json,converter){
	return converter?
	fromJSWith(converter,json,'',{'':json}):
	fromJSDefault(json);
	}

	function fromJSWith(converter,json,key,parentJSON){
	if(Array.isArray(json)){
	return converter.call(parentJSON,key,IndexedSeq(json).map(function(v,k){return fromJSWith(converter,v,k,json);}));
	}
	if(isPlainObj(json)){
	return converter.call(parentJSON,key,KeyedSeq(json).map(function(v,k){return fromJSWith(converter,v,k,json);}));
	}
	return json;
	}

	function fromJSDefault(json){
	if(Array.isArray(json)){
	return IndexedSeq(json).map(fromJSDefault).toList();
	}
	if(isPlainObj(json)){
	return KeyedSeq(json).map(fromJSDefault).toMap();
	}
	return json;
	}

	function isPlainObj(value){
	return value&&(value.constructor===Object||value.constructor===undefined);
	}

	/**
	   * An extension of the "same-value" algorithm as [described for use by ES6 Map
	   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
	   *
	   * NaN is considered the same as NaN, however -0 and 0 are considered the same
	   * value, which is different from the algorithm described by
	   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
	   *
	   * This is extended further to allow Objects to describe the values they
	   * represent, by way of `valueOf` or `equals` (and `hashCode`).
	   *
	   * Note: because of this extension, the key equality of Immutable.Map and the
	   * value equality of Immutable.Set will differ from ES6 Map and Set.
	   *
	   * ### Defining custom values
	   *
	   * The easiest way to describe the value an object represents is by implementing
	   * `valueOf`. For example, `Date` represents a value by returning a unix
	   * timestamp for `valueOf`:
	   *
	   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
	   *     var date2 = new Date(1234567890000);
	   *     date1.valueOf(); // 1234567890000
	   *     assert( date1 !== date2 );
	   *     assert( Immutable.is( date1, date2 ) );
	   *
	   * Note: overriding `valueOf` may have other implications if you use this object
	   * where JavaScript expects a primitive, such as implicit string coercion.
	   *
	   * For more complex types, especially collections, implementing `valueOf` may
	   * not be performant. An alternative is to implement `equals` and `hashCode`.
	   *
	   * `equals` takes another object, presumably of similar type, and returns true
	   * if the it is equal. Equality is symmetrical, so the same result should be
	   * returned if this and the argument are flipped.
	   *
	   *     assert( a.equals(b) === b.equals(a) );
	   *
	   * `hashCode` returns a 32bit integer number representing the object which will
	   * be used to determine how to store the value object in a Map or Set. You must
	   * provide both or neither methods, one must not exist without the other.
	   *
	   * Also, an important relationship between these methods must be upheld: if two
	   * values are equal, they *must* return the same hashCode. If the values are not
	   * equal, they might have the same hashCode; this is called a hash collision,
	   * and while undesirable for performance reasons, it is acceptable.
	   *
	   *     if (a.equals(b)) {
	   *       assert( a.hashCode() === b.hashCode() );
	   *     }
	   *
	   * All Immutable collections implement `equals` and `hashCode`.
	   *
	   */
	function is(valueA,valueB){
	if(valueA===valueB||valueA!==valueA&&valueB!==valueB){
	return true;
	}
	if(!valueA||!valueB){
	return false;
	}
	if(typeof valueA.valueOf==='function'&&
	typeof valueB.valueOf==='function'){
	valueA=valueA.valueOf();
	valueB=valueB.valueOf();
	if(valueA===valueB||valueA!==valueA&&valueB!==valueB){
	return true;
	}
	if(!valueA||!valueB){
	return false;
	}
	}
	if(typeof valueA.equals==='function'&&
	typeof valueB.equals==='function'&&
	valueA.equals(valueB)){
	return true;
	}
	return false;
	}

	function deepEqual(a,b){
	if(a===b){
	return true;
	}

	if(
	!isIterable(b)||
	a.size!==undefined&&b.size!==undefined&&a.size!==b.size||
	a.__hash!==undefined&&b.__hash!==undefined&&a.__hash!==b.__hash||
	isKeyed(a)!==isKeyed(b)||
	isIndexed(a)!==isIndexed(b)||
	isOrdered(a)!==isOrdered(b))
	{
	return false;
	}

	if(a.size===0&&b.size===0){
	return true;
	}

	var notAssociative=!isAssociative(a);

	if(isOrdered(a)){
	var entries=a.entries();
	return b.every(function(v,k){
	var entry=entries.next().value;
	return entry&&is(entry[1],v)&&(notAssociative||is(entry[0],k));
	})&&entries.next().done;
	}

	var flipped=false;

	if(a.size===undefined){
	if(b.size===undefined){
	if(typeof a.cacheResult==='function'){
	a.cacheResult();
	}
	}else{
	flipped=true;
	var _=a;
	a=b;
	b=_;
	}
	}

	var allEqual=true;
	var bSize=b.__iterate(function(v,k){
	if(notAssociative?!a.has(v):
	flipped?!is(v,a.get(k,NOT_SET)):!is(a.get(k,NOT_SET),v)){
	allEqual=false;
	return false;
	}
	});

	return allEqual&&a.size===bSize;
	}

	createClass(Repeat,IndexedSeq);

	function Repeat(value,times){
	if(!(this instanceof Repeat)){
	return new Repeat(value,times);
	}
	this._value=value;
	this.size=times===undefined?Infinity:Math.max(0,times);
	if(this.size===0){
	if(EMPTY_REPEAT){
	return EMPTY_REPEAT;
	}
	EMPTY_REPEAT=this;
	}
	}

	Repeat.prototype.toString=function(){
	if(this.size===0){
	return'Repeat []';
	}
	return'Repeat [ '+this._value+' '+this.size+' times ]';
	};

	Repeat.prototype.get=function(index,notSetValue){
	return this.has(index)?this._value:notSetValue;
	};

	Repeat.prototype.includes=function(searchValue){
	return is(this._value,searchValue);
	};

	Repeat.prototype.slice=function(begin,end){
	var size=this.size;
	return wholeSlice(begin,end,size)?this:
	new Repeat(this._value,resolveEnd(end,size)-resolveBegin(begin,size));
	};

	Repeat.prototype.reverse=function(){
	return this;
	};

	Repeat.prototype.indexOf=function(searchValue){
	if(is(this._value,searchValue)){
	return 0;
	}
	return-1;
	};

	Repeat.prototype.lastIndexOf=function(searchValue){
	if(is(this._value,searchValue)){
	return this.size;
	}
	return-1;
	};

	Repeat.prototype.__iterate=function(fn,reverse){
	for(var ii=0;ii<this.size;ii++){
	if(fn(this._value,ii,this)===false){
	return ii+1;
	}
	}
	return ii;
	};

	Repeat.prototype.__iterator=function(type,reverse){var this$0=this;
	var ii=0;
	return new Iterator(function()
	{return ii<this$0.size?iteratorValue(type,ii++,this$0._value):iteratorDone();});

	};

	Repeat.prototype.equals=function(other){
	return other instanceof Repeat?
	is(this._value,other._value):
	deepEqual(other);
	};


	var EMPTY_REPEAT;

	function invariant(condition,error){
	if(!condition)throw new Error(error);
	}

	createClass(Range,IndexedSeq);

	function Range(start,end,step){
	if(!(this instanceof Range)){
	return new Range(start,end,step);
	}
	invariant(step!==0,'Cannot step a Range by 0');
	start=start||0;
	if(end===undefined){
	end=Infinity;
	}
	step=step===undefined?1:Math.abs(step);
	if(end<start){
	step=-step;
	}
	this._start=start;
	this._end=end;
	this._step=step;
	this.size=Math.max(0,Math.ceil((end-start)/step-1)+1);
	if(this.size===0){
	if(EMPTY_RANGE){
	return EMPTY_RANGE;
	}
	EMPTY_RANGE=this;
	}
	}

	Range.prototype.toString=function(){
	if(this.size===0){
	return'Range []';
	}
	return'Range [ '+
	this._start+'...'+this._end+(
	this._step!==1?' by '+this._step:'')+
	' ]';
	};

	Range.prototype.get=function(index,notSetValue){
	return this.has(index)?
	this._start+wrapIndex(this,index)*this._step:
	notSetValue;
	};

	Range.prototype.includes=function(searchValue){
	var possibleIndex=(searchValue-this._start)/this._step;
	return possibleIndex>=0&&
	possibleIndex<this.size&&
	possibleIndex===Math.floor(possibleIndex);
	};

	Range.prototype.slice=function(begin,end){
	if(wholeSlice(begin,end,this.size)){
	return this;
	}
	begin=resolveBegin(begin,this.size);
	end=resolveEnd(end,this.size);
	if(end<=begin){
	return new Range(0,0);
	}
	return new Range(this.get(begin,this._end),this.get(end,this._end),this._step);
	};

	Range.prototype.indexOf=function(searchValue){
	var offsetValue=searchValue-this._start;
	if(offsetValue%this._step===0){
	var index=offsetValue/this._step;
	if(index>=0&&index<this.size){
	return index;
	}
	}
	return-1;
	};

	Range.prototype.lastIndexOf=function(searchValue){
	return this.indexOf(searchValue);
	};

	Range.prototype.__iterate=function(fn,reverse){
	var maxIndex=this.size-1;
	var step=this._step;
	var value=reverse?this._start+maxIndex*step:this._start;
	for(var ii=0;ii<=maxIndex;ii++){
	if(fn(value,ii,this)===false){
	return ii+1;
	}
	value+=reverse?-step:step;
	}
	return ii;
	};

	Range.prototype.__iterator=function(type,reverse){
	var maxIndex=this.size-1;
	var step=this._step;
	var value=reverse?this._start+maxIndex*step:this._start;
	var ii=0;
	return new Iterator(function(){
	var v=value;
	value+=reverse?-step:step;
	return ii>maxIndex?iteratorDone():iteratorValue(type,ii++,v);
	});
	};

	Range.prototype.equals=function(other){
	return other instanceof Range?
	this._start===other._start&&
	this._end===other._end&&
	this._step===other._step:
	deepEqual(this,other);
	};


	var EMPTY_RANGE;

	createClass(Collection,Iterable);
	function Collection(){
	throw TypeError('Abstract');
	}


	createClass(KeyedCollection,Collection);function KeyedCollection(){}

	createClass(IndexedCollection,Collection);function IndexedCollection(){}

	createClass(SetCollection,Collection);function SetCollection(){}


	Collection.Keyed=KeyedCollection;
	Collection.Indexed=IndexedCollection;
	Collection.Set=SetCollection;

	var imul=
	typeof Math.imul==='function'&&Math.imul(0xffffffff,2)===-2?
	Math.imul:
	function imul(a,b){
	a=a|0;// int
	b=b|0;// int
	var c=a&0xffff;
	var d=b&0xffff;
	// Shift by 0 fixes the sign on the high part.
	return c*d+((a>>>16)*d+c*(b>>>16)<<16>>>0)|0;// int
	};

	// v8 has an optimization for storing 31-bit signed numbers.
	// Values which have either 00 or 11 as the high order bits qualify.
	// This function drops the highest order bit in a signed number, maintaining
	// the sign bit.
	function smi(i32){
	return i32>>>1&0x40000000|i32&0xBFFFFFFF;
	}

	function hash(o){
	if(o===false||o===null||o===undefined){
	return 0;
	}
	if(typeof o.valueOf==='function'){
	o=o.valueOf();
	if(o===false||o===null||o===undefined){
	return 0;
	}
	}
	if(o===true){
	return 1;
	}
	var type=typeof o==='undefined'?'undefined':_typeof(o);
	if(type==='number'){
	if(o!==o||o===Infinity){
	return 0;
	}
	var h=o|0;
	if(h!==o){
	h^=o*0xFFFFFFFF;
	}
	while(o>0xFFFFFFFF){
	o/=0xFFFFFFFF;
	h^=o;
	}
	return smi(h);
	}
	if(type==='string'){
	return o.length>STRING_HASH_CACHE_MIN_STRLEN?cachedHashString(o):hashString(o);
	}
	if(typeof o.hashCode==='function'){
	return o.hashCode();
	}
	if(type==='object'){
	return hashJSObj(o);
	}
	if(typeof o.toString==='function'){
	return hashString(o.toString());
	}
	throw new Error('Value type '+type+' cannot be hashed.');
	}

	function cachedHashString(string){
	var hash=stringHashCache[string];
	if(hash===undefined){
	hash=hashString(string);
	if(STRING_HASH_CACHE_SIZE===STRING_HASH_CACHE_MAX_SIZE){
	STRING_HASH_CACHE_SIZE=0;
	stringHashCache={};
	}
	STRING_HASH_CACHE_SIZE++;
	stringHashCache[string]=hash;
	}
	return hash;
	}

	// http://jsperf.com/hashing-strings
	function hashString(string){
	// This is the hash from JVM
	// The hash code for a string is computed as
	// s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	// where s[i] is the ith character of the string and n is the length of
	// the string. We "mod" the result to make it between 0 (inclusive) and 2^31
	// (exclusive) by dropping high bits.
	var hash=0;
	for(var ii=0;ii<string.length;ii++){
	hash=31*hash+string.charCodeAt(ii)|0;
	}
	return smi(hash);
	}

	function hashJSObj(obj){
	var hash;
	if(usingWeakMap){
	hash=weakMap.get(obj);
	if(hash!==undefined){
	return hash;
	}
	}

	hash=obj[UID_HASH_KEY];
	if(hash!==undefined){
	return hash;
	}

	if(!canDefineProperty){
	hash=obj.propertyIsEnumerable&&obj.propertyIsEnumerable[UID_HASH_KEY];
	if(hash!==undefined){
	return hash;
	}

	hash=getIENodeHash(obj);
	if(hash!==undefined){
	return hash;
	}
	}

	hash=++objHashUID;
	if(objHashUID&0x40000000){
	objHashUID=0;
	}

	if(usingWeakMap){
	weakMap.set(obj,hash);
	}else if(isExtensible!==undefined&&isExtensible(obj)===false){
	throw new Error('Non-extensible objects are not allowed as keys.');
	}else if(canDefineProperty){
	Object.defineProperty(obj,UID_HASH_KEY,{
	'enumerable':false,
	'configurable':false,
	'writable':false,
	'value':hash});

	}else if(obj.propertyIsEnumerable!==undefined&&
	obj.propertyIsEnumerable===obj.constructor.prototype.propertyIsEnumerable){
	// Since we can't define a non-enumerable property on the object
	// we'll hijack one of the less-used non-enumerable properties to
	// save our hash on it. Since this is a function it will not show up in
	// `JSON.stringify` which is what we want.
	obj.propertyIsEnumerable=function(){
	return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments);
	};
	obj.propertyIsEnumerable[UID_HASH_KEY]=hash;
	}else if(obj.nodeType!==undefined){
	// At this point we couldn't get the IE `uniqueID` to use as a hash
	// and we couldn't use a non-enumerable property to exploit the
	// dontEnum bug so we simply add the `UID_HASH_KEY` on the node
	// itself.
	obj[UID_HASH_KEY]=hash;
	}else{
	throw new Error('Unable to set a non-enumerable property on object.');
	}

	return hash;
	}

	// Get references to ES5 object methods.
	var isExtensible=Object.isExtensible;

	// True if Object.defineProperty works as expected. IE8 fails this test.
	var canDefineProperty=function(){
	try{
	Object.defineProperty({},'@',{});
	return true;
	}catch(e){
	return false;
	}
	}();

	// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
	// and avoid memory leaks from the IE cloneNode bug.
	function getIENodeHash(node){
	if(node&&node.nodeType>0){
	switch(node.nodeType){
	case 1:// Element
	return node.uniqueID;
	case 9:// Document
	return node.documentElement&&node.documentElement.uniqueID;}

	}
	}

	// If possible, use a WeakMap.
	var usingWeakMap=typeof WeakMap==='function';
	var weakMap;
	if(usingWeakMap){
	weakMap=new WeakMap();
	}

	var objHashUID=0;

	var UID_HASH_KEY='__immutablehash__';
	if(typeof Symbol==='function'){
	UID_HASH_KEY=Symbol(UID_HASH_KEY);
	}

	var STRING_HASH_CACHE_MIN_STRLEN=16;
	var STRING_HASH_CACHE_MAX_SIZE=255;
	var STRING_HASH_CACHE_SIZE=0;
	var stringHashCache={};

	function assertNotInfinite(size){
	invariant(
	size!==Infinity,
	'Cannot perform this action with an infinite size.');

	}

	createClass(Map,KeyedCollection);

	// @pragma Construction

	function Map(value){
	return value===null||value===undefined?emptyMap():
	isMap(value)&&!isOrdered(value)?value:
	emptyMap().withMutations(function(map){
	var iter=KeyedIterable(value);
	assertNotInfinite(iter.size);
	iter.forEach(function(v,k){return map.set(k,v);});
	});
	}

	Map.of=function(){var keyValues=SLICE$0.call(arguments,0);
	return emptyMap().withMutations(function(map){
	for(var i=0;i<keyValues.length;i+=2){
	if(i+1>=keyValues.length){
	throw new Error('Missing value for key: '+keyValues[i]);
	}
	map.set(keyValues[i],keyValues[i+1]);
	}
	});
	};

	Map.prototype.toString=function(){
	return this.__toString('Map {','}');
	};

	// @pragma Access

	Map.prototype.get=function(k,notSetValue){
	return this._root?
	this._root.get(0,undefined,k,notSetValue):
	notSetValue;
	};

	// @pragma Modification

	Map.prototype.set=function(k,v){
	return updateMap(this,k,v);
	};

	Map.prototype.setIn=function(keyPath,v){
	return this.updateIn(keyPath,NOT_SET,function(){return v;});
	};

	Map.prototype.remove=function(k){
	return updateMap(this,k,NOT_SET);
	};

	Map.prototype.deleteIn=function(keyPath){
	return this.updateIn(keyPath,function(){return NOT_SET;});
	};

	Map.prototype.update=function(k,notSetValue,updater){
	return arguments.length===1?
	k(this):
	this.updateIn([k],notSetValue,updater);
	};

	Map.prototype.updateIn=function(keyPath,notSetValue,updater){
	if(!updater){
	updater=notSetValue;
	notSetValue=undefined;
	}
	var updatedValue=updateInDeepMap(
	this,
	forceIterator(keyPath),
	notSetValue,
	updater);

	return updatedValue===NOT_SET?undefined:updatedValue;
	};

	Map.prototype.clear=function(){
	if(this.size===0){
	return this;
	}
	if(this.__ownerID){
	this.size=0;
	this._root=null;
	this.__hash=undefined;
	this.__altered=true;
	return this;
	}
	return emptyMap();
	};

	// @pragma Composition

	Map.prototype.merge=function()/*...iters*/{
	return mergeIntoMapWith(this,undefined,arguments);
	};

	Map.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);
	return mergeIntoMapWith(this,merger,iters);
	};

	Map.prototype.mergeIn=function(keyPath){var iters=SLICE$0.call(arguments,1);
	return this.updateIn(
	keyPath,
	emptyMap(),
	function(m){return typeof m.merge==='function'?
	m.merge.apply(m,iters):
	iters[iters.length-1];});

	};

	Map.prototype.mergeDeep=function()/*...iters*/{
	return mergeIntoMapWith(this,deepMerger,arguments);
	};

	Map.prototype.mergeDeepWith=function(merger){var iters=SLICE$0.call(arguments,1);
	return mergeIntoMapWith(this,deepMergerWith(merger),iters);
	};

	Map.prototype.mergeDeepIn=function(keyPath){var iters=SLICE$0.call(arguments,1);
	return this.updateIn(
	keyPath,
	emptyMap(),
	function(m){return typeof m.mergeDeep==='function'?
	m.mergeDeep.apply(m,iters):
	iters[iters.length-1];});

	};

	Map.prototype.sort=function(comparator){
	// Late binding
	return OrderedMap(sortFactory(this,comparator));
	};

	Map.prototype.sortBy=function(mapper,comparator){
	// Late binding
	return OrderedMap(sortFactory(this,comparator,mapper));
	};

	// @pragma Mutability

	Map.prototype.withMutations=function(fn){
	var mutable=this.asMutable();
	fn(mutable);
	return mutable.wasAltered()?mutable.__ensureOwner(this.__ownerID):this;
	};

	Map.prototype.asMutable=function(){
	return this.__ownerID?this:this.__ensureOwner(new OwnerID());
	};

	Map.prototype.asImmutable=function(){
	return this.__ensureOwner();
	};

	Map.prototype.wasAltered=function(){
	return this.__altered;
	};

	Map.prototype.__iterator=function(type,reverse){
	return new MapIterator(this,type,reverse);
	};

	Map.prototype.__iterate=function(fn,reverse){var this$0=this;
	var iterations=0;
	this._root&&this._root.iterate(function(entry){
	iterations++;
	return fn(entry[1],entry[0],this$0);
	},reverse);
	return iterations;
	};

	Map.prototype.__ensureOwner=function(ownerID){
	if(ownerID===this.__ownerID){
	return this;
	}
	if(!ownerID){
	this.__ownerID=ownerID;
	this.__altered=false;
	return this;
	}
	return makeMap(this.size,this._root,ownerID,this.__hash);
	};


	function isMap(maybeMap){
	return!!(maybeMap&&maybeMap[IS_MAP_SENTINEL]);
	}

	Map.isMap=isMap;

	var IS_MAP_SENTINEL='@@__IMMUTABLE_MAP__@@';

	var MapPrototype=Map.prototype;
	MapPrototype[IS_MAP_SENTINEL]=true;
	MapPrototype[DELETE]=MapPrototype.remove;
	MapPrototype.removeIn=MapPrototype.deleteIn;


	// #pragma Trie Nodes



	function ArrayMapNode(ownerID,entries){
	this.ownerID=ownerID;
	this.entries=entries;
	}

	ArrayMapNode.prototype.get=function(shift,keyHash,key,notSetValue){
	var entries=this.entries;
	for(var ii=0,len=entries.length;ii<len;ii++){
	if(is(key,entries[ii][0])){
	return entries[ii][1];
	}
	}
	return notSetValue;
	};

	ArrayMapNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){
	var removed=value===NOT_SET;

	var entries=this.entries;
	var idx=0;
	for(var len=entries.length;idx<len;idx++){
	if(is(key,entries[idx][0])){
	break;
	}
	}
	var exists=idx<len;

	if(exists?entries[idx][1]===value:removed){
	return this;
	}

	SetRef(didAlter);
	(removed||!exists)&&SetRef(didChangeSize);

	if(removed&&entries.length===1){
	return;// undefined
	}

	if(!exists&&!removed&&entries.length>=MAX_ARRAY_MAP_SIZE){
	return createNodes(ownerID,entries,key,value);
	}

	var isEditable=ownerID&&ownerID===this.ownerID;
	var newEntries=isEditable?entries:arrCopy(entries);

	if(exists){
	if(removed){
	idx===len-1?newEntries.pop():newEntries[idx]=newEntries.pop();
	}else{
	newEntries[idx]=[key,value];
	}
	}else{
	newEntries.push([key,value]);
	}

	if(isEditable){
	this.entries=newEntries;
	return this;
	}

	return new ArrayMapNode(ownerID,newEntries);
	};




	function BitmapIndexedNode(ownerID,bitmap,nodes){
	this.ownerID=ownerID;
	this.bitmap=bitmap;
	this.nodes=nodes;
	}

	BitmapIndexedNode.prototype.get=function(shift,keyHash,key,notSetValue){
	if(keyHash===undefined){
	keyHash=hash(key);
	}
	var bit=1<<((shift===0?keyHash:keyHash>>>shift)&MASK);
	var bitmap=this.bitmap;
	return(bitmap&bit)===0?notSetValue:
	this.nodes[popCount(bitmap&bit-1)].get(shift+SHIFT,keyHash,key,notSetValue);
	};

	BitmapIndexedNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){
	if(keyHash===undefined){
	keyHash=hash(key);
	}
	var keyHashFrag=(shift===0?keyHash:keyHash>>>shift)&MASK;
	var bit=1<<keyHashFrag;
	var bitmap=this.bitmap;
	var exists=(bitmap&bit)!==0;

	if(!exists&&value===NOT_SET){
	return this;
	}

	var idx=popCount(bitmap&bit-1);
	var nodes=this.nodes;
	var node=exists?nodes[idx]:undefined;
	var newNode=updateNode(node,ownerID,shift+SHIFT,keyHash,key,value,didChangeSize,didAlter);

	if(newNode===node){
	return this;
	}

	if(!exists&&newNode&&nodes.length>=MAX_BITMAP_INDEXED_SIZE){
	return expandNodes(ownerID,nodes,bitmap,keyHashFrag,newNode);
	}

	if(exists&&!newNode&&nodes.length===2&&isLeafNode(nodes[idx^1])){
	return nodes[idx^1];
	}

	if(exists&&newNode&&nodes.length===1&&isLeafNode(newNode)){
	return newNode;
	}

	var isEditable=ownerID&&ownerID===this.ownerID;
	var newBitmap=exists?newNode?bitmap:bitmap^bit:bitmap|bit;
	var newNodes=exists?newNode?
	setIn(nodes,idx,newNode,isEditable):
	spliceOut(nodes,idx,isEditable):
	spliceIn(nodes,idx,newNode,isEditable);

	if(isEditable){
	this.bitmap=newBitmap;
	this.nodes=newNodes;
	return this;
	}

	return new BitmapIndexedNode(ownerID,newBitmap,newNodes);
	};




	function HashArrayMapNode(ownerID,count,nodes){
	this.ownerID=ownerID;
	this.count=count;
	this.nodes=nodes;
	}

	HashArrayMapNode.prototype.get=function(shift,keyHash,key,notSetValue){
	if(keyHash===undefined){
	keyHash=hash(key);
	}
	var idx=(shift===0?keyHash:keyHash>>>shift)&MASK;
	var node=this.nodes[idx];
	return node?node.get(shift+SHIFT,keyHash,key,notSetValue):notSetValue;
	};

	HashArrayMapNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){
	if(keyHash===undefined){
	keyHash=hash(key);
	}
	var idx=(shift===0?keyHash:keyHash>>>shift)&MASK;
	var removed=value===NOT_SET;
	var nodes=this.nodes;
	var node=nodes[idx];

	if(removed&&!node){
	return this;
	}

	var newNode=updateNode(node,ownerID,shift+SHIFT,keyHash,key,value,didChangeSize,didAlter);
	if(newNode===node){
	return this;
	}

	var newCount=this.count;
	if(!node){
	newCount++;
	}else if(!newNode){
	newCount--;
	if(newCount<MIN_HASH_ARRAY_MAP_SIZE){
	return packNodes(ownerID,nodes,newCount,idx);
	}
	}

	var isEditable=ownerID&&ownerID===this.ownerID;
	var newNodes=setIn(nodes,idx,newNode,isEditable);

	if(isEditable){
	this.count=newCount;
	this.nodes=newNodes;
	return this;
	}

	return new HashArrayMapNode(ownerID,newCount,newNodes);
	};




	function HashCollisionNode(ownerID,keyHash,entries){
	this.ownerID=ownerID;
	this.keyHash=keyHash;
	this.entries=entries;
	}

	HashCollisionNode.prototype.get=function(shift,keyHash,key,notSetValue){
	var entries=this.entries;
	for(var ii=0,len=entries.length;ii<len;ii++){
	if(is(key,entries[ii][0])){
	return entries[ii][1];
	}
	}
	return notSetValue;
	};

	HashCollisionNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){
	if(keyHash===undefined){
	keyHash=hash(key);
	}

	var removed=value===NOT_SET;

	if(keyHash!==this.keyHash){
	if(removed){
	return this;
	}
	SetRef(didAlter);
	SetRef(didChangeSize);
	return mergeIntoNode(this,ownerID,shift,keyHash,[key,value]);
	}

	var entries=this.entries;
	var idx=0;
	for(var len=entries.length;idx<len;idx++){
	if(is(key,entries[idx][0])){
	break;
	}
	}
	var exists=idx<len;

	if(exists?entries[idx][1]===value:removed){
	return this;
	}

	SetRef(didAlter);
	(removed||!exists)&&SetRef(didChangeSize);

	if(removed&&len===2){
	return new ValueNode(ownerID,this.keyHash,entries[idx^1]);
	}

	var isEditable=ownerID&&ownerID===this.ownerID;
	var newEntries=isEditable?entries:arrCopy(entries);

	if(exists){
	if(removed){
	idx===len-1?newEntries.pop():newEntries[idx]=newEntries.pop();
	}else{
	newEntries[idx]=[key,value];
	}
	}else{
	newEntries.push([key,value]);
	}

	if(isEditable){
	this.entries=newEntries;
	return this;
	}

	return new HashCollisionNode(ownerID,this.keyHash,newEntries);
	};




	function ValueNode(ownerID,keyHash,entry){
	this.ownerID=ownerID;
	this.keyHash=keyHash;
	this.entry=entry;
	}

	ValueNode.prototype.get=function(shift,keyHash,key,notSetValue){
	return is(key,this.entry[0])?this.entry[1]:notSetValue;
	};

	ValueNode.prototype.update=function(ownerID,shift,keyHash,key,value,didChangeSize,didAlter){
	var removed=value===NOT_SET;
	var keyMatch=is(key,this.entry[0]);
	if(keyMatch?value===this.entry[1]:removed){
	return this;
	}

	SetRef(didAlter);

	if(removed){
	SetRef(didChangeSize);
	return;// undefined
	}

	if(keyMatch){
	if(ownerID&&ownerID===this.ownerID){
	this.entry[1]=value;
	return this;
	}
	return new ValueNode(ownerID,this.keyHash,[key,value]);
	}

	SetRef(didChangeSize);
	return mergeIntoNode(this,ownerID,shift,hash(key),[key,value]);
	};



	// #pragma Iterators

	ArrayMapNode.prototype.iterate=
	HashCollisionNode.prototype.iterate=function(fn,reverse){
	var entries=this.entries;
	for(var ii=0,maxIndex=entries.length-1;ii<=maxIndex;ii++){
	if(fn(entries[reverse?maxIndex-ii:ii])===false){
	return false;
	}
	}
	};

	BitmapIndexedNode.prototype.iterate=
	HashArrayMapNode.prototype.iterate=function(fn,reverse){
	var nodes=this.nodes;
	for(var ii=0,maxIndex=nodes.length-1;ii<=maxIndex;ii++){
	var node=nodes[reverse?maxIndex-ii:ii];
	if(node&&node.iterate(fn,reverse)===false){
	return false;
	}
	}
	};

	ValueNode.prototype.iterate=function(fn,reverse){
	return fn(this.entry);
	};

	createClass(MapIterator,Iterator);

	function MapIterator(map,type,reverse){
	this._type=type;
	this._reverse=reverse;
	this._stack=map._root&&mapIteratorFrame(map._root);
	}

	MapIterator.prototype.next=function(){
	var type=this._type;
	var stack=this._stack;
	while(stack){
	var node=stack.node;
	var index=stack.index++;
	var maxIndex;
	if(node.entry){
	if(index===0){
	return mapIteratorValue(type,node.entry);
	}
	}else if(node.entries){
	maxIndex=node.entries.length-1;
	if(index<=maxIndex){
	return mapIteratorValue(type,node.entries[this._reverse?maxIndex-index:index]);
	}
	}else{
	maxIndex=node.nodes.length-1;
	if(index<=maxIndex){
	var subNode=node.nodes[this._reverse?maxIndex-index:index];
	if(subNode){
	if(subNode.entry){
	return mapIteratorValue(type,subNode.entry);
	}
	stack=this._stack=mapIteratorFrame(subNode,stack);
	}
	continue;
	}
	}
	stack=this._stack=this._stack.__prev;
	}
	return iteratorDone();
	};


	function mapIteratorValue(type,entry){
	return iteratorValue(type,entry[0],entry[1]);
	}

	function mapIteratorFrame(node,prev){
	return{
	node:node,
	index:0,
	__prev:prev};

	}

	function makeMap(size,root,ownerID,hash){
	var map=Object.create(MapPrototype);
	map.size=size;
	map._root=root;
	map.__ownerID=ownerID;
	map.__hash=hash;
	map.__altered=false;
	return map;
	}

	var EMPTY_MAP;
	function emptyMap(){
	return EMPTY_MAP||(EMPTY_MAP=makeMap(0));
	}

	function updateMap(map,k,v){
	var newRoot;
	var newSize;
	if(!map._root){
	if(v===NOT_SET){
	return map;
	}
	newSize=1;
	newRoot=new ArrayMapNode(map.__ownerID,[[k,v]]);
	}else{
	var didChangeSize=MakeRef(CHANGE_LENGTH);
	var didAlter=MakeRef(DID_ALTER);
	newRoot=updateNode(map._root,map.__ownerID,0,undefined,k,v,didChangeSize,didAlter);
	if(!didAlter.value){
	return map;
	}
	newSize=map.size+(didChangeSize.value?v===NOT_SET?-1:1:0);
	}
	if(map.__ownerID){
	map.size=newSize;
	map._root=newRoot;
	map.__hash=undefined;
	map.__altered=true;
	return map;
	}
	return newRoot?makeMap(newSize,newRoot):emptyMap();
	}

	function updateNode(node,ownerID,shift,keyHash,key,value,didChangeSize,didAlter){
	if(!node){
	if(value===NOT_SET){
	return node;
	}
	SetRef(didAlter);
	SetRef(didChangeSize);
	return new ValueNode(ownerID,keyHash,[key,value]);
	}
	return node.update(ownerID,shift,keyHash,key,value,didChangeSize,didAlter);
	}

	function isLeafNode(node){
	return node.constructor===ValueNode||node.constructor===HashCollisionNode;
	}

	function mergeIntoNode(node,ownerID,shift,keyHash,entry){
	if(node.keyHash===keyHash){
	return new HashCollisionNode(ownerID,keyHash,[node.entry,entry]);
	}

	var idx1=(shift===0?node.keyHash:node.keyHash>>>shift)&MASK;
	var idx2=(shift===0?keyHash:keyHash>>>shift)&MASK;

	var newNode;
	var nodes=idx1===idx2?
	[mergeIntoNode(node,ownerID,shift+SHIFT,keyHash,entry)]:(
	newNode=new ValueNode(ownerID,keyHash,entry),idx1<idx2?[node,newNode]:[newNode,node]);

	return new BitmapIndexedNode(ownerID,1<<idx1|1<<idx2,nodes);
	}

	function createNodes(ownerID,entries,key,value){
	if(!ownerID){
	ownerID=new OwnerID();
	}
	var node=new ValueNode(ownerID,hash(key),[key,value]);
	for(var ii=0;ii<entries.length;ii++){
	var entry=entries[ii];
	node=node.update(ownerID,0,undefined,entry[0],entry[1]);
	}
	return node;
	}

	function packNodes(ownerID,nodes,count,excluding){
	var bitmap=0;
	var packedII=0;
	var packedNodes=new Array(count);
	for(var ii=0,bit=1,len=nodes.length;ii<len;ii++,bit<<=1){
	var node=nodes[ii];
	if(node!==undefined&&ii!==excluding){
	bitmap|=bit;
	packedNodes[packedII++]=node;
	}
	}
	return new BitmapIndexedNode(ownerID,bitmap,packedNodes);
	}

	function expandNodes(ownerID,nodes,bitmap,including,node){
	var count=0;
	var expandedNodes=new Array(SIZE);
	for(var ii=0;bitmap!==0;ii++,bitmap>>>=1){
	expandedNodes[ii]=bitmap&1?nodes[count++]:undefined;
	}
	expandedNodes[including]=node;
	return new HashArrayMapNode(ownerID,count+1,expandedNodes);
	}

	function mergeIntoMapWith(map,merger,iterables){
	var iters=[];
	for(var ii=0;ii<iterables.length;ii++){
	var value=iterables[ii];
	var iter=KeyedIterable(value);
	if(!isIterable(value)){
	iter=iter.map(function(v){return fromJS(v);});
	}
	iters.push(iter);
	}
	return mergeIntoCollectionWith(map,merger,iters);
	}

	function deepMerger(existing,value,key){
	return existing&&existing.mergeDeep&&isIterable(value)?
	existing.mergeDeep(value):
	is(existing,value)?existing:value;
	}

	function deepMergerWith(merger){
	return function(existing,value,key){
	if(existing&&existing.mergeDeepWith&&isIterable(value)){
	return existing.mergeDeepWith(merger,value);
	}
	var nextValue=merger(existing,value,key);
	return is(existing,nextValue)?existing:nextValue;
	};
	}

	function mergeIntoCollectionWith(collection,merger,iters){
	iters=iters.filter(function(x){return x.size!==0;});
	if(iters.length===0){
	return collection;
	}
	if(collection.size===0&&!collection.__ownerID&&iters.length===1){
	return collection.constructor(iters[0]);
	}
	return collection.withMutations(function(collection){
	var mergeIntoMap=merger?
	function(value,key){
	collection.update(key,NOT_SET,function(existing)
	{return existing===NOT_SET?value:merger(existing,value,key);});

	}:
	function(value,key){
	collection.set(key,value);
	};
	for(var ii=0;ii<iters.length;ii++){
	iters[ii].forEach(mergeIntoMap);
	}
	});
	}

	function updateInDeepMap(existing,keyPathIter,notSetValue,updater){
	var isNotSet=existing===NOT_SET;
	var step=keyPathIter.next();
	if(step.done){
	var existingValue=isNotSet?notSetValue:existing;
	var newValue=updater(existingValue);
	return newValue===existingValue?existing:newValue;
	}
	invariant(
	isNotSet||existing&&existing.set,
	'invalid keyPath');

	var key=step.value;
	var nextExisting=isNotSet?NOT_SET:existing.get(key,NOT_SET);
	var nextUpdated=updateInDeepMap(
	nextExisting,
	keyPathIter,
	notSetValue,
	updater);

	return nextUpdated===nextExisting?existing:
	nextUpdated===NOT_SET?existing.remove(key):
	(isNotSet?emptyMap():existing).set(key,nextUpdated);
	}

	function popCount(x){
	x=x-(x>>1&0x55555555);
	x=(x&0x33333333)+(x>>2&0x33333333);
	x=x+(x>>4)&0x0f0f0f0f;
	x=x+(x>>8);
	x=x+(x>>16);
	return x&0x7f;
	}

	function setIn(array,idx,val,canEdit){
	var newArray=canEdit?array:arrCopy(array);
	newArray[idx]=val;
	return newArray;
	}

	function spliceIn(array,idx,val,canEdit){
	var newLen=array.length+1;
	if(canEdit&&idx+1===newLen){
	array[idx]=val;
	return array;
	}
	var newArray=new Array(newLen);
	var after=0;
	for(var ii=0;ii<newLen;ii++){
	if(ii===idx){
	newArray[ii]=val;
	after=-1;
	}else{
	newArray[ii]=array[ii+after];
	}
	}
	return newArray;
	}

	function spliceOut(array,idx,canEdit){
	var newLen=array.length-1;
	if(canEdit&&idx===newLen){
	array.pop();
	return array;
	}
	var newArray=new Array(newLen);
	var after=0;
	for(var ii=0;ii<newLen;ii++){
	if(ii===idx){
	after=1;
	}
	newArray[ii]=array[ii+after];
	}
	return newArray;
	}

	var MAX_ARRAY_MAP_SIZE=SIZE/4;
	var MAX_BITMAP_INDEXED_SIZE=SIZE/2;
	var MIN_HASH_ARRAY_MAP_SIZE=SIZE/4;

	createClass(List,IndexedCollection);

	// @pragma Construction

	function List(value){
	var empty=emptyList();
	if(value===null||value===undefined){
	return empty;
	}
	if(isList(value)){
	return value;
	}
	var iter=IndexedIterable(value);
	var size=iter.size;
	if(size===0){
	return empty;
	}
	assertNotInfinite(size);
	if(size>0&&size<SIZE){
	return makeList(0,size,SHIFT,null,new VNode(iter.toArray()));
	}
	return empty.withMutations(function(list){
	list.setSize(size);
	iter.forEach(function(v,i){return list.set(i,v);});
	});
	}

	List.of=function()/*...values*/{
	return this(arguments);
	};

	List.prototype.toString=function(){
	return this.__toString('List [',']');
	};

	// @pragma Access

	List.prototype.get=function(index,notSetValue){
	index=wrapIndex(this,index);
	if(index>=0&&index<this.size){
	index+=this._origin;
	var node=listNodeFor(this,index);
	return node&&node.array[index&MASK];
	}
	return notSetValue;
	};

	// @pragma Modification

	List.prototype.set=function(index,value){
	return updateList(this,index,value);
	};

	List.prototype.remove=function(index){
	return!this.has(index)?this:
	index===0?this.shift():
	index===this.size-1?this.pop():
	this.splice(index,1);
	};

	List.prototype.insert=function(index,value){
	return this.splice(index,0,value);
	};

	List.prototype.clear=function(){
	if(this.size===0){
	return this;
	}
	if(this.__ownerID){
	this.size=this._origin=this._capacity=0;
	this._level=SHIFT;
	this._root=this._tail=null;
	this.__hash=undefined;
	this.__altered=true;
	return this;
	}
	return emptyList();
	};

	List.prototype.push=function()/*...values*/{
	var values=arguments;
	var oldSize=this.size;
	return this.withMutations(function(list){
	setListBounds(list,0,oldSize+values.length);
	for(var ii=0;ii<values.length;ii++){
	list.set(oldSize+ii,values[ii]);
	}
	});
	};

	List.prototype.pop=function(){
	return setListBounds(this,0,-1);
	};

	List.prototype.unshift=function()/*...values*/{
	var values=arguments;
	return this.withMutations(function(list){
	setListBounds(list,-values.length);
	for(var ii=0;ii<values.length;ii++){
	list.set(ii,values[ii]);
	}
	});
	};

	List.prototype.shift=function(){
	return setListBounds(this,1);
	};

	// @pragma Composition

	List.prototype.merge=function()/*...iters*/{
	return mergeIntoListWith(this,undefined,arguments);
	};

	List.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);
	return mergeIntoListWith(this,merger,iters);
	};

	List.prototype.mergeDeep=function()/*...iters*/{
	return mergeIntoListWith(this,deepMerger,arguments);
	};

	List.prototype.mergeDeepWith=function(merger){var iters=SLICE$0.call(arguments,1);
	return mergeIntoListWith(this,deepMergerWith(merger),iters);
	};

	List.prototype.setSize=function(size){
	return setListBounds(this,0,size);
	};

	// @pragma Iteration

	List.prototype.slice=function(begin,end){
	var size=this.size;
	if(wholeSlice(begin,end,size)){
	return this;
	}
	return setListBounds(
	this,
	resolveBegin(begin,size),
	resolveEnd(end,size));

	};

	List.prototype.__iterator=function(type,reverse){
	var index=0;
	var values=iterateList(this,reverse);
	return new Iterator(function(){
	var value=values();
	return value===DONE?
	iteratorDone():
	iteratorValue(type,index++,value);
	});
	};

	List.prototype.__iterate=function(fn,reverse){
	var index=0;
	var values=iterateList(this,reverse);
	var value;
	while((value=values())!==DONE){
	if(fn(value,index++,this)===false){
	break;
	}
	}
	return index;
	};

	List.prototype.__ensureOwner=function(ownerID){
	if(ownerID===this.__ownerID){
	return this;
	}
	if(!ownerID){
	this.__ownerID=ownerID;
	return this;
	}
	return makeList(this._origin,this._capacity,this._level,this._root,this._tail,ownerID,this.__hash);
	};


	function isList(maybeList){
	return!!(maybeList&&maybeList[IS_LIST_SENTINEL]);
	}

	List.isList=isList;

	var IS_LIST_SENTINEL='@@__IMMUTABLE_LIST__@@';

	var ListPrototype=List.prototype;
	ListPrototype[IS_LIST_SENTINEL]=true;
	ListPrototype[DELETE]=ListPrototype.remove;
	ListPrototype.setIn=MapPrototype.setIn;
	ListPrototype.deleteIn=
	ListPrototype.removeIn=MapPrototype.removeIn;
	ListPrototype.update=MapPrototype.update;
	ListPrototype.updateIn=MapPrototype.updateIn;
	ListPrototype.mergeIn=MapPrototype.mergeIn;
	ListPrototype.mergeDeepIn=MapPrototype.mergeDeepIn;
	ListPrototype.withMutations=MapPrototype.withMutations;
	ListPrototype.asMutable=MapPrototype.asMutable;
	ListPrototype.asImmutable=MapPrototype.asImmutable;
	ListPrototype.wasAltered=MapPrototype.wasAltered;



	function VNode(array,ownerID){
	this.array=array;
	this.ownerID=ownerID;
	}

	// TODO: seems like these methods are very similar

	VNode.prototype.removeBefore=function(ownerID,level,index){
	if(index===level?1<<level:0||this.array.length===0){
	return this;
	}
	var originIndex=index>>>level&MASK;
	if(originIndex>=this.array.length){
	return new VNode([],ownerID);
	}
	var removingFirst=originIndex===0;
	var newChild;
	if(level>0){
	var oldChild=this.array[originIndex];
	newChild=oldChild&&oldChild.removeBefore(ownerID,level-SHIFT,index);
	if(newChild===oldChild&&removingFirst){
	return this;
	}
	}
	if(removingFirst&&!newChild){
	return this;
	}
	var editable=editableVNode(this,ownerID);
	if(!removingFirst){
	for(var ii=0;ii<originIndex;ii++){
	editable.array[ii]=undefined;
	}
	}
	if(newChild){
	editable.array[originIndex]=newChild;
	}
	return editable;
	};

	VNode.prototype.removeAfter=function(ownerID,level,index){
	if(index===(level?1<<level:0)||this.array.length===0){
	return this;
	}
	var sizeIndex=index-1>>>level&MASK;
	if(sizeIndex>=this.array.length){
	return this;
	}

	var newChild;
	if(level>0){
	var oldChild=this.array[sizeIndex];
	newChild=oldChild&&oldChild.removeAfter(ownerID,level-SHIFT,index);
	if(newChild===oldChild&&sizeIndex===this.array.length-1){
	return this;
	}
	}

	var editable=editableVNode(this,ownerID);
	editable.array.splice(sizeIndex+1);
	if(newChild){
	editable.array[sizeIndex]=newChild;
	}
	return editable;
	};



	var DONE={};

	function iterateList(list,reverse){
	var left=list._origin;
	var right=list._capacity;
	var tailPos=getTailOffset(right);
	var tail=list._tail;

	return iterateNodeOrLeaf(list._root,list._level,0);

	function iterateNodeOrLeaf(node,level,offset){
	return level===0?
	iterateLeaf(node,offset):
	iterateNode(node,level,offset);
	}

	function iterateLeaf(node,offset){
	var array=offset===tailPos?tail&&tail.array:node&&node.array;
	var from=offset>left?0:left-offset;
	var to=right-offset;
	if(to>SIZE){
	to=SIZE;
	}
	return function(){
	if(from===to){
	return DONE;
	}
	var idx=reverse?--to:from++;
	return array&&array[idx];
	};
	}

	function iterateNode(node,level,offset){
	var values;
	var array=node&&node.array;
	var from=offset>left?0:left-offset>>level;
	var to=(right-offset>>level)+1;
	if(to>SIZE){
	to=SIZE;
	}
	return function(){
	do{
	if(values){
	var value=values();
	if(value!==DONE){
	return value;
	}
	values=null;
	}
	if(from===to){
	return DONE;
	}
	var idx=reverse?--to:from++;
	values=iterateNodeOrLeaf(
	array&&array[idx],level-SHIFT,offset+(idx<<level));

	}while(true);
	};
	}
	}

	function makeList(origin,capacity,level,root,tail,ownerID,hash){
	var list=Object.create(ListPrototype);
	list.size=capacity-origin;
	list._origin=origin;
	list._capacity=capacity;
	list._level=level;
	list._root=root;
	list._tail=tail;
	list.__ownerID=ownerID;
	list.__hash=hash;
	list.__altered=false;
	return list;
	}

	var EMPTY_LIST;
	function emptyList(){
	return EMPTY_LIST||(EMPTY_LIST=makeList(0,0,SHIFT));
	}

	function updateList(list,index,value){
	index=wrapIndex(list,index);

	if(index!==index){
	return list;
	}

	if(index>=list.size||index<0){
	return list.withMutations(function(list){
	index<0?
	setListBounds(list,index).set(0,value):
	setListBounds(list,0,index+1).set(index,value);
	});
	}

	index+=list._origin;

	var newTail=list._tail;
	var newRoot=list._root;
	var didAlter=MakeRef(DID_ALTER);
	if(index>=getTailOffset(list._capacity)){
	newTail=updateVNode(newTail,list.__ownerID,0,index,value,didAlter);
	}else{
	newRoot=updateVNode(newRoot,list.__ownerID,list._level,index,value,didAlter);
	}

	if(!didAlter.value){
	return list;
	}

	if(list.__ownerID){
	list._root=newRoot;
	list._tail=newTail;
	list.__hash=undefined;
	list.__altered=true;
	return list;
	}
	return makeList(list._origin,list._capacity,list._level,newRoot,newTail);
	}

	function updateVNode(node,ownerID,level,index,value,didAlter){
	var idx=index>>>level&MASK;
	var nodeHas=node&&idx<node.array.length;
	if(!nodeHas&&value===undefined){
	return node;
	}

	var newNode;

	if(level>0){
	var lowerNode=node&&node.array[idx];
	var newLowerNode=updateVNode(lowerNode,ownerID,level-SHIFT,index,value,didAlter);
	if(newLowerNode===lowerNode){
	return node;
	}
	newNode=editableVNode(node,ownerID);
	newNode.array[idx]=newLowerNode;
	return newNode;
	}

	if(nodeHas&&node.array[idx]===value){
	return node;
	}

	SetRef(didAlter);

	newNode=editableVNode(node,ownerID);
	if(value===undefined&&idx===newNode.array.length-1){
	newNode.array.pop();
	}else{
	newNode.array[idx]=value;
	}
	return newNode;
	}

	function editableVNode(node,ownerID){
	if(ownerID&&node&&ownerID===node.ownerID){
	return node;
	}
	return new VNode(node?node.array.slice():[],ownerID);
	}

	function listNodeFor(list,rawIndex){
	if(rawIndex>=getTailOffset(list._capacity)){
	return list._tail;
	}
	if(rawIndex<1<<list._level+SHIFT){
	var node=list._root;
	var level=list._level;
	while(node&&level>0){
	node=node.array[rawIndex>>>level&MASK];
	level-=SHIFT;
	}
	return node;
	}
	}

	function setListBounds(list,begin,end){
	// Sanitize begin & end using this shorthand for ToInt32(argument)
	// http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	if(begin!==undefined){
	begin=begin|0;
	}
	if(end!==undefined){
	end=end|0;
	}
	var owner=list.__ownerID||new OwnerID();
	var oldOrigin=list._origin;
	var oldCapacity=list._capacity;
	var newOrigin=oldOrigin+begin;
	var newCapacity=end===undefined?oldCapacity:end<0?oldCapacity+end:oldOrigin+end;
	if(newOrigin===oldOrigin&&newCapacity===oldCapacity){
	return list;
	}

	// If it's going to end after it starts, it's empty.
	if(newOrigin>=newCapacity){
	return list.clear();
	}

	var newLevel=list._level;
	var newRoot=list._root;

	// New origin might need creating a higher root.
	var offsetShift=0;
	while(newOrigin+offsetShift<0){
	newRoot=new VNode(newRoot&&newRoot.array.length?[undefined,newRoot]:[],owner);
	newLevel+=SHIFT;
	offsetShift+=1<<newLevel;
	}
	if(offsetShift){
	newOrigin+=offsetShift;
	oldOrigin+=offsetShift;
	newCapacity+=offsetShift;
	oldCapacity+=offsetShift;
	}

	var oldTailOffset=getTailOffset(oldCapacity);
	var newTailOffset=getTailOffset(newCapacity);

	// New size might need creating a higher root.
	while(newTailOffset>=1<<newLevel+SHIFT){
	newRoot=new VNode(newRoot&&newRoot.array.length?[newRoot]:[],owner);
	newLevel+=SHIFT;
	}

	// Locate or create the new tail.
	var oldTail=list._tail;
	var newTail=newTailOffset<oldTailOffset?
	listNodeFor(list,newCapacity-1):
	newTailOffset>oldTailOffset?new VNode([],owner):oldTail;

	// Merge Tail into tree.
	if(oldTail&&newTailOffset>oldTailOffset&&newOrigin<oldCapacity&&oldTail.array.length){
	newRoot=editableVNode(newRoot,owner);
	var node=newRoot;
	for(var level=newLevel;level>SHIFT;level-=SHIFT){
	var idx=oldTailOffset>>>level&MASK;
	node=node.array[idx]=editableVNode(node.array[idx],owner);
	}
	node.array[oldTailOffset>>>SHIFT&MASK]=oldTail;
	}

	// If the size has been reduced, there's a chance the tail needs to be trimmed.
	if(newCapacity<oldCapacity){
	newTail=newTail&&newTail.removeAfter(owner,0,newCapacity);
	}

	// If the new origin is within the tail, then we do not need a root.
	if(newOrigin>=newTailOffset){
	newOrigin-=newTailOffset;
	newCapacity-=newTailOffset;
	newLevel=SHIFT;
	newRoot=null;
	newTail=newTail&&newTail.removeBefore(owner,0,newOrigin);

	// Otherwise, if the root has been trimmed, garbage collect.
	}else if(newOrigin>oldOrigin||newTailOffset<oldTailOffset){
	offsetShift=0;

	// Identify the new top root node of the subtree of the old root.
	while(newRoot){
	var beginIndex=newOrigin>>>newLevel&MASK;
	if(beginIndex!==newTailOffset>>>newLevel&MASK){
	break;
	}
	if(beginIndex){
	offsetShift+=(1<<newLevel)*beginIndex;
	}
	newLevel-=SHIFT;
	newRoot=newRoot.array[beginIndex];
	}

	// Trim the new sides of the new root.
	if(newRoot&&newOrigin>oldOrigin){
	newRoot=newRoot.removeBefore(owner,newLevel,newOrigin-offsetShift);
	}
	if(newRoot&&newTailOffset<oldTailOffset){
	newRoot=newRoot.removeAfter(owner,newLevel,newTailOffset-offsetShift);
	}
	if(offsetShift){
	newOrigin-=offsetShift;
	newCapacity-=offsetShift;
	}
	}

	if(list.__ownerID){
	list.size=newCapacity-newOrigin;
	list._origin=newOrigin;
	list._capacity=newCapacity;
	list._level=newLevel;
	list._root=newRoot;
	list._tail=newTail;
	list.__hash=undefined;
	list.__altered=true;
	return list;
	}
	return makeList(newOrigin,newCapacity,newLevel,newRoot,newTail);
	}

	function mergeIntoListWith(list,merger,iterables){
	var iters=[];
	var maxSize=0;
	for(var ii=0;ii<iterables.length;ii++){
	var value=iterables[ii];
	var iter=IndexedIterable(value);
	if(iter.size>maxSize){
	maxSize=iter.size;
	}
	if(!isIterable(value)){
	iter=iter.map(function(v){return fromJS(v);});
	}
	iters.push(iter);
	}
	if(maxSize>list.size){
	list=list.setSize(maxSize);
	}
	return mergeIntoCollectionWith(list,merger,iters);
	}

	function getTailOffset(size){
	return size<SIZE?0:size-1>>>SHIFT<<SHIFT;
	}

	createClass(OrderedMap,Map);

	// @pragma Construction

	function OrderedMap(value){
	return value===null||value===undefined?emptyOrderedMap():
	isOrderedMap(value)?value:
	emptyOrderedMap().withMutations(function(map){
	var iter=KeyedIterable(value);
	assertNotInfinite(iter.size);
	iter.forEach(function(v,k){return map.set(k,v);});
	});
	}

	OrderedMap.of=function()/*...values*/{
	return this(arguments);
	};

	OrderedMap.prototype.toString=function(){
	return this.__toString('OrderedMap {','}');
	};

	// @pragma Access

	OrderedMap.prototype.get=function(k,notSetValue){
	var index=this._map.get(k);
	return index!==undefined?this._list.get(index)[1]:notSetValue;
	};

	// @pragma Modification

	OrderedMap.prototype.clear=function(){
	if(this.size===0){
	return this;
	}
	if(this.__ownerID){
	this.size=0;
	this._map.clear();
	this._list.clear();
	return this;
	}
	return emptyOrderedMap();
	};

	OrderedMap.prototype.set=function(k,v){
	return updateOrderedMap(this,k,v);
	};

	OrderedMap.prototype.remove=function(k){
	return updateOrderedMap(this,k,NOT_SET);
	};

	OrderedMap.prototype.wasAltered=function(){
	return this._map.wasAltered()||this._list.wasAltered();
	};

	OrderedMap.prototype.__iterate=function(fn,reverse){var this$0=this;
	return this._list.__iterate(
	function(entry){return entry&&fn(entry[1],entry[0],this$0);},
	reverse);

	};

	OrderedMap.prototype.__iterator=function(type,reverse){
	return this._list.fromEntrySeq().__iterator(type,reverse);
	};

	OrderedMap.prototype.__ensureOwner=function(ownerID){
	if(ownerID===this.__ownerID){
	return this;
	}
	var newMap=this._map.__ensureOwner(ownerID);
	var newList=this._list.__ensureOwner(ownerID);
	if(!ownerID){
	this.__ownerID=ownerID;
	this._map=newMap;
	this._list=newList;
	return this;
	}
	return makeOrderedMap(newMap,newList,ownerID,this.__hash);
	};


	function isOrderedMap(maybeOrderedMap){
	return isMap(maybeOrderedMap)&&isOrdered(maybeOrderedMap);
	}

	OrderedMap.isOrderedMap=isOrderedMap;

	OrderedMap.prototype[IS_ORDERED_SENTINEL]=true;
	OrderedMap.prototype[DELETE]=OrderedMap.prototype.remove;



	function makeOrderedMap(map,list,ownerID,hash){
	var omap=Object.create(OrderedMap.prototype);
	omap.size=map?map.size:0;
	omap._map=map;
	omap._list=list;
	omap.__ownerID=ownerID;
	omap.__hash=hash;
	return omap;
	}

	var EMPTY_ORDERED_MAP;
	function emptyOrderedMap(){
	return EMPTY_ORDERED_MAP||(EMPTY_ORDERED_MAP=makeOrderedMap(emptyMap(),emptyList()));
	}

	function updateOrderedMap(omap,k,v){
	var map=omap._map;
	var list=omap._list;
	var i=map.get(k);
	var has=i!==undefined;
	var newMap;
	var newList;
	if(v===NOT_SET){// removed
	if(!has){
	return omap;
	}
	if(list.size>=SIZE&&list.size>=map.size*2){
	newList=list.filter(function(entry,idx){return entry!==undefined&&i!==idx;});
	newMap=newList.toKeyedSeq().map(function(entry){return entry[0];}).flip().toMap();
	if(omap.__ownerID){
	newMap.__ownerID=newList.__ownerID=omap.__ownerID;
	}
	}else{
	newMap=map.remove(k);
	newList=i===list.size-1?list.pop():list.set(i,undefined);
	}
	}else{
	if(has){
	if(v===list.get(i)[1]){
	return omap;
	}
	newMap=map;
	newList=list.set(i,[k,v]);
	}else{
	newMap=map.set(k,list.size);
	newList=list.set(list.size,[k,v]);
	}
	}
	if(omap.__ownerID){
	omap.size=newMap.size;
	omap._map=newMap;
	omap._list=newList;
	omap.__hash=undefined;
	return omap;
	}
	return makeOrderedMap(newMap,newList);
	}

	createClass(ToKeyedSequence,KeyedSeq);
	function ToKeyedSequence(indexed,useKeys){
	this._iter=indexed;
	this._useKeys=useKeys;
	this.size=indexed.size;
	}

	ToKeyedSequence.prototype.get=function(key,notSetValue){
	return this._iter.get(key,notSetValue);
	};

	ToKeyedSequence.prototype.has=function(key){
	return this._iter.has(key);
	};

	ToKeyedSequence.prototype.valueSeq=function(){
	return this._iter.valueSeq();
	};

	ToKeyedSequence.prototype.reverse=function(){var this$0=this;
	var reversedSequence=reverseFactory(this,true);
	if(!this._useKeys){
	reversedSequence.valueSeq=function(){return this$0._iter.toSeq().reverse();};
	}
	return reversedSequence;
	};

	ToKeyedSequence.prototype.map=function(mapper,context){var this$0=this;
	var mappedSequence=mapFactory(this,mapper,context);
	if(!this._useKeys){
	mappedSequence.valueSeq=function(){return this$0._iter.toSeq().map(mapper,context);};
	}
	return mappedSequence;
	};

	ToKeyedSequence.prototype.__iterate=function(fn,reverse){var this$0=this;
	var ii;
	return this._iter.__iterate(
	this._useKeys?
	function(v,k){return fn(v,k,this$0);}:(
	ii=reverse?resolveSize(this):0,
	function(v){return fn(v,reverse?--ii:ii++,this$0);}),
	reverse);

	};

	ToKeyedSequence.prototype.__iterator=function(type,reverse){
	if(this._useKeys){
	return this._iter.__iterator(type,reverse);
	}
	var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);
	var ii=reverse?resolveSize(this):0;
	return new Iterator(function(){
	var step=iterator.next();
	return step.done?step:
	iteratorValue(type,reverse?--ii:ii++,step.value,step);
	});
	};

	ToKeyedSequence.prototype[IS_ORDERED_SENTINEL]=true;


	createClass(ToIndexedSequence,IndexedSeq);
	function ToIndexedSequence(iter){
	this._iter=iter;
	this.size=iter.size;
	}

	ToIndexedSequence.prototype.includes=function(value){
	return this._iter.includes(value);
	};

	ToIndexedSequence.prototype.__iterate=function(fn,reverse){var this$0=this;
	var iterations=0;
	return this._iter.__iterate(function(v){return fn(v,iterations++,this$0);},reverse);
	};

	ToIndexedSequence.prototype.__iterator=function(type,reverse){
	var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);
	var iterations=0;
	return new Iterator(function(){
	var step=iterator.next();
	return step.done?step:
	iteratorValue(type,iterations++,step.value,step);
	});
	};



	createClass(ToSetSequence,SetSeq);
	function ToSetSequence(iter){
	this._iter=iter;
	this.size=iter.size;
	}

	ToSetSequence.prototype.has=function(key){
	return this._iter.includes(key);
	};

	ToSetSequence.prototype.__iterate=function(fn,reverse){var this$0=this;
	return this._iter.__iterate(function(v){return fn(v,v,this$0);},reverse);
	};

	ToSetSequence.prototype.__iterator=function(type,reverse){
	var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);
	return new Iterator(function(){
	var step=iterator.next();
	return step.done?step:
	iteratorValue(type,step.value,step.value,step);
	});
	};



	createClass(FromEntriesSequence,KeyedSeq);
	function FromEntriesSequence(entries){
	this._iter=entries;
	this.size=entries.size;
	}

	FromEntriesSequence.prototype.entrySeq=function(){
	return this._iter.toSeq();
	};

	FromEntriesSequence.prototype.__iterate=function(fn,reverse){var this$0=this;
	return this._iter.__iterate(function(entry){
	// Check if entry exists first so array access doesn't throw for holes
	// in the parent iteration.
	if(entry){
	validateEntry(entry);
	var indexedIterable=isIterable(entry);
	return fn(
	indexedIterable?entry.get(1):entry[1],
	indexedIterable?entry.get(0):entry[0],
	this$0);

	}
	},reverse);
	};

	FromEntriesSequence.prototype.__iterator=function(type,reverse){
	var iterator=this._iter.__iterator(ITERATE_VALUES,reverse);
	return new Iterator(function(){
	while(true){
	var step=iterator.next();
	if(step.done){
	return step;
	}
	var entry=step.value;
	// Check if entry exists first so array access doesn't throw for holes
	// in the parent iteration.
	if(entry){
	validateEntry(entry);
	var indexedIterable=isIterable(entry);
	return iteratorValue(
	type,
	indexedIterable?entry.get(0):entry[0],
	indexedIterable?entry.get(1):entry[1],
	step);

	}
	}
	});
	};


	ToIndexedSequence.prototype.cacheResult=
	ToKeyedSequence.prototype.cacheResult=
	ToSetSequence.prototype.cacheResult=
	FromEntriesSequence.prototype.cacheResult=
	cacheResultThrough;


	function flipFactory(iterable){
	var flipSequence=makeSequence(iterable);
	flipSequence._iter=iterable;
	flipSequence.size=iterable.size;
	flipSequence.flip=function(){return iterable;};
	flipSequence.reverse=function(){
	var reversedSequence=iterable.reverse.apply(this);// super.reverse()
	reversedSequence.flip=function(){return iterable.reverse();};
	return reversedSequence;
	};
	flipSequence.has=function(key){return iterable.includes(key);};
	flipSequence.includes=function(key){return iterable.has(key);};
	flipSequence.cacheResult=cacheResultThrough;
	flipSequence.__iterateUncached=function(fn,reverse){var this$0=this;
	return iterable.__iterate(function(v,k){return fn(k,v,this$0)!==false;},reverse);
	};
	flipSequence.__iteratorUncached=function(type,reverse){
	if(type===ITERATE_ENTRIES){
	var iterator=iterable.__iterator(type,reverse);
	return new Iterator(function(){
	var step=iterator.next();
	if(!step.done){
	var k=step.value[0];
	step.value[0]=step.value[1];
	step.value[1]=k;
	}
	return step;
	});
	}
	return iterable.__iterator(
	type===ITERATE_VALUES?ITERATE_KEYS:ITERATE_VALUES,
	reverse);

	};
	return flipSequence;
	}


	function mapFactory(iterable,mapper,context){
	var mappedSequence=makeSequence(iterable);
	mappedSequence.size=iterable.size;
	mappedSequence.has=function(key){return iterable.has(key);};
	mappedSequence.get=function(key,notSetValue){
	var v=iterable.get(key,NOT_SET);
	return v===NOT_SET?
	notSetValue:
	mapper.call(context,v,key,iterable);
	};
	mappedSequence.__iterateUncached=function(fn,reverse){var this$0=this;
	return iterable.__iterate(
	function(v,k,c){return fn(mapper.call(context,v,k,c),k,this$0)!==false;},
	reverse);

	};
	mappedSequence.__iteratorUncached=function(type,reverse){
	var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);
	return new Iterator(function(){
	var step=iterator.next();
	if(step.done){
	return step;
	}
	var entry=step.value;
	var key=entry[0];
	return iteratorValue(
	type,
	key,
	mapper.call(context,entry[1],key,iterable),
	step);

	});
	};
	return mappedSequence;
	}


	function reverseFactory(iterable,useKeys){
	var reversedSequence=makeSequence(iterable);
	reversedSequence._iter=iterable;
	reversedSequence.size=iterable.size;
	reversedSequence.reverse=function(){return iterable;};
	if(iterable.flip){
	reversedSequence.flip=function(){
	var flipSequence=flipFactory(iterable);
	flipSequence.reverse=function(){return iterable.flip();};
	return flipSequence;
	};
	}
	reversedSequence.get=function(key,notSetValue)
	{return iterable.get(useKeys?key:-1-key,notSetValue);};
	reversedSequence.has=function(key)
	{return iterable.has(useKeys?key:-1-key);};
	reversedSequence.includes=function(value){return iterable.includes(value);};
	reversedSequence.cacheResult=cacheResultThrough;
	reversedSequence.__iterate=function(fn,reverse){var this$0=this;
	return iterable.__iterate(function(v,k){return fn(v,k,this$0);},!reverse);
	};
	reversedSequence.__iterator=
	function(type,reverse){return iterable.__iterator(type,!reverse);};
	return reversedSequence;
	}


	function filterFactory(iterable,predicate,context,useKeys){
	var filterSequence=makeSequence(iterable);
	if(useKeys){
	filterSequence.has=function(key){
	var v=iterable.get(key,NOT_SET);
	return v!==NOT_SET&&!!predicate.call(context,v,key,iterable);
	};
	filterSequence.get=function(key,notSetValue){
	var v=iterable.get(key,NOT_SET);
	return v!==NOT_SET&&predicate.call(context,v,key,iterable)?
	v:notSetValue;
	};
	}
	filterSequence.__iterateUncached=function(fn,reverse){var this$0=this;
	var iterations=0;
	iterable.__iterate(function(v,k,c){
	if(predicate.call(context,v,k,c)){
	iterations++;
	return fn(v,useKeys?k:iterations-1,this$0);
	}
	},reverse);
	return iterations;
	};
	filterSequence.__iteratorUncached=function(type,reverse){
	var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);
	var iterations=0;
	return new Iterator(function(){
	while(true){
	var step=iterator.next();
	if(step.done){
	return step;
	}
	var entry=step.value;
	var key=entry[0];
	var value=entry[1];
	if(predicate.call(context,value,key,iterable)){
	return iteratorValue(type,useKeys?key:iterations++,value,step);
	}
	}
	});
	};
	return filterSequence;
	}


	function countByFactory(iterable,grouper,context){
	var groups=Map().asMutable();
	iterable.__iterate(function(v,k){
	groups.update(
	grouper.call(context,v,k,iterable),
	0,
	function(a){return a+1;});

	});
	return groups.asImmutable();
	}


	function groupByFactory(iterable,grouper,context){
	var isKeyedIter=isKeyed(iterable);
	var groups=(isOrdered(iterable)?OrderedMap():Map()).asMutable();
	iterable.__iterate(function(v,k){
	groups.update(
	grouper.call(context,v,k,iterable),
	function(a){return a=a||[],a.push(isKeyedIter?[k,v]:v),a;});

	});
	var coerce=iterableClass(iterable);
	return groups.map(function(arr){return reify(iterable,coerce(arr));});
	}


	function sliceFactory(iterable,begin,end,useKeys){
	var originalSize=iterable.size;

	// Sanitize begin & end using this shorthand for ToInt32(argument)
	// http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	if(begin!==undefined){
	begin=begin|0;
	}
	if(end!==undefined){
	if(end===Infinity){
	end=originalSize;
	}else{
	end=end|0;
	}
	}

	if(wholeSlice(begin,end,originalSize)){
	return iterable;
	}

	var resolvedBegin=resolveBegin(begin,originalSize);
	var resolvedEnd=resolveEnd(end,originalSize);

	// begin or end will be NaN if they were provided as negative numbers and
	// this iterable's size is unknown. In that case, cache first so there is
	// a known size and these do not resolve to NaN.
	if(resolvedBegin!==resolvedBegin||resolvedEnd!==resolvedEnd){
	return sliceFactory(iterable.toSeq().cacheResult(),begin,end,useKeys);
	}

	// Note: resolvedEnd is undefined when the original sequence's length is
	// unknown and this slice did not supply an end and should contain all
	// elements after resolvedBegin.
	// In that case, resolvedSize will be NaN and sliceSize will remain undefined.
	var resolvedSize=resolvedEnd-resolvedBegin;
	var sliceSize;
	if(resolvedSize===resolvedSize){
	sliceSize=resolvedSize<0?0:resolvedSize;
	}

	var sliceSeq=makeSequence(iterable);

	// If iterable.size is undefined, the size of the realized sliceSeq is
	// unknown at this point unless the number of items to slice is 0
	sliceSeq.size=sliceSize===0?sliceSize:iterable.size&&sliceSize||undefined;

	if(!useKeys&&isSeq(iterable)&&sliceSize>=0){
	sliceSeq.get=function(index,notSetValue){
	index=wrapIndex(this,index);
	return index>=0&&index<sliceSize?
	iterable.get(index+resolvedBegin,notSetValue):
	notSetValue;
	};
	}

	sliceSeq.__iterateUncached=function(fn,reverse){var this$0=this;
	if(sliceSize===0){
	return 0;
	}
	if(reverse){
	return this.cacheResult().__iterate(fn,reverse);
	}
	var skipped=0;
	var isSkipping=true;
	var iterations=0;
	iterable.__iterate(function(v,k){
	if(!(isSkipping&&(isSkipping=skipped++<resolvedBegin))){
	iterations++;
	return fn(v,useKeys?k:iterations-1,this$0)!==false&&
	iterations!==sliceSize;
	}
	});
	return iterations;
	};

	sliceSeq.__iteratorUncached=function(type,reverse){
	if(sliceSize!==0&&reverse){
	return this.cacheResult().__iterator(type,reverse);
	}
	// Don't bother instantiating parent iterator if taking 0.
	var iterator=sliceSize!==0&&iterable.__iterator(type,reverse);
	var skipped=0;
	var iterations=0;
	return new Iterator(function(){
	while(skipped++<resolvedBegin){
	iterator.next();
	}
	if(++iterations>sliceSize){
	return iteratorDone();
	}
	var step=iterator.next();
	if(useKeys||type===ITERATE_VALUES){
	return step;
	}else if(type===ITERATE_KEYS){
	return iteratorValue(type,iterations-1,undefined,step);
	}else{
	return iteratorValue(type,iterations-1,step.value[1],step);
	}
	});
	};

	return sliceSeq;
	}


	function takeWhileFactory(iterable,predicate,context){
	var takeSequence=makeSequence(iterable);
	takeSequence.__iterateUncached=function(fn,reverse){var this$0=this;
	if(reverse){
	return this.cacheResult().__iterate(fn,reverse);
	}
	var iterations=0;
	iterable.__iterate(function(v,k,c)
	{return predicate.call(context,v,k,c)&&++iterations&&fn(v,k,this$0);});

	return iterations;
	};
	takeSequence.__iteratorUncached=function(type,reverse){var this$0=this;
	if(reverse){
	return this.cacheResult().__iterator(type,reverse);
	}
	var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);
	var iterating=true;
	return new Iterator(function(){
	if(!iterating){
	return iteratorDone();
	}
	var step=iterator.next();
	if(step.done){
	return step;
	}
	var entry=step.value;
	var k=entry[0];
	var v=entry[1];
	if(!predicate.call(context,v,k,this$0)){
	iterating=false;
	return iteratorDone();
	}
	return type===ITERATE_ENTRIES?step:
	iteratorValue(type,k,v,step);
	});
	};
	return takeSequence;
	}


	function skipWhileFactory(iterable,predicate,context,useKeys){
	var skipSequence=makeSequence(iterable);
	skipSequence.__iterateUncached=function(fn,reverse){var this$0=this;
	if(reverse){
	return this.cacheResult().__iterate(fn,reverse);
	}
	var isSkipping=true;
	var iterations=0;
	iterable.__iterate(function(v,k,c){
	if(!(isSkipping&&(isSkipping=predicate.call(context,v,k,c)))){
	iterations++;
	return fn(v,useKeys?k:iterations-1,this$0);
	}
	});
	return iterations;
	};
	skipSequence.__iteratorUncached=function(type,reverse){var this$0=this;
	if(reverse){
	return this.cacheResult().__iterator(type,reverse);
	}
	var iterator=iterable.__iterator(ITERATE_ENTRIES,reverse);
	var skipping=true;
	var iterations=0;
	return new Iterator(function(){
	var step,k,v;
	do{
	step=iterator.next();
	if(step.done){
	if(useKeys||type===ITERATE_VALUES){
	return step;
	}else if(type===ITERATE_KEYS){
	return iteratorValue(type,iterations++,undefined,step);
	}else{
	return iteratorValue(type,iterations++,step.value[1],step);
	}
	}
	var entry=step.value;
	k=entry[0];
	v=entry[1];
	skipping&&(skipping=predicate.call(context,v,k,this$0));
	}while(skipping);
	return type===ITERATE_ENTRIES?step:
	iteratorValue(type,k,v,step);
	});
	};
	return skipSequence;
	}


	function concatFactory(iterable,values){
	var isKeyedIterable=isKeyed(iterable);
	var iters=[iterable].concat(values).map(function(v){
	if(!isIterable(v)){
	v=isKeyedIterable?
	keyedSeqFromValue(v):
	indexedSeqFromValue(Array.isArray(v)?v:[v]);
	}else if(isKeyedIterable){
	v=KeyedIterable(v);
	}
	return v;
	}).filter(function(v){return v.size!==0;});

	if(iters.length===0){
	return iterable;
	}

	if(iters.length===1){
	var singleton=iters[0];
	if(singleton===iterable||
	isKeyedIterable&&isKeyed(singleton)||
	isIndexed(iterable)&&isIndexed(singleton)){
	return singleton;
	}
	}

	var concatSeq=new ArraySeq(iters);
	if(isKeyedIterable){
	concatSeq=concatSeq.toKeyedSeq();
	}else if(!isIndexed(iterable)){
	concatSeq=concatSeq.toSetSeq();
	}
	concatSeq=concatSeq.flatten(true);
	concatSeq.size=iters.reduce(
	function(sum,seq){
	if(sum!==undefined){
	var size=seq.size;
	if(size!==undefined){
	return sum+size;
	}
	}
	},
	0);

	return concatSeq;
	}


	function flattenFactory(iterable,depth,useKeys){
	var flatSequence=makeSequence(iterable);
	flatSequence.__iterateUncached=function(fn,reverse){
	var iterations=0;
	var stopped=false;
	function flatDeep(iter,currentDepth){var this$0=this;
	iter.__iterate(function(v,k){
	if((!depth||currentDepth<depth)&&isIterable(v)){
	flatDeep(v,currentDepth+1);
	}else if(fn(v,useKeys?k:iterations++,this$0)===false){
	stopped=true;
	}
	return!stopped;
	},reverse);
	}
	flatDeep(iterable,0);
	return iterations;
	};
	flatSequence.__iteratorUncached=function(type,reverse){
	var iterator=iterable.__iterator(type,reverse);
	var stack=[];
	var iterations=0;
	return new Iterator(function(){
	while(iterator){
	var step=iterator.next();
	if(step.done!==false){
	iterator=stack.pop();
	continue;
	}
	var v=step.value;
	if(type===ITERATE_ENTRIES){
	v=v[1];
	}
	if((!depth||stack.length<depth)&&isIterable(v)){
	stack.push(iterator);
	iterator=v.__iterator(type,reverse);
	}else{
	return useKeys?step:iteratorValue(type,iterations++,v,step);
	}
	}
	return iteratorDone();
	});
	};
	return flatSequence;
	}


	function flatMapFactory(iterable,mapper,context){
	var coerce=iterableClass(iterable);
	return iterable.toSeq().map(
	function(v,k){return coerce(mapper.call(context,v,k,iterable));}).
	flatten(true);
	}


	function interposeFactory(iterable,separator){
	var interposedSequence=makeSequence(iterable);
	interposedSequence.size=iterable.size&&iterable.size*2-1;
	interposedSequence.__iterateUncached=function(fn,reverse){var this$0=this;
	var iterations=0;
	iterable.__iterate(function(v,k)
	{return(!iterations||fn(separator,iterations++,this$0)!==false)&&
	fn(v,iterations++,this$0)!==false;},
	reverse);

	return iterations;
	};
	interposedSequence.__iteratorUncached=function(type,reverse){
	var iterator=iterable.__iterator(ITERATE_VALUES,reverse);
	var iterations=0;
	var step;
	return new Iterator(function(){
	if(!step||iterations%2){
	step=iterator.next();
	if(step.done){
	return step;
	}
	}
	return iterations%2?
	iteratorValue(type,iterations++,separator):
	iteratorValue(type,iterations++,step.value,step);
	});
	};
	return interposedSequence;
	}


	function sortFactory(iterable,comparator,mapper){
	if(!comparator){
	comparator=defaultComparator;
	}
	var isKeyedIterable=isKeyed(iterable);
	var index=0;
	var entries=iterable.toSeq().map(
	function(v,k){return[k,v,index++,mapper?mapper(v,k,iterable):v];}).
	toArray();
	entries.sort(function(a,b){return comparator(a[3],b[3])||a[2]-b[2];}).forEach(
	isKeyedIterable?
	function(v,i){entries[i].length=2;}:
	function(v,i){entries[i]=v[1];});

	return isKeyedIterable?KeyedSeq(entries):
	isIndexed(iterable)?IndexedSeq(entries):
	SetSeq(entries);
	}


	function maxFactory(iterable,comparator,mapper){
	if(!comparator){
	comparator=defaultComparator;
	}
	if(mapper){
	var entry=iterable.toSeq().
	map(function(v,k){return[v,mapper(v,k,iterable)];}).
	reduce(function(a,b){return maxCompare(comparator,a[1],b[1])?b:a;});
	return entry&&entry[0];
	}else{
	return iterable.reduce(function(a,b){return maxCompare(comparator,a,b)?b:a;});
	}
	}

	function maxCompare(comparator,a,b){
	var comp=comparator(b,a);
	// b is considered the new max if the comparator declares them equal, but
	// they are not equal and b is in fact a nullish value.
	return comp===0&&b!==a&&(b===undefined||b===null||b!==b)||comp>0;
	}


	function zipWithFactory(keyIter,zipper,iters){
	var zipSequence=makeSequence(keyIter);
	zipSequence.size=new ArraySeq(iters).map(function(i){return i.size;}).min();
	// Note: this a generic base implementation of __iterate in terms of
	// __iterator which may be more generically useful in the future.
	zipSequence.__iterate=function(fn,reverse){
	/* generic:
	      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        iterations++;
	        if (fn(step.value[1], step.value[0], this) === false) {
	          break;
	        }
	      }
	      return iterations;
	      */
	// indexed:
	var iterator=this.__iterator(ITERATE_VALUES,reverse);
	var step;
	var iterations=0;
	while(!(step=iterator.next()).done){
	if(fn(step.value,iterations++,this)===false){
	break;
	}
	}
	return iterations;
	};
	zipSequence.__iteratorUncached=function(type,reverse){
	var iterators=iters.map(function(i)
	{return i=Iterable(i),getIterator(reverse?i.reverse():i);});

	var iterations=0;
	var isDone=false;
	return new Iterator(function(){
	var steps;
	if(!isDone){
	steps=iterators.map(function(i){return i.next();});
	isDone=steps.some(function(s){return s.done;});
	}
	if(isDone){
	return iteratorDone();
	}
	return iteratorValue(
	type,
	iterations++,
	zipper.apply(null,steps.map(function(s){return s.value;})));

	});
	};
	return zipSequence;
	}


	// #pragma Helper Functions

	function reify(iter,seq){
	return isSeq(iter)?seq:iter.constructor(seq);
	}

	function validateEntry(entry){
	if(entry!==Object(entry)){
	throw new TypeError('Expected [K, V] tuple: '+entry);
	}
	}

	function resolveSize(iter){
	assertNotInfinite(iter.size);
	return ensureSize(iter);
	}

	function iterableClass(iterable){
	return isKeyed(iterable)?KeyedIterable:
	isIndexed(iterable)?IndexedIterable:
	SetIterable;
	}

	function makeSequence(iterable){
	return Object.create(
	(
	isKeyed(iterable)?KeyedSeq:
	isIndexed(iterable)?IndexedSeq:
	SetSeq).
	prototype);

	}

	function cacheResultThrough(){
	if(this._iter.cacheResult){
	this._iter.cacheResult();
	this.size=this._iter.size;
	return this;
	}else{
	return Seq.prototype.cacheResult.call(this);
	}
	}

	function defaultComparator(a,b){
	return a>b?1:a<b?-1:0;
	}

	function forceIterator(keyPath){
	var iter=getIterator(keyPath);
	if(!iter){
	// Array might not be iterable in this environment, so we need a fallback
	// to our wrapped type.
	if(!isArrayLike(keyPath)){
	throw new TypeError('Expected iterable or array-like: '+keyPath);
	}
	iter=getIterator(Iterable(keyPath));
	}
	return iter;
	}

	createClass(Record,KeyedCollection);

	function Record(defaultValues,name){
	var hasInitialized;

	var RecordType=function Record(values){
	if(values instanceof RecordType){
	return values;
	}
	if(!(this instanceof RecordType)){
	return new RecordType(values);
	}
	if(!hasInitialized){
	hasInitialized=true;
	var keys=Object.keys(defaultValues);
	setProps(RecordTypePrototype,keys);
	RecordTypePrototype.size=keys.length;
	RecordTypePrototype._name=name;
	RecordTypePrototype._keys=keys;
	RecordTypePrototype._defaultValues=defaultValues;
	}
	this._map=Map(values);
	};

	var RecordTypePrototype=RecordType.prototype=Object.create(RecordPrototype);
	RecordTypePrototype.constructor=RecordType;

	return RecordType;
	}

	Record.prototype.toString=function(){
	return this.__toString(recordName(this)+' {','}');
	};

	// @pragma Access

	Record.prototype.has=function(k){
	return this._defaultValues.hasOwnProperty(k);
	};

	Record.prototype.get=function(k,notSetValue){
	if(!this.has(k)){
	return notSetValue;
	}
	var defaultVal=this._defaultValues[k];
	return this._map?this._map.get(k,defaultVal):defaultVal;
	};

	// @pragma Modification

	Record.prototype.clear=function(){
	if(this.__ownerID){
	this._map&&this._map.clear();
	return this;
	}
	var RecordType=this.constructor;
	return RecordType._empty||(RecordType._empty=makeRecord(this,emptyMap()));
	};

	Record.prototype.set=function(k,v){
	if(!this.has(k)){
	throw new Error('Cannot set unknown key "'+k+'" on '+recordName(this));
	}
	if(this._map&&!this._map.has(k)){
	var defaultVal=this._defaultValues[k];
	if(v===defaultVal){
	return this;
	}
	}
	var newMap=this._map&&this._map.set(k,v);
	if(this.__ownerID||newMap===this._map){
	return this;
	}
	return makeRecord(this,newMap);
	};

	Record.prototype.remove=function(k){
	if(!this.has(k)){
	return this;
	}
	var newMap=this._map&&this._map.remove(k);
	if(this.__ownerID||newMap===this._map){
	return this;
	}
	return makeRecord(this,newMap);
	};

	Record.prototype.wasAltered=function(){
	return this._map.wasAltered();
	};

	Record.prototype.__iterator=function(type,reverse){var this$0=this;
	return KeyedIterable(this._defaultValues).map(function(_,k){return this$0.get(k);}).__iterator(type,reverse);
	};

	Record.prototype.__iterate=function(fn,reverse){var this$0=this;
	return KeyedIterable(this._defaultValues).map(function(_,k){return this$0.get(k);}).__iterate(fn,reverse);
	};

	Record.prototype.__ensureOwner=function(ownerID){
	if(ownerID===this.__ownerID){
	return this;
	}
	var newMap=this._map&&this._map.__ensureOwner(ownerID);
	if(!ownerID){
	this.__ownerID=ownerID;
	this._map=newMap;
	return this;
	}
	return makeRecord(this,newMap,ownerID);
	};


	var RecordPrototype=Record.prototype;
	RecordPrototype[DELETE]=RecordPrototype.remove;
	RecordPrototype.deleteIn=
	RecordPrototype.removeIn=MapPrototype.removeIn;
	RecordPrototype.merge=MapPrototype.merge;
	RecordPrototype.mergeWith=MapPrototype.mergeWith;
	RecordPrototype.mergeIn=MapPrototype.mergeIn;
	RecordPrototype.mergeDeep=MapPrototype.mergeDeep;
	RecordPrototype.mergeDeepWith=MapPrototype.mergeDeepWith;
	RecordPrototype.mergeDeepIn=MapPrototype.mergeDeepIn;
	RecordPrototype.setIn=MapPrototype.setIn;
	RecordPrototype.update=MapPrototype.update;
	RecordPrototype.updateIn=MapPrototype.updateIn;
	RecordPrototype.withMutations=MapPrototype.withMutations;
	RecordPrototype.asMutable=MapPrototype.asMutable;
	RecordPrototype.asImmutable=MapPrototype.asImmutable;


	function makeRecord(likeRecord,map,ownerID){
	var record=Object.create(Object.getPrototypeOf(likeRecord));
	record._map=map;
	record.__ownerID=ownerID;
	return record;
	}

	function recordName(record){
	return record._name||record.constructor.name||'Record';
	}

	function setProps(prototype,names){
	try{
	names.forEach(setProp.bind(undefined,prototype));
	}catch(error){
	// Object.defineProperty failed. Probably IE8.
	}
	}

	function setProp(prototype,name){
	Object.defineProperty(prototype,name,{
	get:function get(){
	return this.get(name);
	},
	set:function set(value){
	invariant(this.__ownerID,'Cannot set on an immutable record.');
	this.set(name,value);
	}});

	}

	createClass(Set,SetCollection);

	// @pragma Construction

	function Set(value){
	return value===null||value===undefined?emptySet():
	isSet(value)&&!isOrdered(value)?value:
	emptySet().withMutations(function(set){
	var iter=SetIterable(value);
	assertNotInfinite(iter.size);
	iter.forEach(function(v){return set.add(v);});
	});
	}

	Set.of=function()/*...values*/{
	return this(arguments);
	};

	Set.fromKeys=function(value){
	return this(KeyedIterable(value).keySeq());
	};

	Set.prototype.toString=function(){
	return this.__toString('Set {','}');
	};

	// @pragma Access

	Set.prototype.has=function(value){
	return this._map.has(value);
	};

	// @pragma Modification

	Set.prototype.add=function(value){
	return updateSet(this,this._map.set(value,true));
	};

	Set.prototype.remove=function(value){
	return updateSet(this,this._map.remove(value));
	};

	Set.prototype.clear=function(){
	return updateSet(this,this._map.clear());
	};

	// @pragma Composition

	Set.prototype.union=function(){var iters=SLICE$0.call(arguments,0);
	iters=iters.filter(function(x){return x.size!==0;});
	if(iters.length===0){
	return this;
	}
	if(this.size===0&&!this.__ownerID&&iters.length===1){
	return this.constructor(iters[0]);
	}
	return this.withMutations(function(set){
	for(var ii=0;ii<iters.length;ii++){
	SetIterable(iters[ii]).forEach(function(value){return set.add(value);});
	}
	});
	};

	Set.prototype.intersect=function(){var iters=SLICE$0.call(arguments,0);
	if(iters.length===0){
	return this;
	}
	iters=iters.map(function(iter){return SetIterable(iter);});
	var originalSet=this;
	return this.withMutations(function(set){
	originalSet.forEach(function(value){
	if(!iters.every(function(iter){return iter.includes(value);})){
	set.remove(value);
	}
	});
	});
	};

	Set.prototype.subtract=function(){var iters=SLICE$0.call(arguments,0);
	if(iters.length===0){
	return this;
	}
	iters=iters.map(function(iter){return SetIterable(iter);});
	var originalSet=this;
	return this.withMutations(function(set){
	originalSet.forEach(function(value){
	if(iters.some(function(iter){return iter.includes(value);})){
	set.remove(value);
	}
	});
	});
	};

	Set.prototype.merge=function(){
	return this.union.apply(this,arguments);
	};

	Set.prototype.mergeWith=function(merger){var iters=SLICE$0.call(arguments,1);
	return this.union.apply(this,iters);
	};

	Set.prototype.sort=function(comparator){
	// Late binding
	return OrderedSet(sortFactory(this,comparator));
	};

	Set.prototype.sortBy=function(mapper,comparator){
	// Late binding
	return OrderedSet(sortFactory(this,comparator,mapper));
	};

	Set.prototype.wasAltered=function(){
	return this._map.wasAltered();
	};

	Set.prototype.__iterate=function(fn,reverse){var this$0=this;
	return this._map.__iterate(function(_,k){return fn(k,k,this$0);},reverse);
	};

	Set.prototype.__iterator=function(type,reverse){
	return this._map.map(function(_,k){return k;}).__iterator(type,reverse);
	};

	Set.prototype.__ensureOwner=function(ownerID){
	if(ownerID===this.__ownerID){
	return this;
	}
	var newMap=this._map.__ensureOwner(ownerID);
	if(!ownerID){
	this.__ownerID=ownerID;
	this._map=newMap;
	return this;
	}
	return this.__make(newMap,ownerID);
	};


	function isSet(maybeSet){
	return!!(maybeSet&&maybeSet[IS_SET_SENTINEL]);
	}

	Set.isSet=isSet;

	var IS_SET_SENTINEL='@@__IMMUTABLE_SET__@@';

	var SetPrototype=Set.prototype;
	SetPrototype[IS_SET_SENTINEL]=true;
	SetPrototype[DELETE]=SetPrototype.remove;
	SetPrototype.mergeDeep=SetPrototype.merge;
	SetPrototype.mergeDeepWith=SetPrototype.mergeWith;
	SetPrototype.withMutations=MapPrototype.withMutations;
	SetPrototype.asMutable=MapPrototype.asMutable;
	SetPrototype.asImmutable=MapPrototype.asImmutable;

	SetPrototype.__empty=emptySet;
	SetPrototype.__make=makeSet;

	function updateSet(set,newMap){
	if(set.__ownerID){
	set.size=newMap.size;
	set._map=newMap;
	return set;
	}
	return newMap===set._map?set:
	newMap.size===0?set.__empty():
	set.__make(newMap);
	}

	function makeSet(map,ownerID){
	var set=Object.create(SetPrototype);
	set.size=map?map.size:0;
	set._map=map;
	set.__ownerID=ownerID;
	return set;
	}

	var EMPTY_SET;
	function emptySet(){
	return EMPTY_SET||(EMPTY_SET=makeSet(emptyMap()));
	}

	createClass(OrderedSet,Set);

	// @pragma Construction

	function OrderedSet(value){
	return value===null||value===undefined?emptyOrderedSet():
	isOrderedSet(value)?value:
	emptyOrderedSet().withMutations(function(set){
	var iter=SetIterable(value);
	assertNotInfinite(iter.size);
	iter.forEach(function(v){return set.add(v);});
	});
	}

	OrderedSet.of=function()/*...values*/{
	return this(arguments);
	};

	OrderedSet.fromKeys=function(value){
	return this(KeyedIterable(value).keySeq());
	};

	OrderedSet.prototype.toString=function(){
	return this.__toString('OrderedSet {','}');
	};


	function isOrderedSet(maybeOrderedSet){
	return isSet(maybeOrderedSet)&&isOrdered(maybeOrderedSet);
	}

	OrderedSet.isOrderedSet=isOrderedSet;

	var OrderedSetPrototype=OrderedSet.prototype;
	OrderedSetPrototype[IS_ORDERED_SENTINEL]=true;

	OrderedSetPrototype.__empty=emptyOrderedSet;
	OrderedSetPrototype.__make=makeOrderedSet;

	function makeOrderedSet(map,ownerID){
	var set=Object.create(OrderedSetPrototype);
	set.size=map?map.size:0;
	set._map=map;
	set.__ownerID=ownerID;
	return set;
	}

	var EMPTY_ORDERED_SET;
	function emptyOrderedSet(){
	return EMPTY_ORDERED_SET||(EMPTY_ORDERED_SET=makeOrderedSet(emptyOrderedMap()));
	}

	createClass(Stack,IndexedCollection);

	// @pragma Construction

	function Stack(value){
	return value===null||value===undefined?emptyStack():
	isStack(value)?value:
	emptyStack().unshiftAll(value);
	}

	Stack.of=function()/*...values*/{
	return this(arguments);
	};

	Stack.prototype.toString=function(){
	return this.__toString('Stack [',']');
	};

	// @pragma Access

	Stack.prototype.get=function(index,notSetValue){
	var head=this._head;
	index=wrapIndex(this,index);
	while(head&&index--){
	head=head.next;
	}
	return head?head.value:notSetValue;
	};

	Stack.prototype.peek=function(){
	return this._head&&this._head.value;
	};

	// @pragma Modification

	Stack.prototype.push=function()/*...values*/{
	if(arguments.length===0){
	return this;
	}
	var newSize=this.size+arguments.length;
	var head=this._head;
	for(var ii=arguments.length-1;ii>=0;ii--){
	head={
	value:arguments[ii],
	next:head};

	}
	if(this.__ownerID){
	this.size=newSize;
	this._head=head;
	this.__hash=undefined;
	this.__altered=true;
	return this;
	}
	return makeStack(newSize,head);
	};

	Stack.prototype.pushAll=function(iter){
	iter=IndexedIterable(iter);
	if(iter.size===0){
	return this;
	}
	assertNotInfinite(iter.size);
	var newSize=this.size;
	var head=this._head;
	iter.reverse().forEach(function(value){
	newSize++;
	head={
	value:value,
	next:head};

	});
	if(this.__ownerID){
	this.size=newSize;
	this._head=head;
	this.__hash=undefined;
	this.__altered=true;
	return this;
	}
	return makeStack(newSize,head);
	};

	Stack.prototype.pop=function(){
	return this.slice(1);
	};

	Stack.prototype.unshift=function()/*...values*/{
	return this.push.apply(this,arguments);
	};

	Stack.prototype.unshiftAll=function(iter){
	return this.pushAll(iter);
	};

	Stack.prototype.shift=function(){
	return this.pop.apply(this,arguments);
	};

	Stack.prototype.clear=function(){
	if(this.size===0){
	return this;
	}
	if(this.__ownerID){
	this.size=0;
	this._head=undefined;
	this.__hash=undefined;
	this.__altered=true;
	return this;
	}
	return emptyStack();
	};

	Stack.prototype.slice=function(begin,end){
	if(wholeSlice(begin,end,this.size)){
	return this;
	}
	var resolvedBegin=resolveBegin(begin,this.size);
	var resolvedEnd=resolveEnd(end,this.size);
	if(resolvedEnd!==this.size){
	// super.slice(begin, end);
	return IndexedCollection.prototype.slice.call(this,begin,end);
	}
	var newSize=this.size-resolvedBegin;
	var head=this._head;
	while(resolvedBegin--){
	head=head.next;
	}
	if(this.__ownerID){
	this.size=newSize;
	this._head=head;
	this.__hash=undefined;
	this.__altered=true;
	return this;
	}
	return makeStack(newSize,head);
	};

	// @pragma Mutability

	Stack.prototype.__ensureOwner=function(ownerID){
	if(ownerID===this.__ownerID){
	return this;
	}
	if(!ownerID){
	this.__ownerID=ownerID;
	this.__altered=false;
	return this;
	}
	return makeStack(this.size,this._head,ownerID,this.__hash);
	};

	// @pragma Iteration

	Stack.prototype.__iterate=function(fn,reverse){
	if(reverse){
	return this.reverse().__iterate(fn);
	}
	var iterations=0;
	var node=this._head;
	while(node){
	if(fn(node.value,iterations++,this)===false){
	break;
	}
	node=node.next;
	}
	return iterations;
	};

	Stack.prototype.__iterator=function(type,reverse){
	if(reverse){
	return this.reverse().__iterator(type);
	}
	var iterations=0;
	var node=this._head;
	return new Iterator(function(){
	if(node){
	var value=node.value;
	node=node.next;
	return iteratorValue(type,iterations++,value);
	}
	return iteratorDone();
	});
	};


	function isStack(maybeStack){
	return!!(maybeStack&&maybeStack[IS_STACK_SENTINEL]);
	}

	Stack.isStack=isStack;

	var IS_STACK_SENTINEL='@@__IMMUTABLE_STACK__@@';

	var StackPrototype=Stack.prototype;
	StackPrototype[IS_STACK_SENTINEL]=true;
	StackPrototype.withMutations=MapPrototype.withMutations;
	StackPrototype.asMutable=MapPrototype.asMutable;
	StackPrototype.asImmutable=MapPrototype.asImmutable;
	StackPrototype.wasAltered=MapPrototype.wasAltered;


	function makeStack(size,head,ownerID,hash){
	var map=Object.create(StackPrototype);
	map.size=size;
	map._head=head;
	map.__ownerID=ownerID;
	map.__hash=hash;
	map.__altered=false;
	return map;
	}

	var EMPTY_STACK;
	function emptyStack(){
	return EMPTY_STACK||(EMPTY_STACK=makeStack(0));
	}

	/**
	   * Contributes additional methods to a constructor
	   */
	function mixin(ctor,methods){
	var keyCopier=function keyCopier(key){ctor.prototype[key]=methods[key];};
	Object.keys(methods).forEach(keyCopier);
	Object.getOwnPropertySymbols&&
	Object.getOwnPropertySymbols(methods).forEach(keyCopier);
	return ctor;
	}

	Iterable.Iterator=Iterator;

	mixin(Iterable,{

	// ### Conversion to other types

	toArray:function toArray(){
	assertNotInfinite(this.size);
	var array=new Array(this.size||0);
	this.valueSeq().__iterate(function(v,i){array[i]=v;});
	return array;
	},

	toIndexedSeq:function toIndexedSeq(){
	return new ToIndexedSequence(this);
	},

	toJS:function toJS(){
	return this.toSeq().map(
	function(value){return value&&typeof value.toJS==='function'?value.toJS():value;}).
	__toJS();
	},

	toJSON:function toJSON(){
	return this.toSeq().map(
	function(value){return value&&typeof value.toJSON==='function'?value.toJSON():value;}).
	__toJS();
	},

	toKeyedSeq:function toKeyedSeq(){
	return new ToKeyedSequence(this,true);
	},

	toMap:function toMap(){
	// Use Late Binding here to solve the circular dependency.
	return Map(this.toKeyedSeq());
	},

	toObject:function toObject(){
	assertNotInfinite(this.size);
	var object={};
	this.__iterate(function(v,k){object[k]=v;});
	return object;
	},

	toOrderedMap:function toOrderedMap(){
	// Use Late Binding here to solve the circular dependency.
	return OrderedMap(this.toKeyedSeq());
	},

	toOrderedSet:function toOrderedSet(){
	// Use Late Binding here to solve the circular dependency.
	return OrderedSet(isKeyed(this)?this.valueSeq():this);
	},

	toSet:function toSet(){
	// Use Late Binding here to solve the circular dependency.
	return Set(isKeyed(this)?this.valueSeq():this);
	},

	toSetSeq:function toSetSeq(){
	return new ToSetSequence(this);
	},

	toSeq:function toSeq(){
	return isIndexed(this)?this.toIndexedSeq():
	isKeyed(this)?this.toKeyedSeq():
	this.toSetSeq();
	},

	toStack:function toStack(){
	// Use Late Binding here to solve the circular dependency.
	return Stack(isKeyed(this)?this.valueSeq():this);
	},

	toList:function toList(){
	// Use Late Binding here to solve the circular dependency.
	return List(isKeyed(this)?this.valueSeq():this);
	},


	// ### Common JavaScript methods and properties

	toString:function toString(){
	return'[Iterable]';
	},

	__toString:function __toString(head,tail){
	if(this.size===0){
	return head+tail;
	}
	return head+' '+this.toSeq().map(this.__toStringMapper).join(', ')+' '+tail;
	},


	// ### ES6 Collection methods (ES6 Array and Map)

	concat:function concat(){var values=SLICE$0.call(arguments,0);
	return reify(this,concatFactory(this,values));
	},

	includes:function includes(searchValue){
	return this.some(function(value){return is(value,searchValue);});
	},

	entries:function entries(){
	return this.__iterator(ITERATE_ENTRIES);
	},

	every:function every(predicate,context){
	assertNotInfinite(this.size);
	var returnValue=true;
	this.__iterate(function(v,k,c){
	if(!predicate.call(context,v,k,c)){
	returnValue=false;
	return false;
	}
	});
	return returnValue;
	},

	filter:function filter(predicate,context){
	return reify(this,filterFactory(this,predicate,context,true));
	},

	find:function find(predicate,context,notSetValue){
	var entry=this.findEntry(predicate,context);
	return entry?entry[1]:notSetValue;
	},

	forEach:function forEach(sideEffect,context){
	assertNotInfinite(this.size);
	return this.__iterate(context?sideEffect.bind(context):sideEffect);
	},

	join:function join(separator){
	assertNotInfinite(this.size);
	separator=separator!==undefined?''+separator:',';
	var joined='';
	var isFirst=true;
	this.__iterate(function(v){
	isFirst?isFirst=false:joined+=separator;
	joined+=v!==null&&v!==undefined?v.toString():'';
	});
	return joined;
	},

	keys:function keys(){
	return this.__iterator(ITERATE_KEYS);
	},

	map:function map(mapper,context){
	return reify(this,mapFactory(this,mapper,context));
	},

	reduce:function reduce(reducer,initialReduction,context){
	assertNotInfinite(this.size);
	var reduction;
	var useFirst;
	if(arguments.length<2){
	useFirst=true;
	}else{
	reduction=initialReduction;
	}
	this.__iterate(function(v,k,c){
	if(useFirst){
	useFirst=false;
	reduction=v;
	}else{
	reduction=reducer.call(context,reduction,v,k,c);
	}
	});
	return reduction;
	},

	reduceRight:function reduceRight(reducer,initialReduction,context){
	var reversed=this.toKeyedSeq().reverse();
	return reversed.reduce.apply(reversed,arguments);
	},

	reverse:function reverse(){
	return reify(this,reverseFactory(this,true));
	},

	slice:function slice(begin,end){
	return reify(this,sliceFactory(this,begin,end,true));
	},

	some:function some(predicate,context){
	return!this.every(not(predicate),context);
	},

	sort:function sort(comparator){
	return reify(this,sortFactory(this,comparator));
	},

	values:function values(){
	return this.__iterator(ITERATE_VALUES);
	},


	// ### More sequential methods

	butLast:function butLast(){
	return this.slice(0,-1);
	},

	isEmpty:function isEmpty(){
	return this.size!==undefined?this.size===0:!this.some(function(){return true;});
	},

	count:function count(predicate,context){
	return ensureSize(
	predicate?this.toSeq().filter(predicate,context):this);

	},

	countBy:function countBy(grouper,context){
	return countByFactory(this,grouper,context);
	},

	equals:function equals(other){
	return deepEqual(this,other);
	},

	entrySeq:function entrySeq(){
	var iterable=this;
	if(iterable._cache){
	// We cache as an entries array, so we can just return the cache!
	return new ArraySeq(iterable._cache);
	}
	var entriesSequence=iterable.toSeq().map(entryMapper).toIndexedSeq();
	entriesSequence.fromEntrySeq=function(){return iterable.toSeq();};
	return entriesSequence;
	},

	filterNot:function filterNot(predicate,context){
	return this.filter(not(predicate),context);
	},

	findEntry:function findEntry(predicate,context,notSetValue){
	var found=notSetValue;
	this.__iterate(function(v,k,c){
	if(predicate.call(context,v,k,c)){
	found=[k,v];
	return false;
	}
	});
	return found;
	},

	findKey:function findKey(predicate,context){
	var entry=this.findEntry(predicate,context);
	return entry&&entry[0];
	},

	findLast:function findLast(predicate,context,notSetValue){
	return this.toKeyedSeq().reverse().find(predicate,context,notSetValue);
	},

	findLastEntry:function findLastEntry(predicate,context,notSetValue){
	return this.toKeyedSeq().reverse().findEntry(predicate,context,notSetValue);
	},

	findLastKey:function findLastKey(predicate,context){
	return this.toKeyedSeq().reverse().findKey(predicate,context);
	},

	first:function first(){
	return this.find(returnTrue);
	},

	flatMap:function flatMap(mapper,context){
	return reify(this,flatMapFactory(this,mapper,context));
	},

	flatten:function flatten(depth){
	return reify(this,flattenFactory(this,depth,true));
	},

	fromEntrySeq:function fromEntrySeq(){
	return new FromEntriesSequence(this);
	},

	get:function get(searchKey,notSetValue){
	return this.find(function(_,key){return is(key,searchKey);},undefined,notSetValue);
	},

	getIn:function getIn(searchKeyPath,notSetValue){
	var nested=this;
	// Note: in an ES6 environment, we would prefer:
	// for (var key of searchKeyPath) {
	var iter=forceIterator(searchKeyPath);
	var step;
	while(!(step=iter.next()).done){
	var key=step.value;
	nested=nested&&nested.get?nested.get(key,NOT_SET):NOT_SET;
	if(nested===NOT_SET){
	return notSetValue;
	}
	}
	return nested;
	},

	groupBy:function groupBy(grouper,context){
	return groupByFactory(this,grouper,context);
	},

	has:function has(searchKey){
	return this.get(searchKey,NOT_SET)!==NOT_SET;
	},

	hasIn:function hasIn(searchKeyPath){
	return this.getIn(searchKeyPath,NOT_SET)!==NOT_SET;
	},

	isSubset:function isSubset(iter){
	iter=typeof iter.includes==='function'?iter:Iterable(iter);
	return this.every(function(value){return iter.includes(value);});
	},

	isSuperset:function isSuperset(iter){
	iter=typeof iter.isSubset==='function'?iter:Iterable(iter);
	return iter.isSubset(this);
	},

	keyOf:function keyOf(searchValue){
	return this.findKey(function(value){return is(value,searchValue);});
	},

	keySeq:function keySeq(){
	return this.toSeq().map(keyMapper).toIndexedSeq();
	},

	last:function last(){
	return this.toSeq().reverse().first();
	},

	lastKeyOf:function lastKeyOf(searchValue){
	return this.toKeyedSeq().reverse().keyOf(searchValue);
	},

	max:function max(comparator){
	return maxFactory(this,comparator);
	},

	maxBy:function maxBy(mapper,comparator){
	return maxFactory(this,comparator,mapper);
	},

	min:function min(comparator){
	return maxFactory(this,comparator?neg(comparator):defaultNegComparator);
	},

	minBy:function minBy(mapper,comparator){
	return maxFactory(this,comparator?neg(comparator):defaultNegComparator,mapper);
	},

	rest:function rest(){
	return this.slice(1);
	},

	skip:function skip(amount){
	return this.slice(Math.max(0,amount));
	},

	skipLast:function skipLast(amount){
	return reify(this,this.toSeq().reverse().skip(amount).reverse());
	},

	skipWhile:function skipWhile(predicate,context){
	return reify(this,skipWhileFactory(this,predicate,context,true));
	},

	skipUntil:function skipUntil(predicate,context){
	return this.skipWhile(not(predicate),context);
	},

	sortBy:function sortBy(mapper,comparator){
	return reify(this,sortFactory(this,comparator,mapper));
	},

	take:function take(amount){
	return this.slice(0,Math.max(0,amount));
	},

	takeLast:function takeLast(amount){
	return reify(this,this.toSeq().reverse().take(amount).reverse());
	},

	takeWhile:function takeWhile(predicate,context){
	return reify(this,takeWhileFactory(this,predicate,context));
	},

	takeUntil:function takeUntil(predicate,context){
	return this.takeWhile(not(predicate),context);
	},

	valueSeq:function valueSeq(){
	return this.toIndexedSeq();
	},


	// ### Hashable Object

	hashCode:function hashCode(){
	return this.__hash||(this.__hash=hashIterable(this));
	}


	// ### Internal

	// abstract __iterate(fn, reverse)

	// abstract __iterator(type, reverse)
	});

	// var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	// var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	// var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	// var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	var IterablePrototype=Iterable.prototype;
	IterablePrototype[IS_ITERABLE_SENTINEL]=true;
	IterablePrototype[ITERATOR_SYMBOL]=IterablePrototype.values;
	IterablePrototype.__toJS=IterablePrototype.toArray;
	IterablePrototype.__toStringMapper=quoteString;
	IterablePrototype.inspect=
	IterablePrototype.toSource=function(){return this.toString();};
	IterablePrototype.chain=IterablePrototype.flatMap;
	IterablePrototype.contains=IterablePrototype.includes;

	mixin(KeyedIterable,{

	// ### More sequential methods

	flip:function flip(){
	return reify(this,flipFactory(this));
	},

	mapEntries:function mapEntries(mapper,context){var this$0=this;
	var iterations=0;
	return reify(this,
	this.toSeq().map(
	function(v,k){return mapper.call(context,[k,v],iterations++,this$0);}).
	fromEntrySeq());

	},

	mapKeys:function mapKeys(mapper,context){var this$0=this;
	return reify(this,
	this.toSeq().flip().map(
	function(k,v){return mapper.call(context,k,v,this$0);}).
	flip());

	}});



	var KeyedIterablePrototype=KeyedIterable.prototype;
	KeyedIterablePrototype[IS_KEYED_SENTINEL]=true;
	KeyedIterablePrototype[ITERATOR_SYMBOL]=IterablePrototype.entries;
	KeyedIterablePrototype.__toJS=IterablePrototype.toObject;
	KeyedIterablePrototype.__toStringMapper=function(v,k){return JSON.stringify(k)+': '+quoteString(v);};



	mixin(IndexedIterable,{

	// ### Conversion to other types

	toKeyedSeq:function toKeyedSeq(){
	return new ToKeyedSequence(this,false);
	},


	// ### ES6 Collection methods (ES6 Array and Map)

	filter:function filter(predicate,context){
	return reify(this,filterFactory(this,predicate,context,false));
	},

	findIndex:function findIndex(predicate,context){
	var entry=this.findEntry(predicate,context);
	return entry?entry[0]:-1;
	},

	indexOf:function indexOf(searchValue){
	var key=this.keyOf(searchValue);
	return key===undefined?-1:key;
	},

	lastIndexOf:function lastIndexOf(searchValue){
	var key=this.lastKeyOf(searchValue);
	return key===undefined?-1:key;
	},

	reverse:function reverse(){
	return reify(this,reverseFactory(this,false));
	},

	slice:function slice(begin,end){
	return reify(this,sliceFactory(this,begin,end,false));
	},

	splice:function splice(index,removeNum/*, ...values*/){
	var numArgs=arguments.length;
	removeNum=Math.max(removeNum|0,0);
	if(numArgs===0||numArgs===2&&!removeNum){
	return this;
	}
	// If index is negative, it should resolve relative to the size of the
	// collection. However size may be expensive to compute if not cached, so
	// only call count() if the number is in fact negative.
	index=resolveBegin(index,index<0?this.count():this.size);
	var spliced=this.slice(0,index);
	return reify(
	this,
	numArgs===1?
	spliced:
	spliced.concat(arrCopy(arguments,2),this.slice(index+removeNum)));

	},


	// ### More collection methods

	findLastIndex:function findLastIndex(predicate,context){
	var entry=this.findLastEntry(predicate,context);
	return entry?entry[0]:-1;
	},

	first:function first(){
	return this.get(0);
	},

	flatten:function flatten(depth){
	return reify(this,flattenFactory(this,depth,false));
	},

	get:function get(index,notSetValue){
	index=wrapIndex(this,index);
	return index<0||this.size===Infinity||
	this.size!==undefined&&index>this.size?
	notSetValue:
	this.find(function(_,key){return key===index;},undefined,notSetValue);
	},

	has:function has(index){
	index=wrapIndex(this,index);
	return index>=0&&(this.size!==undefined?
	this.size===Infinity||index<this.size:
	this.indexOf(index)!==-1);

	},

	interpose:function interpose(separator){
	return reify(this,interposeFactory(this,separator));
	},

	interleave:function interleave()/*...iterables*/{
	var iterables=[this].concat(arrCopy(arguments));
	var zipped=zipWithFactory(this.toSeq(),IndexedSeq.of,iterables);
	var interleaved=zipped.flatten(true);
	if(zipped.size){
	interleaved.size=zipped.size*iterables.length;
	}
	return reify(this,interleaved);
	},

	keySeq:function keySeq(){
	return Range(0,this.size);
	},

	last:function last(){
	return this.get(-1);
	},

	skipWhile:function skipWhile(predicate,context){
	return reify(this,skipWhileFactory(this,predicate,context,false));
	},

	zip:function zip()/*, ...iterables */{
	var iterables=[this].concat(arrCopy(arguments));
	return reify(this,zipWithFactory(this,defaultZipper,iterables));
	},

	zipWith:function zipWith(zipper/*, ...iterables */){
	var iterables=arrCopy(arguments);
	iterables[0]=this;
	return reify(this,zipWithFactory(this,zipper,iterables));
	}});



	IndexedIterable.prototype[IS_INDEXED_SENTINEL]=true;
	IndexedIterable.prototype[IS_ORDERED_SENTINEL]=true;



	mixin(SetIterable,{

	// ### ES6 Collection methods (ES6 Array and Map)

	get:function get(value,notSetValue){
	return this.has(value)?value:notSetValue;
	},

	includes:function includes(value){
	return this.has(value);
	},


	// ### More sequential methods

	keySeq:function keySeq(){
	return this.valueSeq();
	}});



	SetIterable.prototype.has=IterablePrototype.includes;
	SetIterable.prototype.contains=SetIterable.prototype.includes;


	// Mixin subclasses

	mixin(KeyedSeq,KeyedIterable.prototype);
	mixin(IndexedSeq,IndexedIterable.prototype);
	mixin(SetSeq,SetIterable.prototype);

	mixin(KeyedCollection,KeyedIterable.prototype);
	mixin(IndexedCollection,IndexedIterable.prototype);
	mixin(SetCollection,SetIterable.prototype);


	// #pragma Helper functions

	function keyMapper(v,k){
	return k;
	}

	function entryMapper(v,k){
	return[k,v];
	}

	function not(predicate){
	return function(){
	return!predicate.apply(this,arguments);
	};
	}

	function neg(predicate){
	return function(){
	return-predicate.apply(this,arguments);
	};
	}

	function quoteString(value){
	return typeof value==='string'?JSON.stringify(value):String(value);
	}

	function defaultZipper(){
	return arrCopy(arguments);
	}

	function defaultNegComparator(a,b){
	return a<b?1:a>b?-1:0;
	}

	function hashIterable(iterable){
	if(iterable.size===Infinity){
	return 0;
	}
	var ordered=isOrdered(iterable);
	var keyed=isKeyed(iterable);
	var h=ordered?1:0;
	var size=iterable.__iterate(
	keyed?
	ordered?
	function(v,k){h=31*h+hashMerge(hash(v),hash(k))|0;}:
	function(v,k){h=h+hashMerge(hash(v),hash(k))|0;}:
	ordered?
	function(v){h=31*h+hash(v)|0;}:
	function(v){h=h+hash(v)|0;});

	return murmurHashOfSize(size,h);
	}

	function murmurHashOfSize(size,h){
	h=imul(h,0xCC9E2D51);
	h=imul(h<<15|h>>>-15,0x1B873593);
	h=imul(h<<13|h>>>-13,5);
	h=(h+0xE6546B64|0)^size;
	h=imul(h^h>>>16,0x85EBCA6B);
	h=imul(h^h>>>13,0xC2B2AE35);
	h=smi(h^h>>>16);
	return h;
	}

	function hashMerge(a,b){
	return a^b+0x9E3779B9+(a<<6)+(a>>2)|0;// int
	}

	var Immutable={

	Iterable:Iterable,

	Seq:Seq,
	Collection:Collection,
	Map:Map,
	OrderedMap:OrderedMap,
	List:List,
	Stack:Stack,
	Set:Set,
	OrderedSet:OrderedSet,

	Record:Record,
	Range:Range,
	Repeat:Repeat,

	is:is,
	fromJS:fromJS};



	return Immutable;

	});

/***/ },
/* 415 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	/**
	 * Returns an array of all `ContentBlock` instances within two block keys
	 *
	 * @param  {object} contentState A draft.js `ContentState` instance
	 * @param  {string} anchorKey    The block key to start searching from
	 * @param  {string} focusKey     The block key until which to search
	 *
	 * @return {array} An array containing the found content blocks
	 */
	exports.default = function (contentState, anchorKey, focusKey) {
	  var isSameBlock = anchorKey === focusKey;
	  var startingBlock = contentState.getBlockForKey(anchorKey);

	  if (!startingBlock) {
	    return [];
	  }

	  var selectedBlocks = [startingBlock];

	  if (!isSameBlock) {
	    var blockKey = anchorKey;

	    while (blockKey !== focusKey) {
	      var nextBlock = contentState.getBlockAfter(blockKey);

	      if (!nextBlock) {
	        selectedBlocks = [];
	        break;
	      }

	      selectedBlocks.push(nextBlock);
	      blockKey = nextBlock.getKey();
	    }
	  }

	  return selectedBlocks;
	};

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _getSelectedBlocks = __webpack_require__(415);

	var _getSelectedBlocks2 = _interopRequireDefault(_getSelectedBlocks);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.default = function (strategy) {
	  return function (editorState, selection) {
	    var contentState = editorState.getCurrentContent();
	    var currentSelection = selection || editorState.getSelection();
	    var startKey = currentSelection.getStartKey();
	    var endKey = currentSelection.getEndKey();
	    var startOffset = currentSelection.getStartOffset();
	    var endOffset = currentSelection.getEndOffset();

	    var isSameBlock = startKey === endKey;
	    var selectedBlocks = (0, _getSelectedBlocks2.default)(contentState, startKey, endKey);
	    var entityFound = false;

	    // We have to shift the offset to not get false positives when selecting
	    // a character just before or after an entity
	    var finalStartOffset = startOffset + 1;
	    var finalEndOffset = endOffset - 1;

	    selectedBlocks.forEach(function (block) {
	      strategy(block, function (start, end) {
	        if (entityFound) {
	          return;
	        }

	        var blockKey = block.getKey();

	        if (isSameBlock && (end < finalStartOffset || start > finalEndOffset)) {
	          return;
	        } else if (blockKey === startKey && end < finalStartOffset) {
	          return;
	        } else if (blockKey === endKey && start > finalEndOffset) {
	          return;
	        }

	        entityFound = true;
	      });
	    });

	    return entityFound;
	  };
	};

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _draftJs = __webpack_require__(266);

	var _getSelectedBlocks = __webpack_require__(415);

	var _getSelectedBlocks2 = _interopRequireDefault(_getSelectedBlocks);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Calls a provided `modifier` function with a selection for each
	 * selected block in the current editor selection. Passes through additional
	 * arguments to the modifier.
	 *
	 * Note: At the moment it will retain the original selection and override
	 * possible selection changes from modifiers
	 *
	 * @param  {object} editorState The current draft.js editor state object
	 *
	 * @param  {function} modifier  A modifier function to be executed.
	 *                              Must have the signature (editorState, selection, ...)
	 *
	 * @param  {mixed} ...args      Additional arguments to be passed through to the modifier
	 *
	 * @return {object} The new editor state
	 */
	exports.default = function (editorState, modifier) {
	  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  var contentState = editorState.getCurrentContent();
	  var currentSelection = editorState.getSelection();

	  var startKey = currentSelection.getStartKey();
	  var endKey = currentSelection.getEndKey();
	  var startOffset = currentSelection.getStartOffset();
	  var endOffset = currentSelection.getEndOffset();

	  var isSameBlock = startKey === endKey;
	  var selectedBlocks = (0, _getSelectedBlocks2.default)(contentState, startKey, endKey);

	  var finalEditorState = editorState;
	  selectedBlocks.forEach(function (block) {
	    var currentBlockKey = block.getKey();
	    var selectionStart = startOffset;
	    var selectionEnd = endOffset;

	    if (currentBlockKey === startKey) {
	      selectionStart = startOffset;
	      selectionEnd = isSameBlock ? endOffset : block.getText().length;
	    } else if (currentBlockKey === endKey) {
	      selectionStart = isSameBlock ? startOffset : 0;
	      selectionEnd = endOffset;
	    } else {
	      selectionStart = 0;
	      selectionEnd = block.getText().length;
	    }

	    var selection = new _draftJs.SelectionState({
	      anchorKey: currentBlockKey,
	      anchorOffset: selectionStart,
	      focusKey: currentBlockKey,
	      focusOffset: selectionEnd
	    });

	    finalEditorState = modifier.apply(undefined, [finalEditorState, selection].concat(args));
	  });

	  return _draftJs.EditorState.forceSelection(finalEditorState, currentSelection);
	};

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _stateFromHTML = __webpack_require__(419);

	Object.defineProperty(exports, 'stateFromHTML', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_stateFromHTML).default;
	  }
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = stateFromHTML;

	var _draftJsImportElement = __webpack_require__(420);

	var _parseHTML = __webpack_require__(424);

	var _parseHTML2 = _interopRequireDefault(_parseHTML);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function stateFromHTML(html, options) {
	  var parser = options == null || options.parser == null ? _parseHTML2.default : options.parser;
	  var element = parser(html);
	  return (0, _draftJsImportElement.stateFromElement)(element, options);
	}

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _stateFromElement = __webpack_require__(421);

	Object.defineProperty(exports, 'stateFromElement', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_stateFromElement).default;
	  }
	});

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	exports.default = stateFromElement;

	var _replaceTextWithMeta3 = __webpack_require__(422);

	var _replaceTextWithMeta4 = _interopRequireDefault(_replaceTextWithMeta3);

	var _draftJs = __webpack_require__(266);

	var _immutable = __webpack_require__(414);

	var _draftJsUtils = __webpack_require__(411);

	var _syntheticDom = __webpack_require__(423);

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	// A ParsedBlock has two purposes:
	//   1) to keep data about the block (textFragments, type)
	//   2) to act as some context for storing parser state as we parse its contents
	var NO_STYLE = (0, _immutable.OrderedSet)();
	var NO_ENTITY = null;

	var EMPTY_BLOCK = new _draftJs.ContentBlock({
	  key: (0, _draftJs.genKey)(),
	  text: '',
	  type: _draftJsUtils.BLOCK_TYPE.UNSTYLED,
	  characterList: (0, _immutable.List)(),
	  depth: 0
	});

	var LINE_BREAKS = /(\r\n|\r|\n)/g;
	// We use `\r` because that character is always stripped from source (normalized
	// to `\n`), so it's safe to assume it will only appear in the text content when
	// we put it there as a placeholder.
	var SOFT_BREAK_PLACEHOLDER = '\r';
	var ZERO_WIDTH_SPACE = "\u200B";
	var DATA_ATTRIBUTE = /^data-([a-z0-9-]+)$/;

	// Map element attributes to entity data.
	var ELEM_ATTR_MAP = {
	  a: { href: 'url', rel: 'rel', target: 'target', title: 'title' },
	  img: { src: 'src', alt: 'alt' }
	};

	var getEntityData = function getEntityData(tagName, element) {
	  var data = {};
	  if (ELEM_ATTR_MAP.hasOwnProperty(tagName)) {
	    var attrMap = ELEM_ATTR_MAP[tagName];
	    for (var i = 0; i < element.attributes.length; i++) {
	      var _element$attributes$i = element.attributes[i];
	      var name = _element$attributes$i.name;
	      var value = _element$attributes$i.value;

	      if (value != null) {
	        if (attrMap.hasOwnProperty(name)) {
	          var newName = attrMap[name];
	          data[newName] = value;
	        } else if (DATA_ATTRIBUTE.test(name)) {
	          data[name] = value;
	        }
	      }
	    }
	  }
	  return data;
	};

	// Functions to convert elements to entities.
	var ELEM_TO_ENTITY = {
	  a: function a(tagName, element) {
	    var data = getEntityData(tagName, element);
	    // Don't add `<a>` elements with no href.
	    if (data.url != null) {
	      return _draftJs.Entity.create(_draftJsUtils.ENTITY_TYPE.LINK, 'MUTABLE', data);
	    }
	  },
	  img: function img(tagName, element) {
	    var data = getEntityData(tagName, element);
	    // Don't add `<img>` elements with no src.
	    if (data.src != null) {
	      return _draftJs.Entity.create(_draftJsUtils.ENTITY_TYPE.IMAGE, 'MUTABLE', data);
	    }
	  }
	};

	// TODO: Move this out to a module.
	var INLINE_ELEMENTS = {
	  a: 1, abbr: 1, area: 1, audio: 1, b: 1, bdi: 1, bdo: 1, br: 1, button: 1,
	  canvas: 1, cite: 1, code: 1, command: 1, datalist: 1, del: 1, dfn: 1, em: 1,
	  embed: 1, i: 1, iframe: 1, img: 1, input: 1, ins: 1, kbd: 1, keygen: 1,
	  label: 1, map: 1, mark: 1, meter: 1, noscript: 1, object: 1, output: 1,
	  progress: 1, q: 1, ruby: 1, s: 1, samp: 1, script: 1, select: 1, small: 1,
	  span: 1, strong: 1, sub: 1, sup: 1, textarea: 1, time: 1, u: 1, var: 1,
	  video: 1, wbr: 1, acronym: 1, applet: 1, basefont: 1, big: 1, font: 1,
	  isindex: 1, strike: 1, style: 1, tt: 1
	};

	// These elements are special because they cannot contain text as a direct
	// child (some cannot contain childNodes at all).
	var SPECIAL_ELEMENTS = {
	  area: 1, base: 1, br: 1, col: 1, colgroup: 1, command: 1, dl: 1, embed: 1,
	  head: 1, hgroup: 1, hr: 1, iframe: 1, img: 1, input: 1, keygen: 1, link: 1,
	  meta: 1, ol: 1, optgroup: 1, option: 1, param: 1, script: 1, select: 1,
	  source: 1, style: 1, table: 1, tbody: 1, textarea: 1, tfoot: 1, thead: 1,
	  title: 1, tr: 1, track: 1, ul: 1, wbr: 1, basefont: 1, dialog: 1, dir: 1,
	  isindex: 1
	};

	// These elements are special because they cannot contain childNodes.
	var SELF_CLOSING_ELEMENTS = { img: 1 };

	var BlockGenerator = function () {
	  function BlockGenerator() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, BlockGenerator);

	    this.options = options;
	    // This represents the hierarchy as we traverse nested elements; for
	    // example [body, ul, li] where we must know li's parent type (ul or ol).
	    this.blockStack = [];
	    // This is a linear list of blocks that will form the output; for example
	    // [p, li, li, blockquote].
	    this.blockList = [];
	    this.depth = 0;
	  }

	  _createClass(BlockGenerator, [{
	    key: 'process',
	    value: function process(element) {
	      this.processBlockElement(element);
	      var contentBlocks = [];
	      this.blockList.forEach(function (block) {
	        var _concatFragments = concatFragments(block.textFragments);

	        var text = _concatFragments.text;
	        var characterMeta = _concatFragments.characterMeta;

	        var includeEmptyBlock = false;
	        // If the block contains only a soft break then don't discard the block,
	        // but discard the soft break.
	        if (text === SOFT_BREAK_PLACEHOLDER) {
	          includeEmptyBlock = true;
	          text = '';
	        }
	        if (block.tagName === 'pre') {
	          var _trimLeadingNewline = trimLeadingNewline(text, characterMeta);

	          text = _trimLeadingNewline.text;
	          characterMeta = _trimLeadingNewline.characterMeta;
	        } else {
	          var _collapseWhiteSpace = collapseWhiteSpace(text, characterMeta);

	          text = _collapseWhiteSpace.text;
	          characterMeta = _collapseWhiteSpace.characterMeta;
	        }
	        // Previously we were using a placeholder for soft breaks. Now that we
	        // have collapsed whitespace we can change it back to normal line breaks.
	        text = text.split(SOFT_BREAK_PLACEHOLDER).join('\n');
	        // Discard empty blocks (unless otherwise specified).
	        if (text.length || includeEmptyBlock) {
	          contentBlocks.push(new _draftJs.ContentBlock({
	            key: (0, _draftJs.genKey)(),
	            text: text,
	            type: block.type,
	            characterList: characterMeta.toList(),
	            depth: block.depth
	          }));
	        }
	      });
	      if (contentBlocks.length) {
	        return contentBlocks;
	      } else {
	        return [EMPTY_BLOCK];
	      }
	    }
	  }, {
	    key: 'getBlockTypeFromTagName',
	    value: function getBlockTypeFromTagName(tagName) {
	      var blockTypes = this.options.blockTypes;

	      if (blockTypes && blockTypes[tagName]) {
	        return blockTypes[tagName];
	      }

	      switch (tagName) {
	        case 'li':
	          {
	            var parent = this.blockStack.slice(-1)[0];
	            return parent.tagName === 'ol' ? _draftJsUtils.BLOCK_TYPE.ORDERED_LIST_ITEM : _draftJsUtils.BLOCK_TYPE.UNORDERED_LIST_ITEM;
	          }
	        case 'blockquote':
	          {
	            return _draftJsUtils.BLOCK_TYPE.BLOCKQUOTE;
	          }
	        case 'h1':
	          {
	            return _draftJsUtils.BLOCK_TYPE.HEADER_ONE;
	          }
	        case 'h2':
	          {
	            return _draftJsUtils.BLOCK_TYPE.HEADER_TWO;
	          }
	        case 'h3':
	          {
	            return _draftJsUtils.BLOCK_TYPE.HEADER_THREE;
	          }
	        case 'h4':
	          {
	            return _draftJsUtils.BLOCK_TYPE.HEADER_FOUR;
	          }
	        case 'h5':
	          {
	            return _draftJsUtils.BLOCK_TYPE.HEADER_FIVE;
	          }
	        case 'h6':
	          {
	            return _draftJsUtils.BLOCK_TYPE.HEADER_SIX;
	          }
	        case 'pre':
	          {
	            return _draftJsUtils.BLOCK_TYPE.CODE;
	          }
	        case 'figure':
	          {
	            return _draftJsUtils.BLOCK_TYPE.ATOMIC;
	          }
	        default:
	          {
	            return _draftJsUtils.BLOCK_TYPE.UNSTYLED;
	          }
	      }
	    }
	  }, {
	    key: 'processBlockElement',
	    value: function processBlockElement(element) {
	      if (!element) {
	        return;
	      }
	      var tagName = element.nodeName.toLowerCase();
	      var type = this.getBlockTypeFromTagName(tagName);
	      var hasDepth = canHaveDepth(type);
	      var allowRender = !SPECIAL_ELEMENTS.hasOwnProperty(tagName);
	      var block = {
	        tagName: tagName,
	        textFragments: [],
	        type: type,
	        styleStack: [NO_STYLE],
	        entityStack: [NO_ENTITY],
	        depth: hasDepth ? this.depth : 0
	      };
	      if (allowRender) {
	        this.blockList.push(block);
	        if (hasDepth) {
	          this.depth += 1;
	        }
	      }
	      this.blockStack.push(block);
	      if (element.childNodes != null) {
	        Array.from(element.childNodes).forEach(this.processNode, this);
	      }
	      this.blockStack.pop();
	      if (allowRender && hasDepth) {
	        this.depth -= 1;
	      }
	    }
	  }, {
	    key: 'processInlineElement',
	    value: function processInlineElement(element) {
	      var tagName = element.nodeName.toLowerCase();
	      if (tagName === 'br') {
	        this.processText(SOFT_BREAK_PLACEHOLDER);
	        return;
	      }
	      var block = this.blockStack.slice(-1)[0];
	      var style = block.styleStack.slice(-1)[0];
	      var entityKey = block.entityStack.slice(-1)[0];
	      style = addStyleFromTagName(style, tagName, this.options.elementStyles);
	      if (ELEM_TO_ENTITY.hasOwnProperty(tagName)) {
	        // If the to-entity function returns nothing, use the existing entity.
	        entityKey = ELEM_TO_ENTITY[tagName](tagName, element) || entityKey;
	      }
	      block.styleStack.push(style);
	      block.entityStack.push(entityKey);
	      if (element.childNodes != null) {
	        Array.from(element.childNodes).forEach(this.processNode, this);
	      }
	      if (SELF_CLOSING_ELEMENTS.hasOwnProperty(tagName)) {
	        this.processText('\xA0');
	      }
	      block.entityStack.pop();
	      block.styleStack.pop();
	    }
	  }, {
	    key: 'processTextNode',
	    value: function processTextNode(node) {
	      var text = node.nodeValue;
	      // This is important because we will use \r as a placeholder for a soft break.
	      text = text.replace(LINE_BREAKS, '\n');
	      // Replace zero-width space (we use it as a placeholder in markdown) with a
	      // soft break.
	      // TODO: The import-markdown package should correctly turn breaks into <br>
	      // elements so we don't need to include this hack.
	      text = text.split(ZERO_WIDTH_SPACE).join(SOFT_BREAK_PLACEHOLDER);
	      this.processText(text);
	    }
	  }, {
	    key: 'processText',
	    value: function processText(text) {
	      var block = this.blockStack.slice(-1)[0];
	      var style = block.styleStack.slice(-1)[0];
	      var entity = block.entityStack.slice(-1)[0];
	      var charMetadata = _draftJs.CharacterMetadata.create({
	        style: style,
	        entity: entity
	      });
	      var seq = (0, _immutable.Repeat)(charMetadata, text.length);
	      block.textFragments.push({
	        text: text,
	        characterMeta: seq
	      });
	    }
	  }, {
	    key: 'processNode',
	    value: function processNode(node) {
	      if (node.nodeType === _syntheticDom.NODE_TYPE_ELEMENT) {
	        var element = node;
	        var _tagName = element.nodeName.toLowerCase();
	        if (INLINE_ELEMENTS.hasOwnProperty(_tagName)) {
	          this.processInlineElement(element);
	        } else {
	          this.processBlockElement(element);
	        }
	      } else if (node.nodeType === _syntheticDom.NODE_TYPE_TEXT) {
	        this.processTextNode(node);
	      }
	    }
	  }]);

	  return BlockGenerator;
	}();

	function trimLeadingNewline(text, characterMeta) {
	  if (text.charAt(0) === '\n') {
	    text = text.slice(1);
	    characterMeta = characterMeta.slice(1);
	  }
	  return { text: text, characterMeta: characterMeta };
	}

	function trimLeadingSpace(text, characterMeta) {
	  while (text.charAt(0) === ' ') {
	    text = text.slice(1);
	    characterMeta = characterMeta.slice(1);
	  }
	  return { text: text, characterMeta: characterMeta };
	}

	function trimTrailingSpace(text, characterMeta) {
	  while (text.slice(-1) === ' ') {
	    text = text.slice(0, -1);
	    characterMeta = characterMeta.slice(0, -1);
	  }
	  return { text: text, characterMeta: characterMeta };
	}

	function collapseWhiteSpace(text, characterMeta) {
	  text = text.replace(/[ \t\n]/g, ' ');

	  var _trimLeadingSpace = trimLeadingSpace(text, characterMeta);

	  text = _trimLeadingSpace.text;
	  characterMeta = _trimLeadingSpace.characterMeta;

	  var _trimTrailingSpace = trimTrailingSpace(text, characterMeta);

	  text = _trimTrailingSpace.text;
	  characterMeta = _trimTrailingSpace.characterMeta;

	  var i = text.length;
	  while (i--) {
	    if (text.charAt(i) === ' ' && text.charAt(i - 1) === ' ') {
	      text = text.slice(0, i) + text.slice(i + 1);
	      characterMeta = characterMeta.slice(0, i).concat(characterMeta.slice(i + 1));
	    }
	  }
	  // There could still be one space on either side of a softbreak.

	  var _replaceTextWithMeta = (0, _replaceTextWithMeta4.default)({ text: text, characterMeta: characterMeta }, SOFT_BREAK_PLACEHOLDER + ' ', SOFT_BREAK_PLACEHOLDER);

	  text = _replaceTextWithMeta.text;
	  characterMeta = _replaceTextWithMeta.characterMeta;

	  var _replaceTextWithMeta2 = (0, _replaceTextWithMeta4.default)({ text: text, characterMeta: characterMeta }, ' ' + SOFT_BREAK_PLACEHOLDER, SOFT_BREAK_PLACEHOLDER);

	  text = _replaceTextWithMeta2.text;
	  characterMeta = _replaceTextWithMeta2.characterMeta;

	  return { text: text, characterMeta: characterMeta };
	}

	function canHaveDepth(blockType) {
	  switch (blockType) {
	    case _draftJsUtils.BLOCK_TYPE.UNORDERED_LIST_ITEM:
	    case _draftJsUtils.BLOCK_TYPE.ORDERED_LIST_ITEM:
	      {
	        return true;
	      }
	    default:
	      {
	        return false;
	      }
	  }
	}

	function concatFragments(fragments) {
	  var text = '';
	  var characterMeta = (0, _immutable.Seq)();
	  fragments.forEach(function (textFragment) {
	    text = text + textFragment.text;
	    characterMeta = characterMeta.concat(textFragment.characterMeta);
	  });
	  return { text: text, characterMeta: characterMeta };
	}

	function addStyleFromTagName(styleSet, tagName, elementStyles) {
	  switch (tagName) {
	    case 'b':
	    case 'strong':
	      {
	        return styleSet.add(_draftJsUtils.INLINE_STYLE.BOLD);
	      }
	    case 'i':
	    case 'em':
	      {
	        return styleSet.add(_draftJsUtils.INLINE_STYLE.ITALIC);
	      }
	    case 'ins':
	      {
	        return styleSet.add(_draftJsUtils.INLINE_STYLE.UNDERLINE);
	      }
	    case 'code':
	      {
	        return styleSet.add(_draftJsUtils.INLINE_STYLE.CODE);
	      }
	    case 'del':
	      {
	        return styleSet.add(_draftJsUtils.INLINE_STYLE.STRIKETHROUGH);
	      }
	    default:
	      {
	        // Allow custom styles to be provided.
	        if (elementStyles && elementStyles[tagName]) {
	          return styleSet.add(elementStyles[tagName]);
	        }

	        return styleSet;
	      }
	  }
	}

	function stateFromElement(element, options) {
	  var blocks = new BlockGenerator(options).process(element);
	  return _draftJs.ContentState.createFromBlockArray(blocks);
	}

/***/ },
/* 422 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = replaceTextWithMeta;
	function replaceTextWithMeta(subject, searchText, replaceText) {
	  var text = subject.text;
	  var characterMeta = subject.characterMeta;

	  var searchTextLength = searchText.length;
	  var replaceTextLength = replaceText.length;
	  var resultTextParts = [];
	  // Get empty set of same kind as characterMeta.
	  var resultCharMeta = characterMeta.slice(0, 0);
	  var lastEndIndex = 0;
	  var index = text.indexOf(searchText);
	  while (index !== -1) {
	    resultTextParts.push(text.slice(lastEndIndex, index) + replaceText);
	    resultCharMeta = resultCharMeta.concat(characterMeta.slice(lastEndIndex, index),
	    // Use the metadata of the first char we are replacing.
	    repeatSeq(characterMeta.slice(index, index + 1), replaceTextLength));
	    lastEndIndex = index + searchTextLength;
	    index = text.indexOf(searchText, lastEndIndex);
	  }
	  resultTextParts.push(text.slice(lastEndIndex));
	  resultCharMeta = resultCharMeta.concat(characterMeta.slice(lastEndIndex));
	  return { text: resultTextParts.join(''), characterMeta: resultCharMeta };
	}

	function repeatSeq(seq, count) {
	  var result = seq.slice(0, 0);
	  while (count-- > 0) {
	    result = result.concat(seq);
	  }
	  return result;
	}

/***/ },
/* 423 */
/***/ function(module, exports) {

	'use strict';

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	  };
	}();

	function _toConsumableArray(arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }return arr2;
	  } else {
	    return Array.from(arr);
	  }
	}

	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var EMPTY_ATTR_LIST = [];

	var NODE_TYPE_ELEMENT = exports.NODE_TYPE_ELEMENT = 1;
	var NODE_TYPE_TEXT = exports.NODE_TYPE_TEXT = 3;
	var NODE_TYPE_FRAGMENT = exports.NODE_TYPE_FRAGMENT = 11;
	var SELF_CLOSING = exports.SELF_CLOSING = {
	  area: true, base: true, br: true, col: true, embed: true, hr: true, img: true,
	  input: true, keygen: true, link: true, meta: true, param: true, source: true,
	  track: true, wbr: true
	};

	var Node = exports.Node = function Node() {
	  _classCallCheck(this, Node);
	};

	var TextNode = exports.TextNode = function (_Node) {
	  _inherits(TextNode, _Node);

	  function TextNode(value) {
	    _classCallCheck(this, TextNode);

	    var _this = _possibleConstructorReturn(this, (TextNode.__proto__ || Object.getPrototypeOf(TextNode)).apply(this, arguments));

	    _this.nodeType = NODE_TYPE_TEXT;
	    _this.nodeName = '#text';
	    _this.nodeValue = value;
	    return _this;
	  }

	  _createClass(TextNode, [{
	    key: 'toString',
	    value: function toString() {
	      return escape(this.nodeValue);
	    }
	  }]);

	  return TextNode;
	}(Node);

	var ElementNode = exports.ElementNode = function (_Node2) {
	  _inherits(ElementNode, _Node2);

	  function ElementNode(name, attributes, childNodes) {
	    _classCallCheck(this, ElementNode);

	    var _this2 = _possibleConstructorReturn(this, (ElementNode.__proto__ || Object.getPrototypeOf(ElementNode)).apply(this, arguments));

	    if (attributes == null) {
	      attributes = EMPTY_ATTR_LIST;
	    }
	    var isSelfClosing = SELF_CLOSING[name] === true;
	    _this2.nodeType = NODE_TYPE_ELEMENT;
	    _this2.nodeName = name;
	    _this2.attributes = attributes;
	    _this2.attrMap = new Map(attributes.map(function (attr) {
	      return [attr.name, attr];
	    }));
	    _this2.childNodes = [];
	    _this2.isSelfClosing = isSelfClosing;
	    if (!isSelfClosing && childNodes) {
	      childNodes.forEach(_this2.appendChild, _this2);
	    }
	    return _this2;
	  }

	  _createClass(ElementNode, [{
	    key: 'appendChild',
	    value: function appendChild(node) {
	      if (node.nodeType === NODE_TYPE_FRAGMENT) {
	        if (node.childNodes != null) {
	          var _childNodes;

	          // $FlowIssue - Flow doesn't realize that node is a FragmentNode.
	          var childNodes = node.childNodes;
	          (_childNodes = this.childNodes).push.apply(_childNodes, _toConsumableArray(childNodes));
	        }
	      } else {
	        this.childNodes.push(node);
	      }
	    }
	  }, {
	    key: 'getAttribute',
	    value: function getAttribute(name) {
	      var attr = this.attrMap.get(name);
	      if (attr) {
	        return attr.value;
	      }
	    }
	  }, {
	    key: 'toString',
	    value: function toString(isXHTML) {
	      var attributes = [];
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = this.attributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var _step$value = _step.value;
	          var _name = _step$value.name;
	          var _value = _step$value.value;

	          attributes.push(_name + (_value ? '="' + escapeAttr(_value) + '"' : ''));
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      var attrString = attributes.length ? ' ' + attributes.join(' ') : '';
	      if (this.isSelfClosing) {
	        return '<' + this.nodeName + attrString + (isXHTML ? '/>' : '>');
	      }
	      var childNodes = this.childNodes.map(function (node) {
	        return node.toString(isXHTML);
	      }).join('');
	      return '<' + this.nodeName + attrString + '>' + childNodes + '</' + this.nodeName + '>';
	    }
	  }]);

	  return ElementNode;
	}(Node);

	var FragmentNode = exports.FragmentNode = function (_Node3) {
	  _inherits(FragmentNode, _Node3);

	  function FragmentNode(childNodes) {
	    _classCallCheck(this, FragmentNode);

	    var _this3 = _possibleConstructorReturn(this, (FragmentNode.__proto__ || Object.getPrototypeOf(FragmentNode)).apply(this, arguments));

	    _this3.nodeType = NODE_TYPE_FRAGMENT;
	    _this3.childNodes = [];
	    if (childNodes) {
	      childNodes.forEach(_this3.appendChild, _this3);
	    }
	    return _this3;
	  }

	  _createClass(FragmentNode, [{
	    key: 'appendChild',
	    value: function appendChild(node) {
	      if (node.nodeType === NODE_TYPE_FRAGMENT) {
	        if (node.childNodes != null) {
	          var _childNodes2;

	          // $FlowIssue - Flow doesn't realize that node is a FragmentNode.
	          var childNodes = node.childNodes;
	          (_childNodes2 = this.childNodes).push.apply(_childNodes2, _toConsumableArray(childNodes));
	        }
	      } else {
	        this.childNodes.push(node);
	      }
	    }
	  }, {
	    key: 'toString',
	    value: function toString(isXHTML) {
	      return this.childNodes.map(function (node) {
	        return node.toString(isXHTML);
	      }).join('');
	    }
	  }]);

	  return FragmentNode;
	}(Node);

	function escape(html) {
	  return html.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
	}

	function escapeAttr(html) {
	  return html.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
	}

/***/ },
/* 424 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = parseHTML;
	function parseHTML(html) {
	  var doc = void 0;
	  if (typeof DOMParser !== 'undefined') {
	    var parser = new DOMParser();
	    doc = parser.parseFromString(html, 'text/html');
	  } else {
	    doc = document.implementation.createHTMLDocument('');
	    doc.documentElement.innerHTML = html;
	  }
	  return doc.body;
	}

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(426), __webpack_require__(428), __webpack_require__(429)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(module, require('./clipboard-action'), require('tiny-emitter'), require('good-listener'));
	    } else {
	        var mod = {
	            exports: {} };

	        factory(mod, global.clipboardAction, global.tinyEmitter, global.goodListener);
	        global.clipboard = mod.exports;
	    }
	})(undefined, function (module, _clipboardAction, _tinyEmitter, _goodListener) {
	    'use strict';

	    var _clipboardAction2 = _interopRequireDefault(_clipboardAction);

	    var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);

	    var _goodListener2 = _interopRequireDefault(_goodListener);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj };

	    }

	    function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	            throw new TypeError("Cannot call a class as a function");
	        }
	    }

	    var _createClass = function () {
	        function defineProperties(target, props) {
	            for (var i = 0; i < props.length; i++) {
	                var descriptor = props[i];
	                descriptor.enumerable = descriptor.enumerable || false;
	                descriptor.configurable = true;
	                if ("value" in descriptor) descriptor.writable = true;
	                Object.defineProperty(target, descriptor.key, descriptor);
	            }
	        }

	        return function (Constructor, protoProps, staticProps) {
	            if (protoProps) defineProperties(Constructor.prototype, protoProps);
	            if (staticProps) defineProperties(Constructor, staticProps);
	            return Constructor;
	        };
	    }();

	    function _possibleConstructorReturn(self, call) {
	        if (!self) {
	            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }

	        return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	    }

	    function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	            throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	        }

	        subClass.prototype = Object.create(superClass && superClass.prototype, {
	            constructor: {
	                value: subClass,
	                enumerable: false,
	                writable: true,
	                configurable: true } });


	        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	    }

	    var Clipboard = function (_Emitter) {
	        _inherits(Clipboard, _Emitter);

	        /**
	                                         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
	                                         * @param {Object} options
	                                         */
	        function Clipboard(trigger, options) {
	            _classCallCheck(this, Clipboard);

	            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));

	            _this.resolveOptions(options);
	            _this.listenClick(trigger);
	            return _this;
	        }

	        /**
	           * Defines if attributes would be resolved using internal setter functions
	           * or custom functions that were passed in the constructor.
	           * @param {Object} options
	           */


	        _createClass(Clipboard, [{
	            key: 'resolveOptions',
	            value: function resolveOptions() {
	                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	                this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
	                this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
	                this.text = typeof options.text === 'function' ? options.text : this.defaultText;
	            } },
	        {
	            key: 'listenClick',
	            value: function listenClick(trigger) {
	                var _this2 = this;

	                this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {
	                    return _this2.onClick(e);
	                });
	            } },
	        {
	            key: 'onClick',
	            value: function onClick(e) {
	                var trigger = e.delegateTarget || e.currentTarget;

	                if (this.clipboardAction) {
	                    this.clipboardAction = null;
	                }

	                this.clipboardAction = new _clipboardAction2.default({
	                    action: this.action(trigger),
	                    target: this.target(trigger),
	                    text: this.text(trigger),
	                    trigger: trigger,
	                    emitter: this });

	            } },
	        {
	            key: 'defaultAction',
	            value: function defaultAction(trigger) {
	                return getAttributeValue('action', trigger);
	            } },
	        {
	            key: 'defaultTarget',
	            value: function defaultTarget(trigger) {
	                var selector = getAttributeValue('target', trigger);

	                if (selector) {
	                    return document.querySelector(selector);
	                }
	            } },
	        {
	            key: 'defaultText',
	            value: function defaultText(trigger) {
	                return getAttributeValue('text', trigger);
	            } },
	        {
	            key: 'destroy',
	            value: function destroy() {
	                this.listener.destroy();

	                if (this.clipboardAction) {
	                    this.clipboardAction.destroy();
	                    this.clipboardAction = null;
	                }
	            } }]);


	        return Clipboard;
	    }(_tinyEmitter2.default);

	    /**
	                               * Helper function to retrieve attribute value.
	                               * @param {String} suffix
	                               * @param {Element} element
	                               */
	    function getAttributeValue(suffix, element) {
	        var attribute = 'data-clipboard-' + suffix;

	        if (!element.hasAttribute(attribute)) {
	            return;
	        }

	        return element.getAttribute(attribute);
	    }

	    module.exports = Clipboard;
	});

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(427)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(module, require('select'));
	    } else {
	        var mod = {
	            exports: {} };

	        factory(mod, global.select);
	        global.clipboardAction = mod.exports;
	    }
	})(undefined, function (module, _select) {
	    'use strict';

	    var _select2 = _interopRequireDefault(_select);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj };

	    }

	    var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	    } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	    };

	    function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	            throw new TypeError("Cannot call a class as a function");
	        }
	    }

	    var _createClass = function () {
	        function defineProperties(target, props) {
	            for (var i = 0; i < props.length; i++) {
	                var descriptor = props[i];
	                descriptor.enumerable = descriptor.enumerable || false;
	                descriptor.configurable = true;
	                if ("value" in descriptor) descriptor.writable = true;
	                Object.defineProperty(target, descriptor.key, descriptor);
	            }
	        }

	        return function (Constructor, protoProps, staticProps) {
	            if (protoProps) defineProperties(Constructor.prototype, protoProps);
	            if (staticProps) defineProperties(Constructor, staticProps);
	            return Constructor;
	        };
	    }();

	    var ClipboardAction = function () {
	        /**
	                                        * @param {Object} options
	                                        */
	        function ClipboardAction(options) {
	            _classCallCheck(this, ClipboardAction);

	            this.resolveOptions(options);
	            this.initSelection();
	        }

	        /**
	           * Defines base properties passed from constructor.
	           * @param {Object} options
	           */


	        _createClass(ClipboardAction, [{
	            key: 'resolveOptions',
	            value: function resolveOptions() {
	                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	                this.action = options.action;
	                this.emitter = options.emitter;
	                this.target = options.target;
	                this.text = options.text;
	                this.trigger = options.trigger;

	                this.selectedText = '';
	            } },
	        {
	            key: 'initSelection',
	            value: function initSelection() {
	                if (this.text) {
	                    this.selectFake();
	                } else if (this.target) {
	                    this.selectTarget();
	                }
	            } },
	        {
	            key: 'selectFake',
	            value: function selectFake() {
	                var _this = this;

	                var isRTL = document.documentElement.getAttribute('dir') == 'rtl';

	                this.removeFake();

	                this.fakeHandlerCallback = function () {
	                    return _this.removeFake();
	                };
	                this.fakeHandler = document.body.addEventListener('click', this.fakeHandlerCallback) || true;

	                this.fakeElem = document.createElement('textarea');
	                // Prevent zooming on iOS
	                this.fakeElem.style.fontSize = '12pt';
	                // Reset box model
	                this.fakeElem.style.border = '0';
	                this.fakeElem.style.padding = '0';
	                this.fakeElem.style.margin = '0';
	                // Move element out of screen horizontally
	                this.fakeElem.style.position = 'absolute';
	                this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
	                // Move element to the same position vertically
	                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
	                this.fakeElem.addEventListener('focus', window.scrollTo(0, yPosition));
	                this.fakeElem.style.top = yPosition + 'px';

	                this.fakeElem.setAttribute('readonly', '');
	                this.fakeElem.value = this.text;

	                document.body.appendChild(this.fakeElem);

	                this.selectedText = (0, _select2.default)(this.fakeElem);
	                this.copyText();
	            } },
	        {
	            key: 'removeFake',
	            value: function removeFake() {
	                if (this.fakeHandler) {
	                    document.body.removeEventListener('click', this.fakeHandlerCallback);
	                    this.fakeHandler = null;
	                    this.fakeHandlerCallback = null;
	                }

	                if (this.fakeElem) {
	                    document.body.removeChild(this.fakeElem);
	                    this.fakeElem = null;
	                }
	            } },
	        {
	            key: 'selectTarget',
	            value: function selectTarget() {
	                this.selectedText = (0, _select2.default)(this.target);
	                this.copyText();
	            } },
	        {
	            key: 'copyText',
	            value: function copyText() {
	                var succeeded = void 0;

	                try {
	                    succeeded = document.execCommand(this.action);
	                } catch (err) {
	                    succeeded = false;
	                }

	                this.handleResult(succeeded);
	            } },
	        {
	            key: 'handleResult',
	            value: function handleResult(succeeded) {
	                this.emitter.emit(succeeded ? 'success' : 'error', {
	                    action: this.action,
	                    text: this.selectedText,
	                    trigger: this.trigger,
	                    clearSelection: this.clearSelection.bind(this) });

	            } },
	        {
	            key: 'clearSelection',
	            value: function clearSelection() {
	                if (this.target) {
	                    this.target.blur();
	                }

	                window.getSelection().removeAllRanges();
	            } },
	        {
	            key: 'destroy',
	            value: function destroy() {
	                this.removeFake();
	            } },
	        {
	            key: 'action',
	            set: function set() {
	                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';

	                this._action = action;

	                if (this._action !== 'copy' && this._action !== 'cut') {
	                    throw new Error('Invalid "action" value, use either "copy" or "cut"');
	                }
	            },
	            get: function get() {
	                return this._action;
	            } },
	        {
	            key: 'target',
	            set: function set(target) {
	                if (target !== undefined) {
	                    if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
	                        if (this.action === 'copy' && target.hasAttribute('disabled')) {
	                            throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
	                        }

	                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
	                            throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
	                        }

	                        this._target = target;
	                    } else {
	                        throw new Error('Invalid "target" value, use a valid Element');
	                    }
	                }
	            },
	            get: function get() {
	                return this._target;
	            } }]);


	        return ClipboardAction;
	    }();

	    module.exports = ClipboardAction;
	});

/***/ },
/* 427 */
/***/ function(module, exports) {

	'use strict';function select(element) {
	    var selectedText;

	    if (element.nodeName === 'SELECT') {
	        element.focus();

	        selectedText = element.value;
	    } else
	    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
	        element.focus();
	        element.setSelectionRange(0, element.value.length);

	        selectedText = element.value;
	    } else
	    {
	        if (element.hasAttribute('contenteditable')) {
	            element.focus();
	        }

	        var selection = window.getSelection();
	        var range = document.createRange();

	        range.selectNodeContents(element);
	        selection.removeAllRanges();
	        selection.addRange(range);

	        selectedText = selection.toString();
	    }

	    return selectedText;
	}

	module.exports = select;

/***/ },
/* 428 */
/***/ function(module, exports) {

	"use strict";function E() {
	  // Keep this empty so it's easier to inherit from
	  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
	}

	E.prototype = {
	  on: function on(name, callback, ctx) {
	    var e = this.e || (this.e = {});

	    (e[name] || (e[name] = [])).push({
	      fn: callback,
	      ctx: ctx });


	    return this;
	  },

	  once: function once(name, callback, ctx) {
	    var self = this;
	    function listener() {
	      self.off(name, listener);
	      callback.apply(ctx, arguments);
	    };

	    listener._ = callback;
	    return this.on(name, listener, ctx);
	  },

	  emit: function emit(name) {
	    var data = [].slice.call(arguments, 1);
	    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
	    var i = 0;
	    var len = evtArr.length;

	    for (i; i < len; i++) {
	      evtArr[i].fn.apply(evtArr[i].ctx, data);
	    }

	    return this;
	  },

	  off: function off(name, callback) {
	    var e = this.e || (this.e = {});
	    var evts = e[name];
	    var liveEvents = [];

	    if (evts && callback) {
	      for (var i = 0, len = evts.length; i < len; i++) {
	        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
	        liveEvents.push(evts[i]);
	      }
	    }

	    // Remove event from queue to prevent memory leak
	    // Suggested by https://github.com/lazd
	    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

	    liveEvents.length ?
	    e[name] = liveEvents :
	    delete e[name];

	    return this;
	  } };


	module.exports = E;

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var is = __webpack_require__(430);
	var delegate = __webpack_require__(431);

	/**
	                                     * Validates all params and calls the right
	                                     * listener function based on its target type.
	                                     *
	                                     * @param {String|HTMLElement|HTMLCollection|NodeList} target
	                                     * @param {String} type
	                                     * @param {Function} callback
	                                     * @return {Object}
	                                     */
	function listen(target, type, callback) {
	    if (!target && !type && !callback) {
	        throw new Error('Missing required arguments');
	    }

	    if (!is.string(type)) {
	        throw new TypeError('Second argument must be a String');
	    }

	    if (!is.fn(callback)) {
	        throw new TypeError('Third argument must be a Function');
	    }

	    if (is.node(target)) {
	        return listenNode(target, type, callback);
	    } else
	    if (is.nodeList(target)) {
	        return listenNodeList(target, type, callback);
	    } else
	    if (is.string(target)) {
	        return listenSelector(target, type, callback);
	    } else
	    {
	        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
	    }
	}

	/**
	   * Adds an event listener to a HTML element
	   * and returns a remove listener function.
	   *
	   * @param {HTMLElement} node
	   * @param {String} type
	   * @param {Function} callback
	   * @return {Object}
	   */
	function listenNode(node, type, callback) {
	    node.addEventListener(type, callback);

	    return {
	        destroy: function destroy() {
	            node.removeEventListener(type, callback);
	        } };

	}

	/**
	   * Add an event listener to a list of HTML elements
	   * and returns a remove listener function.
	   *
	   * @param {NodeList|HTMLCollection} nodeList
	   * @param {String} type
	   * @param {Function} callback
	   * @return {Object}
	   */
	function listenNodeList(nodeList, type, callback) {
	    Array.prototype.forEach.call(nodeList, function (node) {
	        node.addEventListener(type, callback);
	    });

	    return {
	        destroy: function destroy() {
	            Array.prototype.forEach.call(nodeList, function (node) {
	                node.removeEventListener(type, callback);
	            });
	        } };

	}

	/**
	   * Add an event listener to a selector
	   * and returns a remove listener function.
	   *
	   * @param {String} selector
	   * @param {String} type
	   * @param {Function} callback
	   * @return {Object}
	   */
	function listenSelector(selector, type, callback) {
	    return delegate(document.body, selector, type, callback);
	}

	module.exports = listen;

/***/ },
/* 430 */
/***/ function(module, exports) {

	'use strict'; /**
	               * Check if argument is a HTML element.
	               *
	               * @param {Object} value
	               * @return {Boolean}
	               */
	exports.node = function (value) {
	  return value !== undefined &&
	  value instanceof HTMLElement &&
	  value.nodeType === 1;
	};

	/**
	    * Check if argument is a list of HTML elements.
	    *
	    * @param {Object} value
	    * @return {Boolean}
	    */
	exports.nodeList = function (value) {
	  var type = Object.prototype.toString.call(value);

	  return value !== undefined && (
	  type === '[object NodeList]' || type === '[object HTMLCollection]') &&
	  'length' in value && (
	  value.length === 0 || exports.node(value[0]));
	};

	/**
	    * Check if argument is a string.
	    *
	    * @param {Object} value
	    * @return {Boolean}
	    */
	exports.string = function (value) {
	  return typeof value === 'string' ||
	  value instanceof String;
	};

	/**
	    * Check if argument is a function.
	    *
	    * @param {Object} value
	    * @return {Boolean}
	    */
	exports.fn = function (value) {
	  var type = Object.prototype.toString.call(value);

	  return type === '[object Function]';
	};

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var closest = __webpack_require__(432);

	/**
	                                                  * Delegates event to a selector.
	                                                  *
	                                                  * @param {Element} element
	                                                  * @param {String} selector
	                                                  * @param {String} type
	                                                  * @param {Function} callback
	                                                  * @param {Boolean} useCapture
	                                                  * @return {Object}
	                                                  */
	function delegate(element, selector, type, callback, useCapture) {
	    var listenerFn = listener.apply(this, arguments);

	    element.addEventListener(type, listenerFn, useCapture);

	    return {
	        destroy: function destroy() {
	            element.removeEventListener(type, listenerFn, useCapture);
	        } };

	}

	/**
	   * Finds closest match and invokes callback.
	   *
	   * @param {Element} element
	   * @param {String} selector
	   * @param {String} type
	   * @param {Function} callback
	   * @return {Function}
	   */
	function listener(element, selector, type, callback) {
	    return function (e) {
	        e.delegateTarget = closest(e.target, selector);

	        if (e.delegateTarget) {
	            callback.call(element, e);
	        }
	    };
	}

	module.exports = delegate;

/***/ },
/* 432 */
/***/ function(module, exports) {

	"use strict"; /**
	               * A polyfill for Element.matches()
	               */
	if (Element && !Element.prototype.matches) {
	    var proto = Element.prototype;

	    proto.matches = proto.matchesSelector ||
	    proto.mozMatchesSelector ||
	    proto.msMatchesSelector ||
	    proto.oMatchesSelector ||
	    proto.webkitMatchesSelector;
	}

	/**
	   * Finds the closest parent that matches a selector.
	   *
	   * @param {Element} element
	   * @param {String} selector
	   * @return {Function}
	   */
	function closest(element, selector) {
	    while (element && element !== document) {
	        if (element.matches(selector)) return element;
	        element = element.parentNode;
	    }
	}

	module.exports = closest;

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.AppWrapper = exports.App = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _class;var _react = __webpack_require__(1);var React = _interopRequireWildcard(_react);
	var _reactDom = __webpack_require__(158);var ReactDOM = _interopRequireWildcard(_reactDom);
	var _jquery = __webpack_require__(214);var _jquery2 = _interopRequireDefault(_jquery);

	var _nav = __webpack_require__(434);
	var _projectsStore = __webpack_require__(259);var _projectsStore2 = _interopRequireDefault(_projectsStore);
	var _modalStore = __webpack_require__(435);var _modalStore2 = _interopRequireDefault(_modalStore);
	var _scriptsStore = __webpack_require__(436);var _scriptsStore2 = _interopRequireDefault(_scriptsStore);
	var _tablesStore = __webpack_require__(261);var _tablesStore2 = _interopRequireDefault(_tablesStore);
	var _usersStore = __webpack_require__(437);var _usersStore2 = _interopRequireDefault(_usersStore);
	var _mobxReact = __webpack_require__(218);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var



	App = exports.App = (0, _mobxReact.observer)(_class = function (_React$Component) {_inherits(App, _React$Component);function App() {_classCallCheck(this, App);return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));}_createClass(App, [{ key: 'componentWillMount', value: function componentWillMount()
	        {var _props =
	            this.props,projectsStore = _props.projectsStore,scriptsStore = _props.scriptsStore,usersStore = _props.usersStore;
	            _jquery2.default.ajax({
	                method: 'GET',
	                url: document.body.getAttribute('data-init-url'),
	                success: function success(res) {
	                    projectsStore.createProjects(res.projects);
	                    scriptsStore.scripts = res.scripts;
	                    scriptsStore.available_scripts = res.available_scripts;
	                    usersStore.users = res.users;
	                    usersStore.session_user = res.session_user;
	                },
	                error: function error(res) {
	                    console.log(res);
	                } });

	        } }, { key: 'render', value: function render()
	        {var _props2 =
	            this.props,usersStore = _props2.usersStore,tablesStore = _props2.tablesStore;
	            return (
	                React.createElement('div', null,
	                    React.createElement(_nav.Nav, { location: this.props.location, params: this.props.params, usersStore: usersStore, tablesStore: tablesStore }),

	                    React.createElement('div', { className: 'container-fluid', id: 'main_container' },
	                        this.props.children)));



	        } }]);return App;}(React.Component)) || _class;var


	AppWrapper = exports.AppWrapper = function (_React$Component2) {_inherits(AppWrapper, _React$Component2);function AppWrapper() {_classCallCheck(this, AppWrapper);return _possibleConstructorReturn(this, (AppWrapper.__proto__ || Object.getPrototypeOf(AppWrapper)).apply(this, arguments));}_createClass(AppWrapper, [{ key: 'render', value: function render()
	        {
	            var projectsStore = _projectsStore2.default;
	            var scriptsStore = _scriptsStore2.default;
	            var tablesStore = _tablesStore2.default;
	            var modalStore = _modalStore2.default;
	            var usersStore = _usersStore2.default;

	            var childrenWithProps = React.Children.map(this.props.children,
	            function (child) {return React.cloneElement(child, {
	                    projectsStore: projectsStore,
	                    scriptsStore: scriptsStore,
	                    tablesStore: tablesStore,
	                    modalStore: modalStore,
	                    usersStore: usersStore });});


	            return (
	                React.createElement(App, {
	                    modalStore: modalStore,
	                    usersStore: usersStore,
	                    scriptsStore: scriptsStore,
	                    projectsStore: projectsStore,
	                    tablesStore: tablesStore,
	                    children: childrenWithProps,
	                    location: this.props.location,
	                    params: this.props.params }));

	        } }]);return AppWrapper;}(React.Component);

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.Nav = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _class;var _react = __webpack_require__(1);var React = _interopRequireWildcard(_react);
	var _reactDom = __webpack_require__(158);var ReactDOM = _interopRequireWildcard(_reactDom);
	var _reactRouter = __webpack_require__(159);
	var _mobxReact = __webpack_require__(218);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var



	Nav = exports.Nav = (0, _mobxReact.observer)(_class = function (_React$Component) {_inherits(Nav, _React$Component);function Nav() {_classCallCheck(this, Nav);return _possibleConstructorReturn(this, (Nav.__proto__ || Object.getPrototypeOf(Nav)).apply(this, arguments));}_createClass(Nav, [{ key: 'render', value: function render()
	        {var _this2 = this;var _props =
	            this.props,usersStore = _props.usersStore,tablesStore = _props.tablesStore;
	            var script_id = parseInt(this.props.params.script);
	            var script_tables = tablesStore.script_tables(script_id);
	            var edit = this.props.location.pathname.includes('edit');
	            return (
	                React.createElement('nav', { className: "navbar navbar-default " + (this.props.location.pathname.includes('edit') || this.props.location.pathname.includes('share') ? 'unmargin' : '') },
	                    React.createElement('div', { className: 'container-fluid' },
	                        React.createElement('ul', { className: 'nav navbar-nav' },
	                            React.createElement('li', null, React.createElement('a', { href: '/' }, '\u0413\u043B\u0430\u0432\u043D\u0430\u044F')),
	                            React.createElement('li', null, React.createElement(_reactRouter.Link, { to: '/projects' }, '\u041C\u043E\u0438 \u043F\u0440\u043E\u0435\u043A\u0442\u044B')),
	                            React.createElement('li', null, React.createElement(_reactRouter.Link, { to: '/scripts/user' }, '\u041C\u043E\u0438 \u0441\u043A\u0440\u0438\u043F\u0442\u044B')),
	                            React.createElement('li', null, React.createElement(_reactRouter.Link, { to: '/scripts/available' }, '\u0414\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0435 \u0441\u043A\u0440\u0438\u043F\u0442\u044B')),

	                            script_tables.length > 0 ?
	                            React.createElement('li', { className: 'dropdown' },
	                                React.createElement('a', { href: '#', className: 'dropdown-toggle', 'data-toggle': 'dropdown', role: 'button', 'aria-haspopup': 'true', 'aria-expanded': 'false' }, '\u0422\u0430\u0431\u043B\u0438\u0446\u044B ',
	                                    React.createElement('span', { className: 'caret' })),

	                                React.createElement('ul', { className: 'dropdown-menu' },
	                                    script_tables.map(function (table, key) {
	                                        return (
	                                            React.createElement('li', { key: key, className: table.id === parseInt(_this2.props.params.table) ? 'active' : null },
	                                                React.createElement(_reactRouter.Link, { to:
	                                                        '/tables/' + _this2.props.params.script +
	                                                        '/table/' + table.id + (
	                                                        edit ? '/edit/' : '/share/') },
	                                                    table.name)));


	                                    }))) :


	                            null,

	                            this.props.location.pathname.includes('edit') ?
	                            React.createElement('li', null,
	                                React.createElement(_reactRouter.Link, { to:
	                                        '/tables/' + this.props.params.script +
	                                        '/table/' + this.props.params.table + (
	                                        this.props.params.link ? '/link/' + this.props.params.link : '') +
	                                        '/share/' }, '\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440')) :


	                            null,
	                            this.props.location.pathname.includes('share') ?
	                            React.createElement('li', null,
	                                React.createElement(_reactRouter.Link, { to:
	                                        '/tables/' + this.props.params.script +
	                                        '/table/' + this.props.params.table + (
	                                        this.props.params.link ? '/link/' + this.props.params.link : '') +
	                                        '/edit/' }, '\u0420\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435')) :


	                            null),

	                        usersStore.session_user ?
	                        React.createElement('ul', { className: 'nav navbar-nav navbar-right' },
	                            React.createElement('li', { className: 'dropdown' },
	                                React.createElement('a', { href: '#', className: 'dropdown-toggle', 'data-toggle': 'dropdown', role: 'button', 'aria-haspopup': 'true', 'aria-expanded': 'false' }, usersStore.session_user.username, ' ', React.createElement('span', { className: 'caret' })),
	                                React.createElement('ul', { className: 'dropdown-menu' },
	                                    React.createElement('li', null, React.createElement('a', { href: document.body.getAttribute('data-logout-url') }, '\u0412\u044B\u0445\u043E\u0434'))))) :



	                        '')));



	        } }]);return Nav;}(React.Component)) || _class;

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.ModalStore = undefined;var _desc, _value, _class, _descriptor, _descriptor2;var _mobx = __webpack_require__(219);function _initDefineProp(target, property, descriptor, context) {if (!descriptor) return;Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 });}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {var desc = {};Object['ke' + 'ys'](descriptor).forEach(function (key) {desc[key] = descriptor[key];});desc.enumerable = !!desc.enumerable;desc.configurable = !!desc.configurable;if ('value' in desc || desc.initializer) {desc.writable = true;}desc = decorators.slice().reverse().reduce(function (desc, decorator) {return decorator(target, property, desc) || desc;}, desc);if (context && desc.initializer !== void 0) {desc.value = desc.initializer ? desc.initializer.call(context) : void 0;desc.initializer = undefined;}if (desc.initializer === void 0) {Object['define' + 'Property'](target, property, desc);desc = null;}return desc;}function _initializerWarningHelper(descriptor, context) {throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');}var

	ModalStore = exports.ModalStore = (_class = function ModalStore() {_classCallCheck(this, ModalStore);_initDefineProp(this, 'modal', _descriptor, this);_initDefineProp(this, 'component', _descriptor2, this);}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'modal', [_mobx.observable], { enumerable: true, initializer: function initializer() {return (
	            false);} }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'component', [_mobx.observable], { enumerable: true, initializer: function initializer() {return (
	            null);} })), _class);exports.default =


	new ModalStore();

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.ScriptsStore = undefined;var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _desc, _value, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;var _mobx = __webpack_require__(219);function _initDefineProp(target, property, descriptor, context) {if (!descriptor) return;Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 });}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {var desc = {};Object['ke' + 'ys'](descriptor).forEach(function (key) {desc[key] = descriptor[key];});desc.enumerable = !!desc.enumerable;desc.configurable = !!desc.configurable;if ('value' in desc || desc.initializer) {desc.writable = true;}desc = decorators.slice().reverse().reduce(function (desc, decorator) {return decorator(target, property, desc) || desc;}, desc);if (context && desc.initializer !== void 0) {desc.value = desc.initializer ? desc.initializer.call(context) : void 0;desc.initializer = undefined;}if (desc.initializer === void 0) {Object['define' + 'Property'](target, property, desc);desc = null;}return desc;}function _initializerWarningHelper(descriptor, context) {throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');}var

	ScriptsStore = exports.ScriptsStore = (_class = function () {function ScriptsStore() {_classCallCheck(this, ScriptsStore);_initDefineProp(this, 'scripts', _descriptor, this);_initDefineProp(this, 'available_scripts', _descriptor2, this);_initDefineProp(this, 'filter_by_name', _descriptor3, this);_initDefineProp(this, 'filter_by_project', _descriptor4, this);_initDefineProp(this, 'creating_name', _descriptor5, this);_initDefineProp(this, 'creating_project', _descriptor6, this);_initDefineProp(this, 'editing', _descriptor7, this);}_createClass(ScriptsStore, [{ key: 'filteredScripts', value: function filteredScripts(








	        available) {var _this = this;
	            var scripts;
	            var matches_by_name = new RegExp(this.filter_by_name, 'i');
	            scripts = (available ? this.available_scripts : this.scripts).filter(function (script) {return !_this.filter_by_name || matches_by_name.test(script.name);});
	            return scripts.filter(function (script) {return !_this.filter_by_project || script.project.id === _this.filter_by_project;});
	        } }, { key: 'script', value: function script(
	        id) {
	            return this.scripts.concat(this.available_scripts).find(function (script) {return parseInt(script.id) === parseInt(id);});
	        } }, { key: 'resetCreating', value: function resetCreating()
	        {
	            this.creating_name = '';
	            this.creating_project = null;
	        } }]);return ScriptsStore;}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'scripts', [_mobx.observable], { enumerable: true, initializer: function initializer() {return [];} }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'available_scripts', [_mobx.observable], { enumerable: true, initializer: function initializer() {return [];} }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, 'filter_by_name', [_mobx.observable], { enumerable: true, initializer: function initializer() {return '';} }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, 'filter_by_project', [_mobx.observable], { enumerable: true, initializer: function initializer() {return null;} }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, 'creating_name', [_mobx.observable], { enumerable: true, initializer: function initializer() {return '';} }), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, 'creating_project', [_mobx.observable], { enumerable: true, initializer: function initializer() {return null;} }), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, 'editing', [_mobx.observable], { enumerable: true, initializer: function initializer() {return null;} })), _class);exports.default =


	new ScriptsStore();

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.UsersStore = undefined;var _desc, _value, _class, _descriptor, _descriptor2;var _mobx = __webpack_require__(219);function _initDefineProp(target, property, descriptor, context) {if (!descriptor) return;Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 });}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {var desc = {};Object['ke' + 'ys'](descriptor).forEach(function (key) {desc[key] = descriptor[key];});desc.enumerable = !!desc.enumerable;desc.configurable = !!desc.configurable;if ('value' in desc || desc.initializer) {desc.writable = true;}desc = decorators.slice().reverse().reduce(function (desc, decorator) {return decorator(target, property, desc) || desc;}, desc);if (context && desc.initializer !== void 0) {desc.value = desc.initializer ? desc.initializer.call(context) : void 0;desc.initializer = undefined;}if (desc.initializer === void 0) {Object['define' + 'Property'](target, property, desc);desc = null;}return desc;}function _initializerWarningHelper(descriptor, context) {throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');}var

	UsersStore = exports.UsersStore = (_class = function UsersStore() {_classCallCheck(this, UsersStore);_initDefineProp(this, 'users', _descriptor, this);_initDefineProp(this, 'session_user', _descriptor2, this);}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'users', [_mobx.observable], { enumerable: true, initializer: function initializer() {return (
	            []);} }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, 'session_user', [_mobx.observable], { enumerable: true, initializer: function initializer() {return (
	            null);} })), _class);exports.default =


	new UsersStore();

/***/ }
/******/ ]);